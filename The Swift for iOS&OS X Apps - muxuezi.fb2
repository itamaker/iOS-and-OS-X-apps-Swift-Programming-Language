<?xml version="1.0" encoding="UTF-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <description>
        <title-info>
            <genre>antique</genre>
                <author><first-name></first-name><last-name>muxuezi</last-name></author>
            <book-title>The Swift for iOS&amp;OS X Apps</book-title>
            
            <lang>zh</lang>
            
            
        </title-info>
        <document-info>
            <author><first-name></first-name><last-name>muxuezi</last-name></author>
            <program-used>calibre 1.36.0</program-used>
            <date>4.6.2014</date>
            <id>8604c7bf-6261-4563-990a-0f153ced4946</id>
            <version>1.0</version>
        </document-info>
        <publish-info>
            <year>0101</year>
            
            
        </publish-info>
    </description>
<body>
<section>
<empty-line /><p>
            
            Toggle navigation
            
            
            
            
            

                绿萝间</p><empty-line /><p>




    

    The Swift Programming Language</p>

<p>muxuezi</p>

<p>2014-06-03 10:03</p>

<p>

    Comments</p>

<p>Source</p>

<p>
About Swift</p><empty-line /><p>Important</p>

<p>This is a preliminary document for an API or technology in development. Apple is supplying this information to help you plan for the adoption of the technologies and programming interfaces described herein for use on Apple-branded products. This information is subject to change, and software implemented according to this document should be tested with final operating system software and final documentation. Newer versions of this document may be provided with future seeds of the API or technology.</p>

<p>
  Swift is a new programming language for iOS and OS X apps that builds on the best of C and Objective-C, without the constraints of C compatibility. Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible, and more fun. Swift’s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works.</p>

<p>
  Swift has been years in the making. Apple laid the foundation for Swift by advancing our existing compiler, debugger, and framework infrastructure. We simplified memory management with Automatic Reference Counting (ARC). Our framework stack, built on the solid base of Foundation and Cocoa, has been modernized and standardized throughout. Objective-C itself has evolved to support blocks, collection literals, and modules, enabling framework adoption of modern language technologies without disruption. Thanks to this groundwork, we can now introduce a new language for the future of Apple software development.</p>

<p>
  Swift feels familiar to Objective-C developers. It adopts the readability of Objective-C’s named parameters and the power of Objective-C’s dynamic object model. It provides seamless access to existing Cocoa frameworks and mix-and-match interoperability with Objective-C code. Building from this common ground, Swift introduces many new features and unifies the procedural and object-oriented portions of the language.</p>

<p>
  Swift is friendly to new programmers. It is the first industrial-quality systems programming language that is as expressive and enjoyable as a scripting language. It supports playgrounds, an innovative feature that allows programmers to experiment with Swift code and see the results immediately, without the overhead of building and running an app.</p>

<p>
  Swift combines the best in modern language thinking with wisdom from the wider Apple engineering culture. The compiler is optimized for performance, and the language is optimized for development, without compromising on either. It’s designed to scale from “hello, world” to an entire operating system. All this makes Swift a sound future investment for developers and for Apple.</p>

<p>
  Swift is a fantastic way to write iOS and OS X apps, and will continue to evolve with new features and capabilities. Our goals for Swift are ambitious. We can’t wait to see what you create with it.</p>

<p>
A Swift Tour</p>

<p>On This Page</p>

<p>

            Simple Values</p>

<p>

            Control Flow</p>

<p>

            Functions and Closures</p>

<p>

            Objects and Classes</p>

<p>

            Enumerations and Structures</p>

<p>

            Protocols and Extensions</p>

<p>

            Generics</p>

<p>
  Tradition suggests that the first program in a new language should print the words “Hello, world” on the screen. In Swift, this can be done in a single line:</p>

<p>println("Hello, world")</p>

<p>
  If you have written code in C or Objective-C, this syntax looks familiar to you—in Swift, this line of code is a complete program. You don’t need to import a separate library for functionality like input/output or string handling. Code written at global scope is used as the entry point for the program, so you don’t need a main function. You also don’t need to write semicolons at the end of every statement.</p>

<p>
  This tour gives you enough information to start writing code in Swift by showing you how to accomplish a variety of programming tasks. Don’t worry if you don’t understand something—everything introduced in this tour is explained in detail in the rest of this book.</p><empty-line /><p>Note</p>

<p>For the best experience, open this chapter as a playground in Xcode. Playgrounds allow you to edit the code listings and see the result immediately.</p>

<p><strong>Open Playground</strong>





Simple Values</p>

<p>
  Use let to make a constant and var to make a variable. The value of a constant doesn’t need to be known at compile time, but you must assign it a value exactly once. This means you can use constants to name a value that you determine once but use in many places.</p>

<p>var myVariable = 42</p>

<p>myVariable = 50</p>

<p>let myConstant = 42</p>

<p>
  A constant or variable must have the same type as the value you want to assign to it. However, you don’t always have to write the type explicitly. Providing a value when you create a constant or variable lets the compiler infer its type. In the example above, the compiler infers that myVariable is an integer because its initial value is a integer.</p>

<p>
  If the initial value doesn’t provide enough information (or if there is no initial value), specify the type by writing it after the variable, separated by a colon.</p>

<p>let implicitInteger = 70</p>

<p>let implicitDouble = 70.0</p>

<p>let explicitDouble: Double = 70</p><empty-line /><p>Experiment</p>

<p>Create a constant with an explicit type of Float and a value of 4.</p>

<p>
  Values are never implicitly converted to another type. If you need to convert a value to a different type, explicitly make an instance of the desired type.</p>

<p>let label = "The width is "</p>

<p>let width = 94</p>

<p>let widthLabel = label + String(width)</p><empty-line /><p>Experiment</p>

<p>Try removing the conversion to String from the last line. What error do you get?</p>

<p>
  There’s an even simpler way to include values in strings: Write the value in parentheses, and write a backslash (\) before the parentheses. For example:</p>

<p>let apples = 3</p>

<p>let oranges = 5</p>

<p>let appleSummary = "I have \(apples) apples."</p>

<p>let fruitSummary = "I have \(apples + oranges) pieces of fruit."</p><empty-line /><p>Experiment</p>

<p>Use \() to include a floating-point calculation in a string and to include someone’s name in a greeting.</p>

<p>
  Create arrays and dictionaries using brackets ([]), and access their elements by writing the index or key in brackets.</p>

<p>var shoppingList = ["catfish", "water", "tulips", "blue paint"]</p>

<p>shoppingList[1] = "bottle of water"</p>

<p>var occupations = [</p>

<p> "Malcolm": "Captain",</p>

<p> "Kaylee": "Mechanic",</p>

<p>]</p>

<p>occupations["Jayne"] = "Public Relations"</p>

<p>
  To create an empty array or dictionary, use the initializer syntax.</p>

<p>let emptyArray = String[]()</p>

<p>let emptyDictionary = Dictionary&lt;String, Float&gt;()</p>

<p>
  If type information can be inferred, you can write an empty array as [] and an empty dictionary as [:]—for example, when you set a new value for a variable or pass an argument to a function.</p>

<p>shoppingList = []   // Went shopping and bought everything.






Control Flow</p>

<p>
  Use if and switch to make conditionals, and use for-in, for, while, and do-while to make loops. Parentheses around the condition or loop variable are optional. Braces around the body are required.</p>

<p>let individualScores = [75, 43, 103, 87, 12]</p>

<p>var teamScore = 0</p>

<p>for score in individualScores {</p>

<p> if score &gt; 50 {</p>

<p> teamScore += 3</p>

<p>    } else {</p>

<p> teamScore += 1</p>

<p>    }</p>

<p>}</p>

<p>teamScore</p>

<p>
  In an if statement, the conditional must be a Boolean expression—this means that code such as if score { ... } is an error, not an implicit comparison to zero.</p>

<p>
  You can use if and let together to work with values that might be missing. These values are represented as optionals. An optional value either contains a value or contains nil to indicate that the value is missing. Write a question mark (?) after the type of a value to mark the value as optional.</p>

<p>var optionalString: String? = "Hello"</p>

<p>optionalString == nil</p>

<p>var optionalName: String? = "John Appleseed"</p>

<p>var greeting = "Hello!"</p>

<p>if let name = optionalName {</p>

<p> greeting = "Hello, \(name)"</p>

<p>}</p><empty-line /><p>Experiment</p>

<p>Change optionalName to nil. What greeting do you get? Add an else clause that sets a different greeting if optionalName is nil.</p>

<p>
  If the optional value is nil, the conditional is false and the code in braces is skipped. Otherwise, the optional value is unwrapped and assigned to the constant after let, which makes the unwrapped value available inside the block of code.</p>

<p>
  Switches support any kind of data and a wide variety of comparison operations—they aren’t limited to integers and tests for equality.</p>

<p>let vegetable = "red pepper"</p>

<p>switch vegetable {</p>

<p>case "celery":</p>

<p> let vegetableComment = "Add some raisins and make ants on a log."</p>

<p>case "cucumber", "watercress":</p>

<p> let vegetableComment = "That would make a good tea sandwich."</p>

<p>case let x where x.hasSuffix("pepper"):</p>

<p> let vegetableComment = "Is it a spicy \(x)?"</p>

<p>default:</p>

<p> let vegetableComment = "Everything tastes good in soup."</p>

<p>}</p><empty-line /><p>Experiment</p>

<p>Try removing the default case. What error do you get?</p>

<p>
  After executing the code inside the switch case that matched, the program exits from the switch statement. Execution doesn’t continue to the next case, so there is no need to explicitly break out of the switch at the end of each case’s code.</p>

<p>
  You use for-in to iterate over items in a dictionary by providing a pair of names to use for each key-value pair.</p>

<p>let interestingNumbers = [</p>

<p> "Prime": [2, 3, 5, 7, 11, 13],</p>

<p> "Fibonacci": [1, 1, 2, 3, 5, 8],</p>

<p> "Square": [1, 4, 9, 16, 25],</p>

<p>]</p>

<p>var largest = 0</p>

<p>for (kind, numbers) in interestingNumbers {</p>

<p> for number in numbers {</p>

<p> if number &gt; largest {</p>

<p> largest = number</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>largest</p><empty-line /><p>Experiment</p>

<p>Add another variable to keep track of which kind of number was the largest, as well as what that largest number was.</p>

<p>
  Use while to repeat a block of code until a condition changes. The condition of a loop can be at the end instead, ensuring that the loop is run at least once.</p>

<p>var n = 2</p>

<p>while n &lt; 100 {</p>

<p> n = n * 2</p>

<p>}</p>

<p>n</p>

<p>var m = 2</p>

<p>do {</p>

<p> m = m * 2</p>

<p>} while m &lt; 100</p>

<p>m</p>

<p>
  You can keep an index in a loop—either by using .. to make a range of indexes or by writing an explicit initialization, condition, and increment. These two loops do the same thing:</p>

<p>var firstForLoop = 0</p>

<p>for i in 0..3 {</p>

<p> firstForLoop += i</p>

<p>}</p>

<p>firstForLoop</p>

<p>var secondForLoop = 0</p>

<p>for var i = 0; i &lt; 3; ++i {</p>

<p> secondForLoop += 1</p>

<p>}</p>

<p>secondForLoop</p>

<p>
  Use .. to make a range that omits its upper value, and use ... to make a range that includes both values.




Functions and Closures</p>

<p>
  Use func to declare a function. Call a function by following its name with a list of arguments in parentheses. Use -&gt; to separate the parameter names and types from the function’s return type.</p>

<p>func greet(name: String, day: String) -&gt; String {</p>

<p> return "Hello \(name), today is \(day)."</p>

<p>}</p>

<p>greet("Bob", "Tuesday")</p><empty-line /><p>Experiment</p>

<p>Remove the day parameter. Add a parameter to include today’s lunch special in the greeting.</p>

<p>
  Use a tuple to return multiple values from a function.</p>

<p>func getGasPrices() -&gt; (Double, Double, Double) {</p>

<p> return (3.59, 3.69, 3.79)</p>

<p>}</p>

<p>getGasPrices()</p>

<p>
  Functions can also take a variable number of arguments, collecting them into an array.</p>

<p>func sumOf(numbers: Int...) -&gt; Int {</p>

<p> var sum = 0</p>

<p> for number in numbers {</p>

<p> sum += number</p>

<p>    }</p>

<p> return sum</p>

<p>}</p>

<p>sumOf()</p>

<p>sumOf(42, 597, 12)</p><empty-line /><p>Experiment</p>

<p>Write a function that calculates the average of its arguments.</p>

<p>
  Functions can be nested. Nested functions have access to variables that were declared in the outer function. You can use nested functions to organize the code in a function that is long or complex.</p>

<p>func returnFifteen() -&gt; Int {</p>

<p> var y = 10</p>

<p> func add() {</p>

<p> y += 5</p>

<p>    }</p>

<p> add()</p>

<p> return y</p>

<p>}</p>

<p>returnFifteen()</p>

<p>
  Functions are a first-class type. This means that a function can return another function as its value.</p>

<p>func makeIncrementer() -&gt; (Int -&gt; Int) {</p>

<p> func addOne(number: Int) -&gt; Int {</p>

<p> return 1 + number</p>

<p>    }</p>

<p> return addOne</p>

<p>}</p>

<p>var increment = makeIncrementer()</p>

<p>increment(7)</p>

<p>
  A function can take another function as one of its arguments.</p>

<p>func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool {</p>

<p> for item in list {</p>

<p> if condition(item) {</p>

<p> return true</p>

<p>        }</p>

<p>    }</p>

<p> return false</p>

<p>}</p>

<p>func lessThanTen(number: Int) -&gt; Bool {</p>

<p> return number &lt; 10</p>

<p>}</p>

<p>var numbers = [20, 19, 7, 12]</p>

<p>hasAnyMatches(numbers, lessThanTen)</p>

<p>
  Functions are actually a special case of closures. You can write a closure without a name by surrounding code with braces ({}). Use in to separate the arguments and return type from the body.</p>

<p>numbers.map({</p>

<p>    (number: Int) -&gt; Int in</p>

<p> let result = 3 * number</p>

<p> return result</p>

<p>    })</p><empty-line /><p>Experiment</p>

<p>Rewrite the closure to return zero for all odd numbers.</p>

<p>
  You have several options for writing closures more concisely. When a closure’s type is already known, such as the callback for a delegate, you can omit the type of its parameters, its return type, or both. Single statement closures implicitly return the value of their only statement.</p>

<p>numbers.map({ number in 3 * number })</p>

<p>
  You can refer to parameters by number instead of by name—this approach is especially useful in very short closures. A closure passed as the last argument to a function can appear immediately after the parentheses.</p>

<p>sort([1, 5, 3, 12, 2]) { $0 &gt; $1 }






Objects and Classes</p>

<p>
  Use class followed by the class’s name to create a class. A property declaration in a class is written the same way as a constant or variable declaration, except that it is in the context of a class. Likewise, method and function declarations are written the same way.</p>

<p>class Shape {</p>

<p> var numberOfSides = 0</p>

<p> func simpleDescription() -&gt; String {</p>

<p> return "A shape with \(numberOfSides) sides."</p>

<p>    }</p>

<p>}</p><empty-line /><p>Experiment</p>

<p>Add a constant property with let, and add another method that takes an argument.</p>

<p>
  Create an instance of a class by putting parentheses after the class name. Use dot syntax to access the properties and methods of the instance.</p>

<p>var shape = Shape()</p>

<p>shape.numberOfSides = 7</p>

<p>var shapeDescription = shape.simpleDescription()</p>

<p>
  This version of the Shape class is missing something important: an initializer to set up the class when an instance is created. Use init to create one.</p>

<p>class NamedShape {</p>

<p> var numberOfSides: Int = 0</p>

<p> var name: String</p>

<p> init(name: String) {</p>

<p> self.name = name</p>

<p>    }</p>

<p> func simpleDescription() -&gt; String {</p>

<p> return "A shape with \(numberOfSides) sides."</p>

<p>    }</p>

<p>}</p>

<p>
  Notice how self is used to distinguish the name property from the name argument to the initializer. The arguments to the initializer are passed like a function call when you create an instance of the class. Every property needs a value assigned—either in its declaration (as with numberOfSides) or in the initializer (as with name).</p>

<p>
  Use deinit to create a deinitializer if you need to perform some cleanup before the object is deallocated.</p>

<p>
  Subclasses include their superclass name after their class name, separated by a colon. There is no requirement for classes to subclass any standard root class, so you can include or omit a superclass as needed.</p>

<p>
  Methods on a subclass that override the superclass’s implementation are marked with override—overriding a method by accident, without override, is detected by the compiler as an error. The compiler also detects methods with override that don’t actually override any method in the superclass.</p>

<p>class Square: NamedShape {</p>

<p> var sideLength: Double</p>

<p> init(sideLength: Double, name: String) {</p>

<p> self.sideLength = sideLength</p>

<p> super.init(name: name)</p>

<p> numberOfSides = 4</p>

<p>    }</p>

<p> func area() -&gt;  Double {</p>

<p> return sideLength * sideLength</p>

<p>    }</p>

<p> override func simpleDescription() -&gt; String {</p>

<p> return "A square with sides of length \(sideLength)."</p>

<p>    }</p>

<p>}</p>

<p>let test = Square(sideLength: 5.2, name: "my test square")</p>

<p>test.area()</p>

<p>test.simpleDescription()</p><empty-line /><p>Experiment</p>

<p>Make another subclass of NamedShape called Circle that takes a radius and a name as arguments to its initializer. Implement an area and a describe method on the Circle class.</p>

<p>
  In addition to simple properties that are stored, properties can have a getter and a setter.</p>

<p>class EquilateralTriangle: NamedShape {</p>

<p> var sideLength: Double = 0.0</p>

<p> init(sideLength: Double, name: String) {</p>

<p> self.sideLength = sideLength</p>

<p> super.init(name: name)</p>

<p> numberOfSides = 3</p>

<p>    }</p>

<p> var perimeter: Double {</p>

<p> get {</p>

<p> return 3.0 * sideLength</p>

<p>    }</p>

<p> set {</p>

<p> sideLength = newValue / 3.0</p>

<p>    }</p>

<p>    }</p>

<p> override func simpleDescription() -&gt; String {</p>

<p> return "An equilateral triagle with sides of length \(sideLength)."</p>

<p>    }</p>

<p>}</p>

<p>var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")</p>

<p>triangle.perimeter</p>

<p>triangle.perimeter = 9.9</p>

<p>triangle.sideLength</p>

<p>
  In the setter for perimeter, the new value has the implicit name newValue. You can provide an explicit name in parentheses after set.</p>

<p>
  Notice that the initializer for the EquilateralTriangle class has three different steps:</p>

<p>
  Setting the value of properties that the subclass declares.</p>

<p>
  Calling the superclass’s initializer.</p>

<p>
  Changing the value of properties defined by the superclass. Any additional setup work that uses methods, getters, or setters can also be done at this point.</p>

<p>
  If you don’t need to compute the property but still need to provide code that is run before and after setting a new value, use willSet and didSet. For example, the class below ensures that the side length of its triangle is always the same as the side length of its square.</p>

<p>class TriangleAndSquare {</p>

<p> var triangle: EquilateralTriangle {</p>

<p> willSet {</p>

<p> square.sideLength = newValue.sideLength</p>

<p>    }</p>

<p>    }</p>

<p> var square: Square {</p>

<p> willSet {</p>

<p> triangle.sideLength = newValue.sideLength</p>

<p>    }</p>

<p>    }</p>

<p> init(size: Double, name: String) {</p>

<p> square = Square(sideLength: size, name: name)</p>

<p> triangle = EquilateralTriangle(sideLength: size, name: name)</p>

<p>    }</p>

<p>}</p>

<p>var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")</p>

<p>triangleAndSquare.square.sideLength</p>

<p>triangleAndSquare.triangle.sideLength</p>

<p>triangleAndSquare.square = Square(sideLength: 50, name: "larger square")</p>

<p>triangleAndSquare.triangle.sideLength</p>

<p>
  Methods on classes have one important difference from functions. Parameter names in functions are used only within the function, but parameters names in methods are also used when you call the method (except for the first parameter). By default, a method has the same name for its parameters when you call it and within the method itself. You can specify a second name, which is used inside the method.</p>

<p>class Counter {</p>

<p> var count: Int = 0</p>

<p> func incrementBy(amount: Int, numberOfTimes times: Int) {</p>

<p> count += amount * times</p>

<p>    }</p>

<p>}</p>

<p>var counter = Counter()</p>

<p>counter.incrementBy(2, numberOfTimes: 7)</p>

<p>
  When working with optional values, you can write ? before operations like methods, properties, and subscripting. If the value before the ? is nil, everything after the ? is ignored and the value of the whole expression is nil. Otherwise, the optional value is unwrapped, and everything after the ? acts on the unwrapped value. In both cases, the value of the whole expression is an optional value.</p>

<p>let optionalSquare: Square? = Square(sideLength: 2.5, name: "optional square")</p>

<p>let sideLength = optionalSquare?.sideLength






Enumerations and Structures</p>

<p>
  Use enum to create an enumeration. Like classes and all other named types, enumerations can have methods associated with them.</p>

<p>enum Rank: Int {</p>

<p> case Ace = 1</p>

<p> case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten</p>

<p> case Jack, Queen, King</p>

<p> func simpleDescription() -&gt; String {</p>

<p> switch self {</p>

<p> case .Ace:</p>

<p> return "ace"</p>

<p> case .Jack:</p>

<p> return "jack"</p>

<p> case .Queen:</p>

<p> return "queen"</p>

<p> case .King:</p>

<p> return "king"</p>

<p> default:</p>

<p> return String(self.toRaw())</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>let ace = Rank.Ace</p>

<p>let aceRawValue = ace.toRaw()</p><empty-line /><p>Experiment</p>

<p>Write a function that compares two Rank values by comparing their raw values.</p>

<p>
  In the example above, the raw value type of the enumeration is Int, so you only have to specify the first raw value. The rest of the raw values are assigned in order. You can also use strings or floating-point numbers as the raw type of an enumeration.</p>

<p>
  Use the toRaw and fromRaw functions to convert between the raw value and the enumeration value.</p>

<p>if let convertedRank = Rank.fromRaw(3) {</p>

<p> let threeDescription = convertedRank.simpleDescription()</p>

<p>}</p>

<p>
  The member values of an enumeration are actual values, not just another way of writing their raw values. In fact, in cases where there isn’t a meaningful raw value, you don’t have to provide one.</p>

<p>enum Suit {</p>

<p> case Spades, Hearts, Diamonds, Clubs</p>

<p> func simpleDescription() -&gt; String {</p>

<p> switch self {</p>

<p> case .Spades:</p>

<p> return "spades"</p>

<p> case .Hearts:</p>

<p> return "hearts"</p>

<p> case .Diamonds:</p>

<p> return "diamonds"</p>

<p> case .Clubs:</p>

<p> return "clubs"</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>let hearts = Suit.Hearts</p>

<p>let heartsDescription = hearts.simpleDescription()</p><empty-line /><p>Experiment</p>

<p>Add a color method to Suit that returns “black” for spades and clubs, and returns “red” for hearts and diamonds.</p>

<p>
  Notice the two ways that the Hearts member of the enumeration is referred to above: When assigning a value to the hearts constant, the enumeration member Suit.Hearts is referred to by its full name because the constant doesn’t have an explicit type specified. Inside the switch, the enumeration is referred to by the abbreviated form .Hearts because the value of self is already known to be a suit. You can use the abbreviated form anytime the value’s type is already known.</p>

<p>
  Use struct to create a structure. Structures support many of the same behaviors as classes, including methods and initializers. One of the most important differences between structures and classes is that structures are always copied when they are passed around in your code, but classes are passed by reference.</p>

<p>struct Card {</p>

<p> var rank: Rank</p>

<p> var suit: Suit</p>

<p> func simpleDescription() -&gt; String {</p>

<p> return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"</p>

<p>    }</p>

<p>}</p>

<p>let threeOfSpades = Card(rank: .Three, suit: .Spades)</p>

<p>let threeOfSpadesDescription = threeOfSpades.simpleDescription()</p><empty-line /><p>Experiment</p>

<p>Add a method to Card that creates a full deck of cards, with one card of each combination of rank and suit.</p>

<p>
  An instance of an enumeration member can have values associated with the instance. Instances of the same enumeration member can have different values associated with them. You provide the associated values when you create the instance. Associated values and raw values are different: The raw value of an enumeration member is the same for all of its instances, and you provide the raw value when you define the enumeration.</p>

<p>
  For example, consider the case of requesting the sunrise and sunset time from a server. The server either responds with the information or it responds with some error information.</p>

<p>enum ServerResponse {</p>

<p> case Result(String, String)</p>

<p> case Error(String)</p>

<p>}</p>

<p>let success = ServerResponse.Result("6:00 am", "8:09 pm")</p>

<p>let failure = ServerResponse.Error("Out of cheese.")</p>

<p>switch success {</p>

<p>case let .Result(sunrise, sunset):</p>

<p> let serverResponse = "Sunrise is at \(sunrise) and sunset is at \(sunset)."</p>

<p>case let .Error(error):</p>

<p> let serverResponse = "Failure...  \(error)"</p>

<p>}</p><empty-line /><p>Experiment</p>

<p>Add a third case to ServerResponse and to the switch.</p>

<p>
  Notice how the sunrise and sunset times are extracted from the ServerResponse value as part of matching the value against the switch cases.




Protocols and Extensions</p>

<p>
  Use protocol to declare a protocol.</p>

<p>protocol ExampleProtocol {</p>

<p> var simpleDescription: String { get }</p>

<p> mutating func adjust()</p>

<p>}</p>

<p>
  Classes, enumerations, and structs can all adopt protocols.</p>

<p>class SimpleClass: ExampleProtocol {</p>

<p> var simpleDescription: String = "A very simple class."</p>

<p> var anotherProperty: Int = 69105</p>

<p> func adjust() {</p>

<p> simpleDescription += "  Now 100% adjusted."</p>

<p>    }</p>

<p>}</p>

<p>var a = SimpleClass()</p>

<p>a.adjust()</p>

<p>let aDescription = a.simpleDescription</p>

<p>struct SimpleStructure: ExampleProtocol {</p>

<p> var simpleDescription: String = "A simple structure"</p>

<p> mutating func adjust() {</p>

<p> simpleDescription += " (adjusted)"</p>

<p>    }</p>

<p>}</p>

<p>var b = SimpleStructure()</p>

<p>b.adjust()</p>

<p>let bDescription = b.simpleDescription</p><empty-line /><p>Experiment</p>

<p>Write an enumeration that conforms to this protocol.</p>

<p>
  Notice the use of the mutating keyword in the declaration of SimpleStructure to mark a method that modifies the structure. The declaration of SimpleClass doesn’t need any of its methods marked as mutating because methods on a class can always modify the class.</p>

<p>
  Use extension to add functionality to an existing type, such as new methods and computed properties. You can use an extension to add protocol conformance to a type that is declared elsewhere, or even to a type that you imported from a library or framework.</p>

<p>extension Int: ExampleProtocol {</p>

<p> var simpleDescription: String {</p>

<p> return "The number \(self)"</p>

<p>    }</p>

<p> mutating func adjust() {</p>

<p> self += 42</p>

<p>    }</p>

<p>}</p>

<p>7.simpleDescription</p><empty-line /><p>Experiment</p>

<p>Write an extension for the Double type that adds an absoluteValue property.</p>

<p>
  You can use a protocol name just like any other named type—for example, to create a collection of objects that have different types but that all conform to a single protocol. When you work with values whose type is a protocol type, methods outside the protocol definition are not available.</p>

<p>let protocolValue: ExampleProtocol = a</p>

<p>protocolValue.simpleDescription</p>

<p>// protocolValue.anotherProperty  // Uncomment to see the error</p>

<p>
  Even though the variable protocolValue has a runtime type of SimpleClass, the compiler treats it as the given type of ExampleProtocol. This means that you can’t accidentally access methods or properties that the class implements in addition to its protocol conformance.




Generics</p>

<p>
  Write a name inside angle brackets to make a generic function or type.</p>

<p>func repeat&lt;ItemType&gt;(item: ItemType, times: Int) -&gt; ItemType[] {</p>

<p> var result = ItemType[]()</p>

<p> for i in 0..times {</p>

<p> result += item</p>

<p>    }</p>

<p> return result</p>

<p>}</p>

<p>repeat("knock", 4)</p>

<p>
  You can make generic forms of functions and methods, as well as classes, enumerations, and structures.</p>

<p>// Reimplement the Swift standard library's optional type</p>

<p>enum OptionalValue&lt;T&gt; {</p>

<p> case None</p>

<p> case Some(T)</p>

<p>}</p>

<p>var possibleInteger: OptionalValue&lt;Int&gt; = .None</p>

<p>possibleInteger = .Some(100)</p>

<p>
  Use where after the type name to specify a list of requirements—for example, to require the type to implement a protocol, to require two types to be the same, or to require a class to have a particular superclass.</p>

<p>func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element: Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T, rhs: U) -&gt; Bool {</p>

<p> for lhsItem in lhs {</p>

<p> for rhsItem in rhs {</p>

<p> if lhsItem == rhsItem {</p>

<p> return true</p>

<p>            }</p>

<p>        }</p>

<p>    }</p>

<p> return false</p>

<p>}</p>

<p>anyCommonElements([1, 2, 3], [3])</p><empty-line /><p>Experiment</p>

<p>Modify the anyCommonElements function to make a function that returns an array of the elements that any two sequences have in common.</p>

<p>
  In the simple cases, you can omit where and simply write the protocol or class name after a colon. Writing &lt;T: Equatable&gt; is the same as writing &lt;T where T: Equatable&gt;.</p>

<p>
The Basics</p>

<p>On This Page</p>

<p>

            Constants and Variables</p>

<p>

            Comments</p>

<p>

            Semicolons</p>

<p>

            Integers</p>

<p>

            Floating-Point Numbers</p>

<p>

            Type Safety and Type Inference</p>

<p>

            Numeric Literals</p>

<p>

            Numeric Type Conversion</p>

<p>

            Type Aliases</p>

<p>

            Booleans</p>

<p>

            Tuples</p>

<p>

            Optionals</p>

<p>

            Assertions</p>

<p>
  Swift is a new programming language for iOS and OS X app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C.</p>

<p>
  Swift provides its own versions of all fundamental C and Objective-C types, including Int for integers; Double and Float for floating-point values; Bool for Boolean values; and String for textual data. Swift also provides powerful versions of the two primary collection types, Array and Dictionary, as described in Collection Types.</p>

<p>
  Like C, Swift uses variables to store and refer to values by an identifying name. Swift also makes extensive use of variables whose values cannot be changed. These are known as constants, and are much more powerful than constants in C. Constants are used throughout Swift to make code safer and clearer in intent when you work with values that do not need to change.</p>

<p>
  In addition to familiar types, Swift introduces advanced types not found in Objective-C. These include tuples, which enable you to create and pass around groupings of values. Tuples can return multiple values from a function as a single compound value.</p>

<p>
  Swift also introduces optional types, which handle the absence of a value. Optionals say either “there <emphasis>is</emphasis> a value, and it equals <emphasis>x</emphasis>” or “there <emphasis>isn’t</emphasis> a value at all”. Optionals are similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Optionals are safer and more expressive than nil pointers in Objective-C and are at the heart of many of Swift’s most powerful features.</p>

<p>
  Optionals are an example of the fact that Swift is a <emphasis>type safe</emphasis> language. Swift helps you to be clear about the types of values your code can work with. If part of your code expects a String, type safety prevents you from passing it an Int by mistake. This enables you to catch and fix errors as early as possible in the development process.




Constants and Variables</p>

<p>
  Constants and variables associate a name (such as maximumNumberOfLoginAttempts or welcomeMessage) with a value of a particular type (such as the number 10 or the string "Hello"). The value of a <emphasis>constant</emphasis> cannot be changed once it is set, whereas a <emphasis>variable</emphasis> can be set to a different value in the future.



Declaring Constants and Variables</p>

<p>
  Constants and variables must be declared before they are used. You declare constants with the let keyword and variables with the var keyword. Here’s an example of how constants and variables can be used to track the number of login attempts a user has made:</p>

<p>let maximumNumberOfLoginAttempts = 10</p>

<p>var currentLoginAttempt = 0</p>

<p>
  This code can be read as:</p>

<p>
  “Declare a new constant called maximumNumberOfLoginAttempts, and give it a value of 10. Then, declare a new variable called currentLoginAttempt, and give it an initial value of 0.”</p>

<p>
  In this example, the maximum number of allowed login attempts is declared as a constant, because the maximum value never changes. The current login attempt counter is declared as a variable, because this value must be incremented after each failed login attempt.</p>

<p>
  You can declare multiple constants or multiple variables on a single line, separated by commas:</p>

<p>var x = 0.0, y = 0.0, z = 0.0</p><empty-line /><p>Note</p>

<p>If a stored value in your code is not going to change, always declare it as a constant with the let keyword. Use variables only for storing values that need to be able to change.
      





Type Annotations</p>

<p>
  You can provide a <emphasis>type annotation</emphasis> when you declare a constant or variable, to be clear about the kind of values the constant or variable can store. Write a type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use.</p>

<p>
  This example provides a type annotation for a variable called welcomeMessage, to indicate that the variable can store String values:</p>

<p>var welcomeMessage: String</p>

<p>
  The colon in the declaration means <emphasis>“…of type…,”</emphasis> so the code above can be read as:</p>

<p>
  “Declare a variable called welcomeMessage that is of type String.”</p>

<p>
  The phrase “of type String” means “can store any String value.” Think of it as meaning “the type of thing” (or “the kind of thing”) that can be stored.</p>

<p>
  The welcomeMessage variable can now be set to any string value without error:</p>

<p>welcomeMessage = "Hello"</p><empty-line /><p>Note</p>

<p>It is rare that you need to write type annotations in practice. If you provide an initial value for a constant or variable at the point that it is defined, Swift can almost always infer the type to be used for that constant or variable, as described in Type Safety and Type Inference. In the welcomeMessage example above, no initial value is provided, and so the type of the welcomeMessage variable is specified with a type annotation rather than being inferred from an initial value.
      





Naming Constants and Variables</p>

<p>
  You can use almost any character you like for constant and variable names, including Unicode characters:</p>

<p>let π = 3.14159</p>

<p>let 你好 = "你好世界"</p>

<p>let 🐶🐮 = "dogcow"</p>

<p>
  Constant and variable names cannot contain mathematical symbols, arrows, private-use (or invalid) Unicode code points, or line- and box-drawing characters. Nor can they begin with a number, although numbers may be included elsewhere within the name.</p>

<p>
  Once you’ve declared a constant or variable of a certain type, you can’t redeclare it again with the same name, or change it to store values of a different type. Nor can you change a constant into a variable or a variable into a constant.</p><empty-line /><p>Note</p>

<p>If you need to give a constant or variable the same name as a reserved Swift keyword, you can do so by surrounding the keyword with back ticks (`) when using it as a name. However, you should avoid using keywords as names unless you have absolutely no choice.</p>

<p>
  You can change the value of an existing variable to another value of a compatible type. In this example, the value of friendlyWelcome is changed from "Hello!" to "Bonjour!":</p>

<p>var friendlyWelcome = "Hello!"</p>

<p>friendlyWelcome = "Bonjour!"</p>

<p>// friendlyWelcome is now "Bonjour!"</p>

<p>
  Unlike a variable, the value of a constant cannot be changed once it is set. Attempting to do so is reported as an error when your code is compiled:</p>

<p>let languageName = "Swift"</p>

<p>languageName = "Swift++"</p>

<p>// this is a compile-time error - languageName cannot be changed






Printing Constants and Variables</p>

<p>
  You can print the current value of a constant or variable with the println function:</p>

<p>println(friendlyWelcome)</p>

<p>// prints "Bonjour!"</p>

<p>
println is a global function that prints a value, followed by a line break, to an appropriate output. If you are working in Xcode, for example, println prints its output in Xcode’s “console” pane. (A second function, print, performs the same task without appending a line break to the end of the value to be printed.)</p>

<p>
  The println function prints any String value you pass to it:</p>

<p>println("This is a string")</p>

<p>// prints "This is a string"</p>

<p>
  The println function can print more complex logging messages, in a similar manner to Cocoa’s NSLog function. These messages can include the current values of constants and variables.</p>

<p>
  Swift uses <emphasis>string interpolation</emphasis> to include the name of a constant or variable as a placeholder in a longer string, and to prompt Swift to replace it with the current value of that constant or variable. Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:</p>

<p>println("The current value of friendlyWelcome is \(friendlyWelcome)")</p>

<p>// prints "The current value of friendlyWelcome is Bonjour!"</p><empty-line /><p>Note</p>

<p>All options you can use with string interpolation are described in String Interpolation.
      






Comments</p>

<p>
  Use comments to include non-executable text in your code, as a note or reminder to yourself. Comments are ignored by the Swift compiler when your code is compiled.</p>

<p>
  Comments in Swift are very similar to comments in C. Single-line comments begin with two forward-slashes (//):</p>

<p>// this is a comment</p>

<p>
  You can also write multiline comments, which start with a forward-slash followed by an asterisk (/*) and end with an asterisk followed by a forward-slash (*/):</p>

<p>/* this is also a comment,</p>

<p>but written over multiple lines */</p>

<p>
  Unlike multiline comments in C, multiline comments in Swift can be nested inside other multiline comments. You write nested comments by starting a multiline comment block and then starting a second multiline comment within the first block. The second block is then closed, followed by the first block:</p>

<p>/* this is the start of the first multiline comment</p>

<p>/* this is the second, nested multiline comment */</p>

<p>this is the end of the first multiline comment */</p>

<p>
  Nested multiline comments enable you to comment out large blocks of code quickly and easily, even if the code already contains multiline comments.




Semicolons</p>

<p>
  Unlike many other languages, Swift does not require you to write a semicolon (;) after each statement in your code, although you can do so if you wish. Semicolons <emphasis>are</emphasis> required, however, if you want to write multiple separate statements on a single line:</p>

<p>let cat = "🐱"; println(cat)</p>

<p>// prints "🐱"






Integers</p>

<p>
<emphasis>Integers</emphasis> are whole numbers with no fractional component, such as 42 and -23. Integers are either <emphasis>signed</emphasis> (positive, zero, or negative) or <emphasis>unsigned</emphasis> (positive or zero).</p>

<p>
  Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. These integers follow a naming convention similar to C, in that an 8-bit unsigned integer is of type UInt8, and a 32-bit signed integer is of type Int32. Like all types in Swift, these integer types have capitalized names.



Integer Bounds</p>

<p>
  You can access the minimum and maximum values of each integer type with its min and max properties:</p>

<p>let minValue = UInt8.min // minValue is equal to 0, and is of type UInt8</p>

<p>let maxValue = UInt8.max // maxValue is equal to 255, and is of type UInt8</p>

<p>
  The values of these properties are of the appropriate-sized number type (such as UInt8 in the example above) and can therefore be used in expressions alongside other values of the same type.




Int</p>

<p>
  In most cases, you don’t need to pick a specific size of integer to use in your code. Swift provides an additional integer type, Int, which has the same size as the current platform’s native word size:</p>

<p>
  On a 32-bit platform, Int is the same size as Int32.</p>

<p>
  On a 64-bit platform, Int is the same size as Int64.</p>

<p>
  Unless you need to work with a specific size of integer, always use Int for integer values in your code. This aids code consistency and interoperability. Even on 32-bit platforms, Int can store any value between -2,147,483,648 and 2,147,483,647, and is large enough for many integer ranges.




UInt</p>

<p>
  Swift also provides an unsigned integer type, UInt, which has the same size as the current platform’s native word size:</p>

<p>
  On a 32-bit platform, UInt is the same size as UInt32.</p>

<p>
  On a 64-bit platform, UInt is the same size as UInt64.</p><empty-line /><p>Note</p>

<p>Use UInt only when you specifically need an unsigned integer type with the same size as the platform’s native word size. If this is not the case, Int is preferred, even when the values to be stored are known to be non-negative. A consistent use of Int for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference, as described in Type Safety and Type Inference.
      






Floating-Point Numbers</p>

<p>
<emphasis>Floating-point numbers</emphasis> are numbers with a fractional component, such as 3.14159, 0.1, and -273.15.</p>

<p>
  Floating-point types can represent a much wider range of values than integer types, and can store numbers that are much larger or smaller than can be stored in an Int. Swift provides two signed floating-point number types:</p>

<p>
Double represents a 64-bit floating-point number. Use it when floating-point values must be very large or particularly precise.</p>

<p>
Float represents a 32-bit floating-point number. Use it when floating-point values do not require 64-bit precision.</p><empty-line /><p>Note</p>

<p>Double has a precision of at least 15 decimal digits, whereas the precision of Float can be as little as 6 decimal digits. The appropriate floating-point type to use depends on the nature and range of values you need to work with in your code.
      





Type Safety and Type Inference</p>

<p>
  Swift is a <emphasis>type safe</emphasis> language. A type safe language encourages you to be clear about the types of values your code can work with. If part of your code expects a String, you can’t pass it an Int by mistake.</p>

<p>
  Because Swift is type safe, it performs <emphasis>type checks</emphasis> when compiling your code and flags any mismatched types as errors. This enables you to catch and fix errors as early as possible in the development process.</p>

<p>
  Type-checking helps you avoid errors when you’re working with different types of values. However, this doesn’t mean that you have to specify the type of every constant and variable that you declare. If you don’t specify the type of value you need, Swift uses <emphasis>type inference</emphasis> to work out the appropriate type. Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.</p>

<p>
  Because of type inference, Swift requires far fewer type declarations than languages such as C or Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying their type is done for you.</p>

<p>
  Type inference is particularly useful when you declare a constant or variable with an initial value. This is often done by assigning a <emphasis>literal value</emphasis> (or <emphasis>literal</emphasis>) to the constant or variable at the point that you declare it. (A literal value is a value that appears directly in your source code, such as 42 and 3.14159 in the examples below.)</p>

<p>
  For example, if you assign a literal value of 42 to a new constant without saying what type it is, Swift infers that you want the constant to be an Int, because you have initialized it with a number that looks like an integer:</p>

<p>let meaningOfLife = 42</p>

<p>// meaningOfLife is inferred to be of type Int</p>

<p>
  Likewise, if you don’t specify a type for a floating-point literal, Swift infers that you want to create a Double:</p>

<p>let pi = 3.14159</p>

<p>// pi is inferred to be of type Double</p>

<p>
  Swift always chooses Double (rather than Float) when inferring the type of floating-point numbers.</p>

<p>
  If you combine integer and floating-point literals in an expression, a type of Double will be inferred from the context:</p>

<p>let anotherPi = 3 + 0.14159</p>

<p>// anotherPi is also inferred to be of type Double</p>

<p>
  The literal value of 3 has no explicit type in and of itself, and so an appropriate output type of Double is inferred from the presence of a floating-point literal as part of the addition.




Numeric Literals</p>

<p>
  Integer literals can be written as:</p>

<p>
  A <emphasis>decimal</emphasis> number, with no prefix</p>

<p>
  A <emphasis>binary</emphasis> number, with a 0b prefix</p>

<p>
  An <emphasis>octal</emphasis> number, with a 0o prefix</p>

<p>
  A <emphasis>hexadecimal</emphasis> number, with a 0x prefix</p>

<p>
  All of these integer literals have a decimal value of 17:</p>

<p>let decimalInteger = 17</p>

<p>let binaryInteger = 0b10001 // 17 in binary notation</p>

<p>let octalInteger = 0o21 // 17 in octal notation</p>

<p>let hexadecimalInteger = 0x11 // 17 in hexadecimal notation</p>

<p>
  Floating-point literals can be decimal (with no prefix), or hexadecimal (with a 0x prefix). They must always have a number (or hexadecimal number) on both sides of the decimal point. They can also have an optional <emphasis>exponent</emphasis>, indicated by an uppercase or lowercase e for decimal floats, or an uppercase or lowercase p for hexadecimal floats.</p>

<p>
  For decimal numbers with an exponent of exp, the base number is multiplied by 10<sup>exp</sup>:</p>

<p>
1.25e2 means 1.25 × 10<sup>2</sup>, or 125.0.</p>

<p>
1.25e-2 means 1.25 × 10<sup>-2</sup>, or 0.0125.</p>

<p>
  For hexadecimal numbers with an exponent of exp, the base number is multiplied by 2<sup>exp</sup>:</p>

<p>
0xFp2 means 15 × 2<sup>2</sup>, or 60.0.</p>

<p>
0xFp-2 means 15 × 2<sup>-2</sup>, or 3.75.</p>

<p>
  All of these floating-point literals have a decimal value of 12.1875:</p>

<p>let decimalDouble = 12.1875</p>

<p>let exponentDouble = 1.21875e1</p>

<p>let hexadecimalDouble = 0xC.3p0</p>

<p>
  Numeric literals can contain extra formatting to make them easier to read. Both integers and floats can be padded with extra zeroes and can contain underscores to help with readability. Neither type of formatting affects the underlying value of the literal:</p>

<p>let paddedDouble = 000123.456</p>

<p>let oneMillion = 1_000_000</p>

<p>let justOverOneMillion = 1_000_000.000_000_1






Numeric Type Conversion</p>

<p>
  Use the Int type for all general-purpose integer constants and variables in your code, even if they are known to be non-negative. Using the default integer type in everyday situations means that integer constants and variables are immediately interoperable in your code and will match the inferred type for integer literal values.</p>

<p>
  Use other integer types only when they are are specifically needed for the task at hand, because of explicitly-sized data from an external source, or for performance, memory usage, or other necessary optimization. Using explicitly-sized types in these situations helps to catch any accidental value overflows and implicitly documents the nature of the data being used.



Integer Conversion</p>

<p>
  The range of numbers that can be stored in an integer constant or variable is different for each numeric type. An Int8 constant or variable can store numbers between -128 and 127, whereas a UInt8 constant or variable can store numbers between 0 and 255. A number that will not fit into a constant or variable of a sized integer type is reported as an error when your code is compiled:</p>

<p>let cannotBeNegative: UInt8 = -1</p>

<p>// UInt8 cannot store negative numbers, and so this will report an error</p>

<p>let tooBig: Int8 = Int8.max + 1</p>

<p>// Int8 cannot store a number larger than its maximum value,</p>

<p>// and so this will also report an error</p>

<p>
  Because each numeric type can store a different range of values, you must opt in to numeric type conversion on a case-by-case basis. This opt-in approach prevents hidden conversion errors and helps make type conversion intentions explicit in your code.</p>

<p>
  To convert one specific number type to another, you initialize a new number of the desired type with the existing value. In the example below, the constant twoThousand is of type UInt16, whereas the constant one is of type UInt8. They cannot be added together directly, because they are not of the same type. Instead, this example calls UInt16(one) to create a new UInt16 initialized with the value of one, and uses this value in place of the original:</p>

<p>let twoThousand: UInt16 = 2_000</p>

<p>let one: UInt8 = 1</p>

<p>let twoThousandAndOne = twoThousand + UInt16(one)</p>

<p>
  Because both sides of the addition are now of type UInt16, the addition is allowed. The output constant (twoThousandAndOne) is inferred to be of type UInt16, because it is the sum of two UInt16 values.</p>

<p>
SomeType(ofInitialValue) is the default way to call the initializer of a Swift type and pass in an initial value. Behind the scenes, UInt16 has an initializer that accepts a UInt8 value, and so this initializer is used to make a new UInt16 from an existing UInt8. You can’t pass in <emphasis>any</emphasis> type here, however—it has to be a type for which UInt16 provides an initializer. Extending existing types to provide initializers that accept new types (including your own type definitions) is covered in Extensions.




Integer and Floating-Point Conversion</p>

<p>
  Conversions between integer and floating-point numeric types must be made explicit:</p>

<p>let three = 3</p>

<p>let pointOneFourOneFiveNine = 0.14159</p>

<p>let pi = Double(three) + pointOneFourOneFiveNine</p>

<p>// pi equals 3.14159, and is inferred to be of type Double</p>

<p>
  Here, the value of the constant three is used to create a new value of type Double, so that both sides of the addition are of the same type. Without this conversion in place, the addition would not be allowed.</p>

<p>
  The reverse is also true for floating-point to integer conversion, in that an integer type can be initialized with a Double or Float value:</p>

<p>let integerPi = Int(pi)</p>

<p>// integerPi equals 3, and is inferred to be of type Int</p>

<p>
  Floating-point values are always truncated when used to initialize a new integer value in this way. This means that 4.75 becomes 4, and -3.9 becomes -3.</p><empty-line /><p>Note</p>

<p>The rules for combining numeric constants and variables are different from the rules for numeric literals. The literal value 3 can be added directly to the literal value 0.14159, because number literals do not have an explicit type in and of themselves. Their type is inferred only at the point that they are evaluated by the compiler.
      






Type Aliases</p>

<p>
<emphasis>Type aliases</emphasis> define an alternative name for an existing type. You define type aliases with the typealias keyword.</p>

<p>
  Type aliases are useful when you want to refer to an existing type by a name that is contextually more appropriate, such as when working with data of a specific size from an external source:</p>

<p>typealias AudioSample = UInt16</p>

<p>
  Once you define a type alias, you can use the alias anywhere you might use the original name:</p>

<p>var maxAmplitudeFound = AudioSample.min</p>

<p>// maxAmplitudeFound is now 0</p>

<p>
  Here, AudioSample is defined as an alias for UInt16. Because it is an alias, the call to AudioSample.min actually calls UInt16.min, which provides an initial value of 0 for the maxAmplitudeFound variable.




Booleans</p>

<p>
  Swift has a basic <emphasis>Boolean</emphasis> type, called Bool. Boolean values are referred to as <emphasis>logical</emphasis>, because they can only ever be true or false. Swift provides two Boolean constant values, true and false:</p>

<p>let orangesAreOrange = true</p>

<p>let turnipsAreDelicious = false</p>

<p>
  The types of orangesAreOrange and turnipsAreDelicious have been inferred as Bool from the fact that they were initialized with Boolean literal values. As with Int and Double above, you don’t need to declare constants or variables as Bool if you set them to true or false as soon as you create them. Type inference helps make Swift code more concise and readable when it initializes constants or variables with other values whose type is already known.</p>

<p>
  Boolean values are particularly useful when you work with conditional statements such as the if statement:</p>

<p>if turnipsAreDelicious {</p>

<p> println("Mmm, tasty turnips!")</p>

<p>} else {</p>

<p> println("Eww, turnips are horrible.")</p>

<p>}</p>

<p>// prints "Eww, turnips are horrible."</p>

<p>
  Conditional statements such as the if statement are covered in more detail in Control Flow.</p>

<p>
  Swift’s type safety prevents non-Boolean values from being be substituted for Bool. The following example reports a compile-time error:</p>

<p>let i = 1</p>

<p>if i {</p>

<p> // this example will not compile, and will report an error</p>

<p>}</p>

<p>
  However, the alternative example below is valid:</p>

<p>let i = 1</p>

<p>if i == 1 {</p>

<p> // this example will compile successfully</p>

<p>}</p>

<p>
  The result of the i == 1 comparison is of type Bool, and so this second example passes the type-check. Comparisons like i == 1 are discussed in Basic Operators.</p>

<p>
  As with other examples of type safety in Swift, this approach avoids accidental errors and ensures that the intention of a particular section of code is always clear.




Tuples</p>

<p>
<emphasis>Tuples</emphasis> group multiple values into a single compound value. The values within a tuple can be of any type and do not have to be of the same type as each other.</p>

<p>
  In this example, (404, "Not Found") is a tuple that describes an <emphasis>HTTP status code</emphasis>. An HTTP status code is a special value returned by a web server whenever you request a web page. A status code of 404 Not Found is returned if you request a webpage that doesn’t exist.</p>

<p>let http404Error = (404, "Not Found")</p>

<p>// http404Error is of type (Int, String), and equals (404, "Not Found")</p>

<p>
  The (404, "Not Found") tuple groups together an Int and a String to give the HTTP status code two separate values: a number and a human-readable description. It can be described as “a tuple of type (Int, String)”.</p>

<p>
  You can create tuples from any permutation of types, and they can contain as many different types as you like. There’s nothing stopping you from having a tuple of type (Int, Int, Int), or (String, Bool), or indeed any other permutation you require.</p>

<p>
  You can <emphasis>decompose</emphasis> a tuple’s contents into separate constants or variables, which you then access as usual:</p>

<p>let (statusCode, statusMessage) = http404Error</p>

<p>println("The status code is \(statusCode)")</p>

<p>// prints "The status code is 404"</p>

<p>println("The status message is \(statusMessage)")</p>

<p>// prints "The status message is Not Found"</p>

<p>
  If you only need some of the tuple’s values, ignore parts of the tuple with an underscore (_) when you decompose the tuple:</p>

<p>let (justTheStatusCode, _) = http404Error</p>

<p>println("The status code is \(justTheStatusCode)")</p>

<p>// prints "The status code is 404"</p>

<p>
  Alternatively, access the individual element values in a tuple using index numbers starting at zero:</p>

<p>println("The status code is \(http404Error.0)")</p>

<p>// prints "The status code is 404"</p>

<p>println("The status message is \(http404Error.1)")</p>

<p>// prints "The status message is Not Found"</p>

<p>
  You can name the individual elements in a tuple when the tuple is defined:</p>

<p>let http200Status = (statusCode: 200, description: "OK")</p>

<p>
  If you name the elements in a tuple, you can use the element names to access the values of those elements:</p>

<p>println("The status code is \(http200Status.statusCode)")</p>

<p>// prints "The status code is 200"</p>

<p>println("The status message is \(http200Status.description)")</p>

<p>// prints "The status message is OK"</p>

<p>
  Tuples are particularly useful as the return values of functions. A function that tries to retrieve a web page might return the (Int, String) tuple type to describe the success or failure of the page retrieval. By returning a tuple with two distinct values, each of a different type, the function provides more useful information about its outcome than if it could only return a single value of a single type. For more information, see Functions with Multiple Return Values.</p><empty-line /><p>Note</p>

<p>Tuples are useful for temporary groups of related values. They are not suited to the creation of complex data structures. If your data structure is likely to persist beyond a temporary scope, model it as a class or structure, rather than as a tuple. For more information, see Classes and Structures.
      





Optionals</p>

<p>
  You use <emphasis>optionals</emphasis> in situations where a value may be absent. An optional says:</p>

<p>
  There <emphasis>is</emphasis> a value, and it equals <emphasis>x</emphasis></p>

<p>
<emphasis>or</emphasis></p>

<p>
  There <emphasis>isn’t</emphasis> a value at all</p><empty-line /><p>Note</p>

<p>The concept of optionals doesn’t exist in C or Objective-C. The nearest thing in Objective-C is the ability to return nil from a method that would otherwise return an object, with nil meaning “the absence of a valid object.” However, this only works for objects—it doesn’t work for structs, basic C types, or enumeration values. For these types, Objective-C methods typically return a special value (such as NSNotFound) to indicate the absence of a value. This approach assumes that the method’s caller knows there is a special value to test against and remembers to check for it. Swift’s optionals let you indicate the absence of a value for <emphasis>any type at all</emphasis>, without the need for special constants.</p>

<p>
  Here’s an example. Swift’s String type has a method called toInt, which tries to convert a String value into an Int value. However, not every string can be converted into an integer. The string "123" can be converted into the numeric value 123, but the string "hello, world" does not have an obvious numeric value to convert to.</p>

<p>
  The example below uses the toInt method to try to convert a String into an Int:</p>

<p>let possibleNumber = "123"</p>

<p>let convertedNumber = possibleNumber.toInt()</p>

<p>// convertedNumber is inferred to be of type "Int?", or "optional Int"</p>

<p>
  Because the toInt method might fail, it returns an <emphasis>optional</emphasis> Int, rather than an Int. An optional Int is written as Int?, not Int. The question mark indicates that the value it contains is optional, meaning that it might contain <emphasis>some</emphasis> Int value, or it might contain <emphasis>no value at all</emphasis>. (It can’t contain anything else, such as a Bool value or a String value. It’s either an Int, or it’s nothing at all.)



If Statements and Forced Unwrapping</p>

<p>
  You can use an if statement to find out whether an optional contains a value. If an optional does have a value, it evaluates to true; if it has no value at all, it evaluates to false.</p>

<p>
  Once you’re sure that the optional <emphasis>does</emphasis> contain a value, you can access its underlying value by adding an exclamation mark (!) to the end of the optional’s name. The exclamation mark effectively says, “I know that this optional definitely has a value; please use it.” This is known as <emphasis>forced unwrapping</emphasis> of the optional’s value:</p>

<p>if convertedNumber {</p>

<p> println("\(possibleNumber) has an integer value of \(convertedNumber!)")</p>

<p>} else {</p>

<p> println("\(possibleNumber) could not be converted to an integer")</p>

<p>}</p>

<p>// prints "123 has an integer value of 123"</p>

<p>
  For more on the if statement, see Control Flow.</p><empty-line /><p>Note</p>

<p>Trying to use ! to access a non-existent optional value triggers a runtime error. Always make sure that an optional contains a non-nil value before using ! to force-unwrap its value.
      





Optional Binding</p>

<p>
  You use <emphasis>optional binding</emphasis> to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. Optional binding can be used with if and while statements to check for a value inside an optional, and to extract that value into a constant or variable, as part of a single action. if and while statements are described in more detail in Control Flow.</p>

<p>
  Write optional bindings for the if statement as follows:</p>

<p>if let <emphasis>constantName</emphasis> = <emphasis>someOptional</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  You can rewrite the possibleNumber example from above to use optional binding rather than forced unwrapping:</p>

<p>if let actualNumber = possibleNumber.toInt() {</p>

<p> println("\(possibleNumber) has an integer value of \(actualNumber)")</p>

<p>} else {</p>

<p> println("\(possibleNumber) could not be converted to an integer")</p>

<p>}</p>

<p>// prints "123 has an integer value of 123"</p>

<p>
  This can be read as:</p>

<p>
  “If the optional Int returned by possibleNumber.toInt contains a value, set a new constant called actualNumber to the value contained in the optional.”</p>

<p>
  If the conversion is successful, the actualNumber constant becomes available for use within the first branch of the if statement. It has already been initialized with the value contained <emphasis>within</emphasis> the optional, and so there is no need to use the ! suffix to access its value. In this example, actualNumber is simply used to print the result of the conversion.</p>

<p>
  You can use both constants and variables with optional binding. If you wanted to manipulate the value of actualNumber within the first branch of the if statement, you could write if var actualNumber instead, and the value contained within the optional would be made available as a variable rather than a constant.




nil</p>

<p>
  You set an optional variable to a valueless state by assigning it the special value nil:</p>

<p>var serverResponseCode: Int? = 404</p>

<p>// serverResponseCode contains an actual Int value of 404</p>

<p>serverResponseCode = nil</p>

<p>// serverResponseCode now contains no value</p><empty-line /><p>Note</p>

<p>nil cannot be used with non-optional constants and variables. If a constant or variable in your code needs to be able to cope with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type.</p>

<p>
  If you define an optional constant or variable without providing a default value, the constant or variable is automatically set to nil for you:</p>

<p>var surveyAnswer: String?</p>

<p>// surveyAnswer is automatically set to nil</p><empty-line /><p>Note</p>

<p>Swift’s nil is not the same as nil in Objective-C. In Objective-C, nil is a pointer to a non-existent object. In Swift, nil is not a pointer—it is the absence of a value of a certain type. Optionals of <emphasis>any</emphasis> type can be set to nil, not just object types.
      





Implicitly Unwrapped Optionals</p>

<p>
  As described above, optionals indicate that a constant or variable is allowed to have “no value”. Optionals can be checked with an if statement to see if a value exists, and can be conditionally unwrapped with optional binding to access the optional’s value if it does exist.</p>

<p>
  Sometimes it is clear from a program’s structure that an optional will <emphasis>always</emphasis> have a value, after that value is first set. In these cases, it is useful to remove the need to check and unwrap the optional’s value every time it is accessed, because it can be safely assumed to have a value all of the time.</p>

<p>
  These kinds of optionals are defined as <emphasis>implicitly unwrapped optionals</emphasis>. You write an implicitly unwrapped optional by placing an exclamation mark (String!) rather than a question mark (String?) after the type that you want to make optional.</p>

<p>
  Implicitly unwrapped optionals are useful when an optional’s value is confirmed to exist immediately after the optional is first defined and can definitely be assumed to exist at every point thereafter. The primary use of implicitly unwrapped optionals in Swift is during class initialization, as described in Unowned References and Implicitly Unwrapped Optional Properties.</p>

<p>
  An implicitly unwrapped optional is a normal optional behind the scenes, but can also be used like a nonoptional value, without the need to unwrap the optional value each time it is accessed. The following example shows the difference in behavior between an optional String and an implicitly unwrapped optional String:</p>

<p>let possibleString: String? = "An optional string."</p>

<p>println(possibleString!) // requires an exclamation mark to access its value</p>

<p>// prints "An optional string."</p>

<p>let assumedString: String! = "An implicitly unwrapped optional string."</p>

<p>println(assumedString)  // no exclamation mark is needed to access its value</p>

<p>// prints "An implicitly unwrapped optional string."</p>

<p>
  You can think of an implicitly unwrapped optional as giving permission for the optional to be unwrapped automatically whenever it is used. Rather than placing an exclamation mark after the optional’s name each time you use it, you place an exclamation mark after the optional’s type when you declare it.</p><empty-line /><p>Note</p>

<p>If you try to access an implicitly unwrapped optional when it does not contain a value, you will trigger a runtime error. The result is exactly the same as if you place an exclamation mark after a normal optional that does not contain a value.</p>

<p>
  You can still treat an implicitly unwrapped optional like a normal optional, to check if it contains a value:</p>

<p>if assumedString {</p>

<p> println(assumedString)</p>

<p>}</p>

<p>// prints "An implicitly unwrapped optional string."</p>

<p>
  You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>

<p>if let definiteString = assumedString {</p>

<p> println(definiteString)</p>

<p>}</p>

<p>// prints "An implicitly unwrapped optional string."</p><empty-line /><p>Note</p>

<p>Implicitly unwrapped optionals should not be used when there is a possibility of a variable becoming nil at a later point. Always use a normal optional type if you need to check for a nil value during the lifetime of a variable.
      






Assertions</p>

<p>
  Optionals enable you to check for values that may or may not exist, and to write code that copes gracefully with the absence of a value. In some cases, however, it is simply not possible for your code to continue execution if a value does not exist, or if a provided value does not satisfy certain conditions. In these situations, you can trigger an <emphasis>assertion</emphasis> in your code to end code execution and to provide an opportunity to debug the cause of the absent or invalid value.



Debugging with Assertions</p>

<p>
  An assertion is a runtime check that a logical condition definitely evaluates to true. Literally put, an assertion “asserts” that a condition is true. You use an assertion to make sure that an essential condition is satisfied before executing any further code. If the condition evaluates to true, code execution continues as usual; if the condition evaluates to false, code execution ends, and your app is terminated.</p>

<p>
  If your code triggers an assertion while running in a debug environment, such as when you build and run an app in Xcode, you can see exactly where the invalid state occurred and query the state of your app at the time that the assertion was triggered. An assertion also lets you provide a suitable debug message as to the nature of the assert.</p>

<p>
  You write an assertion by calling the global assert function. You pass the assert function an expression that evaluates to true or false and a message that should be displayed if the result of the condition is false:</p>

<p>let age = -3</p>

<p>assert(age &gt;= 0, "A person's age cannot be less than zero")</p>

<p>// this causes the assertion to trigger, because age is not &gt;= 0</p>

<p>
  In this example, code execution will continue only if age &gt;= 0 evaluates to true, that is, if the value of age is non-negative. If the value of age <emphasis>is</emphasis> negative, as in the code above, then age &gt;= 0 evaluates to false, and the assertion is triggered, terminating the application.</p>

<p>
  Assertion messages cannot use string interpolation. The assertion message can be omitted if desired, as in the following example:</p>

<p>assert(age &gt;= 0)






When to Use Assertions</p>

<p>
  Use an assertion whenever a condition has the potential to be false, but must <emphasis>definitely</emphasis> be true in order for your code to continue execution. Suitable scenarios for an assertion check include:</p>

<p>
  An integer subscript index is passed to a custom subscript implementation, but the subscript index value could be too low or too high.</p>

<p>
  A value is passed to a function, but an invalid value means that the function cannot fulfill its task.</p>

<p>
  An optional value is currently nil, but a non-nil value is essential for subsequent code to execute successfully.</p>

<p>
  See also Subscripts and Functions.</p><empty-line /><p>Note</p>

<p>Assertions cause your app to terminate and are not a substitute for designing your code in such a way that invalid conditions are unlikely to arise. Nonetheless, in situations where invalid conditions are possible, an assertion is an effective way to ensure that such conditions are highlighted and noticed during development, before your app is published.</p>

<p>
Basic Operators</p>

<p>On This Page</p>

<p>

            Terminology</p>

<p>

            Assignment Operator</p>

<p>

            Arithmetic Operators</p>

<p>

            Compound Assignment Operators</p>

<p>

            Comparison Operators</p>

<p>

            Ternary Conditional Operator</p>

<p>

            Range Operators</p>

<p>

            Logical Operators</p>

<p>
  An <emphasis>operator</emphasis> is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (+) adds two numbers together (as in let i = 1 + 2). More complex examples include the logical AND operator &amp;&amp; (as in if enteredDoorCode &amp;&amp; passedRetinaScan) and the increment operator ++i, which is a shortcut to increase the value of i by 1.</p>

<p>
  Swift supports most standard C operators and improves several capabilities to eliminate common coding errors. The assignment operator (=) does not return a value, to prevent it from being mistakenly used when the equal to operator (==) is intended. Arithmetic operators (+, -, *, /, % and so forth) detect and disallow value overflow, to avoid unexpected results when working with numbers that become larger or smaller than the allowed value range of the type that stores them. You can opt in to value overflow behavior by using Swift’s overflow operators, as described in Overflow Operators.</p>

<p>
  Unlike C, Swift lets you perform remainder (%) calculations on floating-point numbers. Swift also provides two range operators (a..b and a...b) not found in C, as a shortcut for expressing a range of values.</p>

<p>
  This chapter describes the common operators in Swift. Advanced Operators covers Swift’s advanced operators, and describes how to define your own custom operators and implement the standard operators for your own custom types.




Terminology</p>

<p>
  Operators are unary, binary, or ternary:</p>

<p>
<emphasis>Unary</emphasis> operators operate on a single target (such as -a). Unary <emphasis>prefix</emphasis> operators appear immediately before their target (such as !b), and unary <emphasis>postfix</emphasis> operators appear immediately after their target (such as i++).</p>

<p>
<emphasis>Binary</emphasis> operators operate on two targets (such as 2 + 3) and are <emphasis>infix</emphasis> because they appear in between their two targets.</p>

<p>
<emphasis>Ternary</emphasis> operators operate on three targets. Like C, Swift has only one ternary operator, the ternary conditional operator (a ? b : c).</p>

<p>
  The values that operators affect are <emphasis>operands</emphasis>. In the expression 1 + 2, the + symbol is a binary operator and its two operands are the values 1 and 2.




Assignment Operator</p>

<p>
  The <emphasis>assignment operator</emphasis> (a = b) initializes or updates the value of a with the value of b:</p>

<p>let b = 10</p>

<p>var a = 5</p>

<p>a = b</p>

<p>// a is now equal to 10</p>

<p>
  If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once:</p>

<p>let (x, y) = (1, 2)</p>

<p>// x is equal to 1, and y is equal to 2</p>

<p>
  Unlike the assignment operator in C and Objective-C, the assignment operator in Swift does not itself return a value. The following statement is not valid:</p>

<p>if x = y {</p>

<p> // this is not valid, because x = y does not return a value</p>

<p>}</p>

<p>
  This feature prevents the assignment operator (=) from being used by accident when the equal to operator (==) is actually intended. By making if x = y invalid, Swift helps you to avoid these kinds of errors in your code.




Arithmetic Operators</p>

<p>
  Swift supports the four standard <emphasis>arithmetic operators</emphasis> for all number types:</p>

<p>
  Addition (+)</p>

<p>
  Subtraction (-)</p>

<p>
  Multiplication (*)</p>

<p>
  Division (/)</p>

<p>1 + 2 // equals 3</p>

<p>5 - 3 // equals 2</p>

<p>2 * 3 // equals 6</p>

<p>10.0 / 2.5 // equals 4.0</p>

<p>
  Unlike the arithmetic operators in C and Objective-C, the Swift arithmetic operators do not allow values to overflow by default. You can opt in to value overflow behavior by using Swift’s overflow operators (such as a &amp;+ b). See Overflow Operators.</p>

<p>
  The addition operator is also supported for String concatenation:</p>

<p>"hello, " + "world" // equals "hello, world"</p>

<p>
  Two Character values, or one Character value and one String value, can be added together to make a new String value:</p>

<p>let dog: Character = "🐶"</p>

<p>let cow: Character = "🐮"</p>

<p>let dogCow = dog + cow</p>

<p>// dogCow is equal to "🐶🐮"</p>

<p>
  See also Concatenating Strings and Characters.



Remainder Operator</p>

<p>
  The <emphasis>remainder operator</emphasis> (a % b) works out how many multiples of b will fit inside a and returns the value that is left over (known as the <emphasis>remainder</emphasis>).</p><empty-line /><p>Note</p>

<p>The remainder operator (%) is also known as a <emphasis>modulo operator</emphasis> in other languages. However, its behavior in Swift for negative numbers means that it is, strictly speaking, a remainder rather than a modulo operation.</p>

<p>
  Here’s how the remainder operator works. To calculate 9 % 4, you first work out how many 4s will fit inside 9:



<image xlink:href="#_0.jpg" /></p>

<p>
  You can fit two 4s inside 9, and the remainder is 1 (shown in orange).</p>

<p>
  In Swift, this would be written as:</p>

<p>9 % 4 // equals 1</p>

<p>
  To determine the answer for a % b, the % operator calculates the following equation and returns remainder as its output:</p>

<p>
a = (b × some multiplier) + remainder</p>

<p>
  where some multiplier is the largest number of multiples of b that will fit inside a.</p>

<p>
  Inserting 9 and 4 into this equation yields:</p>

<p>
9 = (4 × 2) + 1</p>

<p>
  The same method is applied when calculating the remainder for a negative value of a:</p>

<p>-9 % 4 // equals -1</p>

<p>
  Inserting -9 and 4 into the equation yields:</p>

<p>
-9 = (4 × -2) + -1</p>

<p>
  giving a remainder value of -1.</p>

<p>
  The sign of b is ignored for negative values of b. This means that a % b and a % -b always give the same answer.




Floating-Point Remainder Calculations</p>

<p>
  Unlike the remainder operator in C and Objective-C, Swift’s remainder operator can also operate on floating-point numbers:</p>

<p>8 % 2.5 // equals 0.5</p>

<p>
  In this example, 8 divided by 2.5 equals 3, with a remainder of 0.5, so the remainder operator returns a Double value of 0.5.



<image xlink:href="#_1.jpg" />




Increment and Decrement Operators</p>

<p>
  Like C, Swift provides an <emphasis>increment operator</emphasis> (++) and a <emphasis>decrement operator</emphasis> (--) as a shortcut to increase or decrease the value of a numeric variable by 1. You can use these operators with variables of any integer or floating-point type.</p>

<p>var i = 0</p>

<p>++i // i now equals 1</p>

<p>
  Each time you call ++i, the value of i is increased by 1. Essentially, ++i is shorthand for saying i = i + 1. Likewise, --i can be used as shorthand for i = i - 1.</p>

<p>
  The ++ and -- symbols can be used as prefix operators or as postfix operators. ++i and i++ are both valid ways to increase the value of i by 1. Similarly, --i and i-- are both valid ways to decrease the value of i by 1.</p>

<p>
  Note that these operators modify i and also return a value. If you only want to increment or decrement the value stored in i, you can ignore the returned value. However, if you <emphasis>do</emphasis> use the returned value, it will be different based on whether you used the prefix or postfix version of the operator, according to the following rules:</p>

<p>
  If the operator is written <emphasis>before</emphasis> the variable, it increments the variable <emphasis>before</emphasis> returning its value.</p>

<p>
  If the operator is written <emphasis>after</emphasis> the variable, it increments the variable <emphasis>after</emphasis> returning its value.</p>

<p>
  For example:</p>

<p>var a = 0</p>

<p>let b = ++a</p>

<p>// a and b are now both equal to 1</p>

<p>let c = a++</p>

<p>// a is now equal to 2, but c has been set to the pre-increment value of 1</p>

<p>
  In the example above, let b = ++a increments a <emphasis>before</emphasis> returning its value. This is why both a and b are equal to to the new value of 1.</p>

<p>
  However, let c = a++ increments a <emphasis>after</emphasis> returning its value. This means that c gets the old value of 1, and a is then updated to equal 2.</p>

<p>
  Unless you need the specific behavior of i++, it is recommended that you use ++i and --i in all cases, because they have the typical expected behavior of modifying i and returning the result.




Unary Minus Operator</p>

<p>
  The sign of a numeric value can be toggled using a prefixed -, known as the <emphasis>unary minus operator</emphasis>:</p>

<p>let three = 3</p>

<p>let minusThree = -three // minusThree equals -3</p>

<p>let plusThree = -minusThree // plusThree equals 3, or "minus minus three"</p>

<p>
  The unary minus operator (-) is prepended directly before the value it operates on, without any white space.




Unary Plus Operator</p>

<p>
  The <emphasis>unary plus operator</emphasis> (+) simply returns the value it operates on, without any change:</p>

<p>let minusSix = -6</p>

<p>let alsoMinusSix = +minusSix // alsoMinusSix equals -6</p>

<p>
  Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers.





Compound Assignment Operators</p>

<p>
  Like C, Swift provides <emphasis>compound assignment operators</emphasis> that combine assignment (=) with another operation. One example is the <emphasis>addition assignment operator</emphasis> (+=):</p>

<p>var a = 1</p>

<p>a += 2</p>

<p>// a is now equal to 3</p>

<p>
  The expression a += 2 is shorthand for a = a + 2. Effectively, the addition and the assignment are combined into one operator that performs both tasks at the same time.</p><empty-line /><p>Note</p>

<p>The compound assignment operators do not return a value. You cannot write let b = a += 2, for example. This behavior is different from the increment and decrement operators mentioned above.</p>

<p>
  A complete list of compound assignment operators can be found in Expressions.




Comparison Operators</p>

<p>
  Swift supports all standard C <emphasis>comparison operators</emphasis>:</p>

<p>
  Equal to (a == b)</p>

<p>
  Not equal to (a != b)</p>

<p>
  Greater than (a &gt; b)</p>

<p>
  Less than (a &lt; b)</p>

<p>
  Greater than or equal to (a &gt;= b)</p>

<p>
  Less than or equal to (a &lt;= b)</p><empty-line /><p>Note</p>

<p>Swift also provides two <emphasis>identity operators</emphasis> (=== and !==), which you use to test whether two object references both refer to the same object instance. For more information, see Classes and Structures.</p>

<p>
  Each of the comparison operators returns a Bool value to indicate whether or not the statement is true:</p>

<p>1 == 1 // true, because 1 is equal to 1</p>

<p>2 != 1 // true, because 2 is not equal to 1</p>

<p>2 &gt; 1 // true, because 2 is greater than 1</p>

<p>1 &lt; 2 // true, because 1 is less than 2</p>

<p>1 &gt;= 1 // true, because 1 is greater than or equal to 1</p>

<p>2 &lt;= 1 // false, because 2 is not less than or equal to 1</p>

<p>
  Comparison operators are often used in conditional statements, such as the if statement:</p>

<p>let name = "world"</p>

<p>if name == "world" {</p>

<p> println("hello, world")</p>

<p>} else {</p>

<p> println("I'm sorry \(name), but I don't recognize you")</p>

<p>}</p>

<p>// prints "hello, world", because name is indeed equal to "world"</p>

<p>
  For more on the if statement, see Control Flow.




Ternary Conditional Operator</p>

<p>
  The <emphasis>ternary conditional operator</emphasis> is a special operator with three parts, which takes the form question ? answer1 : answer2. It is a shortcut for evaluating one of two expressions based on whether question is true or false. If question is true, it evaluates answer1 and returns its value; otherwise, it evaluates answer2 and returns its value.</p>

<p>
  The ternary conditional operator is shorthand for the code below:</p>

<p>if question {</p>

<p> answer1</p>

<p>} else {</p>

<p> answer2</p>

<p>}</p>

<p>
  Here’s an example, which calculates the pixel height for a table row. The row height should be 50 pixels taller than the content height if the row has a header, and 20 pixels taller if the row doesn’t have a header:</p>

<p>let contentHeight = 40</p>

<p>let hasHeader = true</p>

<p>let rowHeight = contentHeight + (hasHeader ? 50 : 20)</p>

<p>// rowHeight is equal to 90</p>

<p>
  The preceding example is shorthand for the code below:</p>

<p>let contentHeight = 40</p>

<p>let hasHeader = true</p>

<p>var rowHeight = contentHeight</p>

<p>if hasHeader {</p>

<p> rowHeight = rowHeight + 50</p>

<p>} else {</p>

<p> rowHeight = rowHeight + 20</p>

<p>}</p>

<p>// rowHeight is equal to 90</p>

<p>
  The first example’s use of the ternary conditional operator means that rowHeight can be set to the correct value on a single line of code. This is more concise than the second example, and removes the need for rowHeight to be a variable, because its value does not need to be modified within an if statement.</p>

<p>
  The ternary conditional operator provides an efficient shorthand for deciding which of two expressions to consider. Use the ternary conditional operator with care, however. Its conciseness can lead to hard-to-read code if overused. Avoid combining multiple instances of the ternary conditional operator into one compound statement.




Range Operators</p>

<p>
  Swift includes two <emphasis>range operators</emphasis>, which are shortcuts for expressing a range of values.



Closed Range Operator</p>

<p>
  The <emphasis>closed range operator</emphasis> (a...b) defines a range that runs from a to b, and includes the values a and b.</p>

<p>
  The closed range operator is useful when iterating over a range in which you want all of the values to be used, such as with a for-in loop:</p>

<p>for index in 1...5 {</p>

<p> println("\(index) times 5 is \(index * 5)")</p>

<p>}</p>

<p>// 1 times 5 is 5</p>

<p>// 2 times 5 is 10</p>

<p>// 3 times 5 is 15</p>

<p>// 4 times 5 is 20</p>

<p>// 5 times 5 is 25</p>

<p>
  For more on for-in loops, see Control Flow.




Half-Closed Range Operator</p>

<p>
  The <emphasis>half-closed range operator</emphasis> (a..b) defines a range that runs from a to b, but does not include b. It is said to be <emphasis>half-closed</emphasis> because it contains its first value, but not its final value.</p>

<p>
  Half-closed ranges are particularly useful when you work with zero-based lists such as arrays, where it is useful to count up to (but not including) the length of the list:</p>

<p>let names = ["Anna", "Alex", "Brian", "Jack"]</p>

<p>let count = names.count</p>

<p>for i in 0..count {</p>

<p> println("Person \(i + 1) is called \(names[i])")</p>

<p>}</p>

<p>// Person 1 is called Anna</p>

<p>// Person 2 is called Alex</p>

<p>// Person 3 is called Brian</p>

<p>// Person 4 is called Jack</p>

<p>
  Note that the array contains four items, but 0..count only counts as far as 3 (the index of the last item in the array), because it is a half-closed range. For more on arrays, see Arrays.





Logical Operators</p>

<p>
<emphasis>Logical operators</emphasis> modify or combine the Boolean logic values true and false. Swift supports the three standard logical operators found in C-based languages:</p>

<p>
  Logical NOT (!a)</p>

<p>
  Logical AND (a &amp;&amp; b)</p>

<p>
  Logical OR (a || b)





Logical NOT Operator</p>

<p>
  The <emphasis>logical NOT operator</emphasis> (!a) inverts a Boolean value so that true becomes false, and false becomes true.</p>

<p>
  The logical NOT operator is a prefix operator, and appears immediately before the value it operates on, without any white space. It can be read as “not a”, as seen in the following example:</p>

<p>let allowedEntry = false</p>

<p>if !allowedEntry {</p>

<p> println("ACCESS DENIED")</p>

<p>}</p>

<p>// prints "ACCESS DENIED"</p>

<p>
  The phrase if !allowedEntry can be read as “if not allowed entry.” The subsequent line is only executed if “not allowed entry” is true; that is, if allowedEntry is false.</p>

<p>
  As in this example, careful choice of Boolean constant and variable names can help to keep code readable and concise, while avoiding double negatives or confusing logic statements.




Logical AND Operator</p>

<p>
  The <emphasis>logical AND operator</emphasis> (a &amp;&amp; b) creates logical expressions where both values must be true for the overall expression to also be true.</p>

<p>
  If either value is false, the overall expression will also be false. In fact, if the <emphasis>first</emphasis> value is false, the second value won’t even be evaluated, because it can’t possibly make the overall expression equate to true. This is known as <emphasis>short-circuit evaluation</emphasis>.</p>

<p>
  This example considers two Bool values and only allows access if both values are true:</p>

<p>let enteredDoorCode = true</p>

<p>let passedRetinaScan = false</p>

<p>if enteredDoorCode &amp;&amp; passedRetinaScan {</p>

<p> println("Welcome!")</p>

<p>} else {</p>

<p> println("ACCESS DENIED")</p>

<p>}</p>

<p>// prints "ACCESS DENIED"






Logical OR Operator</p>

<p>
  The <emphasis>logical OR operator</emphasis> (a || b) is an infix operator made from two adjacent pipe characters. You use it to create logical expressions in which only <emphasis>one</emphasis> of the two values has to be true for the overall expression to be true.</p>

<p>
  Like the Logical AND operator above, the Logical OR operator uses short-circuit evaluation to consider its expressions. If the left side of a Logical OR expression is true, the right side is not evaluated, because it cannot change the outcome of the overall expression.</p>

<p>
  In the example below, the first Bool value (hasDoorKey) is false, but the second value (knowsOverridePassword) is true. Because one value is true, the overall expression also evaluates to true, and access is allowed:</p>

<p>let hasDoorKey = false</p>

<p>let knowsOverridePassword = true</p>

<p>if hasDoorKey || knowsOverridePassword {</p>

<p> println("Welcome!")</p>

<p>} else {</p>

<p> println("ACCESS DENIED")</p>

<p>}</p>

<p>// prints "Welcome!"






Combining Logical Operators</p>

<p>
  You can combine multiple logical operators to create longer compound expressions:</p>

<p>if enteredDoorCode &amp;&amp; passedRetinaScan || hasDoorKey || knowsOverridePassword {</p>

<p> println("Welcome!")</p>

<p>} else {</p>

<p> println("ACCESS DENIED")</p>

<p>}</p>

<p>// prints "Welcome!"</p>

<p>
  This example uses multiple &amp;&amp; and || operators to create a longer compound expression. However, the &amp;&amp; and || operators still operate on only two values, so this is actually three smaller expressions chained together. It can be read as:</p>

<p>
  If we’ve entered the correct door code and passed the retina scan; or if we have a valid door key; or if we know the emergency override password, then allow access.</p>

<p>
  Based on the values of enteredDoorCode, passedRetinaScan, and hasDoorKey, the first two mini-expressions are false. However, the emergency override password is known, so the overall compound expression still evaluates to true.




Explicit Parentheses</p>

<p>
  It is sometimes useful to include parentheses when they are not strictly needed, to make the intention of a complex expression easier to read. In the door access example above, it is useful to add parentheses around the first part of the compound expression to make its intent explicit:</p>

<p>if (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword {</p>

<p> println("Welcome!")</p>

<p>} else {</p>

<p> println("ACCESS DENIED")</p>

<p>}</p>

<p>// prints "Welcome!"</p>

<p>
  The parentheses make it clear that the first two values are considered as part of a separate possible state in the overall logic. The output of the compound expression doesn’t change, but the overall intention is clearer to the reader. Readability is always preferred over brevity; use parentheses where they help to make your intentions clear.</p>

<p>
Strings and Characters</p>

<p>On This Page</p>

<p>

            String Literals</p>

<p>

            Initializing an Empty String</p>

<p>

            String Mutability</p>

<p>

            Strings Are Value Types</p>

<p>

            Working with Characters</p>

<p>

            Counting Characters</p>

<p>

            Concatenating Strings and Characters</p>

<p>

            String Interpolation</p>

<p>

            Comparing Strings</p>

<p>

            Uppercase and Lowercase Strings</p>

<p>

            Unicode</p>

<p>
  A <emphasis>string</emphasis> is an ordered collection of characters, such as "hello, world" or "albatross". Swift strings are represented by the String type, which in turn represents a collection of values of Character type.</p>

<p>
  Swift’s String and Character types provide a fast, Unicode-compliant way to work with text in your code. The syntax for string creation and manipulation is lightweight and readable, with a similar syntax to C strings. String concatenation is as simple as adding together two strings with the + operator, and string mutability is managed by choosing between a constant or a variable, just like any other value in Swift.</p>

<p>
  Despite this simplicity of syntax, Swift’s String type is a fast, modern string implementation. Every string is composed of encoding-independent Unicode characters, and provides support for accessing those characters in various Unicode representations.</p>

<p>
  Strings can also be used to insert constants, variables, literals, and expressions into longer strings, in a process known as string interpolation. This makes it easy to create custom string values for display, storage, and printing.</p><empty-line /><p>Note</p>

<p>Swift’s String type is bridged seamlessly to Foundation’s NSString class. If you are working with the Foundation framework in Cocoa or Cocoa Touch, the entire NSString API is available to call on any String value you create, in addition to the String features described in this chapter. You can also use a String value with any API that requires an NSString instance.</p>

<p>
  For more information about using String with Foundation and Cocoa, see <emphasis>Using Swift with Cocoa and Objective-C</emphasis>.






String Literals</p>

<p>
  You can include predefined String values within your code as <emphasis>string literals</emphasis>. A string literal is a fixed sequence of textual characters surrounded by a pair of double quotes ("").</p>

<p>
  A string literal can be used to provide an initial value for a constant or variable:</p>

<p>let someString = "Some string literal value"</p>

<p>
  Note that Swift infers a type of String for the someString constant, because it is initialized with a string literal value.</p>

<p>
  String literals can include the following special characters:</p>

<p>
  The escaped special characters \0 (null character), \\ (backslash), \t (horizontal tab), \n (line feed), \r (carriage return), \" (double quote) and \' (single quote)</p>

<p>
  Single-byte Unicode scalars, written as \xnn, where nn is two hexadecimal digits</p>

<p>
  Two-byte Unicode scalars, written as \unnnn, where nnnn is four hexadecimal digits</p>

<p>
  Four-byte Unicode scalars, written as \Unnnnnnnn, where nnnnnnnn is eight hexadecimal digits</p>

<p>
  The code below shows an example of each kind of special character. The wiseWords constant contains two escaped double quote characters. The dollarSign, blackHeart, and sparklingHeart constants demonstrate the three different Unicode scalar character formats:</p>

<p>let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"</p>

<p>// "Imagination is more important than knowledge" - Einstein</p>

<p>let dollarSign = "\x24" // $,  Unicode scalar U+0024</p>

<p>let blackHeart = "\u2665" // ♥,  Unicode scalar U+2665</p>

<p>let sparklingHeart = "\U0001F496" // 💖, Unicode scalar U+1F496






Initializing an Empty String</p>

<p>
  To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable, or initialize a new String instance with initializer syntax:</p>

<p>var emptyString = "" // empty string literal</p>

<p>var anotherEmptyString = String()  // initializer syntax</p>

<p>// these two strings are both empty, and are equivalent to each other</p>

<p>
  You can find out whether a String value is empty by checking its Boolean isEmpty property:</p>

<p>if emptyString.isEmpty {</p>

<p> println("Nothing to see here")</p>

<p>}</p>

<p>// prints "Nothing to see here"






String Mutability</p>

<p>
  You indicate whether a particular String can be modified (or <emphasis>mutated</emphasis>) by assigning it to a variable (in which case it can be modified), or to a constant (in which case it cannot be modified):</p>

<p>var variableString = "Horse"</p>

<p>variableString += " and carriage"</p>

<p>// variableString is now "Horse and carriage"</p>

<p>let constantString = "Highlander"</p>

<p>constantString += " and another Highlander"</p>

<p>// this reports a compile-time error - a constant string cannot be modified</p><empty-line /><p>Note</p>

<p>This approach is different from string mutation in Objective-C and Cocoa, where you choose between two classes (NSString and NSMutableString) to indicate whether a string can be mutated.
      





Strings Are Value Types</p>

<p>
  Swift’s String type is a <emphasis>value type</emphasis>. If you create a new String value, that String value is <emphasis>copied</emphasis> when it is passed to a function or method, or when it is assigned to a constant or variable. In each case, a new copy of the existing String value is created, and the new copy is passed or assigned, not the original version. Value types are described in Structures and Enumerations Are Value Types.</p><empty-line /><p>Note</p>

<p>This behavior differs from that of NSString in Cocoa. When you create an NSString instance in Cocoa, and pass it to a function or method or assign it to a variable, you are always passing or assigning a <emphasis>reference</emphasis> to the same single NSString. No copying of the string takes place, unless you specifically request it.</p>

<p>
  Swift’s copy-by-default String behavior ensures that when a function or method passes you a String value, it is clear that you own that exact String value, regardless of where it came from. You can be confident that the string you are passed will not be modified unless you modify it yourself.</p>

<p>
  Behind the scenes, Swift’s compiler optimizes string usage so that actual copying takes place only when absolutely necessary. This means you always get great performance when working with strings as value types.




Working with Characters</p>

<p>
  Swift’s String type represents a collection of Character values in a specified order. Each Character value represents a single Unicode character. You can access the individual Character values in a string by iterating over that string with a for-in loop:</p>

<p>for character in "Dog!🐶" {</p>

<p> println(character)</p>

<p>}</p>

<p>// D</p>

<p>// o</p>

<p>// g</p>

<p>// !</p>

<p>// 🐶</p>

<p>
  The for-in loop is described in For Loops.</p>

<p>
  Alternatively, create a stand-alone Character constant or variable from a single-character string literal by providing a Character type annotation:</p>

<p>let yenSign: Character = "¥"






Counting Characters</p>

<p>
  To retrieve a count of the characters in a string, call the global countElements function and pass in a string as the function’s sole parameter:</p>

<p>let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"</p>

<p>println("unusualMenagerie has \(countElements(unusualMenagerie)) characters")</p>

<p>// prints "unusualMenagerie has 40 characters"</p><empty-line /><p>Note</p>

<p>Different Unicode characters and different representations of the same Unicode character can require different amounts of memory to store. Because of this, characters in Swift do not each take up the same amount of memory within a string’s representation. As a result, the length of a string cannot be calculated without iterating through the string to consider each of its characters in turn. If you are working with particularly long string values, be aware that the countElements function must iterate over the characters within a string in order to calculate an accurate character count for that string.</p>

<p>
  Note also that the character count returned by countElements is not always the same as the length property of an NSString that contains the same characters. The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode characters within the string. To reflect this fact, the length property from NSString is called utf16count when it is accessed on a Swift String value.






Concatenating Strings and Characters</p>

<p>
String and Character values can be added together (or <emphasis>concatenated</emphasis>) with the addition operator (+) to create a new String value:</p>

<p>let string1 = "hello"</p>

<p>let string2 = " there"</p>

<p>let character1: Character = "!"</p>

<p>let character2: Character = "?"</p>

<p>let stringPlusCharacter = string1 + character1 // equals "hello!"</p>

<p>let stringPlusString = string1 + string2 // equals "hello there"</p>

<p>let characterPlusString = character1 + string1 // equals "!hello"</p>

<p>let characterPlusCharacter = character1 + character2 // equals "!?"</p>

<p>
  You can also append a String or Character value to an existing String variable with the addition assignment operator (+=):</p>

<p>var instruction = "look over"</p>

<p>instruction += string2</p>

<p>// instruction now equals "look over there"</p>

<p>var welcome = "good morning"</p>

<p>welcome += character1</p>

<p>// welcome now equals "good morning!"</p><empty-line /><p>Note</p>

<p>You can’t append a String or Character to an existing Character variable, because a Character value must contain a single character only.
      





String Interpolation</p>

<p>
<emphasis>String interpolation</emphasis> is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal. Each item that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash:</p>

<p>let multiplier = 3</p>

<p>let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"</p>

<p>// message is "3 times 2.5 is 7.5"</p>

<p>
  In the example above, the value of multiplier is inserted into a string literal as \(multiplier). This placeholder is replaced with the actual value of multiplier when the string interpolation is evaluated to create an actual string.</p>

<p>
  The value of multiplier is also part of a larger expression later in the string. This expression calculates the value of Double(multiplier) * 2.5 and inserts the result (7.5) into the string. In this case, the expression is written as \(Double(multiplier) * 2.5) when it is included inside the string literal.</p><empty-line /><p>Note</p>

<p>The expressions you write inside parentheses within an interpolated string cannot contain an unescaped double quote (") or backslash (\), and cannot contain a carriage return or line feed.
      





Comparing Strings</p>

<p>
  Swift provides three ways to compare String values: string equality, prefix equality, and suffix equality.



String Equality</p>

<p>
  Two String values are considered equal if they contain exactly the same characters in the same order:</p>

<p>let quotation = "We're a lot alike, you and I."</p>

<p>let sameQuotation = "We're a lot alike, you and I."</p>

<p>if quotation == sameQuotation {</p>

<p> println("These two strings are considered equal")</p>

<p>}</p>

<p>// prints "These two strings are considered equal"






Prefix and Suffix Equality</p>

<p>
  To check whether a string has a particular string prefix or suffix, call the string’s hasPrefix and hasSuffix methods, both of which take a single argument of type String and return a Boolean value. Both methods perform a character-by-character comparison between the base string and the prefix or suffix string.</p>

<p>
  The examples below consider an array of strings representing the scene locations from the first two acts of Shakespeare’s <emphasis>Romeo and Juliet</emphasis>:</p>

<p>let romeoAndJuliet = [</p>

<p> "Act 1 Scene 1: Verona, A public place",</p>

<p> "Act 1 Scene 2: Capulet's mansion",</p>

<p> "Act 1 Scene 3: A room in Capulet's mansion",</p>

<p> "Act 1 Scene 4: A street outside Capulet's mansion",</p>

<p> "Act 1 Scene 5: The Great Hall in Capulet's mansion",</p>

<p> "Act 2 Scene 1: Outside Capulet's mansion",</p>

<p> "Act 2 Scene 2: Capulet's orchard",</p>

<p> "Act 2 Scene 3: Outside Friar Lawrence's cell",</p>

<p> "Act 2 Scene 4: A street in Verona",</p>

<p> "Act 2 Scene 5: Capulet's mansion",</p>

<p> "Act 2 Scene 6: Friar Lawrence's cell"</p>

<p>]</p>

<p>
  You can use the hasPrefix method with the romeoAndJuliet array to count the number of scenes in Act 1 of the play:</p>

<p>var act1SceneCount = 0</p>

<p>for scene in romeoAndJuliet {</p>

<p> if scene.hasPrefix("Act 1 ") {</p>

<p>        ++act1SceneCount</p>

<p>    }</p>

<p>}</p>

<p>println("There are \(act1SceneCount) scenes in Act 1")</p>

<p>// prints "There are 5 scenes in Act 1"</p>

<p>
  Similarly, use the hasSuffix method to count the number of scenes that take place in or around Capulet’s mansion and Friar Lawrence’s cell:</p>

<p>var mansionCount = 0</p>

<p>var cellCount = 0</p>

<p>for scene in romeoAndJuliet {</p>

<p> if scene.hasSuffix("Capulet's mansion") {</p>

<p>        ++mansionCount</p>

<p>    } else if scene.hasSuffix("Friar Lawrence's cell") {</p>

<p>        ++cellCount</p>

<p>    }</p>

<p>}</p>

<p>println("\(mansionCount) mansion scenes; \(cellCount) cell scenes")</p>

<p>// prints "6 mansion scenes; 2 cell scenes"







Uppercase and Lowercase Strings</p>

<p>
  You can access an uppercase or lowercase version of a string with its uppercaseString and lowercaseString properties:</p>

<p>let normal = "Could you help me, please?"</p>

<p>let shouty = normal.uppercaseString</p>

<p>// shouty is equal to "COULD YOU HELP ME, PLEASE?"</p>

<p>let whispered = normal.lowercaseString</p>

<p>// whispered is equal to "could you help me, please?"






Unicode</p>

<p>
<emphasis>Unicode</emphasis> is an international standard for encoding and representing text. It enables you to represent almost any character from any language in a standardized form, and to read and write those characters to and from an external source such as a text file or web page.</p>

<p>
  Swift’s String and Character types are fully Unicode-compliant. They support a number of different Unicode encodings, as described below.



Unicode Terminology</p>

<p>
  Every character in Unicode can be represented by one or more <emphasis>unicode scalars</emphasis>. A unicode scalar is a unique 21-bit number (and name) for a character or modifier, such as U+0061 for LOWERCASE LATIN LETTER A ("a"), or U+1F425 for FRONT-FACING BABY CHICK ("🐥").</p>

<p>
  When a Unicode string is written to a text file or some other storage, these unicode scalars are encoded in one of several Unicode-defined formats. Each format encodes the string in small chunks known as <emphasis>code units</emphasis>. These include the UTF-8 format (which encodes a string as 8-bit code units) and the UTF-16 format (which encodes a string as 16-bit code units).




Unicode Representations of Strings</p>

<p>
  Swift provides several different ways to access Unicode representations of strings.</p>

<p>
  You can iterate over the string with a for-in statement, to access its individual Character values as Unicode characters. This process is described in Working with Characters.</p>

<p>
  Alternatively, access a String value in one of three other Unicode-compliant representations:</p>

<p>
  A collection of UTF-8 code units (accessed with the string’s utf8 property)</p>

<p>
  A collection of UTF-16 code units (accessed with the string’s utf16 property)</p>

<p>
  A collection of 21-bit Unicode scalar values (accessed with the string’s unicodeScalars property)</p>

<p>
  Each example below shows a different representation of the following string, which is made up of the characters D, o, g, !, and the 🐶 character (DOG FACE, or Unicode scalar U+1F436):</p>

<p>let dogString = "Dog!🐶"





UTF-8</p>

<p>
  You can access a UTF-8 representation of a String by iterating over its utf8 property. This property is of type UTF8View, which is a collection of unsigned 8-bit (UInt8) values, one for each byte in the string’s UTF-8 representation:</p>

<p>for codeUnit in dogString.utf8 {</p>

<p> print("\(codeUnit) ")</p>

<p>}</p>

<p>print("\n")</p>

<p>// 68 111 103 33 240 159 144 182</p>

<p>
  In the example above, the first four decimal codeUnit values (68, 111, 103, 33) represent the characters D, o, g, and !, whose UTF-8 representation is the same as their ASCII representation. The last four codeUnit values (240, 159, 144, 182) are a four-byte UTF-8 representation of the DOG FACE character.




UTF-16</p>

<p>
  You can access a UTF-16 representation of a String by iterating over its utf16 property. This property is of type UTF16View, which is a collection of unsigned 16-bit (UInt16) values, one for each 16-bit code unit in the string’s UTF-16 representation:</p>

<p>for codeUnit in dogString.utf16 {</p>

<p> print("\(codeUnit) ")</p>

<p>}</p>

<p>print("\n")</p>

<p>// 68 111 103 33 55357 56374</p>

<p>
  Again, the first four codeUnit values (68, 111, 103, 33) represent the characters D, o, g, and !, whose UTF-16 code units have the same values as in the string’s UTF-8 representation.</p>

<p>
  The fifth and sixth codeUnit values (55357 and 56374) are a UTF-16 surrogate pair representation of the DOG FACE character. These values are a lead surrogate value of U+D83D (decimal value 55357) and a trail surrogate value of U+DC36 (decimal value 56374).




Unicode Scalars</p>

<p>
  You can access a Unicode scalar representation of a String value by iterating over its unicodeScalars property. This property is of type UnicodeScalarView, which is a collection of values of type UnicodeScalar. A Unicode scalar is any 21-bit Unicode code point that is not a lead surrogate or trail surrogate code point.</p>

<p>
  Each UnicodeScalar has a value property that returns the scalar’s 21-bit value, represented within a UInt32 value:</p>

<p>for scalar in dogString.unicodeScalars {</p>

<p> print("\(scalar.value) ")</p>

<p>}</p>

<p>print("\n")</p>

<p>// 68 111 103 33 128054</p>

<p>
  The value properties for the first four UnicodeScalar values (68, 111, 103, 33) once again represent the characters D, o, g, and !. The value property of the fifth and final UnicodeScalar, 128054, is a decimal equivalent of the hexadecimal value 1F436, which is equivalent to the Unicode scalar U+1F436 for the DOG FACE character.</p>

<p>
  As an alternative to querying their value properties, each UnicodeScalar value can also be used to construct a new String value, such as with string interpolation:</p>

<p>for scalar in dogString.unicodeScalars {</p>

<p> println("\(scalar) ")</p>

<p>}</p>

<p>// D</p>

<p>// o</p>

<p>// g</p>

<p>// !</p>

<p>// 🐶</p>

<p>
Collection Types</p>

<p>On This Page</p>

<p>

            Arrays</p>

<p>

            Dictionaries</p>

<p>

            Mutability of Collections</p>

<p>
  Swift provides two <emphasis>collection types</emphasis>, known as arrays and dictionaries, for storing collections of values. Arrays store ordered lists of values of the same type. Dictionaries store unordered collections of values of the same type, which can be referenced and looked up through a unique identifier (also known as a key).</p>

<p>
  Arrays and dictionaries in Swift are always clear about the types of values and keys that they can store. This means that you cannot insert a value of the wrong type into an array or dictionary by mistake. It also means you can be confident about the types of values you will retrieve from an array or dictionary. Swift’s use of explicitly typed collections ensures that your code is always clear about the types of values it can work with and enables you to catch any type mismatches early in your code’s development.</p><empty-line /><p>Note</p>

<p>Swift’s Array type exhibits different behavior to other types when assigned to a constant or variable, or when passed to a function or method. For more information, see Assignment and Copy Behavior for Collection Types.
      





Arrays</p>

<p>
  An <emphasis>array</emphasis> stores multiple values of the same type in an ordered list. The same value can appear in an array multiple times at different positions.</p>

<p>
  Swift arrays are specific about the kinds of values they can store. They differ from Objective-C’s NSArray and NSMutableArray classes, which can store any kind of object and do not provide any information about the nature of the objects they return. In Swift, the type of values that a particular array can store is always made clear, either through an explicit type annotation, or through type inference, and does not have to be a class type. If you create an array of Int values, for example, you can’t insert any value other than Int values into that array. Swift arrays are type safe, and are always clear about what they may contain.



Array Type Shorthand Syntax</p>

<p>
  The type of a Swift array is written in full as Array&lt;SomeType&gt;, where SomeType is the type that the array is allowed to store. You can also write the type of an array in shorthand form as SomeType[]. Although the two forms are functionally identical, the shorthand form is preferred, and is used throughout this guide when referring to the type of an array.




Array Literals</p>

<p>
  You can initialize an array with an <emphasis>array literal</emphasis>, which is a shorthand way to write one or more values as an array collection. An array literal is written as a list of values, separated by commas, surrounded by a pair of square brackets:</p>

<p>[<emphasis>value 1</emphasis>, <emphasis>value 2</emphasis>, <emphasis>value 3</emphasis>]</p>

<p>
  The example below creates an array called shoppingList to store String values:</p>

<p>var shoppingList: String[] = ["Eggs", "Milk"]</p>

<p>// shoppingList has been initialized with two initial items</p>

<p>
  The shoppingList variable is declared as “an array of String values”, written as String[]. Because this particular array has specified a value type of String, it is <emphasis>only</emphasis> allowed to store String values. Here, the shoppingList array is initialized with two String values ("Eggs" and "Milk"), written within an array literal.</p><empty-line /><p>Note</p>

<p>The shoppingList array is declared as a variable (with the var introducer) and not a constant (with the let introducer) because more items are added to the shopping list in the examples below.</p>

<p>
  In this case, the array literal contains two String values and nothing else. This matches the type of the shoppingList variable’s declaration (an array that can only contain String values), and so the assignment of the array literal is permitted as a way to initialize shoppingList with two initial items.</p>

<p>
  Thanks to Swift’s type inference, you don’t have to write the type of the array if you’re initializing it with an array literal containing values of the same type. The initialization of shoppingList could have been written in a shorter form instead:</p>

<p>var shoppingList = ["Eggs", "Milk"]</p>

<p>
  Because all values in the array literal are of the same type, Swift can infer that String[] is the correct type to use for the shoppingList variable.




Accessing and Modifying an Array</p>

<p>
  You access and modify an array through its methods and properties, or by using subscript syntax.</p>

<p>
  To find out the number of items in an array, check its read-only count property:</p>

<p>println("The shopping list contains \(shoppingList.count) items.")</p>

<p>// prints "The shopping list contains 2 items."</p>

<p>
  Use the Boolean isEmpty property as a shortcut for checking whether the count property is equal to 0:</p>

<p>if shoppingList.isEmpty {</p>

<p> println("The shopping list is empty.")</p>

<p>} else {</p>

<p> println("The shopping list is not empty.")</p>

<p>}</p>

<p>// prints "The shopping list is not empty."</p>

<p>
  You can add a new item to the end of an array by calling the array’s append method:</p>

<p>shoppingList.append("Flour")</p>

<p>// shoppingList now contains 3 items, and someone is making pancakes</p>

<p>
  Alternatively, add a new item to the end of an array with the addition assignment operator (+=):</p>

<p>shoppingList += "Baking Powder"</p>

<p>// shoppingList now contains 4 items</p>

<p>
  You can also append an array of compatible items with the addition assignment operator (+=):</p>

<p>shoppingList += ["Chocolate Spread", "Cheese", "Butter"]</p>

<p>// shoppingList now contains 7 items</p>

<p>
  Retrieve a value from the array by using <emphasis>subscript syntax</emphasis>, passing the index of the value you want to retrieve within square brackets immediately after the name of the array:</p>

<p>var firstItem = shoppingList[0]</p>

<p>// firstItem is equal to "Eggs"</p>

<p>
  Note that the first item in the array has an index of 0, not 1. Arrays in Swift are always zero-indexed.</p>

<p>
  You can use subscript syntax to change an existing value at a given index:</p>

<p>shoppingList[0] = "Six eggs"</p>

<p>// the first item in the list is now equal to "Six eggs" rather than "Eggs"</p>

<p>
  You can also use subscript syntax to change a range of values at once, even if the replacement set of values has a different length than the range you are replacing. The following example replaces "Chocolate Spread", "Cheese", and "Butter" with "Bananas" and "Apples":</p>

<p>shoppingList[4...6] = ["Bananas", "Apples"]</p>

<p>// shoppingList now contains 6 items</p><empty-line /><p>Note</p>

<p>You can’t use subscript syntax to append a new item to the end of an array. If you try to use subscript syntax to retrieve or set a value for an index that is outside of an array’s existing bounds, you will trigger a runtime error. However, you can check that an index is valid before using it, by comparing it to the array’s count property. Except when count is 0 (meaning the array is empty), the largest valid index in an array will always be count - 1, because arrays are indexed from zero.</p>

<p>
  To insert an item into the array at a specified index, call the array’s insert(atIndex:) method:</p>

<p>shoppingList.insert("Maple Syrup", atIndex: 0)</p>

<p>// shoppingList now contains 7 items</p>

<p>// "Maple Syrup" is now the first item in the list</p>

<p>
  This call to the insert method inserts a new item with a value of "Maple Syrup" at the very beginning of the shopping list, indicated by an index of 0.</p>

<p>
  Similarly, you remove an item from the array with the removeAtIndex method. This method removes the item at the specified index and returns the removed item (although you can ignore the returned value if you do not need it):</p>

<p>let mapleSyrup = shoppingList.removeAtIndex(0)</p>

<p>// the item that was at index 0 has just been removed</p>

<p>// shoppingList now contains 6 items, and no Maple Syrup</p>

<p>// the mapleSyrup constant is now equal to the removed "Maple Syrup" string</p>

<p>
  Any gaps in an array are closed when an item is removed, and so the value at index 0 is once again equal to "Six eggs":</p>

<p>firstItem = shoppingList[0]</p>

<p>// firstItem is now equal to "Six eggs"</p>

<p>
  If you want to remove the final item from an array, use the removeLast method rather than the removeAtIndex method to avoid the need to query the array’s count property. Like the removeAtIndex method, removeLast returns the removed item:</p>

<p>let apples = shoppingList.removeLast()</p>

<p>// the last item in the array has just been removed</p>

<p>// shoppingList now contains 5 items, and no cheese</p>

<p>// the apples constant is now equal to the removed "Apples" string






Iterating Over an Array</p>

<p>
  You can iterate over the entire set of values in an array with the for-in loop:</p>

<p>for item in shoppingList {</p>

<p> println(item)</p>

<p>}</p>

<p>// Six eggs</p>

<p>// Milk</p>

<p>// Flour</p>

<p>// Baking Powder</p>

<p>// Bananas</p>

<p>
  If you need the integer index of each item as well as its value, use the global enumerate function to iterate over the array instead. The enumerate function returns a tuple for each item in the array composed of the index and the value for that item. You can decompose the tuple into temporary constants or variables as part of the iteration:</p>

<p>for (index, value) in enumerate(shoppingList) {</p>

<p> println("Item \(index + 1): \(value)")</p>

<p>}</p>

<p>// Item 1: Six eggs</p>

<p>// Item 2: Milk</p>

<p>// Item 3: Flour</p>

<p>// Item 4: Baking Powder</p>

<p>// Item 5: Bananas</p>

<p>
  For more about the for-in loop, see For Loops.




Creating and Initializing an Array</p>

<p>
  You can create an empty array of a certain type (without setting any initial values) using initializer syntax:</p>

<p>var someInts = Int[]()</p>

<p>println("someInts is of type Int[] with \(someInts.count) items.")</p>

<p>// prints "someInts is of type Int[] with 0 items."</p>

<p>
  Note that the type of the someInts variable is inferred to be Int[], because it is set to the output of an Int[] initializer.</p>

<p>
  Alternatively, if the context already provides type information, such as a function argument or an already-typed variable or constant, you can create an empty array with an empty array literal, which is written as [] (an empty pair of square brackets):</p>

<p>someInts.append(3)</p>

<p>// someInts now contains 1 value of type Int</p>

<p>someInts = []</p>

<p>// someInts is now an empty array, but is still of type Int[]</p>

<p>
  Swift’s Array type also provides an initializer for creating an array of a certain size with all of its values set to a provided default value. You pass this initializer the number of items to be added to the new array (called count) and a default value of the appropriate type (called repeatedValue):</p>

<p>var threeDoubles = Double[](count: 3, repeatedValue: 0.0)</p>

<p>// threeDoubles is of type Double[], and equals [0.0, 0.0, 0.0]</p>

<p>
  Thanks to type inference, you don’t need to specify the type to be stored in the array when using this initializer, because it can be inferred from the default value:</p>

<p>var anotherThreeDoubles = Array(count: 3, repeatedValue: 2.5)</p>

<p>// anotherThreeDoubles is inferred as Double[], and equals [2.5, 2.5, 2.5]</p>

<p>
  Finally, you can create a new array by adding together two existing arrays of compatible type with the addition operator (+). The new array’s type is inferred from the type of the two arrays you add together:</p>

<p>var sixDoubles = threeDoubles + anotherThreeDoubles</p>

<p>// sixDoubles is inferred as Double[], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]







Dictionaries</p>

<p>
  A <emphasis>dictionary</emphasis> is a container that stores multiple values of the same type. Each value is associated with a unique <emphasis>key</emphasis>, which acts as an identifier for that value within the dictionary. Unlike items in an array, items in a dictionary do not have a specified order. You use a dictionary when you need to look up values based on their identifier, in much the same way that a real-world dictionary is used to look up the definition for a particular word.</p>

<p>
  Swift dictionaries are specific about the types of keys and values they can store. They differ from Objective-C’s NSDictionary and NSMutableDictionary classes, which can use any kind of object as their keys and values and do not provide any information about the nature of these objects. In Swift, the type of keys and values that a particular dictionary can store is always made clear, either through an explicit type annotation or through type inference.</p>

<p>
  Swift’s dictionary type is written as Dictionary&lt;KeyType, ValueType&gt;, where KeyType is the type of value that can be used as a dictionary key, and ValueType is the type of value that the dictionary stores for those keys.</p>

<p>
  The only restriction is that KeyType must be <emphasis>hashable</emphasis>—that is, it must provide a way to make itself uniquely representable. All of Swift’s basic types (such as String, Int, Double, and Bool) are hashable by default, and all of these types can be used as the keys of a dictionary. Enumeration member values without associated values (as described in Enumerations) are also hashable by default.



Dictionary Literals</p>

<p>
  You can initialize a dictionary with with a <emphasis>dictionary literal</emphasis>, which has a similar syntax to the array literal seen earlier. A dictionary literal is a shorthand way to write one or more key-value pairs as a Dictionary collection.</p>

<p>
  A <emphasis>key-value pair</emphasis> is a combination of a key and a value. In a dictionary literal, the key and value in each key-value pair are separated by a colon. The key-value pairs are written as a list, separated by commas, surrounded by a pair of square brackets:</p>

<p>[<emphasis>key 1</emphasis>: <emphasis>value 1</emphasis>, <emphasis>key 2</emphasis>: <emphasis>value 2</emphasis>, <emphasis>key 3</emphasis>: <emphasis>value 3</emphasis>]</p>

<p>
  The example below creates a dictionary to store the names of international airports. In this dictionary, the keys are three-letter International Air Transport Association codes, and the values are airport names:</p>

<p>var airports: Dictionary&lt;String, String&gt; = ["TYO": "Tokyo", "DUB": "Dublin"]</p>

<p>
  The airports dictionary is declared as having a type of Dictionary&lt;String, String&gt;, which means “a Dictionary whose keys are of type String, and whose values are also of type String”.</p><empty-line /><p>Note</p>

<p>The airports dictionary is declared as a variable (with the var introducer), and not a constant (with the let introducer), because more airports will be added to the dictionary in the examples below.</p>

<p>
  The airports dictionary is initialized with a dictionary literal containing two key-value pairs. The first pair has a key of "TYO" and a value of "Tokyo". The second pair has a key of "DUB" and a value of "Dublin".</p>

<p>
  This dictionary literal contains two String: String pairs. This matches the type of the airports variable declaration (a dictionary with only String keys, and only String values) and so the assignment of the dictionary literal is permitted as a way to initialize the airports dictionary with two initial items.</p>

<p>
  As with arrays, you don’t have to write the type of the dictionary if you’re initializing it with a dictionary literal whose keys and values have consistent types. The initialization of airports could have been be written in a shorter form instead:</p>

<p>var airports = ["TYO": "Tokyo", "DUB": "Dublin"]</p>

<p>
  Because all keys in the literal are of the same type as each other, and likewise all values are of the same type as each other, Swift can infer that Dictionary&lt;String, String&gt; is the correct type to use for the airports dictionary.




Accessing and Modifying a Dictionary</p>

<p>
  You access and modify a dictionary through its methods and properties, or by using subscript syntax. As with an array, you can find out the number of items in a Dictionary by checking its read-only count property:</p>

<p>println("The dictionary of airports contains \(airports.count) items.")</p>

<p>// prints "The dictionary of airports contains 2 items."</p>

<p>
  You can add a new item to a dictionary with subscript syntax. Use a new key of the appropriate type as the subscript index, and assign a new value of the appropriate type:</p>

<p>airports["LHR"] = "London"</p>

<p>// the airports dictionary now contains 3 items</p>

<p>
  You can also use subscript syntax to change the value associated with a particular key:</p>

<p>airports["LHR"] = "London Heathrow"</p>

<p>// the value for "LHR" has been changed to "London Heathrow"</p>

<p>
  As an alternative to subscripting, use a dictionary’s updateValue(forKey:) method to set or update the value for a particular key. Like the subscript examples above, the updateValue(forKey:) method sets a value for a key if none exists, or updates the value if that key already exists. Unlike a subscript, however, the updateValue(forKey:) method returns the <emphasis>old</emphasis> value after performing an update. This enables you to check whether or not an update took place.</p>

<p>
  The updateValue(forKey:) method returns an optional value of the dictionary’s value type. For a dictionary that stores String values, for example, the method returns a value of type String?, or “optional String”. This optional value contains the old value for that key if one existed before the update, or nil if no value existed:</p>

<p>if let oldValue = airports.updateValue("Dublin International", forKey: "DUB") {</p>

<p> println("The old value for DUB was \(oldValue).")</p>

<p>}</p>

<p>// prints "The old value for DUB was Dublin."</p>

<p>
  You can also use subscript syntax to retrieve a value from the dictionary for a particular key. Because it is possible to request a key for which no value exists, a dictionary’s subscript returns an optional value of the dictionary’s value type. If the dictionary contains a value for the requested key, the subscript returns an optional value containing the existing value for that key. Otherwise, the subscript returns nil:</p>

<p>if let airportName = airports["DUB"] {</p>

<p> println("The name of the airport is \(airportName).")</p>

<p>} else {</p>

<p> println("That airport is not in the airports dictionary.")</p>

<p>}</p>

<p>// prints "The name of the airport is Dublin International."</p>

<p>
  You can use subscript syntax to remove a key-value pair from a dictionary by assigning a value of nil for that key:</p>

<p>airports["APL"] = "Apple International"</p>

<p>// "Apple International" is not the real airport for APL, so delete it</p>

<p>airports["APL"] = nil</p>

<p>// APL has now been removed from the dictionary</p>

<p>
  Alternatively, remove a key-value pair from a dictionary with the removeValueForKey method. This method removes the key-value pair if it exists and returns the removed value, or returns nil if no value existed:</p>

<p>if let removedValue = airports.removeValueForKey("DUB") {</p>

<p> println("The removed airport's name is \(removedValue).")</p>

<p>} else {</p>

<p> println("The airports dictionary does not contain a value for DUB.")</p>

<p>}</p>

<p>// prints "The removed airport's name is Dublin International."






Iterating Over a Dictionary</p>

<p>
  You can iterate over the key-value pairs in a dictionary with a for-in loop. Each item in the dictionary is returned as a (key, value) tuple, and you can decompose the tuple’s members into temporary constants or variables as part of the iteration:</p>

<p>for (airportCode, airportName) in airports {</p>

<p> println("\(airportCode): \(airportName)")</p>

<p>}</p>

<p>// TYO: Tokyo</p>

<p>// LHR: London Heathrow</p>

<p>
  For more about the for-in loop, see For Loops.</p>

<p>
  You can also retrieve an iteratable collection of a dictionary’s keys or values by accessing its keys and values properties:</p>

<p>for airportCode in airports.keys {</p>

<p> println("Airport code: \(airportCode)")</p>

<p>}</p>

<p>// Airport code: TYO</p>

<p>// Airport code: LHR</p>

<p>for airportName in airports.values {</p>

<p> println("Airport name: \(airportName)")</p>

<p>}</p>

<p>// Airport name: Tokyo</p>

<p>// Airport name: London Heathrow</p>

<p>
  If you need to use a dictionary’s keys or values with an API that takes an Array instance, initialize a new array with the keys or values property:</p>

<p>let airportCodes = Array(airports.keys)</p>

<p>// airportCodes is ["TYO", "LHR"]</p>

<p>let airportNames = Array(airports.values)</p>

<p>// airportNames is ["Tokyo", "London Heathrow"]</p><empty-line /><p>Note</p>

<p>Swift’s Dictionary type is an unordered collection. The order in which keys, values, and key-value pairs are retrieved when iterating over a dictionary is not specified.
      





Creating an Empty Dictionary</p>

<p>
  As with arrays, you can create an empty Dictionary of a certain type by using initializer syntax:</p>

<p>var namesOfIntegers = Dictionary&lt;Int, String&gt;()</p>

<p>// namesOfIntegers is an empty Dictionary&lt;Int, String&gt;</p>

<p>
  This example creates an empty dictionary of type Int, String to store human-readable names of integer values. Its keys are of type Int, and its values are of type String.</p>

<p>
  If the context already provides type information, create an empty dictionary with an empty dictionary literal, which is written as [:] (a colon inside a pair of square brackets):</p>

<p>namesOfIntegers[16] = "sixteen"</p>

<p>// namesOfIntegers now contains 1 key-value pair</p>

<p>namesOfIntegers = [:]</p>

<p>// namesOfIntegers is once again an empty dictionary of type Int, String</p><empty-line /><p>Note</p>

<p>Behind the scenes, Swift’s array and dictionary types are implemented as <emphasis>generic collections</emphasis>. For more on generic types and collections, see Generics.
      






Mutability of Collections</p>

<p>
  Arrays and dictionaries store multiple values together in a single collection. If you create an array or a dictionary and assign it to a variable, the collection that is created will be <emphasis>mutable</emphasis>. This means that you can change (or <emphasis>mutate</emphasis>) the size of the collection after it is created by adding more items to the collection, or by removing existing items from the ones it already contains. Conversely, if you assign an array or a dictionary to a constant, that array or dictionary is <emphasis>immutable</emphasis>, and its size cannot be changed.</p>

<p>
  For dictionaries, immutability also means that you cannot replace the value for an existing key in the dictionary. An immutable dictionary’s contents cannot be changed once they are set.</p>

<p>
  Immutability has a slightly different meaning for arrays, however. You are still not allowed to perform any action that has the potential to change the size of an immutable array, but you <emphasis>are</emphasis> allowed to set a new value for an existing index in the array. This enables Swift’s Array type to provide optimal performance for array operations when the size of an array is fixed.</p>

<p>
  The mutability behavior of Swift’s Array type also affects how array instances are assigned and modified. For more information, see Assignment and Copy Behavior for Collection Types.</p><empty-line /><p>Note</p>

<p>It is good practice to create immutable collections in all cases where the collection’s size does not need to change. Doing so enables the Swift compiler to optimize the performance of the collections you create.</p>

<p>
Control Flow</p>

<p>On This Page</p>

<p>

            For Loops</p>

<p>

            While Loops</p>

<p>

            Conditional Statements</p>

<p>

            Control Transfer Statements</p>

<p>
  Swift provides all the familiar control flow constructs of C-like languages. These include for and while loops to perform a task multiple times; if and switch statements to execute different branches of code based on certain conditions; and statements such as break and continue to transfer the flow of execution to another point in your code.</p>

<p>
  In addition to the traditional for-condition-increment loop found in C, Swift adds a for-in loop that makes it easy to iterate over arrays, dictionaries, ranges, strings, and other sequences.</p>

<p>
  Swift’s switch statement is also considerably more powerful than its counterpart in C. The cases of a switch statement do not “fall through” to the next case in Swift, avoiding common C errors caused by missing break statements. Cases can match many different types of pattern, including range matches, tuples, and casts to a specific type. Matched values in a switch case can be bound to temporary constants or variables for use within the case’s body, and complex matching conditions can be expressed with a where clause for each case.




For Loops</p>

<p>
  A for loop performs a set of statements a certain number of times. Swift provides two kinds of for loop:</p>

<p>
for-in performs a set of statements for each item in a range, sequence, collection, or progression.</p>

<p>
for-condition-increment performs a set of statements until a specific condition is met, typically by incrementing a counter each time the loop ends.





For-In</p>

<p>
  You use the for-in loop to iterate over collections of items, such as ranges of numbers, items in an array, or characters in a string.</p>

<p>
  This example prints the first few entries in the five-times-table:</p>

<p>for index in 1...5 {</p>

<p> println("\(index) times 5 is \(index * 5)")</p>

<p>}</p>

<p>// 1 times 5 is 5</p>

<p>// 2 times 5 is 10</p>

<p>// 3 times 5 is 15</p>

<p>// 4 times 5 is 20</p>

<p>// 5 times 5 is 25</p>

<p>
  The collection of items being iterated is a closed range of numbers from 1 to 5 inclusive, as indicated by the use of the closed range operator (...). The value of index is set to the first number in the range (1), and the statements inside the loop are executed. In this case, the loop contains only one statement, which prints an entry from the five-times-table for the current value of index. After the statement is executed, the value of index is updated to contain the second value in the range (2), and the println function is called again. This process continues until the end of the range is reached.</p>

<p>
  In the example above, index is a constant whose value is automatically set at the start of each iteration of the loop. As such, it does not have to be declared before it is used. It is implicitly declared simply by its inclusion in the loop declaration, without the need for a let declaration keyword.</p><empty-line /><p>Note</p>

<p>The index constant exists only within the scope of the loop. If you want to check the value of index after the loop completes, or if you want to work with its value as a variable rather than a constant, you must declare it yourself before its use in the loop.</p>

<p>
  If you don’t need each value from the range, you can ignore the values by using an underscore in place of a variable name:</p>

<p>let base = 3</p>

<p>let power = 10</p>

<p>var answer = 1</p>

<p>for _ in 1...power {</p>

<p> answer *= base</p>

<p>}</p>

<p>println("\(base) to the power of \(power) is \(answer)")</p>

<p>// prints "3 to the power of 10 is 59049"</p>

<p>
  This example calculates the value of one number to the power of another (in this case, 3 to the power of 10). It multiplies a starting value of 1 (that is, 3 to the power of 0) by 3, ten times, using a half-closed loop that starts with 0 and ends with 9. This calculation doesn’t need to know the individual counter values each time through the loop—it simply needs to execute the loop the correct number of times. The underscore character _ (used in place of a loop variable) causes the individual values to be ignored and does not provide access to the current value during each iteration of the loop.</p>

<p>
  Use the for-in loop with an array to iterate over its items:</p>

<p>let names = ["Anna", "Alex", "Brian", "Jack"]</p>

<p>for name in names {</p>

<p> println("Hello, \(name)!")</p>

<p>}</p>

<p>// Hello, Anna!</p>

<p>// Hello, Alex!</p>

<p>// Hello, Brian!</p>

<p>// Hello, Jack!</p>

<p>
  You can also iterate over a dictionary to access its key-value pairs. Each item in the dictionary is returned as a (key, value) tuple when the dictionary is iterated, and you can decompose the (key, value) tuple’s members as explicitly named constants for use within in the body of the for-in loop. Here, the dictionary’s keys are decomposed into a constant called animalName, and the dictionary’s values are decomposed into a constant called legCount:</p>

<p>let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]</p>

<p>for (animalName, legCount) in numberOfLegs {</p>

<p> println("\(animalName)s have \(legCount) legs")</p>

<p>}</p>

<p>// spiders have 8 legs</p>

<p>// ants have 6 legs</p>

<p>// cats have 4 legs</p>

<p>
  Items in a Dictionary may not necessarily be iterated in the same order as they were inserted. The contents of a Dictionary are inherently unordered, and iterating over them does not guarantee the order in which they will be retrieved. For more on arrays and dictionaries, see Collection Types.)</p>

<p>
  In addition to arrays and dictionaries, you can also use the for-in loop to iterate over the Character values in a string:</p>

<p>for character in "Hello" {</p>

<p> println(character)</p>

<p>}</p>

<p>// H</p>

<p>// e</p>

<p>// l</p>

<p>// l</p>

<p>// o






For-Condition-Increment</p>

<p>
  In addition to for-in loops, Swift supports traditional C-style for loops with a condition and an incrementer:</p>

<p>for var index = 0; index &lt; 3; ++index {</p>

<p> println("index is \(index)")</p>

<p>}</p>

<p>// index is 0</p>

<p>// index is 1</p>

<p>// index is 2</p>

<p>
  Here’s the general form of this loop format:</p>

<p>for <emphasis>initialization</emphasis>; <emphasis>condition</emphasis>; <emphasis>increment</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  Semicolons separate the three parts of the loop’s definition, as in C. However, unlike C, Swift doesn’t need parentheses around the entire “initialization; condition; increment” block.</p>

<p>
  The loop is executed as follows:</p>

<p>
  When the loop is first entered, the <emphasis>initialization expression</emphasis> is evaluated once, to set up any constants or variables that are needed for the loop.</p>

<p>
  The <emphasis>condition expression</emphasis> is evaluated. If it evaluates to false, the loop ends, and code execution continues after the for loop’s closing brace (}). If the expression evaluates to true, code execution continues by executing the statements inside the braces.</p>

<p>
  After all statements are executed, the <emphasis>increment expression</emphasis> is evaluated. It might increase or decrease the value of a counter, or set one of the initialized variables to a new value based on the outcome of the statements. After the increment expression has been evaluated, execution returns to step 2, and the condition expression is evaluated again.</p>

<p>
  The loop format and execution process described above is shorthand for (and equivalent to) the outline below:</p>

<p><emphasis>initialization</emphasis></p>

<p>while <emphasis>condition</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>    <emphasis>increment</emphasis></p>

<p>}</p>

<p>
  Constants and variables declared within the initialization expression (such as var index = 0) are only valid within the scope of the for loop itself. To retrieve the final value of index after the loop ends, you must declare index before the loop’s scope begins:</p>

<p>var index: Int</p>

<p>for index = 0; index &lt; 3; ++index {</p>

<p> println("index is \(index)")</p>

<p>}</p>

<p>// index is 0</p>

<p>// index is 1</p>

<p>// index is 2</p>

<p>println("The loop statements were executed \(index) times")</p>

<p>// prints "The loop statements were executed 3 times"</p>

<p>
  Note that the final value of index after this loop is completed is 3, not 2. The last time the increment statement ++index is called, it sets index to 3, which causes index &lt; 3 to equate to false, ending the loop.





While Loops</p>

<p>
  A while loop performs a set of statements until a condition becomes false. These kinds of loops are best used when the number of iterations is not known before the first iteration begins. Swift provides two kinds of while loop:</p>

<p>
while evaluates its condition at the start of each pass through the loop.</p>

<p>
do-while evaluates its condition at the end of each pass through the loop.





While</p>

<p>
  A while loop starts by evaluating a single condition. If the condition is true, a set of statements is repeated until the condition becomes false.</p>

<p>
  Here’s the general form of a while loop:</p>

<p>while <emphasis>condition</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  This example plays a simple game of <emphasis>Snakes and Ladders</emphasis> (also known as <emphasis>Chutes and Ladders</emphasis>):



<image xlink:href="#_2.jpg" /></p>

<p>
  The rules of the game are as follows:</p>

<p>
  The board has 25 squares, and the aim is to land on or beyond square 25.</p>

<p>
  Each turn, you roll a six-sided dice and move by that number of squares, following the horizontal path indicated by the dotted arrow above.</p>

<p>
  If your turn ends at the bottom of a ladder, you move up that ladder.</p>

<p>
  If your turn ends at the head of a snake, you move down that snake.</p>

<p>
  The game board is represented by an array of Int values. Its size is based on a constant called finalSquare, which is used to initialize the array and also to check for a win condition later in the example. The board is initialized with 26 zero Int values, not 25 (one each at indices 0 through 25 inclusive):</p>

<p>let finalSquare = 25</p>

<p>var board = Int[](count: finalSquare + 1, repeatedValue: 0)</p>

<p>
  Some squares are then set to have more specific values for the snakes and ladders. Squares with a ladder base have a positive number to move you up the board, whereas squares with a snake head have a negative number to move you back down the board:</p>

<p>board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02</p>

<p>board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08</p>

<p>
  Square 3 contains the bottom of a ladder that moves you up to square 11. To represent this, board[03] is equal to +08, which is equivalent to an integer value of 8 (the difference between 3 and 11). The unary plus operator (+i) balances with the unary minus operator (-i), and numbers lower than 10 are padded with zeros so that all board definitions align. (Neither stylistic tweak is strictly necessary, but they lead to neater code.)</p>

<p>
  The player’s starting square is “square zero”, which is just off the bottom left corner of the board. The first dice roll always moves the player on to the board:</p>

<p>var square = 0</p>

<p>var diceRoll = 0</p>

<p>while square &lt; finalSquare {</p>

<p> // roll the dice</p>

<p> if ++diceRoll == 7 { diceRoll = 1 }</p>

<p> // move by the rolled amount</p>

<p> square += diceRoll</p>

<p> if square &lt; board.count {</p>

<p> // if we're still on the board, move up or down for a snake or a ladder</p>

<p> square += board[square]</p>

<p>    }</p>

<p>}</p>

<p>println("Game over!")</p>

<p>
  This example uses a very simple approach to dice rolling. Instead of a random number generator, it starts with a diceRoll value of 0. Each time through the while loop, diceRoll is incremented with the prefix increment operator (++i), and is then checked to see if it has become too large. The return value of ++diceRoll is equal to the value of diceRoll <emphasis>after</emphasis> it is incremented. Whenever this return value equals 7, the dice roll has become too large, and is reset to a value of 1. This gives a sequence of diceRoll values that is always 1, 2, 3, 4, 5, 6, 1, 2 and so on.</p>

<p>
  After rolling the dice, the player moves forward by diceRoll squares. It’s possible that the dice roll may have moved the player beyond square 25, in which case the game is over. To cope with this scenario, the code checks that square is less than the board array’s count property before adding the value stored in board[square] onto the current square value to move the player up or down any ladders or snakes.</p>

<p>
  Had this check not been performed, board[square] might try to access a value outside the bounds of the board array, which would trigger an error. If square is now equal to 26, the code would try to check the value of board[26], which is larger than the size of the array.</p>

<p>
  The current while loop execution then ends, and the loop’s condition is checked to see if the loop should be executed again. If the player has moved on or beyond square number 25, the loop’s condition evaluates to false, and the game ends.</p>

<p>
  A while loop is appropriate in this case because the length of the game is not clear at the start of the while loop. Instead, the loop is executed until a particular condition is satisfied.




Do-While</p>

<p>
  The other variation of the while loop, known as the do-while loop, performs a single pass through the loop block first, <emphasis>before</emphasis> considering the loop’s condition. It then continues to repeat the loop until the condition is false.</p>

<p>
  Here’s the general form of a do-while loop:</p>

<p>do {</p>

<p>    <emphasis>statements</emphasis></p>

<p>} while <emphasis>condition</emphasis></p>

<p>
  Here’s the <emphasis>Snakes and Ladders</emphasis> example again, written as a do-while loop rather than a while loop. The values of finalSquare, board, square, and diceRoll are initialized in exactly the same way as with a while loop:</p>

<p>let finalSquare = 25</p>

<p>var board = Int[](count: finalSquare + 1, repeatedValue: 0)</p>

<p>board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02</p>

<p>board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08</p>

<p>var square = 0</p>

<p>var diceRoll = 0</p>

<p>
  In this version of the game, the <emphasis>first</emphasis> action in the loop is to check for a ladder or a snake. No ladder on the board takes the player straight to square 25, and so it is not possible to win the game by moving up a ladder. Therefore, it is safe to check for a snake or a ladder as the first action in the loop.</p>

<p>
  At the start of the game, the player is on “square zero”. board[0] always equals 0, and has no effect:</p>

<p>do {</p>

<p> // move up or down for a snake or ladder</p>

<p> square += board[square]</p>

<p> // roll the dice</p>

<p> if ++diceRoll == 7 { diceRoll = 1 }</p>

<p> // move by the rolled amount</p>

<p> square += diceRoll</p>

<p>} while square &lt; finalSquare</p>

<p>println("Game over!")</p>

<p>
  After the code checks for snakes and ladders, the dice is rolled, and the player is moved forward by diceRoll squares. The current loop execution then ends.</p>

<p>
  The loop’s condition (while square &lt; finalSquare) is the same as before, but this time it is not evaluated until the <emphasis>end</emphasis> of the first run through the loop. The structure of the do-while loop is better suited to this game than the while loop in the previous example. In the do-while loop above, square += board[square] is always executed <emphasis>immediately after</emphasis> the loop’s while condition confirms that square is still on the board. This behavior removes the need for the array bounds check seen in the earlier version of the game.





Conditional Statements</p>

<p>
  It is often useful to execute different pieces of code based on certain conditions. You might want to run an extra piece of code when an error occurs, or to display a message when a value becomes too high or too low. To do this, you make parts of your code <emphasis>conditional</emphasis>.</p>

<p>
  Swift provides two ways to add conditional branches to your code, known as the if statement and the switch statement. Typically, you use the if statement to evaluate simple conditions with only a few possible outcomes. The switch statement is better suited to more complex conditions with multiple possible permutations, and is useful in situations where pattern-matching can help select an appropriate code branch to execute.



If</p>

<p>
  In its simplest form, the if statement has a single if condition. It executes a set of statements only if that condition is true:</p>

<p>var temperatureInFahrenheit = 30</p>

<p>if temperatureInFahrenheit &lt;= 32 {</p>

<p> println("It's very cold. Consider wearing a scarf.")</p>

<p>}</p>

<p>// prints "It's very cold. Consider wearing a scarf."</p>

<p>
  The preceding example checks whether the temperature is less than or equal to 32 degrees Fahrenheit (the freezing point of water). If it is, a message is printed. Otherwise, no message is printed, and code execution continues after the if statement’s closing brace.</p>

<p>
  The if statement can provide an alternative set of statements, known as an <emphasis>else clause</emphasis>, for when the if condition is false. These statements are indicated by the else keyword:</p>

<p>temperatureInFahrenheit = 40</p>

<p>if temperatureInFahrenheit &lt;= 32 {</p>

<p> println("It's very cold. Consider wearing a scarf.")</p>

<p>} else {</p>

<p> println("It's not that cold. Wear a t-shirt.")</p>

<p>}</p>

<p>// prints "It's not that cold. Wear a t-shirt."</p>

<p>
  One of these two branches is always executed. Because the temperature has increased to 40 degrees Fahrenheit, it is no longer cold enough to advise wearing a scarf, and so the else branch is triggered instead.</p>

<p>
  You can chain multiple if statements together, to consider additional clauses:</p>

<p>temperatureInFahrenheit = 90</p>

<p>if temperatureInFahrenheit &lt;= 32 {</p>

<p> println("It's very cold. Consider wearing a scarf.")</p>

<p>} else if temperatureInFahrenheit &gt;= 86 {</p>

<p> println("It's really warm. Don't forget to wear sunscreen.")</p>

<p>} else {</p>

<p> println("It's not that cold. Wear a t-shirt.")</p>

<p>}</p>

<p>// prints "It's really warm. Don't forget to wear sunscreen."</p>

<p>
  Here, an additional if statement is added to respond to particularly warm temperatures. The final else clause remains, and prints a response for any temperatures that are neither too warm nor too cold.</p>

<p>
  The final else clause is optional, however, and can be excluded if the set of conditions does not need to be complete:</p>

<p>temperatureInFahrenheit = 72</p>

<p>if temperatureInFahrenheit &lt;= 32 {</p>

<p> println("It's very cold. Consider wearing a scarf.")</p>

<p>} else if temperatureInFahrenheit &gt;= 86 {</p>

<p> println("It's really warm. Don't forget to wear sunscreen.")</p>

<p>}</p>

<p>
  In this example, the temperature is neither too cold nor too warm to trigger the if or else if conditions, and so no message is printed.




Switch</p>

<p>
  A switch statement considers a value and compares it against several possible matching patterns. It then executes an appropriate block of code, based on the first pattern that matches successfully. A switch statement provides an alternative to the if statement for responding to multiple potential states.</p>

<p>
  In its simplest form, a switch statement compares a value against one or more values of the same type:</p>

<p>switch <emphasis>some value to consider</emphasis> {</p>

<p>case <emphasis>value 1</emphasis>:</p>

<p>    <emphasis>respond to value 1</emphasis></p>

<p>case <emphasis>value 2</emphasis>,</p>

<p><emphasis>value 3</emphasis>:</p>

<p>    <emphasis>respond to value 2 or 3</emphasis></p>

<p>default:</p>

<p>    <emphasis>otherwise, do something else</emphasis></p>

<p>}</p>

<p>
  Every switch statement consists of multiple possible <emphasis>cases</emphasis>, each of which begins with the case keyword. In addition to comparing against specific values, Swift provides several ways for each case to specify more complex matching patterns. These options are described later in this section.</p>

<p>
  The body of each switch case is a separate branch of code execution, in a similar manner to the branches of an if statement. The switch statement determines which branch should be selected. This is known as <emphasis>switching</emphasis> on the value that is being considered.</p>

<p>
  Every switch statement must be <emphasis>exhaustive</emphasis>. That is, every possible value of the type being considered must be matched by one of the switch cases. If it is not appropriate to provide a switch case for every possible value, you can define a default catch-all case to cover any values that are not addressed explicitly. This catch-all case is indicated by the keyword default, and must always appear last.</p>

<p>
  This example uses a switch statement to consider a single lowercase character called someCharacter:</p>

<p>let someCharacter: Character = "e"</p>

<p>switch someCharacter {</p>

<p>case "a", "e", "i", "o", "u":</p>

<p> println("\(someCharacter) is a vowel")</p>

<p>case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",</p>

<p>"n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":</p>

<p> println("\(someCharacter) is a consonant")</p>

<p>default:</p>

<p> println("\(someCharacter) is not a vowel or a consonant")</p>

<p>}</p>

<p>// prints "e is a vowel"</p>

<p>
  The switch statement’s first case matches all five lowercase vowels in the English language. Similarly, its second case matches all lowercase English consonants.</p>

<p>
  It is not practical to write all other possible characters as part of a switch case, and so this switch statement provides a default case to match all other characters that are not vowels or consonants. This provision ensures that the switch statement is exhaustive.



No Implicit Fallthrough</p>

<p>
  In contrast with switch statements in C and Objective-C, switch statements in Swift do not fall through the bottom of each case and into the next one by default. Instead, the entire switch statement finishes its execution as soon as the first matching switch case is completed, without requiring an explicit break statement. This makes the switch statement safer and easier to use than in C, and avoids executing more than one switch case by mistake.</p><empty-line /><p>Note</p>

<p>You can still break out of a matched switch case before that case has completed its execution if you need to. See Break in a Switch Statement for details.</p>

<p>
  The body of each case <emphasis>must</emphasis> contain at least one executable statement. It is not valid to write the following code, because the first case is empty:</p>

<p>let anotherCharacter: Character = "a"</p>

<p>switch anotherCharacter {</p>

<p>case "a":</p>

<p>case "A":</p>

<p> println("The letter A")</p>

<p>default:</p>

<p> println("Not the letter A")</p>

<p>}</p>

<p>// this will report a compile-time error</p>

<p>
  Unlike a switch statement in C, this switch statement does not match both "a" and "A". Rather, it reports a compile-time error that case "a": does not contain any executable statements. This approach avoids accidental fallthrough from one case to another, and makes for safer code that is clearer in its intent.</p>

<p>
  Multiple matches for a single switch case can be separated by commas, and can be written over multiple lines if the list is long:</p>

<p>switch <emphasis>some value to consider</emphasis> {</p>

<p>case <emphasis>value 1</emphasis>,</p>

<p><emphasis>value 2</emphasis>:</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p><empty-line /><p>Note</p>

<p>To opt in to fallthrough behavior for a particular switch case, use the fallthrough keyword, as described in Fallthrough.
      





Range Matching</p>

<p>
  Values in switch cases can be checked for their inclusion in a range. This example uses number ranges to provide a natural-language count for numbers of any size:</p>

<p>let count = 3_000_000_000_000</p>

<p>let countedThings = "stars in the Milky Way"</p>

<p>var naturalCount: String</p>

<p>switch count {</p>

<p>case 0:</p>

<p> naturalCount = "no"</p>

<p>case 1...3:</p>

<p> naturalCount = "a few"</p>

<p>case 4...9:</p>

<p> naturalCount = "several"</p>

<p>case 10...99:</p>

<p> naturalCount = "tens of"</p>

<p>case 100...999:</p>

<p> naturalCount = "hundreds of"</p>

<p>case 1000...999_999:</p>

<p> naturalCount = "thousands of"</p>

<p>default:</p>

<p> naturalCount = "millions and millions of"</p>

<p>}</p>

<p>println("There are \(naturalCount) \(countedThings).")</p>

<p>// prints "There are millions and millions of stars in the Milky Way."






Tuples</p>

<p>
  You can use tuples to test multiple values in the same switch statement. Each element of the tuple can be tested against a different value or range of values. Alternatively, use the underscore (_) identifier to match any possible value.</p>

<p>
  The example below takes an (x, y) point, expressed as a simple tuple of type (Int, Int), and categorizes it on the graph that follows the example:</p>

<p>let somePoint = (1, 1)</p>

<p>switch somePoint {</p>

<p>case (0, 0):</p>

<p> println("(0, 0) is at the origin")</p>

<p>case (_, 0):</p>

<p> println("(\(somePoint.0), 0) is on the x-axis")</p>

<p>case (0, _):</p>

<p> println("(0, \(somePoint.1)) is on the y-axis")</p>

<p>case (-2...2, -2...2):</p>

<p> println("(\(somePoint.0), \(somePoint.1)) is inside the box")</p>

<p>default:</p>

<p> println("(\(somePoint.0), \(somePoint.1)) is outside of the box")</p>

<p>}</p>

<p>// prints "(1, 1) is inside the box"




<image xlink:href="#_3.jpg" /></p>

<p>
  The switch statement determines if the point is at the origin (0, 0); on the red x-axis; on the orange y-axis; inside the blue 4-by-4 box centered on the origin; or outside of the box.</p>

<p>
  Unlike C, Swift allows multiple switch cases to consider the same value or values. In fact, the point (0, 0) could match all <emphasis>four</emphasis> of the cases in this example. However, if multiple matches are possible, the first matching case is always used. The point (0, 0) would match case (0, 0) first, and so all other matching cases would be ignored.




Value Bindings</p>

<p>
  A switch case can bind the value or values it matches to temporary constants or variables, for use in the body of the case. This is known as <emphasis>value binding</emphasis>, because the values are “bound” to temporary constants or variables within the case’s body.</p>

<p>
  The example below takes an (x, y) point, expressed as a tuple of type (Int, Int) and categorizes it on the graph that follows:</p>

<p>let anotherPoint = (2, 0)</p>

<p>switch anotherPoint {</p>

<p>case (let x, 0):</p>

<p> println("on the x-axis with an x value of \(x)")</p>

<p>case (0, let y):</p>

<p> println("on the y-axis with a y value of \(y)")</p>

<p>case let (x, y):</p>

<p> println("somewhere else at (\(x), \(y))")</p>

<p>}</p>

<p>// prints "on the x-axis with an x value of 2"




<image xlink:href="#_4.jpg" /></p>

<p>
  The switch statement determines if the point is on the red x-axis, on the orange y-axis, or elsewhere, on neither axis.</p>

<p>
  The three switch cases declare placeholder constants x and y, which temporarily take on one or both tuple values from anotherPoint. The first case, case (let x, 0), matches any point with a y value of 0 and assigns the point’s x value to the temporary constant x. Similarly, the second case, case (0, let y), matches any point with an x value of 0 and assigns the point’s y value to the temporary constant y.</p>

<p>
  Once the temporary constants are declared, they can be used within the case’s code block. Here, they are used as shorthand for printing the values with the println function.</p>

<p>
  Note that this switch statement does not have a default case. The final case, case let (x, y), declares a tuple of two placeholder constants that can match any value. As a result, it matches all possible remaining values, and a default case is not needed to make the switch statement exhaustive.</p>

<p>
  In the example above, x and y are declared as constants with the let keyword, because there is no need to modify their values within the body of the case. However, they could have been declared as variables instead, with the var keyword. If this had been done, a temporary variable would have been created and initialized with the appropriate value. Any changes to that variable would only have an effect within the body of the case.




Where</p>

<p>
  A switch case can use a where clause to check for additional conditions.</p>

<p>
  The example below categorizes an (x, y) point on the following graph:</p>

<p>let yetAnotherPoint = (1, -1)</p>

<p>switch yetAnotherPoint {</p>

<p>case let (x, y) where x == y:</p>

<p> println("(\(x), \(y)) is on the line x == y")</p>

<p>case let (x, y) where x == -y:</p>

<p> println("(\(x), \(y)) is on the line x == -y")</p>

<p>case let (x, y):</p>

<p> println("(\(x), \(y)) is just some arbitrary point")</p>

<p>}</p>

<p>// prints "(1, -1) is on the line x == -y"




<image xlink:href="#_5.jpg" /></p>

<p>
  The switch statement determines if the point is on the green diagonal line where x == y, on the purple diagonal line where x == -y, or neither.</p>

<p>
  The three switch cases declare placeholder constants x and y, which temporarily take on the two tuple values from point. These constants are used as part of a where clause, to create a dynamic filter. The switch case matches the current value of point only if the where clause’s condition evaluates to true for that value.</p>

<p>
  As in the previous example, the final case matches all possible remaining values, and so a default case is not needed to make the switch statement exhaustive.






Control Transfer Statements</p>

<p>
<emphasis>Control transfer statements</emphasis> change the order in which your code is executed, by transferring control from one piece of code to another. Swift has four control transfer statements:</p>

<p>
continue</p>

<p>
break</p>

<p>
fallthrough</p>

<p>
return</p>

<p>
  The control, break and fallthrough statements are described below. The return statement is described in Functions.



Continue</p>

<p>
  The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop. It says “I am done with the current loop iteration” without leaving the loop altogether.</p><empty-line /><p>Note</p>

<p>In a for-condition-increment loop, the incrementer is still evaluated after calling the continue statement. The loop itself continues to work as usual; only the code within the loop’s body is skipped.</p>

<p>
  The following example removes all vowels and spaces from a lowercase string to create a cryptic puzzle phrase:</p>

<p>let puzzleInput = "great minds think alike"</p>

<p>var puzzleOutput = ""</p>

<p>for character in puzzleInput {</p>

<p> switch character {</p>

<p> case "a", "e", "i", "o", "u", " ":</p>

<p> continue</p>

<p> default:</p>

<p> puzzleOutput += character</p>

<p>    }</p>

<p>}</p>

<p>println(puzzleOutput)</p>

<p>// prints "grtmndsthnklk"</p>

<p>
  The code above calls the continue keyword whenever it matches a vowel or a space, causing the current iteration of the loop to end immediately and to jump straight to the start of the next iteration. This behavior enables the switch block to match (and ignore) only the vowel and space characters, rather than requiring the block to match every character that should get printed.




Break</p>

<p>
  The break statement ends execution of an entire control flow statement immediately. The break statement can be used inside a switch statement or loop statement when you want to terminate the execution of the switch or loop statement earlier than would otherwise be the case.



Break in a Loop Statement</p>

<p>
  When used inside a loop statement, break ends the loop’s execution immediately, and transfers control to the first line of code after the loop’s closing brace (}). No further code from the current iteration of the loop is executed, and no further iterations of the loop are started.




Break in a Switch Statement</p>

<p>
  When used inside a switch statement, break causes the switch statement to end its execution immediately, and to transfer control to the first line of code after the switch statement’s closing brace (}).</p>

<p>
  This behavior can be used to match and ignore one or more cases in a switch statement. Because Swift’s switch statement is exhaustive and does not allow empty cases, it is sometimes necessary to deliberately match and ignore a case in order to make your intentions explicit. You do this by writing the break statement as the entire body of the case you want to ignore. When that case is matched by the switch statement, the break statement inside the case ends the switch statement’s execution immediately.</p><empty-line /><p>Note</p>

<p>A switch case that only contains a comment is reported as a compile-time error. Comments are not statements and do not cause a switch case to be ignored. Always use a break statement to ignore a switch case.</p>

<p>
  The following example switches on a Character value and determines whether it represents a number symbol in one of four languages. Multiple values are covered in a single switch case for brevity:</p>

<p>let numberSymbol: Character = "三" // Simplified Chinese for the number 3</p>

<p>var possibleIntegerValue: Int?</p>

<p>switch numberSymbol {</p>

<p>case "1", "١", "一", "๑":</p>

<p> possibleIntegerValue = 1</p>

<p>case "2", "٢", "二", "๒":</p>

<p> possibleIntegerValue = 2</p>

<p>case "3", "٣", "三", "๓":</p>

<p> possibleIntegerValue = 3</p>

<p>case "4", "٤", "四", "๔":</p>

<p> possibleIntegerValue = 4</p>

<p>default:</p>

<p> break</p>

<p>}</p>

<p>if let integerValue = possibleIntegerValue {</p>

<p> println("The integer value of \(numberSymbol) is \(integerValue).")</p>

<p>} else {</p>

<p> println("An integer value could not be found for \(numberSymbol).")</p>

<p>}</p>

<p>// prints "The integer value of 三 is 3."</p>

<p>
  This example checks numberSymbol to determine whether it is a Latin, Arabic, Chinese, or Thai symbol for the numbers 1 to 4. If a match is found, one of the switch statement’s cases sets an optional Int? variable called possibleIntegerValue to an appropriate integer value.</p>

<p>
  After the switch statement completes its execution, the example uses optional binding to determine whether a value was found. The possibleIntegerValue variable has an implicit initial value of nil by virtue of being an optional type, and so the optional binding will succeed only if possibleIntegerValue was set to an actual value by one of the switch statement’s first four cases.</p>

<p>
  It is not practical to list every possible Character value in the example above, so a default case provides a catchall for any characters that are not matched. This default case does not need to perform any action, and so it is written with a single break statement as its body. As soon as the default statement is matched, the break statement ends the switch statement’s execution, and code execution continues from the if let statement.





Fallthrough</p>

<p>
  Switch statements in Swift do not fall through the bottom of each case and into the next one. Instead, the entire switch statement completes its execution as soon as the first matching case is completed. By contrast, C requires you to insert an explicit break statement at the end of every switch case to prevent fallthrough. Avoiding default fallthrough means that Swift switch statements are much more concise and predictable than their counterparts in C, and thus they avoid executing multiple switch cases by mistake.</p>

<p>
  If you really need C-style fallthrough behavior, you can opt in to this behavior on a case-by-case basis with the fallthrough keyword. The example below uses fallthrough to create a textual description of a number:</p>

<p>let integerToDescribe = 5</p>

<p>var description = "The number \(integerToDescribe) is"</p>

<p>switch integerToDescribe {</p>

<p>case 2, 3, 5, 7, 11, 13, 17, 19:</p>

<p> description += " a prime number, and also"</p>

<p> fallthrough</p>

<p>default:</p>

<p> description += " an integer."</p>

<p>}</p>

<p>println(description)</p>

<p>// prints "The number 5 is a prime number, and also an integer."</p>

<p>
  This example declares a new String variable called description and assigns it an initial value. The function then considers the value of integerToDescribe using a switch statement. If the value of integerToDescribe is one of the prime numbers in the list, the function appends text to the end of description, to note that the number is prime. It then uses the fallthrough keyword to “fall into” the default case as well. The default case adds some extra text to the end of the description, and the switch statement is complete.</p>

<p>
  If the value of integerToDescribe is <emphasis>not</emphasis> in the list of known prime numbers, it is not matched by the first switch case at all. There are no other specific cases, and so integerToDescribe is matched by the catchall default case.</p>

<p>
  After the switch statement has finished executing, the number’s description is printed using the println function. In this example, the number 5 is correctly identified as a prime number.</p><empty-line /><p>Note</p>

<p>The fallthrough keyword does not check the case conditions for the switch case that it causes execution to fall into. The fallthrough keyword simply causes code execution to move directly to the statements inside the next case (or default case) block, as in C’s standard switch statement behavior.
      





Labeled Statements</p>

<p>
  You can nest loops and switch statements inside other loops and switch statements in Swift to create complex control flow structures. However, loops and switch statements can both use the break statement to end their execution prematurely. Therefore, it is sometimes useful to be explicit about which loop or switch statement you want a break statement to terminate. Similarly, if you have multiple nested loops, it can be useful to be explicit about which loop the continue statement should affect.</p>

<p>
  To achieve these aims, you can mark a loop statement or switch statement with a <emphasis>statement label</emphasis>, and use this label with the break statement or continue statement to end or continue the execution of the labeled statement.</p>

<p>
  A labeled statement is indicated by placing a label on the same line as the statement’s introducer keyword, followed by a colon. Here’s an example of this syntax for a while loop, although the principle is the same for all loops and switch statements:</p>

<p><emphasis>label name</emphasis>: while <emphasis>condition</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The following example uses the break and continue statements with a labeled while loop for an adapted version of the <emphasis>Snakes and Ladders</emphasis> game that you saw earlier in this chapter. This time around, the game has an extra rule:</p>

<p>
  To win, you must land <emphasis>exactly</emphasis> on square 25.</p>

<p>
  If a particular dice roll would take you beyond square 25, you must roll again until you roll the exact number needed to land on square 25.</p>

<p>
  The game board is the same as before:



<image xlink:href="#_2.jpg" /></p>

<p>
  The values of finalSquare, board, square, and diceRoll are initialized in the same way as before:</p>

<p>let finalSquare = 25</p>

<p>var board = Int[](count: finalSquare + 1, repeatedValue: 0)</p>

<p>board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02</p>

<p>board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08</p>

<p>var square = 0</p>

<p>var diceRoll = 0</p>

<p>
  This version of the game uses a while loop and a switch statement to implement the game’s logic. The while loop has a statement label called gameLoop, to indicate that it is the main game loop for the Snakes and Ladders game.</p>

<p>
  The while loop’s condition is while square != finalSquare, to reflect that you must land exactly on square 25:</p>

<p>gameLoop: while square != finalSquare {</p>

<p> if ++diceRoll == 7 { diceRoll = 1 }</p>

<p> switch square + diceRoll {</p>

<p> case finalSquare:</p>

<p> // diceRoll will move us to the final square, so the game is over</p>

<p> break gameLoop</p>

<p> case let newSquare where newSquare &gt; finalSquare:</p>

<p> // diceRoll will move us beyond the final square, so roll again</p>

<p> continue gameLoop</p>

<p> default:</p>

<p> // this is a valid move, so find out its effect</p>

<p> square += diceRoll</p>

<p> square += board[square]</p>

<p>    }</p>

<p>}</p>

<p>println("Game over!")</p>

<p>
  The dice is rolled at the start of each loop. Rather than moving the player immediately, a switch statement is used to consider the result of the move, and to work out if the move is allowed:</p>

<p>
  If the dice roll will move the player onto the final square, the game is over. The break gameLoop statement transfers control to the first line of code outside of the while loop, which ends the game.</p>

<p>
  If the dice roll will move the player <emphasis>beyond</emphasis> the final square, the move is invalid, and the player needs to roll again. The continue gameLoop statement ends the current while loop iteration and begins the next iteration of the loop.</p>

<p>
  In all other cases, the dice roll is a valid move. The player moves forward by diceRoll squares, and the game logic checks for any snakes and ladders. The loop then ends, and control returns to the while condition to decide whether another turn is required.</p><empty-line /><p>Note</p>

<p>If the break statement above did not use the gameLoop label, it would break out of the switch statement, not the while statement. Using the gameLoop label makes it clear which control statement should be terminated.</p>

<p>
  Note also that it is not strictly necessary to use the gameLoop label when calling continue gameLoop to jump to the next iteration of the loop. There is only one loop in the game, and so there is no ambiguity as to which loop the continue statement will affect. However, there is no harm in using the gameLoop label with the continue statement. Doing so is consistent with the label’s use alongside the break statement, and helps make the game’s logic clearer to read and understand.</p>

<p>
Functions</p>

<p>On This Page</p>

<p>

            Defining and Calling Functions</p>

<p>

            Function Parameters and Return Values</p>

<p>

            Function Parameter Names</p>

<p>

            Function Types</p>

<p>

            Nested Functions</p>

<p>
<emphasis>Functions</emphasis> are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed.</p>

<p>
  Swift’s unified function syntax is flexible enough to express anything from a simple C-style function with no parameter names to a complex Objective-C-style method with local and external parameter names for each parameter. Parameters can provide default values to simplify function calls and can be passed as in-out parameters, which modify a passed variable once the function has completed its execution.</p>

<p>
  Every function in Swift has a type, consisting of the function’s parameter types and return type. You can use this type like any other type in Swift, which makes it easy to pass functions as parameters to other functions, and to return functions from functions. Functions can also be written within other functions to encapsulate useful functionality within a nested function scope.




Defining and Calling Functions</p>

<p>
  When you define a function, you can optionally define one or more named, typed values that the function takes as input (known as <emphasis>parameters</emphasis>), and/or a type of value that the function will pass back as output when it is done (known as its <emphasis>return type</emphasis>).</p>

<p>
  Every function has a <emphasis>function name</emphasis>, which describes the task that the function performs. To use a function, you “call” that function with its name and pass it input values (known as <emphasis>arguments</emphasis>) that match the types of the function’s parameters. A function’s arguments must always be provided in the same order as the function’s parameter list.</p>

<p>
  The function in the example below is called greetingForPerson, because that’s what it does—it takes a person’s name as input and returns a greeting for that person. To accomplish this, you define one input parameter—a String value called personName—and a return type of String, which will contain a greeting for that person:</p>

<p>func sayHello(personName: String) -&gt; String {</p>

<p> let greeting = "Hello, " + personName + "!"</p>

<p> return greeting</p>

<p>}</p>

<p>
  All of this information is rolled up into the function’s <emphasis>definition</emphasis>, which is prefixed with the func keyword. You indicate the function’s return type with the <emphasis>return arrow</emphasis> -&gt; (a hyphen followed by a right angle bracket), which is followed by the name of the type to return.</p>

<p>
  The definition describes what the function does, what it expects to receive, and what it returns when it is done. The definition makes it easy for the function to be called elsewhere in your code in a clear and unambiguous way:</p>

<p>println(sayHello("Anna"))</p>

<p>// prints "Hello, Anna!"</p>

<p>println(sayHello("Brian"))</p>

<p>// prints "Hello, Brian!"</p>

<p>
  You call the sayHello function by passing it a String argument value in parentheses, such as sayHello("Anna"). Because the function returns a String value, sayHello can be wrapped in a call to the println function to print that string and see its return value, as shown above.</p>

<p>
  The body of the sayHello function starts by defining a new String constant called greeting and setting it to a simple greeting message for personName. This greeting is then passed back out of the function using the return keyword. As soon as return greeting is called, the function finishes its execution and returns the current value of greeting.</p>

<p>
  You can call the sayHello function multiple times with different input values. The example above shows what happens if it is called with an input value of "Anna", and an input value of "Brian". The function returns a tailored greeting in each case.</p>

<p>
  To simplify the body of this function, combine the message creation and the return statement into one line:</p>

<p>func sayHelloAgain(personName: String) -&gt; String {</p>

<p> return "Hello again, " + personName + "!"</p>

<p>}</p>

<p>println(sayHelloAgain("Anna"))</p>

<p>// prints "Hello again, Anna!"






Function Parameters and Return Values</p>

<p>
  Function parameters and return values are extremely flexible in Swift. You can define anything from a simple utility function with a single unnamed parameter to a complex function with expressive parameter names and different parameter options.



Multiple Input Parameters</p>

<p>
  Functions can have multiple input parameters, which are written within the function’s parentheses, separated by commas.</p>

<p>
  This function takes a start and an end index for a half-open range, and works out how many elements the range contains:</p>

<p>func halfOpenRangeLength(start: Int, end: Int) -&gt; Int {</p>

<p> return end - start</p>

<p>}</p>

<p>println(halfOpenRangeLength(1, 10))</p>

<p>// prints "9"






Functions Without Parameters</p>

<p>
  Functions are not required to define input parameters. Here’s a function with no input parameters, which always returns the same String message whenever it is called:</p>

<p>func sayHelloWorld() -&gt; String {</p>

<p> return "hello, world"</p>

<p>}</p>

<p>println(sayHelloWorld())</p>

<p>// prints "hello, world"</p>

<p>
  The function definition still needs parentheses after the function’s name, even though it does not take any parameters. The function name is also followed by an empty pair of parentheses when the function is called.




Functions Without Return Values</p>

<p>
  Functions are not required to define a return type. Here’s a version of the sayHello function, called waveGoodbye, which prints its own String value rather than returning it:</p>

<p>func sayGoodbye(personName: String) {</p>

<p> println("Goodbye, \(personName)!")</p>

<p>}</p>

<p>sayGoodbye("Dave")</p>

<p>// prints "Goodbye, Dave!"</p>

<p>
  Because it does not need to return a value, the function’s definition does not include the return arrow (-&gt;) or a return type.</p><empty-line /><p>Note</p>

<p>Strictly speaking, the sayGoodbye function <emphasis>does</emphasis> still return a value, even though no return value is defined. Functions without a defined return type return a special value of type Void. This is simply an empty tuple, in effect a tuple with zero elements, which can be written as ().</p>

<p>
  The return value of a function can be ignored when it is called:</p>

<p>func printAndCount(stringToPrint: String) -&gt; Int {</p>

<p> println(stringToPrint)</p>

<p> return countElements(stringToPrint)</p>

<p>}</p>

<p>func printWithoutCounting(stringToPrint: String) {</p>

<p> printAndCount(stringToPrint)</p>

<p>}</p>

<p>printAndCount("hello, world")</p>

<p>// prints "hello, world" and returns a value of 12</p>

<p>printWithoutCounting("hello, world")</p>

<p>// prints "hello, world" but does not return a value</p>

<p>
  The first function, printAndCount, prints a string, and then returns its character count as an Int. The second function, printWithoutCounting, calls the first function, but ignores its return value. When the second function is called, the message is still printed by the first function, but the returned value is not used.</p><empty-line /><p>Note</p>

<p>Return values can be ignored, but a function that says it will return a value must always do so. A function with a defined return type cannot allow control to fall out of the bottom of the function without returning a value, and attempting to do so will result in a compile-time error.
      





Functions with Multiple Return Values</p>

<p>
  You can use a tuple type as the return type for a function to return multiple values as part of one compound return value.</p>

<p>
  The example below defines a function called count, which counts the number of vowels, consonants, and other characters in a string, based on the standard set of vowels and consonants used in American English:</p>

<p>func count(string: String) -&gt; (vowels: Int, consonants: Int, others: Int) {</p>

<p> var vowels = 0, consonants = 0, others = 0</p>

<p> for character in string {</p>

<p> switch String(character).lowercaseString {</p>

<p> case "a", "e", "i", "o", "u":</p>

<p>            ++vowels</p>

<p> case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",</p>

<p> "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":</p>

<p>            ++consonants</p>

<p> default:</p>

<p>            ++others</p>

<p>        }</p>

<p>    }</p>

<p> return (vowels, consonants, others)</p>

<p>}</p>

<p>
  You can use this count function to count the characters in an arbitrary string, and to retrieve the counted totals as a tuple of three named Int values:</p>

<p>let total = count("some arbitrary string!")</p>

<p>println("\(total.vowels) vowels and \(total.consonants) consonants")</p>

<p>// prints "6 vowels and 13 consonants"</p>

<p>
  Note that the tuple’s members do not need to be named at the point that the tuple is returned from the function, because their names are already specified as part of the function’s return type.





Function Parameter Names</p>

<p>
  All of the above functions define <emphasis>parameter names</emphasis> for their parameters:</p>

<p>func someFunction(parameterName: Int) {</p>

<p> // function body goes here, and can use parameterName</p>

<p> // to refer to the argument value for that parameter</p>

<p>}</p>

<p>
  However, these parameter names are only used within the body of the function itself, and cannot be used when calling the function. These kinds of parameter names are known as <emphasis>local parameter names</emphasis>, because they are only available for use within the function’s body.



External Parameter Names</p>

<p>
  Sometimes it’s useful to name each parameter when you <emphasis>call</emphasis> a function, to indicate the purpose of each argument you pass to the function.</p>

<p>
  If you want users of your function to provide parameter names when they call your function, define an <emphasis>external parameter name</emphasis> for each parameter, in addition to the local parameter name. You write an external parameter name before the local parameter name it supports, separated by a space:</p>

<p>func someFunction(externalParameterName localParameterName: Int) {</p>

<p> // function body goes here, and can use localParameterName</p>

<p> // to refer to the argument value for that parameter</p>

<p>}</p><empty-line /><p>Note</p>

<p>If you provide an external parameter name for a parameter, that external name must <emphasis>always</emphasis> be used when calling the function.</p>

<p>
  As an example, consider the following function, which joins two strings by inserting a third “joiner” string between them:</p>

<p>func join(s1: String, s2: String, joiner: String) -&gt; String {</p>

<p> return s1 + joiner + s2</p>

<p>}</p>

<p>
  When you call this function, the purpose of the three strings that you pass to the function is unclear:</p>

<p>join("hello", "world", ", ")</p>

<p>// returns "hello, world"</p>

<p>
  To make the purpose of these String values clearer, define external parameter names for each join function parameter:</p>

<p>func join(string s1: String, toString s2: String, withJoiner joiner: String)</p>

<p>    -&gt; String {</p>

<p> return s1 + joiner + s2</p>

<p>}</p>

<p>
  In this version of the join function, the first parameter has an external name of string and a local name of s1; the second parameter has an external name of toString and a local name of s2; and the third parameter has an external name of withJoiner and a local name of joiner.</p>

<p>
  You can now use these external parameter names to call the function in a clear and unambiguous way:</p>

<p>join(string: "hello", toString: "world", withJoiner: ", ")</p>

<p>// returns "hello, world"</p>

<p>
  The use of external parameter names enables this second version of the join function to be called in an expressive, sentence-like manner by users of the function, while still providing a function body that is readable and clear in intent.</p><empty-line /><p>Note</p>

<p>Consider using external parameter names whenever the purpose of a function’s arguments would be unclear to someone reading your code for the first time. You do not need to specify external parameter names if the purpose of each parameter is clear and unambiguous when the function is called.
      





Shorthand External Parameter Names</p>

<p>
  If you want to provide an external parameter name for a function parameter, and the local parameter name is already an appropriate name to use, you do not need to write the same name twice for that parameter. Instead, write the name once, and prefix the name with a hash symbol (#). This tells Swift to use that name as both the local parameter name and the external parameter name.</p>

<p>
  This example defines a function called containsCharacter, which defines external parameter names for both of its parameters by placing a hash symbol before their local parameter names:</p>

<p>func containsCharacter(#string: Character) -&gt; Bool {</p>

<p> for character in string {</p>

<p> if character == characterToFind {</p>

<p> return true</p>

<p>        }</p>

<p>    }</p>

<p> return false</p>

<p>}</p>

<p>
  This function’s choice of parameter names makes for a clear, readable function body, while also enabling the function to be called without ambiguity:</p>

<p>let containsAVee = containsCharacter(string: "aardvark", characterToFind: "v")</p>

<p>// containsAVee equals true, because "aardvark" contains a "v"






Default Parameter Values</p>

<p>
  You can define a <emphasis>default value</emphasis> for any parameter as part of a function’s definition. If a default value is defined, you can omit that parameter when calling the function.</p><empty-line /><p>Note</p>

<p>Place parameters with default values at the end of a function’s parameter list. This ensures that all calls to the function use the same order for their non-default arguments, and makes it clear that the same function is being called in each case.</p>

<p>
  Here’s a version of the join function from earlier, which provides a default value for its joiner parameter:</p>

<p>func join(string s1: String, toString s2: String,</p>

<p> withJoiner joiner: String = " ") -&gt; String {</p>

<p> return s1 + joiner + s2</p>

<p>}</p>

<p>
  If a string value for joiner is provided when the join function is called, that string value is used to join the two strings together, as before:</p>

<p>join(string: "hello", toString: "world", withJoiner: "-")</p>

<p>// returns "hello-world"</p>

<p>
  However, if no value of joiner is provided when the function is called, the default value of a single space (" ") is used instead:</p>

<p>join(string: "hello", toString: "world")</p>

<p>// returns "hello world"






External Names for Parameters with Default Values</p>

<p>
  In most cases, it is useful to provide (and therefore require) an external name for any parameter with a default value. This ensures that the argument for that parameter is clear in purpose if a value is provided when the function is called.</p>

<p>
  To make this process easier, Swift provides an automatic external name for any defaulted parameter you define, if you do not provide an external name yourself. The automatic external name is the same as the local name, as if you had written a hash symbol before the local name in your code.</p>

<p>
  Here’s a version of the join function from earlier, which does not provide external names for any of its parameters, but still provides a default value for its joiner parameter:</p>

<p>func join(s1: String, s2: String, joiner: String = " ") -&gt; String {</p>

<p> return s1 + joiner + s2</p>

<p>}</p>

<p>
  In this case, Swift automatically provides an external parameter name of joiner for the defaulted parameter. The external name must therefore be provided when calling the function, making the parameter’s purpose clear and unambiguous:</p>

<p>join("hello", "world", joiner: "-")</p>

<p>// returns "hello-world"</p><empty-line /><p>Note</p>

<p>You can opt out of this behavior by writing an underscore (_) instead of an explicit external name when you define the parameter. However, external names for defaulted parameters are always preferred where appropriate.
      





Variadic Parameters</p>

<p>
  A <emphasis>variadic parameter</emphasis> accepts zero or more values of a specified type. You use a variadic parameter to specify that the parameter can be passed a varying number of input values when the function is called. Write variadic parameters by inserting three period characters (...) after the parameter’s type name.</p>

<p>
  The values passed to a variadic parameter are made available within the function’s body as an array of the appropriate type. For example, a variadic parameter with a name of numbers and a type of Double... is made available within the function’s body as a constant array called numbers of type Double[].</p>

<p>
  The example below calculates the <emphasis>arithmetic mean</emphasis> (also known as the <emphasis>average</emphasis>) for a list of numbers of any length:</p>

<p>func arithmeticMean(numbers: Double...) -&gt; Double {</p>

<p> var total: Double = 0</p>

<p> for number in numbers {</p>

<p> total += number</p>

<p>    }</p>

<p> return total / Double(numbers.count)</p>

<p>}</p>

<p>arithmeticMean(1, 2, 3, 4, 5)</p>

<p>// returns 3.0, which is the arithmetic mean of these five numbers</p>

<p>arithmeticMean(3, 8, 19)</p>

<p>// returns 10.0, which is the arithmetic mean of these three numbers</p><empty-line /><p>Note</p>

<p>A function may have at most one variadic parameter, and it must always appear last in the parameter list, to avoid ambiguity when calling the function with multiple parameters.</p>

<p>
  If your function has one or more parameters with a default value, and also has a variadic parameter, place the variadic parameter after all the defaulted parameters at the very end of the list.






Constant and Variable Parameters</p>

<p>
  Function parameters are constants by default. Trying to change the value of a function parameter from within the body of that function results in a compile-time error. This means that you can’t change the value of a parameter by mistake.</p>

<p>
  However, sometimes it is useful for a function to have a <emphasis>variable</emphasis> copy of a parameter’s value to work with. You can avoid defining a new variable yourself within the function by specifying one or more parameters as <emphasis>variable parameters</emphasis> instead. Variable parameters are available as variables rather than as constants, and give a new modifiable copy of the parameter’s value for your function to work with.</p>

<p>
  Define variable parameters by prefixing the parameter name with the keyword var:</p>

<p>func alignRight(var string: String, count: Int, pad: Character) -&gt; String {</p>

<p> let amountToPad = count - countElements(string)</p>

<p> for _ in 1...amountToPad {</p>

<p> string = pad + string</p>

<p>    }</p>

<p> return string</p>

<p>}</p>

<p>let originalString = "hello"</p>

<p>let paddedString = alignRight(originalString, 10, "-")</p>

<p>// paddedString is equal to "-----hello"</p>

<p>// originalString is still equal to "hello"</p>

<p>
  This example defines a new function called alignRight, which aligns an input string to the right edge of a longer output string. Any space on the left is filled with a specified padding character. In this example, the string "hello" is converted to the string "-----hello".</p>

<p>
  The alignRight function defines the input parameter string to be a variable parameter. This means that string is now available as a local variable, initialized with the passed-in string value, and can be manipulated within the body of the function.</p>

<p>
  The function starts by working out how many characters need to be added to the left of string in order to right-align it within the overall string. This value is stored in a local constant called amountToPad. The function then adds amountToPad copies of the pad character to the left of the existing string and returns the result. It uses the string variable parameter for all its string manipulation.</p><empty-line /><p>Note</p>

<p>The changes you make to a variable parameter do not persist beyond the end of each call to the function, and are not visible outside the function’s body. The variable parameter only exists for the lifetime of that function call.
      





In-Out Parameters</p>

<p>
  Variable parameters, as described above, can only be changed within the function itself. If you want a function to modify a parameter’s value, and you want those changes to persist after the function call has ended, define that parameter as an <emphasis>in-out parameter</emphasis> instead.</p>

<p>
  You write an in-out parameter by placing the inout keyword at the start of its parameter definition. An in-out parameter has a value that is passed <emphasis>in</emphasis> to the function, is modified by the function, and is passed back <emphasis>out</emphasis> of the function to replace the original value.</p>

<p>
  You can only pass a variable as the argument for an in-out parameter. You cannot pass a constant or a literal value as the argument, because constants and literals cannot be modified. You place an ampersand (&amp;) directly before a variable’s name when you pass it as an argument to an inout parameter, to indicate that it can be modified by the function.</p><empty-line /><p>Note</p>

<p>In-out parameters cannot have default values, and variadic parameters cannot be marked as inout. If you mark a parameter as inout, it cannot also be marked as var or let.</p>

<p>
  Here’s an example of a function called swapTwoInts, which has two in-out integer parameters called a and b:</p>

<p>func swapTwoInts(inout a: Int, inout b: Int) {</p>

<p> let temporaryA = a</p>

<p> a = b</p>

<p> b = temporaryA</p>

<p>}</p>

<p>
  The swapTwoInts function simply swaps the value of b into a, and the value of a into b. The function performs this swap by storing the value of a in a temporary constant called temporaryA, assigning the value of b to a, and then assigning temporaryA to b.</p>

<p>
  You can call the swapTwoInts function with two variables of type Int to swap their values. Note that the names of someInt and anotherInt are prefixed with an ampersand when they are passed to the swapTwoInts function:</p>

<p>var someInt = 3</p>

<p>var anotherInt = 107</p>

<p>swapTwoInts(&amp;someInt, &amp;anotherInt)</p>

<p>println("someInt is now \(someInt), and anotherInt is now \(anotherInt)")</p>

<p>// prints "someInt is now 107, and anotherInt is now 3"</p>

<p>
  The example above shows that the original values of someInt and anotherInt are modified by the swapTwoInts function, even though they were originally defined outside of the function.</p><empty-line /><p>Note</p>

<p>In-out parameters are not the same as returning a value from a function. The swapTwoInts example above does not define a return type or return a value, but it still modifies the values of someInt and anotherInt. In-out parameters are an alternative way for a function to have an effect outside of the scope of its function body.
      






Function Types</p>

<p>
  Every function has a specific <emphasis>function type</emphasis>, made up of the parameter types and the return type of the function.</p>

<p>
  For example:</p>

<p>func addTwoInts(a: Int, b: Int) -&gt; Int {</p>

<p> return a + b</p>

<p>}</p>

<p>func multiplyTwoInts(a: Int, b: Int) -&gt; Int {</p>

<p> return a * b</p>

<p>}</p>

<p>
  This example defines two simple mathematical functions called addTwoInts and multiplyTwoInts. These functions each take two Int values, and return an Int value, which is the result of performing an appropriate mathematical operation.</p>

<p>
  The type of both of these functions is (Int, Int) -&gt; Int. This can be read as:</p>

<p>
  “A function type that has two parameters, both of type Int, and that returns a value of type Int.”</p>

<p>
  Here’s another example, for a function with no parameters or return value:</p>

<p>func printHelloWorld() {</p>

<p> println("hello, world")</p>

<p>}</p>

<p>
  The type of this function is () -&gt; (), or “a function that has no parameters, and returns Void.” Functions that don’t specify a return value always return Void, which is equivalent to an empty tuple in Swift, shown as ().



Using Function Types</p>

<p>
  You use function types just like any other types in Swift. For example, you can define a constant or variable to be of a function type and assign an appropriate function to that variable:</p>

<p>var mathFunction: (Int, Int) -&gt; Int = addTwoInts</p>

<p>
  This can be read as:</p>

<p>
  “Define a variable called mathFunction, which has a type of ‘a function that takes two Int values, and returns an Int value.’ Set this new variable to refer to the function called addTwoInts.”</p>

<p>
  The addTwoInts function has the same type as the mathFunction variable, and so this assignment is allowed by Swift’s type-checker.</p>

<p>
  You can now call the assigned function with the name mathFunction:</p>

<p>println("Result: \(mathFunction(2, 3))")</p>

<p>// prints "Result: 5"</p>

<p>
  A different function with the same matching type can be assigned to the same variable, in the same way as for non-function types:</p>

<p>mathFunction = multiplyTwoInts</p>

<p>println("Result: \(mathFunction(2, 3))")</p>

<p>// prints "Result: 6"</p>

<p>
  As with any other type, you can leave it to Swift to infer the function type when you assign a function to a constant or variable:</p>

<p>let anotherMathFunction = addTwoInts</p>

<p>// anotherMathFunction is inferred to be of type (Int, Int) -&gt; Int






Function Types as Parameter Types</p>

<p>
  You can use a function type such as (Int, Int) -&gt; Int as a parameter type for another function. This enables you to leave some aspects of a function’s implementation for the function’s caller to provide when the function is called.</p>

<p>
  Here’s an example to print the results of the math functions from above:</p>

<p>func printMathResult(mathFunction: (Int, Int) -&gt; Int, a: Int, b: Int) {</p>

<p> println("Result: \(mathFunction(a, b))")</p>

<p>}</p>

<p>printMathResult(addTwoInts, 3, 5)</p>

<p>// prints "Result: 8"</p>

<p>
  This example defines a function called printMathResult, which has three parameters. The first parameter is called mathFunction, and is of type (Int, Int) -&gt; Int. You can pass any function of that type as the argument for this first parameter. The second and third parameters are called a and b, and are both of type Int. These are used as the two input values for the provided math function.</p>

<p>
  When printMathResult is called, it is passed the addTwoInts function, and the integer values 3 and 5. It calls the provided function with the values 3 and 5, and prints the result of 8.</p>

<p>
  The role of printMathResult is to print the result of a call to a math function of an appropriate type. It doesn’t matter what that function’s implementation actually does—it matters only that the function is of the correct type. This enables printMathResult to hand off some of its functionality to the caller of the function in a type-safe way.




Function Types as Return Types</p>

<p>
  You can use a function type as the return type of another function. You do this by writing a complete function type immediately after the return arrow (-&gt;) of the returning function.</p>

<p>
  The next example defines two simple functions called stepForward and stepBackward. The stepForward function returns a value one more than its input value, and the stepBackward function returns a value one less than its input value. Both functions have a type of (Int) -&gt; Int:</p>

<p>func stepForward(input: Int) -&gt; Int {</p>

<p> return input + 1</p>

<p>}</p>

<p>func stepBackward(input: Int) -&gt; Int {</p>

<p> return input - 1</p>

<p>}</p>

<p>
  Here’s a function called chooseStepFunction, whose return type is “a function of type (Int) -&gt; Int”. chooseStepFunction returns the stepForward function or the stepBackward function based on a Boolean parameter called backwards:</p>

<p>func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {</p>

<p> return backwards ? stepBackward : stepForward</p>

<p>}</p>

<p>
  You can now use chooseStepFunction to obtain a function that will step in one direction or the other:</p>

<p>var currentValue = 3</p>

<p>let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)</p>

<p>// moveNearerToZero now refers to the stepBackward() function</p>

<p>
  The preceding example works out whether a positive or negative step is needed to move a variable called currentValue progressively closer to zero. currentValue has an initial value of 3, which means that currentValue &gt; 0 returns true, causing chooseStepFunction to return the stepBackward function. A reference to the returned function is stored in a constant called moveNearerToZero.</p>

<p>
  Now that moveNearerToZero refers to the correct function, it can be used to count to zero:</p>

<p>println("Counting to zero:")</p>

<p>// Counting to zero:</p>

<p>while currentValue != 0 {</p>

<p> println("\(currentValue)... ")</p>

<p> currentValue = moveNearerToZero(currentValue)</p>

<p>}</p>

<p>println("zero!")</p>

<p>// 3...</p>

<p>// 2...</p>

<p>// 1...</p>

<p>// zero!







Nested Functions</p>

<p>
  All of the functions you have encountered so far in this chapter have been examples of <emphasis>global functions</emphasis>, which are defined at a global scope. You can also define functions inside the bodies of other functions, known as <emphasis>nested functions</emphasis>.</p>

<p>
  Nested functions are hidden from the outside world by default, but can still be called and used by their enclosing function. An enclosing function can also return one of its nested functions to allow the nested function to be used in another scope.</p>

<p>
  You can rewrite the chooseStepFunction example above to use and return nested functions:</p>

<p>func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {</p>

<p> func stepForward(input: Int) -&gt; Int { return input + 1 }</p>

<p> func stepBackward(input: Int) -&gt; Int { return input - 1 }</p>

<p> return backwards ? stepBackward : stepForward</p>

<p>}</p>

<p>var currentValue = -4</p>

<p>let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)</p>

<p>// moveNearerToZero now refers to the nested stepForward() function</p>

<p>while currentValue != 0 {</p>

<p> println("\(currentValue)... ")</p>

<p> currentValue = moveNearerToZero(currentValue)</p>

<p>}</p>

<p>println("zero!")</p>

<p>// -4...</p>

<p>// -3...</p>

<p>// -2...</p>

<p>// -1...</p>

<p>// zero!</p>

<p>
Closures</p>

<p>On This Page</p>

<p>

            Closure Expressions</p>

<p>

            Trailing Closures</p>

<p>

            Capturing Values</p>

<p>

            Closures Are Reference Types</p>

<p>
<emphasis>Closures</emphasis> are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages.</p>

<p>
  Closures can capture and store references to any constants and variables from the context in which they are defined. This is known as <emphasis>closing</emphasis> over those constants and variables, hence the name “closures”. Swift handles all of the memory management of capturing for you.</p><empty-line /><p>Note</p>

<p>Don’t worry if you are not familiar with the concept of “capturing”. It is explained in detail below in Capturing Values.</p>

<p>
  Global and nested functions, as introduced in Functions, are actually special cases of closures. Closures take one of three forms:</p>

<p>
  Global functions are closures that have a name and do not capture any values.</p>

<p>
  Nested functions are closures that have a name and can capture values from their enclosing function.</p>

<p>
  Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>

<p>
  Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>

<p>
  Inferring parameter and return value types from context</p>

<p>
  Implicit returns from single-expression closures</p>

<p>
  Shorthand argument names</p>

<p>
  Trailing closure syntax






Closure Expressions</p>

<p>
  Nested functions, as introduced in Nested Functions, are a convenient means of naming and defining self-contained blocks of code as part of a larger function. However, it is sometimes useful to write shorter versions of function-like constructs without a full declaration and name. This is particularly true when you work with functions that take other functions as one or more of their arguments.</p>

<p>
<emphasis>Closure expressions</emphasis> are a way to write inline closures in a brief, focused syntax. Closure expressions provide several syntax optimizations for writing closures in their simplest form without loss of clarity or intent. The closure expression examples below illustrate these optimizations by refining a single example of the sort function over several iterations, each of which expresses the same functionality in a more succinct way.



The Sort Function</p>

<p>
  Swift’s standard library provides a function called sort, which sorts an array of values of a known type, based on the output of a sorting closure that you provide. Once it completes the sorting process, the sort function returns a new array of the same type and size as the old one, with its elements in the correct sorted order.</p>

<p>
  The closure expression examples below use the sort function to sort an array of String values in reverse alphabetical order. Here’s the initial array to be sorted:</p>

<p>let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]</p>

<p>
  The sort function takes two arguments:</p>

<p>
  An array of values of a known type.</p>

<p>
  A closure that takes two arguments of the same type as the array’s contents, and returns a Bool value to say whether the first value should appear before or after the second value once the values are sorted. The sorting closure needs to return true if the first value should appear <emphasis>before</emphasis> the second value, and false otherwise.</p>

<p>
  This example is sorting an array of String values, and so the sorting closure needs to be a function of type (String, String) -&gt; Bool.</p>

<p>
  One way to provide the sorting closure is to write a normal function of the correct type, and to pass it in as the sort function’s second parameter:</p>

<p>func backwards(s1: String, s2: String) -&gt; Bool {</p>

<p> return s1 &gt; s2</p>

<p>}</p>

<p>var reversed = sort(names, backwards)</p>

<p>// reversed is equal to ["Ewa", "Daniella", "Chris", "Barry", "Alex"]</p>

<p>
  If the first string (s1) is greater than the second string (s2), the backwards function will return true, indicating that s1 should appear before s2 in the sorted array. For characters in strings, “greater than” means “appears later in the alphabet than”. This means that the letter "B" is “greater than” the letter "A", and the string "Tom" is greater than the string "Tim". This gives a reverse alphabetical sort, with "Barry" being placed before "Alex", and so on.</p>

<p>
  However, this is a rather long-winded way to write what is essentially a single-expression function (a &gt; b). In this example, it would be preferable to write the sorting closure inline, using closure expression syntax.




Closure Expression Syntax</p>

<p>
  Closure expression syntax has the following general form:</p>

<p>{ (<emphasis>parameters</emphasis>) -&gt; <emphasis>return type</emphasis> in</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  Closure expression syntax can use constant parameters, variable parameters, and inout parameters. Default values cannot be provided. Variadic parameters can be used if you name the variadic parameter and place it last in the parameter list. Tuples can also be used as parameter types and return types.</p>

<p>
  The example below shows a closure expression version of the backwards function from earlier:</p>

<p>reversed = sort(names, { (s1: String, s2: String) -&gt; Bool in</p>

<p> return s1 &gt; s2</p>

<p>    })</p>

<p>
  Note that the declaration of parameters and return type for this inline closure is identical to the declaration from the backwards function. In both cases, it is written as (s1: String, s2: String) -&gt; Bool. However, for the inline closure expression, the parameters and return type are written <emphasis>inside</emphasis> the curly braces, not outside of them.</p>

<p>
  The start of the closure’s body is introduced by the in keyword. This keyword indicates that the definition of the closure’s parameters and return type has finished, and the body of the closure is about to begin.</p>

<p>
  Because the body of the closure is so short, it can even be written on a single line:</p>

<p>reversed = sort(names, { (s1: String, s2: String) -&gt; Bool in return s1 &gt; s2 } )</p>

<p>
  This illustrates that the overall call to the sort function has remained the same. A pair of parentheses still wrap the entire set of arguments for the function. However, one of those arguments is now an inline closure.




Inferring Type From Context</p>

<p>
  Because the sorting closure is passed as an argument to a function, Swift can infer the types of its parameters and the type of the value it returns from the type of the sort function’s second parameter. This parameter is expecting a function of type (String, String) -&gt; Bool. This means that the String, String, and Bool types do not need to be written as part of the closure expression’s definition. Because all of the types can be inferred, the return arrow (-&gt;) and the parentheses around the names of the parameters can also be omitted:</p>

<p>reversed = sort(names, { s1, s2 in return s1 &gt; s2 } )</p>

<p>
  It is always possible to infer parameter types and return type when passing a closure to a function as an inline closure expression. As a result, you rarely need to write an inline closure in its fullest form.</p>

<p>
  Nonetheless, you can make the types explicit if you wish, and doing so is encouraged if it avoids ambiguity for readers of your code. In the case of the sort function, the purpose of the closure is clear from the fact that sorting is taking place, and it is safe for a reader to assume that the closure is likely to be working with String values, because it is assisting with the sorting of an array of strings.




Implicit Returns from Single-Expression Closures</p>

<p>
  Single-expression closures can implicitly return the result of their single expression by omitting the return keyword from their declaration, as in this version of the previous example:</p>

<p>reversed = sort(names, { s1, s2 in s1 &gt; s2 } )</p>

<p>
  Here, the function type of the sort function’s second argument makes it clear that a Bool value must be returned by the closure. Because the closure’s body contains a single expression (s1 &gt; s2) that returns a Bool value, there is no ambiguity, and the return keyword can be omitted.




Shorthand Argument Names</p>

<p>
  Swift automatically provides shorthand argument names to inline closures, which can be used to refer to the values of the closure’s arguments by the names $0, $1, $2, and so on.</p>

<p>
  If you use these shorthand argument names within your closure expression, you can omit the closure’s argument list from its definition, and the number and type of the shorthand argument names will be inferred from the expected function type. The in keyword can also be omitted, because the closure expression is made up entirely of its body:</p>

<p>reversed = sort(names, { $0 &gt; $1 } )</p>

<p>
  Here, $0 and $1 refer to the closure’s first and second String arguments.




Operator Functions</p>

<p>
  There’s actually an even <emphasis>shorter</emphasis> way to write the closure expression above. Swift’s String type defines its string-specific implementation of the greater-than operator (&gt;) as a function that has two parameters of type String, and returns a value of type Bool. This exactly matches the function type needed for the sort function’s second parameter. Therefore, you can simply pass in the greater-than operator, and Swift will infer that you want to use its string-specific implementation:</p>

<p>reversed = sort(names, &gt;)</p>

<p>
  For more about operator functions, see Operator Functions.





Trailing Closures</p>

<p>
  If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, it can be useful to write it as a <emphasis>trailing closure</emphasis> instead. A trailing closure is a closure expression that is written outside of (and <emphasis>after</emphasis>) the parentheses of the function call it supports:</p>

<p>func someFunctionThatTakesAClosure(closure: () -&gt; ()) {</p>

<p> // function body goes here</p>

<p>}</p>

<p>// here's how you call this function without using a trailing closure:</p>

<p>someFunctionThatTakesAClosure({</p>

<p> // closure's body goes here</p>

<p>    })</p>

<p>// here's how you call this function with a trailing closure instead:</p>

<p>someFunctionThatTakesAClosure() {</p>

<p> // trailing closure's body goes here</p>

<p>}</p><empty-line /><p>Note</p>

<p>If a closure expression is provided as the function’s only argument and you provide that expression as a trailing closure, you do not need to write a pair of parentheses () after the function’s name when you call the function.</p>

<p>
  The string-sorting closure from the Closure Expression Syntax section above can be written outside of the sort function’s parentheses as a trailing closure:</p>

<p>reversed = sort(names) { $0 &gt; $1 }</p>

<p>
  Trailing closures are most useful when the closure is sufficiently long that it is not possible to write it inline on a single line. As an example, Swift’s Array type has a map method which takes a closure expression as its single argument. The closure is called once for each item in the array, and returns an alternative mapped value (possibly of some other type) for that item. The nature of the mapping and the type of the returned value is left up to the closure to specify.</p>

<p>
  After applying the provided closure to each array element, the map method returns a new array containing all of the new mapped values, in the same order as their corresponding values in the original array.</p>

<p>
  Here’s how you can use the map method with a trailing closure to convert an array of Int values into an array of String values. The array [16, 58, 510] is used to create the new array ["OneSix", "FiveEight", "FiveOneZero"]:</p>

<p>let digitNames = [</p>

<p> 0: "Zero", 1: "One", 2: "Two",   3: "Three", 4: "Four",</p>

<p> 5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"</p>

<p>]</p>

<p>let numbers = [16, 58, 510]</p>

<p>
  The code above creates a dictionary of mappings between the integer digits and English-language versions of their names. It also defines an array of integers, ready to be converted into strings.</p>

<p>
  You can now use the numbers array to create an array of String values, by passing a closure expression to the array’s map method as a trailing closure. Note that the call to numbers.map does not need to include any parentheses after map, because the map method has only one parameter, and that parameter is provided as a trailing closure:</p>

<p>let strings = numbers.map {</p>

<p>    (var number) -&gt; String in</p>

<p> var output = ""</p>

<p> while number &gt; 0 {</p>

<p> output = digitNames[number % 10]! + output</p>

<p> number /= 10</p>

<p>    }</p>

<p> return output</p>

<p>}</p>

<p>// strings is inferred to be of type String[]</p>

<p>// its value is ["OneSix", "FiveEight", "FiveOneZero"]</p>

<p>
  The map function calls the closure expression once for each item in the array. You do not need to specify the type of the closure’s input parameter, number, because the type can be inferred from the values in the array to be mapped.</p>

<p>
  In this example, the closure’s number parameter is defined as a <emphasis>variable parameter</emphasis>, as described in Constant and Variable Parameters, so that the parameter’s value can be modified within the closure body, rather than declaring a new local variable and assigning the passed number value to it. The closure expression also specifies a return type of String, to indicate the type that will be stored in the mapped output array.</p>

<p>
  The closure expression builds a string called output each time it is called. It calculates the last digit of number by using the remainder operator (number % 10), and uses this digit to look up an appropriate string in the digitNames dictionary.</p><empty-line /><p>Note</p>

<p>The call to the digitNames dictionary’s subscript is followed by an exclamation mark (!), because dictionary subscripts return an optional value to indicate that the dictionary lookup can fail if the key does not exist. In the example above, it is guaranteed that number % 10 will always be a valid subscript key for the digitNames dictionary, and so an exclamation mark is used to force-unwrap the String value stored in the subscript’s optional return value.</p>

<p>
  The string retrieved from the digitNames dictionary is added to the <emphasis>front</emphasis> of output, effectively building a string version of the number in reverse. (The expression number % 10 gives a value of 6 for 16, 8 for 58, and 0 for 510.)</p>

<p>
  The number variable is then divided by 10. Because it is an integer, it is rounded down during the division, so 16 becomes 1, 58 becomes 5, and 510 becomes 51.</p>

<p>
  The process is repeated until number /= 10 is equal to 0, at which point the output string is returned by the closure, and is added to the output array by the map function.</p>

<p>
  The use of trailing closure syntax in the example above neatly encapsulates the closure’s functionality immediately after the function that closure supports, without needing to wrap the entire closure within the map function’s outer parentheses.




Capturing Values</p>

<p>
  A closure can <emphasis>capture</emphasis> constants and variables from the surrounding context in which it is defined. The closure can then refer to and modify the values of those constants and variables from within its body, even if the original scope that defined the constants and variables no longer exists.</p>

<p>
  The simplest form of a closure in Swift is a nested function, written within the body of another function. A nested function can capture any of its outer function’s arguments and can also capture any constants and variables defined within the outer function.</p>

<p>
  Here’s an example of a function called makeIncrementor, which contains a nested function called incrementor. The nested incrementor function captures two values, runningTotal and amount, from its surrounding context. After capturing these values, incrementor is returned by makeIncrementor as a closure that increments runningTotal by amount each time it is called.</p>

<p>func makeIncrementor(forIncrement amount: Int) -&gt; () -&gt; Int {</p>

<p> var runningTotal = 0</p>

<p> func incrementor() -&gt; Int {</p>

<p> runningTotal += amount</p>

<p> return runningTotal</p>

<p>    }</p>

<p> return incrementor</p>

<p>}</p>

<p>
  The return type of makeIncrementor is () -&gt; Int. This means that it returns a <emphasis>function</emphasis>, rather than a simple value. The function it returns has no parameters, and returns an Int value each time it is called. To learn how functions can return other functions, see Function Types as Return Types.</p>

<p>
  The makeIncrementor function defines an integer variable called runningTotal, to store the current running total of the incrementor that will be returned. This variable is initialized with a value of 0.</p>

<p>
  The makeIncrementor function has a single Int parameter with an external name of forIncrement, and a local name of amount. The argument value passed to this parameter specifies how much runningTotal should be incremented by each time the returned incrementor function is called.</p>

<p>
makeIncrementor defines a nested function called incrementor, which performs the actual incrementing. This function simply adds amount to runningTotal, and returns the result.</p>

<p>
  When considered in isolation, the nested incrementor function might seem unusual:</p>

<p>func incrementor() -&gt; Int {</p>

<p> runningTotal += amount</p>

<p> return runningTotal</p>

<p>}</p>

<p>
  The incrementor function doesn’t have any parameters, and yet it refers to runningTotal and amount from within its function body. It does this by capturing the <emphasis>existing</emphasis> values of runningTotal and amount from its surrounding function and using them within its own function body.</p>

<p>
  Because it does not modify amount, incrementor actually captures and stores a <emphasis>copy</emphasis> of the value stored in amount. This value is stored along with the new incrementor function.</p>

<p>
  However, because it modifies the runningTotal variable each time it is called, incrementor captures a <emphasis>reference</emphasis> to the current runningTotal variable, and not just a copy of its initial value. Capturing a reference ensures sure that runningTotal does not disappear when the call to makeIncrementor ends, and ensures that runningTotal will continue to be available the next time that the incrementor function is called.</p><empty-line /><p>Note</p>

<p>Swift determines what should be captured by reference and what should be copied by value. You don’t need to annotate amount or runningTotal to say that they can be used within the nested incrementor function. Swift also handles all memory management involved in disposing of runningTotal when it is no longer needed by the incrementor function.</p>

<p>
  Here’s an example of makeIncrementor in action:</p>

<p>let incrementByTen = makeIncrementor(forIncrement: 10)</p>

<p>
  This example sets a constant called incrementByTen to refer to an incrementor function that adds 10 to its runningTotal variable each time it is called. Calling the function multiple times shows this behavior in action:</p>

<p>incrementByTen()</p>

<p>// returns a value of 10</p>

<p>incrementByTen()</p>

<p>// returns a value of 20</p>

<p>incrementByTen()</p>

<p>// returns a value of 30</p>

<p>
  If you create another incrementor, it will have its own stored reference to a new, separate runningTotal variable. In the example below, incrementBySeven captures a reference to a new runningTotal variable, and this variable is unconnected to the one captured by incrementByTen:</p>

<p>let incrementBySeven = makeIncrementor(forIncrement: 7)</p>

<p>incrementBySeven()</p>

<p>// returns a value of 7</p>

<p>incrementByTen()</p>

<p>// returns a value of 40</p><empty-line /><p>Note</p>

<p>If you assign a closure to a property of a class instance, and the closure captures that instance by referring to the instance or its members, you will create a strong reference cycle between the closure and the instance. Swift uses <emphasis>capture lists</emphasis> to break these strong reference cycles. For more information, see Strong Reference Cycles for Closures.
      





Closures Are Reference Types</p>

<p>
  In the example above, incrementBySeven and incrementByTen are constants, but the closures these constants refer to are still able to increment the runningTotal variables that they have captured. This is because functions and closures are <emphasis>reference types</emphasis>.</p>

<p>
  Whenever you assign a function or a closure to a constant or a variable, you are actually setting that constant or variable to be a <emphasis>reference</emphasis> to the function or closure. In the example above, it is the choice of closure that incrementByTen <emphasis>refers to</emphasis> that is constant, and not the contents of the closure itself.</p>

<p>
  This also means that if you assign a closure to two different constants or variables, both of those constants or variables will refer to the same closure:</p>

<p>let alsoIncrementByTen = incrementByTen</p>

<p>alsoIncrementByTen()</p>

<p>// returns a value of 50</p>

<p>
Enumerations</p>

<p>On This Page</p>

<p>

            Enumeration Syntax</p>

<p>

            Matching Enumeration Values with a Switch Statement</p>

<p>

            Associated Values</p>

<p>

            Raw Values</p>

<p>
  An <emphasis>enumeration</emphasis> defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.</p>

<p>
  If you are familiar with C, you will know that C enumerations assign related names to a set of integer values. Enumerations in Swift are much more flexible, and do not have to provide a value for each member of the enumeration. If a value (known as a “raw” value) <emphasis>is</emphasis> provided for each enumeration member, the value can be a string, a character, or a value of any integer or floating-point type.</p>

<p>
  Alternatively, enumeration members can specify associated values of <emphasis>any</emphasis> type to be stored along with each different member value, much as unions or variants do in other languages. You can define a common set of related members as part of one enumeration, each of which has a different set of values of appropriate types associated with it.</p>

<p>
  Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes, such as computed properties to provide additional information about the enumeration’s current value, and instance methods to provide functionality related to the values the enumeration represents. Enumerations can also define initializers to provide an initial member value; can be extended to expand their functionality beyond their original implementation; and can conform to protocols to provide standard functionality.</p>

<p>
  For more on these capabilities, see Properties, Methods, Initialization, Extensions, and Protocols.




Enumeration Syntax</p>

<p>
  You introduce enumerations with the enum keyword and place their entire definition within a pair of braces:</p>

<p>enum SomeEnumeration {</p>

<p> // enumeration definition goes here</p>

<p>}</p>

<p>
  Here’s an example for the four main points of a compass:</p>

<p>enum CompassPoint {</p>

<p> case North</p>

<p> case South</p>

<p> case East</p>

<p> case West</p>

<p>}</p>

<p>
  The values defined in an enumeration (such as North, South, East, and West) are the <emphasis>member values</emphasis> (or <emphasis>members</emphasis>) of that enumeration. The case keyword indicates that a new line of member values is about to be defined.</p><empty-line /><p>Note</p>

<p>Unlike C and Objective-C, Swift enumeration members are not assigned a default integer value when they are created. In the CompassPoints example above, North, South, East and West do not implicitly equal 0, 1, 2 and 3. Instead, the different enumeration members are fully-fledged values in their own right, with an explicitly-defined type of CompassPoint.</p>

<p>
  Multiple member values can appear on a single line, separated by commas:</p>

<p>enum Planet {</p>

<p> case Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune</p>

<p>}</p>

<p>
  Each enumeration definition defines a brand new type. Like other types in Swift, their names (such as CompassPoint and Planet) should start with a capital letter. Give enumeration types singular rather than plural names, so that they read as self-evident:</p>

<p>var directionToHead = CompassPoint.West</p>

<p>
  The type of directionToHead is inferred when it is initialized with one of the possible values of CompassPoint. Once directionToHead is declared as a CompassPoint, you can set it to a different CompassPoint value using a shorter dot syntax:</p>

<p>directionToHead = .East</p>

<p>
  The type of directionToHead is already known, and so you can drop the type when setting its value. This makes for highly readable code when working with explicitly-typed enumeration values.




Matching Enumeration Values with a Switch Statement</p>

<p>
  You can match individual enumeration values with a switch statement:</p>

<p>directionToHead = .South</p>

<p>switch directionToHead {</p>

<p>case .North:</p>

<p> println("Lots of planets have a north")</p>

<p>case .South:</p>

<p> println("Watch out for penguins")</p>

<p>case .East:</p>

<p> println("Where the sun rises")</p>

<p>case .West:</p>

<p> println("Where the skies are blue")</p>

<p>}</p>

<p>// prints "Watch out for penguins"</p>

<p>
  You can read this code as:</p>

<p>
  “Consider the value of directionToHead. In the case where it equals .North, print "Lots of planets have a north". In the case where it equals .South, print "Watch out for penguins".”</p>

<p>
  …and so on.</p>

<p>
  As described in Control Flow, a switch statement must be exhaustive when considering an enumeration’s members. If the case for .West is omitted, this code does not compile, because it does not consider the complete list of CompassPoint members. Requiring exhaustiveness ensures that enumeration members are not accidentally omitted.</p>

<p>
  When it is not appropriate to provide a case for every enumeration member, you can provide a default case to cover any members that are not addressed explicitly:</p>

<p>let somePlanet = Planet.Earth</p>

<p>switch somePlanet {</p>

<p>case .Earth:</p>

<p> println("Mostly harmless")</p>

<p>default:</p>

<p> println("Not a safe place for humans")</p>

<p>}</p>

<p>// prints "Mostly harmless"






Associated Values</p>

<p>
  The examples in the previous section show how the members of an enumeration are a defined (and typed) value in their own right. You can set a constant or variable to Planet.Earth, and check for this value later. However, it is sometimes useful to be able to store <emphasis>associated values</emphasis> of other types alongside these member values. This enables you to store additional custom information along with the member value, and permits this information to vary each time you use that member in your code.</p>

<p>
  You can define Swift enumerations to store associated values of any given type, and the value types can be different for each member of the enumeration if needed. Enumerations similar to these are known as <emphasis>discriminated unions</emphasis>, <emphasis>tagged unions</emphasis>, or <emphasis>variants</emphasis> in other programming languages.</p>

<p>
  For example, suppose an inventory tracking system needs to track products by two different types of barcode. Some products are labeled with 1D barcodes in UPC-A format, which uses the numbers 0 to 9. Each barcode has a “number system” digit, followed by ten “identifier” digits. These are followed by a “check” digit to verify that the code has been scanned correctly:



<image xlink:href="#_6.jpg" /></p>

<p>
  Other products are labeled with 2D barcodes in QR code format, which can use any ISO 8859-1 character and can encode a string up to 2,953 characters long:



<image xlink:href="#_7.jpg" /></p>

<p>
  It would be convenient for an inventory tracking system to be able to store UPC-A barcodes as a tuple of three integers, and QR code barcodes as a string of any length.</p>

<p>
  In Swift, an enumeration to define product barcodes of either type might look like this:</p>

<p>enum Barcode {</p>

<p> case UPCA(Int, Int, Int)</p>

<p> case QRCode(String)</p>

<p>}</p>

<p>
  This can be read as:</p>

<p>
  “Define an enumeration type called Barcode, which can take either a value of UPCA with an associated value of type (Int, Int, Int), or a value of QRCode with an associated value of type String.”</p>

<p>
  This definition does not provide any actual Int or String values—it just defines the <emphasis>type</emphasis> of associated values that Barcode constants and variables can store when they are equal to Barcode.UPCA or Barcode.QRCode.</p>

<p>
  New barcodes can then be created using either type:</p>

<p>var productBarcode = Barcode.UPCA(8, 85909_51226, 3)</p>

<p>
  This example creates a new variable called productBarcode and assigns it a value of Barcode.UPCA with an associated tuple value of (8, 8590951226, 3). The provided “identifier” value has an underscore within its integer literal—85909_51226—to make it easier to read as a barcode.</p>

<p>
  The same product can be assigned a different type of barcode:</p>

<p>productBarcode = .QRCode("ABCDEFGHIJKLMNOP")</p>

<p>
  At this point, the original Barcode.UPCA and its integer values are replaced by the new Barcode.QRCode and its string value. Constants and variables of type Barcode can store either a .UPCA or a .QRCode (together with their associated values), but they can only store one of them at any given time.</p>

<p>
  The different barcode types can be checked using a switch statement, as before. This time, however, the associated values can be extracted as part of the switch statement. You extract each associated value as a constant (with the let prefix) or a variable (with the var prefix) for use within the switch case’s body:</p>

<p>switch productBarcode {</p>

<p>case .UPCA(let numberSystem, let identifier, let check):</p>

<p> println("UPC-A with value of \(numberSystem), \(identifier), \(check).")</p>

<p>case .QRCode(let productCode):</p>

<p> println("QR code with value of \(productCode).")</p>

<p>}</p>

<p>// prints "QR code with value of ABCDEFGHIJKLMNOP."</p>

<p>
  If all of the associated values for a enumeration member are extracted as constants, or if all are extracted as variables, you can place a single var or let annotation before the member name, for brevity:</p>

<p>switch productBarcode {</p>

<p>case let .UPCA(numberSystem, identifier, check):</p>

<p> println("UPC-A with value of \(numberSystem), \(identifier), \(check).")</p>

<p>case let .QRCode(productCode):</p>

<p> println("QR code with value of \(productCode).")</p>

<p>}</p>

<p>// prints "QR code with value of ABCDEFGHIJKLMNOP."






Raw Values</p>

<p>
  The barcode example in Associated Values shows how members of an enumeration can declare that they store associated values of different types. As an alternative to associated values, enumeration members can come prepopulated with default values (called <emphasis>raw values</emphasis>), which are all of the same type.</p>

<p>
  Here’s an example that stores raw ASCII values alongside named enumeration members:</p>

<p>enum ASCIIControlCharacter: Character {</p>

<p> case Tab = "\t"</p>

<p> case LineFeed = "\n"</p>

<p> case CarriageReturn = "\r"</p>

<p>}</p>

<p>
  Here, the raw values for an enumeration called ASCIIControlCharacter are defined to be of type Character, and are set to some of the more common ASCII control characters. Character values are described in Strings and Characters.</p>

<p>
  Note that raw values are <emphasis>not</emphasis> the same as associated values. Raw values are set to prepopulated values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration member is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s members, and can be different each time you do so.</p>

<p>
  Raw values can be strings, characters, or any of the integer or floating-point number types. Each raw value must be unique within its enumeration declaration. When integers are used for raw values, they auto-increment if no value is specified for some of the enumeration members.</p>

<p>
  The enumeration below is a refinement of the earlier Planet enumeration, with raw integer values to represent each planet’s order from the sun:</p>

<p>enum Planet: Int {</p>

<p> case Mercury = 1, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune</p>

<p>}</p>

<p>
  Auto-incrementation means that Planet.Venus has a raw value of 2, and so on.</p>

<p>
  Access the raw value of an enumeration member with its toRaw method:</p>

<p>let earthsOrder = Planet.Earth.toRaw()</p>

<p>// earthsOrder is 3</p>

<p>
  Use an enumeration’s fromRaw method to try to find an enumeration member with a particular raw value. This example identifies Uranus from its raw value of 7:</p>

<p>let possiblePlanet = Planet.fromRaw(7)</p>

<p>// possiblePlanet is of type Planet? and equals Planet.Uranus</p>

<p>
  Not all possible Int values will find a matching planet, however. Because of this, the fromRaw method returns an <emphasis>optional</emphasis> enumeration member. In the example above, possiblePlanet is of type Planet?, or “optional Planet.”</p>

<p>
  If you try to find a Planet with a position of 9, the optional Planet value returned by fromRaw will be nil:</p>

<p>let positionToFind = 9</p>

<p>if let somePlanet = Planet.fromRaw(positionToFind) {</p>

<p> switch somePlanet {</p>

<p> case .Earth:</p>

<p> println("Mostly harmless")</p>

<p> default:</p>

<p> println("Not a safe place for humans")</p>

<p>    }</p>

<p>} else {</p>

<p> println("There isn't a planet at position \(positionToFind)")</p>

<p>}</p>

<p>// prints "There isn't a planet at position 9"</p>

<p>
  This example uses optional binding to try to access a planet with a raw value of 9. The statement if let somePlanet = Planet.fromRaw(9) retrieves an optional Planet, and sets somePlanet to the contents of that optional Planet if it can be retrieved. In this case, it is not possible to retrieve a planet with a position of 9, and so the else branch is executed instead.</p>

<p>
Classes and Structures</p>

<p>On This Page</p>

<p>

            Comparing Classes and Structures</p>

<p>

            Structures and Enumerations Are Value Types</p>

<p>

            Classes Are Reference Types</p>

<p>

            Choosing Between Classes and Structures</p>

<p>

            Assignment and Copy Behavior for Collection Types</p>

<p>
<emphasis>Classes</emphasis> and <emphasis>structures</emphasis> are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</p>

<p>
  Unlike other programming languages, Swift does not require you to create separate interface and implementation files for custom classes and structures. In Swift, you define a class or a structure in a single file, and the external interface to that class or structure is automatically made available for other code to use.</p><empty-line /><p>Note</p>

<p>An instance of a <emphasis>class</emphasis> is traditionally known as an <emphasis>object</emphasis>. However, Swift classes and structures are much closer in functionality than in other languages, and much of this chapter describes functionality that can apply to instances of <emphasis>either</emphasis> a class or a structure type. Because of this, the more general term <emphasis>instance</emphasis> is used.
      





Comparing Classes and Structures</p>

<p>
  Classes and structures in Swift have many things in common. Both can:</p>

<p>
  Define properties to store values</p>

<p>
  Define methods to provide functionality</p>

<p>
  Define subscripts to provide access to their values using subscript syntax</p>

<p>
  Define initializers to set up their initial state</p>

<p>
  Be extended to expand their functionality beyond a default implementation</p>

<p>
  Conform to protocols to provide standard functionality of a certain kind</p>

<p>
  For more information, see Properties, Methods, Subscripts, Initialization, Extensions, and Protocols.</p>

<p>
  Classes have additional capabilities that structures do not:</p>

<p>
  Inheritance enables one class to inherit the characteristics of another.</p>

<p>
  Type casting enables you to check and interpret the type of a class instance at runtime.</p>

<p>
  Deinitializers enable an instance of a class to free up any resources it has assigned.</p>

<p>
  Reference counting allows more than one reference to a class instance.</p>

<p>
  For more information, see Inheritance, Type Casting, Initialization, and Automatic Reference Counting.</p><empty-line /><p>Note</p>

<p>Structures are always copied when they are passed around in your code, and do not use reference counting.
      




Definition Syntax</p>

<p>
  Classes and structures have a similar definition syntax. You introduce classes with the class keyword and structures with the struct keyword. Both place their entire definition within a pair of braces:</p>

<p>class SomeClass {</p>

<p> // class definition goes here</p>

<p>}</p>

<p>struct SomeStructure {</p>

<p> // structure definition goes here</p>

<p>}</p><empty-line /><p>Note</p>

<p>Whenever you define a new class or structure, you effectively define a brand new Swift type. Give types UpperCamelCase names (such as SomeClass and SomeStructure here) to match the capitalization of standard Swift types (such as String, Int, and Bool). Conversely, always give properties and methods lowerCamelCase names (such as frameRate and incrementCount) to differentiate them from type names.</p>

<p>
  Here’s an example of a structure definition and a class definition:</p>

<p>struct Resolution {</p>

<p> var width = 0</p>

<p> var height = 0</p>

<p>}</p>

<p>class VideoMode {</p>

<p> var resolution = Resolution()</p>

<p> var interlaced = false</p>

<p> var frameRate = 0.0</p>

<p> var name: String?</p>

<p>}</p>

<p>
  The example above defines a new structure called Resolution, to describe a pixel-based display resolution. This structure has two stored properties called width and height. Stored properties are constants or variables that are bundled up and stored as part of the class or structure. These two properties are inferred to be of type Int by setting them to an initial integer value of 0.</p>

<p>
  The example above also defines a new class called VideoMode, to describe a specific video mode for video display. This class has four variable stored properties. The first, resolution, is initialized with a new Resolution structure instance, which infers a property type of Resolution. For the other three properties, new VideoMode instances will be initialized with an interlaced setting of false (meaning “non-interlaced video”), a playback frame rate of 0.0, and an optional String value called name. The name property is automatically given a default value of nil, or “no name value”, because it is of an optional type.




Class and Structure Instances</p>

<p>
  The Resolution structure definition and the VideoMode class definition only describe what a Resolution or VideoMode will look like. They themselves do not describe a specific resolution or video mode. To do that, you need to create an instance of the structure or class.</p>

<p>
  The syntax for creating instances is very similar for both structures and classes:</p>

<p>let someResolution = Resolution()</p>

<p>let someVideoMode = VideoMode()</p>

<p>
  Structures and classes both use initializer syntax for new instances. The simplest form of initializer syntax uses the type name of the class or structure followed by empty parentheses, such as Resolution() or VideoMode(). This creates a new instance of the class or structure, with any properties initialized to their default values. Class and structure initialization is described in more detail in Initialization.




Accessing Properties</p>

<p>
  You can access the properties of an instance using <emphasis>dot syntax</emphasis>. In dot syntax, you write the property name immediately after the instance name, separated by a period (.), without any spaces:</p>

<p>println("The width of someResolution is \(someResolution.width)")</p>

<p>// prints "The width of someResolution is 0"</p>

<p>
  In this example, someResolution.width refers to the width property of someResolution, and returns its default initial value of 0.</p>

<p>
  You can drill down into sub-properties, such as the width property in the resolution property of a VideoMode:</p>

<p>println("The width of someVideoMode is \(someVideoMode.resolution.width)")</p>

<p>// prints "The width of someVideoMode is 0"</p>

<p>
  You can also use dot syntax to assign a new value to a variable property:</p>

<p>someVideoMode.resolution.width = 1280</p>

<p>println("The width of someVideoMode is now \(someVideoMode.resolution.width)")</p>

<p>// prints "The width of someVideoMode is now 1280"</p><empty-line /><p>Note</p>

<p>Unlike Objective-C, Swift enables you to set sub-properties of a structure property directly. In the last example above, the width property of the resolution property of someVideoMode is set directly, without your needing to set the entire resolution property to a new value.
      





Memberwise Initializers for Structure Types</p>

<p>
  All structures have an automatically-generated <emphasis>memberwise initializer</emphasis>, which you can use to initialize the member properties of new structure instances. Initial values for the properties of the new instance can be passed to the memberwise initializer by name:</p>

<p>let vga = Resolution(width: 640, height: 480)</p>

<p>
  Unlike structures, class instances do not receive a default memberwise initializer. Initializers are described in more detail in Initialization.





Structures and Enumerations Are Value Types</p>

<p>
  A <emphasis>value type</emphasis> is a type that is <emphasis>copied</emphasis> when it is assigned to a variable or constant, or when it is passed to a function.</p>

<p>
  You’ve actually been using value types extensively throughout the previous chapters. In fact, all of the basic types in Swift—integers, floating-point numbers, Booleans, strings, arrays and dictionaries—are value types, and are implemented as structures behind the scenes.</p>

<p>
  All structures and enumerations are value types in Swift. This means that any structure and enumeration instances you create—and any value types they have as properties—are always copied when they are passed around in your code.</p>

<p>
  Consider this example, which uses the Resolution structure from the previous example:</p>

<p>let hd = Resolution(width: 1920, height: 1080)</p>

<p>var cinema = hd</p>

<p>
  This example declares a constant called hd and sets it to a Resolution instance initialized with the width and height of full HD video (1920 pixels wide by 1080 pixels high).</p>

<p>
  It then declares a variable called cinema and sets it to the current value of hd. Because Resolution is a structure, a <emphasis>copy</emphasis> of the existing instance is made, and this new copy is assigned to cinema. Even though hd and cinema now have the same width and height, they are two completely different instances behind the scenes.</p>

<p>
  Next, the width property of cinema is amended to be the width of the slightly-wider 2K standard used for digital cinema projection (2048 pixels wide and 1080 pixels high):</p>

<p>cinema.width = 2048</p>

<p>
  Checking the width property of cinema shows that it has indeed changed to be 2048:</p>

<p>println("cinema is now \(cinema.width) pixels wide")</p>

<p>// prints "cinema is now 2048 pixels wide"</p>

<p>
  However, the width property of the original hd instance still has the old value of 1920:</p>

<p>println("hd is still \(hd.width) pixels wide")</p>

<p>// prints "hd is still 1920 pixels wide"</p>

<p>
  When cinema was given the current value of hd, the <emphasis>values</emphasis> stored in hd were copied into the new cinema instance. The end result is two completely separate instances, which just happened to contain the same numeric values. Because they are separate instances, setting the width of cinema to 2048 doesn’t affect the width stored in hd.</p>

<p>
  The same behavior applies to enumerations:</p>

<p>enum CompassPoint {</p>

<p> case North, South, East, West</p>

<p>}</p>

<p>var currentDirection = CompassPoint.West</p>

<p>let rememberedDirection = currentDirection</p>

<p>currentDirection = .East</p>

<p>if rememberedDirection == .West {</p>

<p> println("The remembered direction is still .West")</p>

<p>}</p>

<p>// prints "The remembered direction is still .West"</p>

<p>
  When rememberedDirection is assigned the value of currentDirection, it is actually set to a copy of that value. Changing the value of currentDirection thereafter does not affect the copy of the original value that was stored in rememberedDirection.




Classes Are Reference Types</p>

<p>
  Unlike value types, <emphasis>reference types</emphasis> are <emphasis>not</emphasis> copied when they are assigned to a variable or constant, or when they are passed to a function. Rather than a copy, a reference to the same existing instance is used instead.</p>

<p>
  Here’s an example, using the VideoMode class defined above:</p>

<p>let tenEighty = VideoMode()</p>

<p>tenEighty.resolution = hd</p>

<p>tenEighty.interlaced = true</p>

<p>tenEighty.name = "1080i"</p>

<p>tenEighty.frameRate = 25.0</p>

<p>
  This example declares a new constant called tenEighty and sets it to refer to a new instance of the VideoMode class. The video mode is assigned a copy of the HD resolution of 1920 by 1080 from before. It is set to be interlaced, and is given a name of "1080i". Finally, it is set to a frame rate of 25.0 frames per second.</p>

<p>
  Next, tenEighty is assigned to a new constant, called alsoTenEighty, and the frame rate of alsoTenEighty is modified:</p>

<p>let alsoTenEighty = tenEighty</p>

<p>alsoTenEighty.frameRate = 30.0</p>

<p>
  Because classes are reference types, tenEighty and alsoTenEighty actually both refer to the <emphasis>same</emphasis> VideoMode instance. Effectively, they are just two different names for the same single instance.</p>

<p>
  Checking the frameRate property of tenEighty shows that it correctly reports the new frame rate of 30.0 from the underlying VideoMode instance:</p>

<p>println("The frameRate property of tenEighty is now \(tenEighty.frameRate)")</p>

<p>// prints "The frameRate property of tenEighty is now 30.0"</p>

<p>
  Note that tenEighty and alsoTenEighty are declared as <emphasis>constants</emphasis>, rather than variables. However, you can still change tenEighty.frameRate and alsoTenEighty.frameRate because the values of the tenEighty and alsoTenEighty constants themselves do not actually change. tenEighty and alsoTenEighty themselves do not “store” the VideoMode instance—instead, they both <emphasis>refer</emphasis> to a VideoMode instance behind the scenes. It is the frameRate property of the underlying VideoMode that is changed, not the values of the constant references to that VideoMode.



Identity Operators</p>

<p>
  Because classes are reference types, it is possible for multiple constants and variables to refer to the same single instance of a class behind the scenes. (The same is not true for structures and enumerations, because they are value types and are always copied when they are assigned to a constant or variable, or passed to a function.)</p>

<p>
  It can sometimes be useful to find out if two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:</p>

<p>
  Identical to (===)</p>

<p>
  Not identical to (!==)</p>

<p>
  Use these operators to check whether two constants or variables refer to the same single instance:</p>

<p>if tenEighty === alsoTenEighty {</p>

<p> println("tenEighty and alsoTenEighty refer to the same Resolution instance.")</p>

<p>}</p>

<p>// prints "tenEighty and alsoTenEighty refer to the same Resolution instance."</p>

<p>
  Note that “identical to” (represented by three equals signs, or ===) does not mean the same thing as “equal to” (represented by two equals signs, or ==):</p>

<p>
  “Identical to” means that two constants or variables of class type refer to exactly the same class instance.</p>

<p>
  “Equal to” means that two instances are considered “equal” or “equivalent” in value, for some appropriate meaning of “equal”, as defined by the type’s designer.</p>

<p>
  When you define your own custom classes and structures, it is your responsibility to decide what qualifies as two instances being “equal”. The process of defining your own implementations of the “equal to” and “not equal to” operators is described in Equivalence Operators.




Pointers</p>

<p>
  If you have experience with C, C++, or Objective-C, you may know that these languages use <emphasis>pointers</emphasis> to refer to addresses in memory. A Swift constant or variable that refers to an instance of some reference type is similar to a pointer in C, but is not a direct pointer to an address in memory, and does not require you to write an asterisk (*) to indicate that you are creating a reference. Instead, these references are defined like any other constant or variable in Swift.





Choosing Between Classes and Structures</p>

<p>
  You can use both classes and structures to define custom data types to use as the building blocks of your program’s code.</p>

<p>
  However, structure instances are always passed by <emphasis>value</emphasis>, and class instances are always passed by <emphasis>reference</emphasis>. This means that they are suited to different kinds of tasks. As you consider the data constructs and functionality that you need for a project, decide whether each data construct should be defined as a class or as a structure.</p>

<p>
  As a general guideline, consider creating a structure when one or more of these conditions apply:</p>

<p>
  The structure’s primary purpose is to encapsulate a few relatively simple data values.</p>

<p>
  It is reasonable to expect that the encapsulated values will be copied rather than referenced when you assign or pass around an instance of that structure.</p>

<p>
  Any properties stored by the structure are themselves value types, which would also be expected to be copied rather than referenced.</p>

<p>
  The structure does not need to inherit properties or behavior from another existing type.</p>

<p>
  Examples of good candidates for structures include:</p>

<p>
  The size of a geometric shape, perhaps encapsulating a width property and a height property, both of type Double.</p>

<p>
  A way to refer to ranges within a series, perhaps encapsulating a start property and a length property, both of type Int.</p>

<p>
  A point in a 3D coordinate system, perhaps encapsulating x, y and z properties, each of type Double.</p>

<p>
  In all other cases, define a class, and create instances of that class to be managed and passed by reference. In practice, this means that most custom data constructs should be classes, not structures.




Assignment and Copy Behavior for Collection Types</p>

<p>
  Swift’s Array and Dictionary types are implemented as structures. However, arrays have slightly different copying behavior from dictionaries and other structures when they are assigned to a constant or variable, and when they are passed to a function or method.</p>

<p>
  The behavior described for Array and Dictionary below is different again from the behavior of NSArray and NSDictionary in Foundation, which are implemented as classes, not structures. NSArray and NSDictionary instances are always assigned and passed around as a reference to an existing instance, rather than as a copy.</p><empty-line /><p>Note</p>

<p>The descriptions below refer to the “copying” of arrays, dictionaries, strings, and other values. Where copying is mentioned, the behavior you see in your code will always be as if a copy took place. However, Swift only performs an <emphasis>actual</emphasis> copy behind the scenes when it is absolutely necessary to do so. Swift manages all value copying to ensure optimal performance, and you should not avoid assignment to try to preempt this optimization.
      




Assignment and Copy Behavior for Dictionaries</p>

<p>
  Whenever you assign a Dictionary instance to a constant or variable, or pass a Dictionary instance as an argument to a function or method call, the dictionary is <emphasis>copied</emphasis> at the point that the assignment or call takes place. This process is described in Structures and Enumerations Are Value Types.</p>

<p>
  If the keys and/or values stored in the Dictionary instance are value types (structures or enumerations), they too are copied when the assignment or call takes place. Conversely, if the keys and/or values are reference types (classes or functions), the references are copied, but not the class instances or functions that they refer to. This copy behavior for a dictionary’s keys and values is the same as the copy behavior for a structure’s stored properties when the structure is copied.</p>

<p>
  The example below defines a dictionary called ages, which stores the names and ages of four people. The ages dictionary is then assigned to a new variable called copiedAges and is copied when this assignment takes place. After the assignment, ages and copiedAges are two separate dictionaries.</p>

<p>var ages = ["Peter": 23, "Wei": 35, "Anish": 65, "Katya": 19]</p>

<p>var copiedAges = ages</p>

<p>
  The keys for this dictionary are of type String, and the values are of type Int. Both types are value types in Swift, and so the keys and values are also copied when the dictionary copy takes place.</p>

<p>
  You can prove that the ages dictionary has been copied by changing an age value in one of the dictionaries and checking the corresponding value in the other. If you set the value for "Peter" in the copiedAges dictionary to 24, the ages dictionary still returns the old value of 23 from before the copy took place:</p>

<p>copiedAges["Peter"] = 24</p>

<p>println(ages["Peter"])</p>

<p>// prints "23"






Assignment and Copy Behavior for Arrays</p>

<p>
  The assignment and copy behavior for Swift’s Array type is more complex than for its Dictionary type. Array provides C-like performance when you work with an array’s contents and copies an array’s contents only when copying is necessary.</p>

<p>
  If you assign an Array instance to a constant or variable, or pass an Array instance as an argument to a function or method call, the contents of the array are <emphasis>not</emphasis> copied at the point that the assignment or call takes place. Instead, both arrays share the same sequence of element values. When you modify an element value through one array, the result is observable through the other.</p>

<p>
  For arrays, copying only takes place when you perform an action that has the potential to modify the <emphasis>length</emphasis> of the array. This includes appending, inserting, or removing items, or using a ranged subscript to replace a range of items in the array. If and when array copying does take place, the copy behavior for an array’s contents is the same as for a dictionary’s keys and values, as described in Assignment and Copy Behavior for Dictionaries.</p>

<p>
  The example below assigns a new array of Int values to a variable called a. This array is also assigned to two further variables called b and c:</p>

<p>var a = [1, 2, 3]</p>

<p>var b = a</p>

<p>var c = a</p>

<p>
  You can retrieve the first value in the array with subscript syntax on either a, b, or c:</p>

<p>println(a[0])</p>

<p>// 1</p>

<p>println(b[0])</p>

<p>// 1</p>

<p>println(c[0])</p>

<p>// 1</p>

<p>
  If you set an item in the array to a new value with subscript syntax, all three of a, b, and c will return the new value. Note that the array is not copied when you set a new value with subscript syntax, because setting a single value with subscript syntax does not have the potential to change the array’s length:</p>

<p>a[0] = 42</p>

<p>println(a[0])</p>

<p>// 42</p>

<p>println(b[0])</p>

<p>// 42</p>

<p>println(c[0])</p>

<p>// 42</p>

<p>
  However, if you append a new item to a, you <emphasis>do</emphasis> modify the array’s length. This prompts Swift to create a new copy of the array at the point that you append the new value. Henceforth, a is a separate, independent copy of the array.</p>

<p>
  If you change a value in a after the copy is made, a will return a different value from b and c, which both still reference the original array contents from before the copy took place:</p>

<p>a.append(4)</p>

<p>a[0] = 777</p>

<p>println(a[0])</p>

<p>// 777</p>

<p>println(b[0])</p>

<p>// 42</p>

<p>println(c[0])</p>

<p>// 42





Ensuring That an Array Is Unique</p>

<p>
  It can be useful to ensure that you have a unique copy of an array before performing an action on that array’s contents, or before passing that array to a function or method. You ensure the uniqueness of an array reference by calling the unshare method on a variable of array type. (The unshare method cannot be called on a constant array.)</p>

<p>
  If multiple variables currently refer to the same array, and you call the unshare method on one of those variables, the array is copied, so that the variable has its own independent copy of the array. However, no copying takes place if the variable is already the only reference to the array.</p>

<p>
  At the end of the previous example, b and c both reference the same array. Call the unshare method on b to make it become a unique copy:</p>

<p>b.unshare()</p>

<p>
  If you change the first value in b after calling the unshare method, all three arrays will now report a different value:</p>

<p>b[0] = -105</p>

<p>println(a[0])</p>

<p>// 777</p>

<p>println(b[0])</p>

<p>// -105</p>

<p>println(c[0])</p>

<p>// 42






Checking Whether Two Arrays Share the Same Elements</p>

<p>
  Check whether two arrays or subarrays share the same storage and elements by comparing them with the identity operators (=== and !==).</p>

<p>
  The example below uses the “identical to” operator (===) to check whether b and c still share the same array elements:</p>

<p>if b === c {</p>

<p> println("b and c still share the same array elements.")</p>

<p>} else {</p>

<p> println("b and c now refer to two independent sets of array elements.")</p>

<p>}</p>

<p>// prints "b and c now refer to two independent sets of array elements."</p>

<p>
  Alternatively, use the identity operators to check whether two subarrays share the same elements. The example below compares two identical subarrays from b and confirms that they refer to the same elements:</p>

<p>if b[0...1] === b[0...1] {</p>

<p> println("These two subarrays share the same elements.")</p>

<p>} else {</p>

<p> println("These two subarrays do not share the same elements.")</p>

<p>}</p>

<p>// prints "These two subarrays share the same elements."






Forcing a Copy of an Array</p>

<p>
  Force an explicit copy of an array by calling the array’s copy method. This method performs a shallow copy of the array and returns a new array containing the copied items.</p>

<p>
  The example below defines an array called names, which stores the names of seven people. A new variable called copiedNames is set to the result of calling the copy method on the names array:</p>

<p>var names = ["Mohsen", "Hilary", "Justyn", "Amy", "Rich", "Graham", "Vic"]</p>

<p>var copiedNames = names.copy()</p>

<p>
  You can prove that the names array has been copied by changing an item in one of the arrays and checking the corresponding item in the other. If you set the first item in the copiedNames array to "Mo" rather than "Mohsen", the names array still returns the old value of "Mohsen" from before the copy took place:</p>

<p>copiedNames[0] = "Mo"</p>

<p>println(names[0])</p>

<p>// prints "Mohsen"</p><empty-line /><p>Note</p>

<p>If you simply need to be sure that your reference to an array’s contents is the only reference in existence, call the unshare method, not the copy method. The unshare method does not make a copy of the array unless it is necessary to do so. The copy method always copies the array, even if it is already unshared.</p>

<p>
Properties</p>

<p>On This Page</p>

<p>

            Stored Properties</p>

<p>

            Computed Properties</p>

<p>

            Property Observers</p>

<p>

            Global and Local Variables</p>

<p>

            Type Properties</p>

<p>
<emphasis>Properties</emphasis> associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures.</p>

<p>
  Stored and computed properties are usually associated with instances of a particular type. However, properties can also be associated with the type itself. Such properties are known as type properties.</p>

<p>
  In addition, you can define property observers to monitor changes in a property’s value, which you can respond to with custom actions. Property observers can be added to stored properties you define yourself, and also to properties that a subclass inherits from its superclass.




Stored Properties</p>

<p>
  In its simplest form, a stored property is a constant or variable that is stored as part of an instance of a particular class or structure. Stored properties can be either <emphasis>variable stored properties</emphasis> (introduced by the var keyword) or <emphasis>constant stored properties</emphasis> (introduced by the let keyword).</p>

<p>
  You can provide a default value for a stored property as part of its definition, as described in Default Property Values. You can also set and modify the initial value for a stored property during initialization. This is true even for constant stored properties, as described in Modifying Constant Properties During Initialization.</p>

<p>
  The example below defines a structure called FixedLengthRange, which describes a range of integers whose range length cannot be changed once it is created:</p>

<p>struct FixedLengthRange {</p>

<p> var firstValue: Int</p>

<p> let length: Int</p>

<p>}</p>

<p>var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)</p>

<p>// the range represents integer values 0, 1, and 2</p>

<p>rangeOfThreeItems.firstValue = 6</p>

<p>// the range now represents integer values 6, 7, and 8</p>

<p>
  Instances of FixedLengthRange have a variable stored property called firstValue and a constant stored property called length. In the example above, length is initialized when the new range is created and cannot be changed thereafter, because it is a constant property.



Stored Properties of Constant Structure Instances</p>

<p>
  If you create an instance of a structure and assign that instance to a constant, you cannot modify the instance’s properties, even if they were declared as variable properties:</p>

<p>let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)</p>

<p>// this range represents integer values 0, 1, 2, and 3</p>

<p>rangeOfFourItems.firstValue = 6</p>

<p>// this will report an error, even thought firstValue is a variable property</p>

<p>
  Because rangeOfFourItems is declared as a constant (with the let keyword), it is not possible to change its firstValue property, even though firstValue is a variable property.</p>

<p>
  This behavior is due to structures being <emphasis>value types</emphasis>. When an instance of a value type is marked as a constant, so are all of its properties.</p>

<p>
  The same is not true for classes, which are <emphasis>reference types</emphasis>. If you assign an instance of a reference type to a constant, you can still change that instance’s variable properties.




Lazy Stored Properties</p>

<p>
  A <emphasis>lazy stored property</emphasis> is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the @lazy attribute before its declaration.</p><empty-line /><p>Note</p>

<p>You must always declare a lazy property as a variable (with the var keyword), because its initial value may not be retrieved until after instance initialization completes. Constant properties must always have a value <emphasis>before</emphasis> initialization completes, and therefore cannot be declared as lazy.</p>

<p>
  Lazy properties are useful when the initial value for a property is dependent on outside factors whose values are not known until after an instance’s initialization is complete. Lazy properties are also useful when the initial value for a property requires complex or computationally expensive setup that should not be performed unless or until it is needed.</p>

<p>
  The example below uses a lazy stored property to avoid unnecessary initialization of a complex class. This example defines two classes called DataImporter and DataManager, neither of which is shown in full:</p>

<p>class DataImporter {</p>

<p> /*</p>

<p>    DataImporter is a class to import data from an external file.</p>

<p>    The class is assumed to take a non-trivial amount of time to initialize.</p>

<p>    */</p>

<p> var fileName = "data.txt"</p>

<p> // the DataImporter class would provide data importing functionality here</p>

<p>}</p>

<p>class DataManager {</p>

<p> @lazy var importer = DataImporter()</p>

<p> var data = String[]()</p>

<p> // the DataManager class would provide data management functionality here</p>

<p>}</p>

<p>let manager = DataManager()</p>

<p>manager.data += "Some data"</p>

<p>manager.data += "Some more data"</p>

<p>// the DataImporter instance for the importer property has not yet been created</p>

<p>
  The DataManager class has a stored property called data, which is initialized with a new, empty array of String values. Although the rest of its functionality is not shown, the purpose of this DataManager class is to manage and provide access to this array of String data.</p>

<p>
  Part of the functionality of the DataManager class is the ability to import data from a file. This functionality is provided by the DataImporter class, which is assumed to take a non-trivial amount of time to initialize. This might be because a DataImporter instance needs to open a file and read its contents into memory when the DataImporter instance is initialized.</p>

<p>
  It is possible for a DataManager instance to manage its data without ever importing data from a file, so there is no need to create a new DataImporter instance when the DataManager itself is created. Instead, it makes more sense to create the DataImporter instance if and when it is first used.</p>

<p>
  Because it is marked with the @lazy attribute, the DataImporter instance for the importer property is only created when the importer property is first accessed, such as when its fileName property is queried:</p>

<p>println(manager.importer.fileName)</p>

<p>// the DataImporter instance for the importer property has now been created</p>

<p>// prints "data.txt"






Stored Properties and Instance Variables</p>

<p>
  If you have experience with Objective-C, you may know that it provides <emphasis>two</emphasis> ways to store values and references as part of a class instance. In addition to properties, you can use instance variables as a backing store for the values stored in a property.</p>

<p>
  Swift unifies these concepts into a single property declaration. A Swift property does not have a corresponding instance variable, and the backing store for a property is not accessed directly. This approach avoids confusion about how the value is accessed in different contexts and simplifies the property’s declaration into a single, definitive statement. All information about the property—including its name, type, and memory management characteristics—is defined in a single location as part of the type’s definition.





Computed Properties</p>

<p>
  In addition to stored properties, classes, structures, and enumerations can define <emphasis>computed properties</emphasis>, which do not actually store a value. Instead, they provide a getter and an optional setter to retrieve and set other properties and values indirectly.</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p>}</p>

<p>struct Size {</p>

<p> var width = 0.0, height = 0.0</p>

<p>}</p>

<p>struct Rect {</p>

<p> var origin = Point()</p>

<p> var size = Size()</p>

<p> var center: Point {</p>

<p> get {</p>

<p> let centerX = origin.x + (size.width / 2)</p>

<p> let centerY = origin.y + (size.height / 2)</p>

<p> return Point(x: centerX, y: centerY)</p>

<p>    }</p>

<p> set(newCenter) {</p>

<p> origin.x = newCenter.x - (size.width / 2)</p>

<p> origin.y = newCenter.y - (size.height / 2)</p>

<p>    }</p>

<p>    }</p>

<p>}</p>

<p>var square = Rect(origin: Point(x: 0.0, y: 0.0),</p>

<p> size: Size(width: 10.0, height: 10.0))</p>

<p>let initialSquareCenter = square.center</p>

<p>square.center = Point(x: 15.0, y: 15.0)</p>

<p>println("square.origin is now at (\(square.origin.x), \(square.origin.y))")</p>

<p>// prints "square.origin is now at (10.0, 10.0)"</p>

<p>
  This example defines three structures for working with geometric shapes:</p>

<p>
Point encapsulates an (x, y) coordinate.</p>

<p>
Size encapsulates a width and a height.</p>

<p>
Rect defines a rectangle by an origin point and a size.</p>

<p>
  The Rect structure also provides a computed property called center. The current center position of a Rect can always be determined from its origin and size, and so you don’t need to store the center point as an explicit Point value. Instead, Rect defines a custom getter and setter for a computed variable called center, to enable you to work with the rectangle’s center as if it were a real stored property.</p>

<p>
  The preceding example creates a new Rect variable called square. The square variable is initialized with an origin point of (0, 0), and a width and height of 10. This square is represented by the blue square in the diagram below.</p>

<p>
  The square variable’s center property is then accessed through dot syntax (square.center), which causes the getter for center to be called, to retrieve the current property value. Rather than returning an existing value, the getter actually calculates and returns a new Point to represent the center of the square. As can be seen above, the getter correctly returns a center point of (5, 5).</p>

<p>
  The center property is then set to a new value of (15, 15), which moves the square up and to the right, to the new position shown by the orange square in the diagram below. Setting the center property calls the setter for center, which modifies the x and y values of the stored origin property, and moves the square to its new position.



<image xlink:href="#_8.jpg" />



Shorthand Setter Declaration</p>

<p>
  If a computed property’s setter does not define a name for the new value to be set, a default name of newValue is used. Here’s an alternative version of the Rect structure, which takes advantage of this shorthand notation:</p>

<p>struct AlternativeRect {</p>

<p> var origin = Point()</p>

<p> var size = Size()</p>

<p> var center: Point {</p>

<p> get {</p>

<p> let centerX = origin.x + (size.width / 2)</p>

<p> let centerY = origin.y + (size.height / 2)</p>

<p> return Point(x: centerX, y: centerY)</p>

<p>    }</p>

<p> set {</p>

<p> origin.x = newValue.x - (size.width / 2)</p>

<p> origin.y = newValue.y - (size.height / 2)</p>

<p>    }</p>

<p>    }</p>

<p>}






Read-Only Computed Properties</p>

<p>
  A computed property with a getter but no setter is known as a <emphasis>read-only computed property</emphasis>. A read-only computed property always returns a value, and can be accessed through dot syntax, but cannot be set to a different value.</p><empty-line /><p>Note</p>

<p>You must declare computed properties—including read-only computed properties—as variable properties with the var keyword, because their value is not fixed. The let keyword is only used for constant properties, to indicate that their values cannot be changed once they are set as part of instance initialization.</p>

<p>
  You can simplify the declaration of a read-only computed property by removing the get keyword and its braces:</p>

<p>struct Cuboid {</p>

<p> var width = 0.0, height = 0.0, depth = 0.0</p>

<p> var volume: Double {</p>

<p> return width * height * depth</p>

<p>    }</p>

<p>}</p>

<p>let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)</p>

<p>println("the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)")</p>

<p>// prints "the volume of fourByFiveByTwo is 40.0"</p>

<p>
  This example defines a new structure called Cuboid, which represents a 3D rectangular box with width, height, and depth properties. This structure also has a read-only computed property called volume, which calculates and returns the current volume of the cuboid. It doesn’t make sense for volume to be settable, because it would be ambiguous as to which values of width, height, and depth should be used for a particular volume value. Nonetheless, it is useful for a Cuboid to provide a read-only computed property to enable external users to discover its current calculated volume.





Property Observers</p>

<p>
<emphasis>Property observers</emphasis> observe and respond to changes in a property’s value. Property observers are called every time a property’s value is set, even if the new value is the same as the property’s current value.</p>

<p>
  You can add property observers to any stored properties you define, apart from lazy stored properties. You can also add property observers to any inherited property (whether stored or computed) by overriding the property within a subclass. Property overriding is described in Overriding.</p><empty-line /><p>Note</p>

<p>You don’t need to define property observers for non-overridden computed properties, because you can observe and respond to changes to their value from directly within the computed property’s setter.</p>

<p>
  You have the option to define either or both of these observers on a property:</p>

<p>
willSet is called just before the value is stored.</p>

<p>
didSet is called immediately after the new value is stored.</p>

<p>
  If you implement a willSet observer, it is passed the new property value as a constant parameter. You can specify a name for this parameter as part of your willSet implementation. If you choose not to write the parameter name and parentheses within your implementation, the parameter will still be made available with a default parameter name of newValue.</p>

<p>
  Similarly, if you implement a didSet observer, it will be passed a constant parameter containing the old property value. You can name the parameter if you wish, or use the default parameter name of oldValue.</p><empty-line /><p>Note</p>

<p>willSet and didSet observers are not called when a property is first initialized. They are only called when the property’s value is set outside of an initialization context.</p>

<p>
  Here’s an example of willSet and didSet in action. The example below defines a new class called StepCounter, which tracks the total number of steps that a person takes while walking. This class might be used with input data from a pedometer or other step counter to keep track of a person’s exercise during their daily routine.</p>

<p>class StepCounter {</p>

<p> var totalSteps: Int = 0 {</p>

<p> willSet(newTotalSteps) {</p>

<p> println("About to set totalSteps to \(newTotalSteps)")</p>

<p>    }</p>

<p> didSet {</p>

<p> if totalSteps &gt; oldValue  {</p>

<p> println("Added \(totalSteps - oldValue) steps")</p>

<p>        }</p>

<p>    }</p>

<p>    }</p>

<p>}</p>

<p>let stepCounter = StepCounter()</p>

<p>stepCounter.totalSteps = 200</p>

<p>// About to set totalSteps to 200</p>

<p>// Added 200 steps</p>

<p>stepCounter.totalSteps = 360</p>

<p>// About to set totalSteps to 360</p>

<p>// Added 160 steps</p>

<p>stepCounter.totalSteps = 896</p>

<p>// About to set totalSteps to 896</p>

<p>// Added 536 steps</p>

<p>
  The StepCounter class declares a totalSteps property of type Int. This is a stored property with willSet and didSet observers.</p>

<p>
  The willSet and didSet observers for totalSteps are called whenever the property is assigned a new value. This is true even if the new value is the same as the current value.</p>

<p>
  This example’s willSet observer uses a custom parameter name of newTotalSteps for the upcoming new value. In this example, it simply prints out the value that is about to be set.</p>

<p>
  The didSet observer is called after the value of totalSteps is updated. It compares the new value of totalSteps against the old value. If the total number of steps has increased, a message is printed to indicate how many new steps have been taken. The didSet observer does not provide a custom parameter name for the old value, and the default name of oldValue is used instead.</p><empty-line /><p>Note</p>

<p>If you assign a value to a property within its own didSet observer, the new value that you assign will replace the one that was just set.
      





Global and Local Variables</p>

<p>
  The capabilities described above for computing and observing properties are also available to <emphasis>global variables</emphasis> and <emphasis>local variables</emphasis>. Global variables are variables that are defined outside of any function, method, closure, or type context. Local variables are variables that are defined within a function, method, or closure context.</p>

<p>
  The global and local variables you have encountered in previous chapters have all been <emphasis>stored variables</emphasis>. Stored variables, like stored properties, provide storage for a value of a certain type and allow that value to be set and retrieved.</p>

<p>
  However, you can also define <emphasis>computed variables</emphasis> and define observers for stored variables, in either a global or local scope. Computed variables calculate rather than store a value, and are written in the same way as computed properties.</p><empty-line /><p>Note</p>

<p>Global constants and variables are always computed lazily, in a similar manner to Lazy Stored Properties. Unlike lazy stored properties, global constants and variables do not need to be marked with the @lazy attribute.</p>

<p>
  Local constants and variables are never computed lazily.






Type Properties</p>

<p>
  Instance properties are properties that belong to an instance of a particular type. Every time you create a new instance of that type, it has its own set of property values, separate from any other instance.</p>

<p>
  You can also define properties that belong to the type itself, not to any one instance of that type. There will only ever be one copy of these properties, no matter how many instances of that type you create. These kinds of properties are called <emphasis>type properties</emphasis>.</p>

<p>
  Type properties are useful for defining values that are universal to <emphasis>all</emphasis> instances of a particular type, such as a constant property that all instances can use (like a static constant in C), or a variable property that stores a value that is global to all instances of that type (like a static variable in C).</p>

<p>
  For value types (that is, structures and enumerations), you can define stored and computed type properties. For classes, you can define computed type properties only.</p>

<p>
  Stored type properties for value types can be variables or constants. Computed type properties are always declared as variable properties, in the same way as computed instance properties.</p><empty-line /><p>Note</p>

<p>Unlike stored instance properties, you must always give stored type properties a default value. This is because the type itself does not have an initializer that can assign a value to a stored type property at initialization time.
      




Type Property Syntax</p>

<p>
  In C and Objective-C, you define static constants and variables associated with a type as <emphasis>global</emphasis> static variables. In Swift, however, type properties are written as part of the type’s definition, within the type’s outer curly braces, and each type property is explicitly scoped to the type it supports.</p>

<p>
  You define type properties for value types with the static keyword, and type properties for class types with the class keyword. The example below shows the syntax for stored and computed type properties:</p>

<p>struct SomeStructure {</p>

<p> static var storedTypeProperty = "Some value."</p>

<p> static var computedTypeProperty: Int {</p>

<p> // return an Int value here</p>

<p>    }</p>

<p>}</p>

<p>enum SomeEnumeration {</p>

<p> static var storedTypeProperty = "Some value."</p>

<p> static var computedTypeProperty: Int {</p>

<p> // return an Int value here</p>

<p>    }</p>

<p>}</p>

<p>class SomeClass {</p>

<p> class var computedTypeProperty: Int {</p>

<p> // return an Int value here</p>

<p>    }</p>

<p>}</p><empty-line /><p>Note</p>

<p>The computed type property examples above are for read-only computed type properties, but you can also define read-write computed type properties with the same syntax as for computed instance properties.
      





Querying and Setting Type Properties</p>

<p>
  Type properties are queried and set with dot syntax, just like instance properties. However, type properties are queried and set on the <emphasis>type</emphasis>, not on an instance of that type. For example:</p>

<p>println(SomeClass.computedTypeProperty)</p>

<p>// prints "42"</p>

<p>println(SomeStructure.storedTypeProperty)</p>

<p>// prints "Some value."</p>

<p>SomeStructure.storedTypeProperty = "Another value."</p>

<p>println(SomeStructure.storedTypeProperty)</p>

<p>// prints "Another value."</p>

<p>
  The examples that follow use two stored type properties as part of a structure that models an audio level meter for a number of audio channels. Each channel has an integer audio level between 0 and 10 inclusive.</p>

<p>
  The figure below illustrates how two of these audio channels can be combined to model a stereo audio level meter. When a channel’s audio level is 0, none of the lights for that channel are lit. When the audio level is 10, all of the lights for that channel are lit. In this figure, the left channel has a current level of 9, and the right channel has a current level of 7:



<image xlink:href="#_9.jpg" /></p>

<p>
  The audio channels described above are represented by instances of the AudioChannel structure:</p>

<p>struct AudioChannel {</p>

<p> static let thresholdLevel = 10</p>

<p> static var maxInputLevelForAllChannels = 0</p>

<p> var currentLevel: Int = 0 {</p>

<p> didSet {</p>

<p> if currentLevel &gt; AudioChannel.thresholdLevel {</p>

<p> // cap the new audio level to the threshold level</p>

<p> currentLevel = AudioChannel.thresholdLevel</p>

<p>        }</p>

<p> if currentLevel &gt; AudioChannel.maxInputLevelForAllChannels {</p>

<p> // store this as the new overall maximum input level</p>

<p> AudioChannel.maxInputLevelForAllChannels = currentLevel</p>

<p>        }</p>

<p>    }</p>

<p>    }</p>

<p>}</p>

<p>
  The AudioChannel structure defines two stored type properties to support its functionality. The first, thresholdLevel, defines the maximum threshold value an audio level can take. This is a constant value of 10 for all AudioChannel instances. If an audio signal comes in with a higher value than 10, it will be capped to this threshold value (as described below).</p>

<p>
  The second type property is a variable stored property called maxInputLevelForAllChannels. This keeps track of the maximum input value that has been received by <emphasis>any</emphasis> AudioChannel instance. It starts with an initial value of 0.</p>

<p>
  The AudioChannel structure also defines a stored instance property called currentLevel, which represents the channel’s current audio level on a scale of 0 to 10.</p>

<p>
  The currentLevel property has a didSet property observer to check the value of currentLevel whenever it is set. This observer performs two checks:</p>

<p>
  If the new value of currentLevel is greater than the allowed thresholdLevel, the property observer caps currentLevel to thresholdLevel.</p>

<p>
  If the new value of currentLevel (after any capping) is higher than any value previously received by <emphasis>any</emphasis> AudioChannel instance, the property observer stores the new currentLevel value in the maxInputLevelForAllChannels static property.</p><empty-line /><p>Note</p>

<p>In the first of these two checks, the didSet observer sets currentLevel to a different value. This does not, however, cause the observer to be called again.</p>

<p>
  You can use the AudioChannel structure to create two new audio channels called leftChannel and rightChannel, to represent the audio levels of a stereo sound system:</p>

<p>var leftChannel = AudioChannel()</p>

<p>var rightChannel = AudioChannel()</p>

<p>
  If you set the currentLevel of the <emphasis>left</emphasis> channel to 7, you can see that the maxInputLevelForAllChannels type property is updated to equal 7:</p>

<p>leftChannel.currentLevel = 7</p>

<p>println(leftChannel.currentLevel)</p>

<p>// prints "7"</p>

<p>println(AudioChannel.maxInputLevelForAllChannels)</p>

<p>// prints "7"</p>

<p>
  If you try to set the currentLevel of the <emphasis>right</emphasis> channel to 11, you can see that the right channel’s currentLevel property is capped to the maximum value of 10, and the maxInputLevelForAllChannels type property is updated to equal 10:</p>

<p>rightChannel.currentLevel = 11</p>

<p>println(rightChannel.currentLevel)</p>

<p>// prints "10"</p>

<p>println(AudioChannel.maxInputLevelForAllChannels)</p>

<p>// prints "10"</p>

<p>
Methods</p>

<p>On This Page</p>

<p>

            Instance Methods</p>

<p>

            Type Methods</p>

<p>
<emphasis>Methods</emphasis> are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C.</p>

<p>
  The fact that structures and enumerations can define methods in Swift is a major difference from C and Objective-C. In Objective-C, classes are the only types that can define methods. In Swift, you can choose whether to define a class, structure, or enumeration, and still have the flexibility to define methods on the type you create.




Instance Methods</p>

<p>
<emphasis>Instance methods</emphasis> are functions that belong to instances of a particular class, structure, or enumeration. They support the functionality of those instances, either by providing ways to access and modify instance properties, or by providing functionality related to the instance’s purpose. Instance methods have exactly the same syntax as functions, as described in Functions.</p>

<p>
  You write an instance method within the opening and closing braces of the type it belongs to. An instance method has implicit access to all other instance methods and properties of that type. An instance method can be called only on a specific instance of the type it belongs to. It cannot be called in isolation without an existing instance.</p>

<p>
  Here’s an example that defines a simple Counter class, which can be used to count the number of times an action occurs:</p>

<p>class Counter {</p>

<p> var count = 0</p>

<p> func increment() {</p>

<p> count++</p>

<p>    }</p>

<p> func incrementBy(amount: Int) {</p>

<p> count += amount</p>

<p>    }</p>

<p> func reset() {</p>

<p> count = 0</p>

<p>    }</p>

<p>}</p>

<p>
  The Counter class defines three instance methods:</p>

<p>
increment increments the counter by 1.</p>

<p>
incrementBy(amount: Int) increments the counter by an specified integer amount.</p>

<p>
reset resets the counter to zero.</p>

<p>
  The Counter class also declares a variable property, count, to keep track of the current counter value.</p>

<p>
  You call instance methods with the same dot syntax as properties:</p>

<p>let counter = Counter()</p>

<p>// the initial counter value is 0</p>

<p>counter.increment()</p>

<p>// the counter's value is now 1</p>

<p>counter.incrementBy(5)</p>

<p>// the counter's value is now 6</p>

<p>counter.reset()</p>

<p>// the counter's value is now 0





Local and External Parameter Names for Methods</p>

<p>
  Function parameters can have both a local name (for use within the function’s body) and an external name (for use when calling the function), as described in External Parameter Names. The same is true for method parameters, because methods are just functions that are associated with a type. However, the default behavior of local names and external names is different for functions and methods.</p>

<p>
  Methods in Swift are very similar to their counterparts in Objective-C. As in Objective-C, the name of a method in Swift typically refers to the method’s first parameter using a preposition such as with, for, or by, as seen in the incrementBy method from the preceding Counter class example. The use of a preposition enables the method to be read as a sentence when it is called. Swift makes this established method naming convention easy to write by using a different default approach for method parameters than it uses for function parameters.</p>

<p>
  Specifically, Swift gives the <emphasis>first</emphasis> parameter name in a method a local parameter name by default, and gives the second and subsequent parameter names both local <emphasis>and</emphasis> external parameter names by default. This convention matches the typical naming and calling convention you will be familiar with from writing Objective-C methods, and makes for expressive method calls without the need to qualify your parameter names.</p>

<p>
  Consider this alternative version of the Counter class, which defines a more complex form of the incrementBy method:</p>

<p>class Counter {</p>

<p> var count: Int = 0</p>

<p> func incrementBy(amount: Int, numberOfTimes: Int) {</p>

<p> count += amount * numberOfTimes</p>

<p>    }</p>

<p>}</p>

<p>
  This incrementBy method has two parameters—amount and numberOfTimes. By default, Swift treats amount as a local name only, but treats numberOfTimes as both a local <emphasis>and</emphasis> an external name. You call the method as follows:</p>

<p>let counter = Counter()</p>

<p>counter.incrementBy(5, numberOfTimes: 3)</p>

<p>// counter value is now 15</p>

<p>
  You don’t need to define an external parameter name for the first argument value, because its purpose is clear from the function name incrementBy. The second argument, however, is qualified by an external parameter name to make its purpose clear when the method is called.</p>

<p>
  This default behavior effectively treats the method as if you had written a hash symbol (#) before the numberOfTimes parameter:</p>

<p>func incrementBy(amount: Int) {</p>

<p> count += amount * numberOfTimes</p>

<p>}</p>

<p>
  The default behavior described above mean that method definitions in Swift are written with the same grammatical style as Objective-C, and are called in a natural, expressive way.




Modifying External Parameter Name Behavior for Methods</p>

<p>
  Sometimes it’s useful to provide an external parameter name for a method’s first parameter, even though this is not the default behavior. You can either add an explicit external name yourself, or you can prefix the first parameter’s name with a hash symbol to use the local name as an external name too.</p>

<p>
  Conversely, if you do not want to provide an external name for the second or subsequent parameter of a method, override the default behavior by using an underscore character (_) as an explicit external parameter name for that parameter.




The self Property</p>

<p>
  Every instance of a type has an implicit property called self, which is exactly equivalent to the instance itself. You use this implicit self property to refer to the current instance within its own instance methods.</p>

<p>
  The increment method in the example above could have been written like this:</p>

<p>func increment() {</p>

<p> self.count++</p>

<p>}</p>

<p>
  In practice, you don’t need to write self in your code very often. If you don’t explicitly write self, Swift assumes that you are referring to a property or method of the current instance whenever you use a known property or method name within a method. This assumption is demonstrated by the use of count (rather than self.count) inside the three instance methods for Counter.</p>

<p>
  The main exception to this rule occurs when a parameter name for an instance method has the same name as a property of that instance. In this situation, the parameter name takes precedence, and it becomes necessary to refer to the property in a more qualified way. You use the implicit self property to distinguish between the parameter name and the property name.</p>

<p>
  Here, self disambiguates between a method parameter called x and an instance property that is also called x:</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p> func isToTheRightOfX(x: Double) -&gt; Bool {</p>

<p> return self.x &gt; x</p>

<p>    }</p>

<p>}</p>

<p>let somePoint = Point(x: 4.0, y: 5.0)</p>

<p>if somePoint.isToTheRightOfX(1.0) {</p>

<p> println("This point is to the right of the line where x == 1.0")</p>

<p>}</p>

<p>// prints "This point is to the right of the line where x == 1.0"</p>

<p>
  Without the self prefix, Swift would assume that both uses of x referred to the method parameter called x.




Modifying Value Types from Within Instance Methods</p>

<p>
  Structures and enumerations are <emphasis>value types</emphasis>. By default, the properties of a value type cannot be modified from within its instance methods.</p>

<p>
  However, if you need to modify the properties of your structure or enumeration within a particular method, you can opt in to <emphasis>mutating</emphasis> behavior for that method. The method can then mutate (that is, change) its properties from within the method, and any changes that it makes are written back to the original structure when the method ends. The method can also assign a completely new instance to its implicit self property, and this new instance will replace the existing one when the method ends.</p>

<p>
  You can opt in to this behavior by placing the mutating keyword before the func keyword for that method:</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p> mutating func moveByX(deltaX: Double, y deltaY: Double) {</p>

<p> x += deltaX</p>

<p> y += deltaY</p>

<p>    }</p>

<p>}</p>

<p>var somePoint = Point(x: 1.0, y: 1.0)</p>

<p>somePoint.moveByX(2.0, y: 3.0)</p>

<p>println("The point is now at (\(somePoint.x), \(somePoint.y))")</p>

<p>// prints "The point is now at (3.0, 4.0)"</p>

<p>
  The Point structure above defines a mutating moveByX method, which moves a Point instance by a certain amount. Instead of returning a new point, this method actually modifies the point on which it is called. The mutating keyword is added to its definition to enable it to modify its properties.</p>

<p>
  Note that you cannot call a mutating method on a constant of structure type, because its properties cannot be changed, even if they are variable properties, as described in Stored Properties of Constant Structure Instances:</p>

<p>let fixedPoint = Point(x: 3.0, y: 3.0)</p>

<p>fixedPoint.moveByX(2.0, y: 3.0)</p>

<p>// this will report an error






Assigning to self Within a Mutating Method</p>

<p>
  Mutating methods can assign an entirely new instance to the implicit self property. The Point example shown above could have been written in the following way instead:</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p> mutating func moveByX(deltaX: Double, y deltaY: Double) {</p>

<p> self = Point(x: x + deltaX, y: y + deltaY)</p>

<p>    }</p>

<p>}</p>

<p>
  This version of the mutating moveByX method creates a brand new structure whose x and y values are set to the target location. The end result of calling this alternative version of the method will be exactly the same as for calling the earlier version.</p>

<p>
  Mutating methods for enumerations can set the implicit self parameter to be a different member from the same enumeration:</p>

<p>enum TriStateSwitch {</p>

<p> case Off, Low, High</p>

<p> mutating func next() {</p>

<p> switch self {</p>

<p> case Off:</p>

<p> self = Low</p>

<p> case Low:</p>

<p> self = High</p>

<p> case High:</p>

<p> self = Off</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>var ovenLight = TriStateSwitch.Low</p>

<p>ovenLight.next()</p>

<p>// ovenLight is now equal to .High</p>

<p>ovenLight.next()</p>

<p>// ovenLight is now equal to .Off</p>

<p>
  This example defines an enumeration for a three-state switch. The switch cycles between three different power states (Off, Low and High) every time its next method is called.





Type Methods</p>

<p>
  Instance methods, as described above, are methods that are called on an instance of a particular type. You can also define methods that are called on the type itself. These kinds of methods are called <emphasis>type methods</emphasis>. You indicate type methods for classes by writing the keyword class before the method’s func keyword, and type methods for structures and enumerations by writing the keyword static before the method’s func keyword.</p><empty-line /><p>Note</p>

<p>In Objective-C, you can define type-level methods only for Objective-C classes. In Swift, you can define type-level methods for all classes, structures, and enumerations. Each type method is explicitly scoped to the type it supports.</p>

<p>
  Type methods are called with dot syntax, like instance methods. However, you call type methods on the type, not on an instance of that type. Here’s how you call a type method on a class called SomeClass:</p>

<p>class SomeClass {</p>

<p> class func someTypeMethod() {</p>

<p> // type method implementation goes here</p>

<p>    }</p>

<p>}</p>

<p>SomeClass.someTypeMethod()</p>

<p>
  Within the body of a type method, the implicit self property refers to the type itself, rather than an instance of that type. For structures and enumerations, this means that you can use self to disambiguate between static properties and static method parameters, just as you do for instance properties and instance method parameters.</p>

<p>
  More generally, any unqualified method and property names that you use within the body of a type method will refer to other type-level methods and properties. A type method can call another type method with the other method’s name, without needing to prefix it with the type name. Similarly, type methods on structures and enumerations can access static properties by using the static property’s name without a type name prefix.</p>

<p>
  The example below defines a structure called LevelTracker, which tracks a player’s progress through the different levels or stages of a game. It is a single-player game, but can store information for multiple players on a single device.</p>

<p>
  All of the game’s levels (apart from level one) are locked when the game is first played. Every time a player finishes a level, that level is unlocked for all players on the device. The LevelTracker structure uses static properties and methods to keep track of which levels of the game have been unlocked. It also tracks the current level for an individual player.</p>

<p>struct LevelTracker {</p>

<p> static var highestUnlockedLevel = 1</p>

<p> static func unlockLevel(level: Int) {</p>

<p> if level &gt; highestUnlockedLevel { highestUnlockedLevel = level }</p>

<p>    }</p>

<p> static func levelIsUnlocked(level: Int) -&gt; Bool {</p>

<p> return level &lt;= highestUnlockedLevel</p>

<p>    }</p>

<p> var currentLevel = 1</p>

<p> mutating func advanceToLevel(level: Int) -&gt; Bool {</p>

<p> if LevelTracker.levelIsUnlocked(level) {</p>

<p> currentLevel = level</p>

<p> return true</p>

<p>        } else {</p>

<p> return false</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
  The LevelTracker structure keeps track of the highest level that any player has unlocked. This value is stored in a static property called highestUnlockedLevel.</p>

<p>
LevelTracker also defines two type functions to work with the highestUnlockedLevel property. The first is a type function called unlockLevel, which updates the value of highestUnlockedLevel whenever a new level is unlocked. The second is a convenience type function called levelIsUnlocked, which returns true if a particular level number is already unlocked. (Note that these type methods can access the highestUnlockedLevel static property without your needing to write it as LevelTracker.highestUnlockedLevel.)</p>

<p>
  In addition to its static property and type methods, LevelTracker tracks an individual player’s progress through the game. It uses an instance property called currentLevel to track the level that a player is currently playing.</p>

<p>
  To help manage the currentLevel property, LevelTracker defines an instance method called advanceToLevel. Before updating currentLevel, this method checks whether the requested new level is already unlocked. The advanceToLevel method returns a Boolean value to indicate whether or not it was actually able to set currentLevel.</p>

<p>
  The LevelTracker structure is used with the Player class, shown below, to track and update the progress of an individual player:</p>

<p>class Player {</p>

<p> var tracker = LevelTracker()</p>

<p> let playerName: String</p>

<p> func completedLevel(level: Int) {</p>

<p> LevelTracker.unlockLevel(level + 1)</p>

<p> tracker.advanceToLevel(level + 1)</p>

<p>    }</p>

<p> init(name: String) {</p>

<p> playerName = name</p>

<p>    }</p>

<p>}</p>

<p>
  The Player class creates a new instance of LevelTracker to track that player’s progress. It also provides a method called completedLevel, which is called whenever a player completes a particular level. This method unlocks the next level for all players and updates the player’s progress to move them to the next level. (The Boolean return value of advanceToLevel is ignored, because the level is known to have been unlocked by the call to LevelTracker.unlockLevel on the previous line.)</p>

<p>
  You can create a instance of the Player class for a new player, and see what happens when the player completes level one:</p>

<p>var player = Player(name: "Argyrios")</p>

<p>player.completedLevel(1)</p>

<p>println("highest unlocked level is now \(LevelTracker.highestUnlockedLevel)")</p>

<p>// prints "highest unlocked level is now 2"</p>

<p>
  If you create a second player, whom you try to move to a level that is not yet unlocked by any player in the game, the attempt to set the player’s current level fails:</p>

<p>player = Player(name: "Beto")</p>

<p>if player.tracker.advanceToLevel(6) {</p>

<p> println("player is now on level 6")</p>

<p>} else {</p>

<p> println("level 6 has not yet been unlocked")</p>

<p>}</p>

<p>// prints "level 6 has not yet been unlocked"</p>

<p>
Subscripts</p>

<p>On This Page</p>

<p>

            Subscript Syntax</p>

<p>

            Subscript Usage</p>

<p>

            Subscript Options</p>

<p>
  Classes, structures, and enumerations can define <emphasis>subscripts</emphasis>, which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an Array instance as someArray[index] and elements in a Dictionary instance as someDictionary[key].</p>

<p>
  You can define multiple subscripts for a single type, and the appropriate subscript overload to use is selected based on the type of index value you pass to the subscript. Subscripts are not limited to a single dimension, and you can define subscripts with multiple input parameters to suit your custom type’s needs.




Subscript Syntax</p>

<p>
  Subscripts enable you to query instances of a type by writing one or more values in square brackets after the instance name. Their syntax is similar to both instance method syntax and computed property syntax. You write subscript definitions with the subscript keyword, and specify one or more input parameters and a return type, in the same way as instance methods. Unlike instance methods, subscripts can be read-write or read-only. This behavior is communicated by a getter and setter in the same way as for computed properties:</p>

<p>subscript(index: Int) -&gt; Int {</p>

<p> get {</p>

<p> // return an appropriate subscript value here</p>

<p>    }</p>

<p> set(newValue) {</p>

<p> // perform a suitable setting action here</p>

<p>    }</p>

<p>}</p>

<p>
  The type of newValue is the same as the return value of the subscript. As with computed properties, you can choose not to specify the setter’s (newValue) parameter. A default parameter called newValue is provided to your setter if you do not provide one yourself.</p>

<p>
  As with read-only computed properties, you can drop the get keyword for read-only subscripts:</p>

<p>subscript(index: Int) -&gt; Int {</p>

<p> // return an appropriate subscript value here</p>

<p>}</p>

<p>
  Here’s an example of a read-only subscript implementation, which defines a TimesTable structure to represent an <emphasis>n</emphasis>-times-table of integers:</p>

<p>struct TimesTable {</p>

<p> let multiplier: Int</p>

<p> subscript(index: Int) -&gt; Int {</p>

<p> return multiplier * index</p>

<p>    }</p>

<p>}</p>

<p>let threeTimesTable = TimesTable(multiplier: 3)</p>

<p>println("six times three is \(threeTimesTable[6])")</p>

<p>// prints "six times three is 18"</p>

<p>
  In this example, a new instance of TimesTable is created to represent the three-times-table. This is indicated by passing a value of 3 to the structure’s initializer as the value to use for the instance’s multiplier parameter.</p>

<p>
  You can query the threeTimesTable instance by calling its subscript, as shown in the call to threeTimesTable[6]. This requests the sixth entry in the three-times-table, which returns a value of 18, or 3 times 6.</p><empty-line /><p>Note</p>

<p>An <emphasis>n</emphasis>-times-table is based on a fixed mathematical rule. It is not appropriate to set threeTimesTable[someIndex] to a new value, and so the subscript for TimesTable is defined as a read-only subscript.
      





Subscript Usage</p>

<p>
  The exact meaning of “subscript” depends on the context in which it is used. Subscripts are typically used as a shortcut for accessing the member elements in a collection, list, or sequence. You are free to implement subscripts in the most appropriate way for your particular class or structure’s functionality.</p>

<p>
  For example, Swift’s Dictionary type implements a subscript to set and retrieve the values stored in a Dictionary instance. You can set a value in a dictionary by providing a key of the dictionary’s key type within subscript braces, and assigning a value of the dictionary’s value type to the subscript:</p>

<p>var numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]</p>

<p>numberOfLegs["bird"] = 2</p>

<p>
  The example above defines a variable called numberOfLegs and initializes it with a dictionary literal containing three key-value pairs. The type of the numberOfLegs dictionary is inferred to be Dictionary&lt;String, Int&gt;. After creating the dictionary, this example uses subscript assignment to add a String key of "bird" and an Int value of 2 to the dictionary.</p>

<p>
  For more information about Dictionary subscripting, see Accessing and Modifying a Dictionary.</p><empty-line /><p>Note</p>

<p>Swift’s Dictionary type implements its key-value subscripting as a subscript that takes and receives an <emphasis>optional</emphasis> type. For the numberOfLegs dictionary above, the key-value subscript takes and returns a value of type Int?, or “optional int”. The Dictionary type uses an optional subscript type to model the fact that not every key will have a value, and to give a way to delete a value for a key by assigning a nil value for that key.
      





Subscript Options</p>

<p>
  Subscripts can take any number of input parameters, and these input parameters can be of any type. Subscripts can also return any type. Subscripts can use variable parameters and variadic parameters, but cannot use in-out parameters or provide default parameter values.</p>

<p>
  A class or structure can provide as many subscript implementations as it needs, and the appropriate subscript to be used will be inferred based on the types of the value or values that are contained within the subscript braces at the point that the subscript is used. This definition of multiple subscripts is known as <emphasis>subscript overloading</emphasis>.</p>

<p>
  While it is most common for a subscript to take a single parameter, you can also define a subscript with multiple parameters if it is appropriate for your type. The following example defines a Matrix structure, which represents a two-dimensional matrix of Double values. The Matrix structure’s subscript takes two integer parameters:</p>

<p>struct Matrix {</p>

<p> let rows: Int, columns: Int</p>

<p> var grid: Double[]</p>

<p> init(rows: Int, columns: Int) {</p>

<p> self.rows = rows</p>

<p> self.columns = columns</p>

<p> grid = Array(count: rows * columns, repeatedValue: 0.0)</p>

<p>    }</p>

<p> func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {</p>

<p> return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns</p>

<p>    }</p>

<p> subscript(row: Int, column: Int) -&gt; Double {</p>

<p> get {</p>

<p> assert(indexIsValidForRow(row, column: column), "Index out of range")</p>

<p> return grid[(row * columns) + column]</p>

<p>        }</p>

<p> set {</p>

<p> assert(indexIsValidForRow(row, column: column), "Index out of range")</p>

<p> grid[(row * columns) + column] = newValue</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
Matrix provides an initializer that takes two parameters called rows and columns, and creates an array that is large enough to store rows * columns values of type Double. Each position in the matrix is given an initial value of 0.0. To achieve this, the array’s size, and an initial cell value of 0.0, are passed to an array initializer that creates and initializes a new array of the correct size. This initializer is described in more detail in Creating and Initializing an Array.</p>

<p>
  You can construct a new Matrix instance by passing an appropriate row and column count to its initializer:</p>

<p>var matrix = Matrix(rows: 2, columns: 2)</p>

<p>
  The preceding example creates a new Matrix instance with two rows and two columns. The grid array for this Matrix instance is effectively a flattened version of the matrix, as read from top left to bottom right:



<image xlink:href="#_10.jpg" /></p>

<p>
  Values in the matrix can be set by passing row and column values into the subscript, separated by a comma:</p>

<p>matrix[0, 1] = 1.5</p>

<p>matrix[1, 0] = 3.2</p>

<p>
  These two statements call the subscript’s setter to set a value of 1.5 in the top right position of the matrix (where row is 0 and column is 1), and 3.2 in the bottom left position (where row is 1 and column is 0):



<image xlink:href="#_11.jpg" /></p>

<p>
  The Matrix subscript’s getter and setter both contain an assertion to check that the subscript’s row and column values are valid. To assist with these assertions, Matrix includes a convenience method called indexIsValid, which checks whether the requested row or column is outside the bounds of the matrix:</p>

<p>func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {</p>

<p> return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns</p>

<p>}</p>

<p>
  An assertion is triggered if you try to access a subscript that is outside of the matrix bounds:</p>

<p>let someValue = matrix[2, 2]</p>

<p>// this triggers an assert, because [2, 2] is outside of the matrix bounds</p>

<p>
Inheritance</p>

<p>On This Page</p>

<p>

            Defining a Base Class</p>

<p>

            Subclassing</p>

<p>

            Overriding</p>

<p>

            Preventing Overrides</p>

<p>
  A class can <emphasis>inherit</emphasis> methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a <emphasis>subclass</emphasis>, and the class it inherits from is known as its <emphasis>superclass</emphasis>. Inheritance is a fundamental behavior that differentiates classes from other types in Swift.</p>

<p>
  Classes in Swift can call and access methods, properties, and subscripts belonging to their superclass and can provide their own overriding versions of those methods, properties, and subscripts to refine or modify their behavior. Swift helps to ensure your overrides are correct by checking that the override definition has a matching superclass definition.</p>

<p>
  Classes can also add property observers to inherited properties in order to be notified when the value of a property changes. Property observers can be added to any property, regardless of whether it was originally defined as a stored or computed property.




Defining a Base Class</p>

<p>
  Any class that does not inherit from another class is known as a <emphasis>base class</emphasis>.</p><empty-line /><p>Note</p>

<p>Swift classes do not inherit from a universal base class. Classes you define without specifying a superclass automatically become base classes for you to build upon.</p>

<p>
  The example below defines a base class called Vehicle. This base class declares two properties (numberOfWheels and maxPassengers) that are universal to all vehicles. These properties are used by a method called description, which returns a String description of the vehicle’s characteristics:</p>

<p>class Vehicle {</p>

<p> var numberOfWheels: Int</p>

<p> var maxPassengers: Int</p>

<p> func description() -&gt; String {</p>

<p> return "\(numberOfWheels) wheels; up to \(maxPassengers) passengers"</p>

<p>    }</p>

<p> init() {</p>

<p> numberOfWheels = 0</p>

<p> maxPassengers = 1</p>

<p>    }</p>

<p>}</p>

<p>
  The Vehicle class also defines an <emphasis>initializer</emphasis> to set up its properties. Initializers are described in detail in Initialization, but a brief introduction is required here in order to illustrate how inherited properties can be modified by subclasses.</p>

<p>
  You use initializers to create a new instance of a type. Although initializers are not methods, they are written in a very similar syntax to instance methods. An initializer prepares a new instance for use, and ensures that all properties of the instance have valid initial values.</p>

<p>
  In its simplest form, an initializer is like an instance method with no parameters, written using the init keyword:</p>

<p>init() {</p>

<p> // perform some initialization here</p>

<p>}</p>

<p>
  To create a new instance of Vehicle, call this initializer with <emphasis>initializer syntax</emphasis>, written as TypeName followed by empty parentheses:</p>

<p>let someVehicle = Vehicle()</p>

<p>
  The initializer for Vehicle sets some initial property values (numberOfWheels = 0 and maxPassengers = 1) for an arbitrary vehicle.</p>

<p>
  The Vehicle class defines common characteristics for an arbitrary vehicle, but is not much use in itself. To make it more useful, you need to refine it to describe more specific kinds of vehicle.




Subclassing</p>

<p>
<emphasis>Subclassing</emphasis> is the act of basing a new class on an existing class. The subclass inherits characteristics from the existing class, which you can refine. You can also add new characteristics to the subclass.</p>

<p>
  To indicate that a class has a superclass, write the superclass name after the original class name, separated by a colon:</p>

<p>class SomeClass: SomeSuperclass {</p>

<p> // class definition goes here</p>

<p>}</p>

<p>
  The next example defines a second, more specific vehicle called Bicycle. This new class is based on the existing capabilities of Vehicle. You indicate this by placing the name of the class the subclass builds upon (Vehicle) after its own name (Bicycle), separated by a colon.</p>

<p>
  This can be read as:</p>

<p>
  “Define a new class called Bicycle, which inherits the characteristics of Vehicle”:</p>

<p>class Bicycle: Vehicle {</p>

<p> init() {</p>

<p> super.init()</p>

<p> numberOfWheels = 2</p>

<p>    }</p>

<p>}</p>

<p>
Bicycle is a subclass of Vehicle, and Vehicle is the superclass of Bicycle. The new Bicycle class automatically gains all characteristics of Vehicle, such as its maxPassengers and numberOfWheels properties. You can tailor those characteristics and add new ones to better match the requirements of the Bicycle class.</p>

<p>
  The Bicycle class also defines an initializer to set up its tailored characteristics. The initializer for Bicycle calls super.init(), the initializer for the Bicycle class’s superclass, Vehicle, and ensures that all of the inherited properties are initialized by Vehicle before Bicycle tries to modify them.</p><empty-line /><p>Note</p>

<p>Unlike Objective-C, initializers are not inherited by default in Swift. For more information, see Initializer Inheritance and Overriding.</p>

<p>
  The default value of maxPassengers provided by Vehicle is already correct for a bicycle, and so it is not changed within the initializer for Bicycle. The original value of numberOfWheels is not correct, however, and is replaced with a new value of 2.</p>

<p>
  As well as inheriting the properties of Vehicle, Bicycle also inherits its methods. If you create an instance of Bicycle, you can call its inherited description method to see how its properties have been updated:</p>

<p>let bicycle = Bicycle()</p>

<p>println("Bicycle: \(bicycle.description())")</p>

<p>// Bicycle: 2 wheels; up to 1 passengers</p>

<p>
  Subclasses can themselves be subclassed:</p>

<p>class Tandem: Bicycle {</p>

<p> init() {</p>

<p> super.init()</p>

<p> maxPassengers = 2</p>

<p>    }</p>

<p>}</p>

<p>
  This example creates a subclass of Bicycle for a two-seater bicycle known as a “tandem”. Tandem inherits the two properties from Bicycle, which in turn inherits these properties from Vehicle. Tandem doesn’t change the number of wheels—it’s still a bicycle, after all—but it does update maxPassengers to have the correct value for a tandem.</p><empty-line /><p>Note</p>

<p>Subclasses are only allowed to modify <emphasis>variable</emphasis> properties of superclasses during initialization. You can’t modify inherited constant properties of subclasses.</p>

<p>
  Creating an instance of Tandem and printing its description shows how its properties have been updated:</p>

<p>let tandem = Tandem()</p>

<p>println("Tandem: \(tandem.description())")</p>

<p>// Tandem: 2 wheels; up to 2 passengers</p>

<p>
  Note that the description method is also inherited by Tandem. Instance methods of a class are inherited by any and all subclasses of that class.




Overriding</p>

<p>
  A subclass can provide its own custom implementation of an instance method, class method, instance property, or subscript that it would otherwise inherit from a superclass. This is known as <emphasis>overriding</emphasis>.</p>

<p>
  To override a characteristic that would otherwise be inherited, you prefix your overriding definition with the override keyword. Doing so clarifies that you intend to provide an override and have not provided a matching definition by mistake. Overriding by accident can cause unexpected behavior, and any overrides without the override keyword are diagnosed as an error when your code is compiled.</p>

<p>
  The override keyword also prompts the Swift compiler to check that your overriding class’s superclass (or one of its parents) has a declaration that matches the one you provided for the override. This check ensures that your overriding definition is correct.



Accessing Superclass Methods, Properties, and Subscripts</p>

<p>
  When you provide a method, property, or subscript override for a subclass, it is sometimes useful to use the existing superclass implementation as part of your override. For example, you can refine the behavior of that existing implementation or store a modified value in an existing inherited variable.</p>

<p>
  Where this is appropriate, you access the superclass version of a method, property, or subscript by using the super prefix:</p>

<p>
  An overridden method named someMethod can call the superclass version of someMethod by calling super.someMethod() within the overriding method implementation.</p>

<p>
  An overridden property called someProperty can access the superclass version of someProperty as super.someProperty within the overriding getter or setter implementation.</p>

<p>
  An overridden subscript for someIndex can access the superclass version of the same subscript as super[someIndex] from within the overriding subscript implementation.






Overriding Methods</p>

<p>
  You can override an inherited instance or class method to provide a tailored or alternative implementation of the method within your subclass.</p>

<p>
  The following example defines a new subclass of Vehicle called Car, which overrides the description method it inherits from Vehicle:</p>

<p>class Car: Vehicle {</p>

<p> var speed: Double = 0.0</p>

<p> init() {</p>

<p> super.init()</p>

<p> maxPassengers = 5</p>

<p> numberOfWheels = 4</p>

<p>    }</p>

<p> override func description() -&gt; String {</p>

<p> return super.description() + "; "</p>

<p>            + "traveling at \(speed) mph"</p>

<p>    }</p>

<p>}</p>

<p>
Car declares a new stored Double property called speed. This property defaults to 0.0, meaning “zero miles per hour”. Car also has a custom initializer, which sets the maximum number of passengers to 5, and the default number of wheels to 4.</p>

<p>
Car overrides its inherited description method by providing a method with the same declaration as the description method from Vehicle. The overriding method definition is prefixed with the override keyword.</p>

<p>
  Rather than providing a completely custom implementation of description, the overriding method actually starts by calling super.description to retrieve the description provided by Vehicle. It then appends some additional information about the car’s current speed.</p>

<p>
  If you create a new instance of Car, and print the output of its description method, you can see that the description has indeed changed:</p>

<p>let car = Car()</p>

<p>println("Car: \(car.description())")</p>

<p>// Car: 4 wheels; up to 5 passengers; traveling at 0.0 mph






Overriding Properties</p>

<p>
  You can override an inherited instance or class property to provide your own custom getter and setter for that property, or to add property observers to enable the overriding property to observe when the underlying property value changes.



Overriding Property Getters and Setters</p>

<p>
  You can provide a custom getter (and setter, if appropriate) to override <emphasis>any</emphasis> inherited property, regardless of whether the inherited property is implemented as a stored or computed property at its source. The stored or computed nature of an inherited property is not known by a subclass—it only knows that the inherited property has a certain name and type. You must always state both the name and the type of the property you are overriding, to enable the compiler to check that your override matches a superclass property with the same name and type.</p>

<p>
  You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You cannot, however, present an inherited read-write property as a read-only property.</p><empty-line /><p>Note</p>

<p>If you provide a setter as part of a property override, you must also provide a getter for that override. If you don’t want to modify the inherited property’s value within the overriding getter, you can simply pass through the inherited value by returning super.someProperty from the getter, as in the SpeedLimitedCar example below.</p>

<p>
  The following example defines a new class called SpeedLimitedCar, which is a subclass of Car. The SpeedLimitedCar class represents a car that has been fitted with a speed-limiting device, which prevents the car from traveling faster than 40mph. You implement this limitation by overriding the inherited speed property:</p>

<p>class SpeedLimitedCar: Car {</p>

<p> override var speed: Double  {</p>

<p> get {</p>

<p> return super.speed</p>

<p>    }</p>

<p> set {</p>

<p> super.speed = min(newValue, 40.0)</p>

<p>    }</p>

<p>    }</p>

<p>}</p>

<p>
  Whenever you set the speed property of a SpeedLimitedCar instance, the property’s setter implementation checks the new value and limits it to 40mph. It does this by setting the underlying speed property of its superclass to be the smaller of newValue and 40.0. The smaller of these two values is determined by passing them to the min function, which is a global function provided by the Swift standard library. The min function takes two or more values and returns the smallest one of those values.</p>

<p>
  If you try to set the speed property of a SpeedLimitedCar instance to more than 40mph, and then print the output of its description method, you see that the speed has been limited:</p>

<p>let limitedCar = SpeedLimitedCar()</p>

<p>limitedCar.speed = 60.0</p>

<p>println("SpeedLimitedCar: \(limitedCar.description())")</p>

<p>// SpeedLimitedCar: 4 wheels; up to 5 passengers; traveling at 40.0 mph






Overriding Property Observers</p>

<p>
  You can use property overriding to add property observers to an inherited property. This enables you to be notified when the value of the inherited property changes, regardless of how that property was originally implemented. For more information on property observers, see Property Observers.</p><empty-line /><p>Note</p>

<p>You cannot add property observers to inherited constant stored properties or inherited read-only computed properties. The value of these properties cannot be set, and so it is not appropriate to provide a willSet or didSet implementation as part of an override.</p>

<p>
  Note also that you cannot provide both an overriding setter and an overriding property observer. If you want to observe changes to a property’s value, and you are already providing a custom setter for that property, you can simply observe any value changes from within the custom setter.</p>

<p>
  The following example defines a new class called AutomaticCar, which is a subclass of Car. The AutomaticCar class represents a car with an automatic gearbox, which automatically selects an appropriate gear to use based on the current speed. AutomaticCar also provides a custom description method to print the current gear.</p>

<p>class AutomaticCar: Car {</p>

<p> var gear = 1</p>

<p> override var speed: Double {</p>

<p> didSet {</p>

<p> gear = Int(speed / 10.0) + 1</p>

<p>    }</p>

<p>    }</p>

<p> override func description() -&gt; String {</p>

<p> return super.description() + " in gear \(gear)"</p>

<p>    }</p>

<p>}</p>

<p>
  Whenever you set the speed property of an AutomaticCar instance, the property’s didSet observer automatically sets the gear property to an appropriate choice of gear for the new speed. Specifically, the property observer chooses a gear which is the new speed value divided by 10, rounded down to the nearest integer, plus 1. A speed of 10.0 produces a gear of 1, and a speed of 35.0 produces a gear of 4:</p>

<p>let automatic = AutomaticCar()</p>

<p>automatic.speed = 35.0</p>

<p>println("AutomaticCar: \(automatic.description())")</p>

<p>// AutomaticCar: 4 wheels; up to 5 passengers; traveling at 35.0 mph in gear 4








Preventing Overrides</p>

<p>
  You can prevent a method, property, or subscript from being overridden by marking it as <emphasis>final</emphasis>. Do this by writing the @final attribute before its introducer keyword (such as @final var, @final func, @final class func, and @final subscript).</p>

<p>
  Any attempts to override a final method, property, or subscript in a subclass are reported as a compile-time error. Methods, properties or subscripts that you add to a class in an extension can also be marked as final within the extension’s definition.</p>

<p>
  You can mark an entire class as final by writing the @final attribute before the class keyword in its class definition (@final class). Any attempts to subclass a final class will be reported as a compile-time error.</p>

<p>
Initialization</p>

<p>On This Page</p>

<p>

            Setting Initial Values for Stored Properties</p>

<p>

            Customizing Initialization</p>

<p>

            Default Initializers</p>

<p>

            Initializer Delegation for Value Types</p>

<p>

            Class Inheritance and Initialization</p>

<p>

            Setting a Default Property Value with a Closure or Function</p>

<p>
<emphasis>Initialization</emphasis> is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that is required before the new instance is ready to for use.</p>

<p>
  You implement this initialization process by defining <emphasis>initializers</emphasis>, which are like special methods that can be called to create a new instance of a particular type. Unlike Objective-C initializers, Swift initializers do not return a value. Their primary role is to ensure that new instances of a type are correctly initialized before they are used for the first time.</p>

<p>
  Instances of class types can also implement a <emphasis>deinitializer</emphasis>, which performs any custom cleanup just before an instance of that class is deallocated. For more information about deinitializers, see Deinitialization.




Setting Initial Values for Stored Properties</p>

<p>
  Classes and structures <emphasis>must</emphasis> set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created. Stored properties cannot be left in an indeterminate state.</p>

<p>
  You can set an initial value for a stored property within an initializer, or by assigning a default property value as part of the property’s definition. These actions are described in the following sections.</p><empty-line /><p>Note</p>

<p>When you assign a default value to a stored property, or set its initial value within an initializer, the value of that property is set directly, without calling any property observers.
      




Initializers</p>

<p>
<emphasis>Initializers</emphasis> are called to create a new instance of a particular type. In its simplest form, an initializer is like an instance method with no parameters, written using the init keyword.</p>

<p>
  The example below defines a new structure called Fahrenheit to store temperatures expressed in the Fahrenheit scale. The Fahrenheit structure has one stored property, temperature, which is of type Double:</p>

<p>struct Fahrenheit {</p>

<p> var temperature: Double</p>

<p> init() {</p>

<p> temperature = 32.0</p>

<p>    }</p>

<p>}</p>

<p>var f = Fahrenheit()</p>

<p>println("The default temperature is \(f.temperature)° Fahrenheit")</p>

<p>// prints "The default temperature is 32.0° Fahrenheit"</p>

<p>
  The structure defines a single initializer, init, with no parameters, which initializes the stored temperature with a value of 32.0 (the freezing point of water when expressed in the Fahrenheit scale).




Default Property Values</p>

<p>
  You can set the initial value of a stored property from within an initializer, as shown above. Alternatively, specify a <emphasis>default property value</emphasis> as part of the property’s declaration. You specify a default property value by assigning an initial value to the property when it is defined.</p><empty-line /><p>Note</p>

<p>If a property always takes the same initial value, provide a default value rather than setting a value within an initializer. The end result is the same, but the default value ties the property’s initialization more closely to its declaration. It makes for shorter, clearer initializers and enables you to infer the type of the property from its default value. The default value also makes it easier for you to take advantage of default initializers and initializer inheritance, as described later in this chapter.</p>

<p>
  You can write the Fahrenheit structure from above in a simpler form by providing a default value for its temperature property at the point that the property is declared:</p>

<p>struct Fahrenheit {</p>

<p> var temperature = 32.0</p>

<p>}







Customizing Initialization</p>

<p>
  You can customize the initialization process with input parameters and optional property types, or by modifying constant properties during initialization, as described in the following sections.



Initialization Parameters</p>

<p>
  You can provide <emphasis>initialization parameters</emphasis> as part of an initializer’s definition, to define the types and names of values that customize the initialization process. Initialization parameters have the same capabilities and syntax as function and method parameters.</p>

<p>
  The following example defines a structure called Celsius, which stores temperatures expressed in the Celsius scale. The Celsius structure implements two custom initializers called init(fromFahrenheit:) and init(fromKelvin:), which initialize a new instance of the structure with a value from a different temperature scale:</p>

<p>struct Celsius {</p>

<p> var temperatureInCelsius: Double = 0.0</p>

<p> init(fromFahrenheit fahrenheit: Double) {</p>

<p> temperatureInCelsius = (fahrenheit - 32.0) / 1.8</p>

<p>    }</p>

<p> init(fromKelvin kelvin: Double) {</p>

<p> temperatureInCelsius = kelvin - 273.15</p>

<p>    }</p>

<p>}</p>

<p>let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)</p>

<p>// boilingPointOfWater.temperatureInCelsius is 100.0</p>

<p>let freezingPointOfWater = Celsius(fromKelvin: 273.15)</p>

<p>// freezingPointOfWater.temperatureInCelsius is 0.0</p>

<p>
  The first initializer has a single initialization parameter with an external name of fromFahrenheit and a local name of fahrenheit. The second initializer has a single initialization parameter with an external name of fromKelvin and a local name of kelvin. Both initializers convert their single argument into a value in the Celsius scale and store this value in a property called temperatureInCelsius.




Local and External Parameter Names</p>

<p>
  As with function and method parameters, initialization parameters can have both a local name for use within the initializer’s body and an external name for use when calling the initializer.</p>

<p>
  However, initializers do not have an identifying function name before their parentheses in the way that functions and methods do. Therefore, the names and types of an initializer’s parameters play a particularly important role in identifying which initializer should be called. Because of this, Swift provides an automatic external name for <emphasis>every</emphasis> parameter in an initializer if you don’t provide an external name yourself. This automatic external name is the same as the local name, as if you had written a hash symbol before every initialization parameter.</p><empty-line /><p>Note</p>

<p>If you do not want to provide an external name for a parameter in an initializer, provide an underscore (_) as an explicit external name for that parameter to override the default behavior described above.</p>

<p>
  The following example defines a structure called Color, with three constant properties called red, green, and blue. These properties store a value between 0.0 and 1.0 to indicate the amount of red, green, and blue in the color.</p>

<p>
Color provides an initializer with three appropriately named parameters of type Double:</p>

<p>struct Color {</p>

<p> let red = 0.0, green = 0.0, blue = 0.0</p>

<p> init(red: Double, green: Double, blue: Double) {</p>

<p> self.red   = red</p>

<p> self.green = green</p>

<p> self.blue  = blue</p>

<p>    }</p>

<p>}</p>

<p>
  Whenever you create a new Color instance, you call its initializer using external names for each of the three color components:</p>

<p>let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)</p>

<p>
  Note that it is not possible to call this initializer without using the external names. External names must always be used in an intializer if they are defined, and omitting them is a compile-time error:</p>

<p>let veryGreen = Color(0.0, 1.0, 0.0)</p>

<p>// this reports a compile-time error - external names are required






Optional Property Types</p>

<p>
  If your custom type has a stored property that is logically allowed to have “no value”—perhaps because its value cannot be set during initialization, or because it is allowed to have “no value” at some later point—declare the property with an <emphasis>optional</emphasis> type. Properties of optional type are automatically initialized with a value of nil, indicating that the property is deliberately intended to have “no value yet” during initialization.</p>

<p>
  The following example defines a class called SurveyQuestion, with an optional String property called response:</p>

<p>class SurveyQuestion {</p>

<p> var text: String</p>

<p> var response: String?</p>

<p> init(text: String) {</p>

<p> self.text = text</p>

<p>    }</p>

<p> func ask() {</p>

<p> println(text)</p>

<p>    }</p>

<p>}</p>

<p>let cheeseQuestion = SurveyQuestion(text: "Do you like cheese?")</p>

<p>cheeseQuestion.ask()</p>

<p>// prints "Do you like cheese?"</p>

<p>cheeseQuestion.response = "Yes, I do like cheese."</p>

<p>
  The response to a survey question cannot be known until it is asked, and so the response property is declared with a type of String?, or “optional String”. It is automatically assigned a default value of nil, meaning “no string yet”, when a new instance of SurveyQuestion is initialized.




Modifying Constant Properties During Initialization</p>

<p>
  You can modify the value of a constant property at any point during initialization, as long as it is set to a definite value by the time initialization finishes.</p><empty-line /><p>Note</p>

<p>For class instances, a constant property can only be modified during initialization by the class that introduces it. It cannot be modified by a subclass.</p>

<p>
  You can revise the SurveyQuestion example from above to use a constant property rather than a variable property for the text property of the question, to indicate that the question does not change once an instance of SurveyQuestion is created. Even though the text property is now a constant, it can still be set within the class’s initializer:</p>

<p>class SurveyQuestion {</p>

<p> let text: String</p>

<p> var response: String?</p>

<p> init(text: String) {</p>

<p> self.text = text</p>

<p>    }</p>

<p> func ask() {</p>

<p> println(text)</p>

<p>    }</p>

<p>}</p>

<p>let beetsQuestion = SurveyQuestion(text: "How about beets?")</p>

<p>beetsQuestion.ask()</p>

<p>// prints "How about beets?"</p>

<p>beetsQuestion.response = "I also like beets. (But not with cheese.)"







Default Initializers</p>

<p>
  Swift provides a <emphasis>default initializer</emphasis> for any structure or base class that provides default values for all of its properties and does not provide at least one initializer itself. The default initializer simply creates a new instance with all of its properties set to their default values.</p>

<p>
  This example defines a class called ShoppingListItem, which encapsulates the name, quantity, and purchase state of an item in a shopping list:</p>

<p>class ShoppingListItem {</p>

<p> var name: String?</p>

<p> var quantity = 1</p>

<p> var purchased = false</p>

<p>}</p>

<p>var item = ShoppingListItem()</p>

<p>
  Because all properties of the ShoppingListItem class have default values, and because it is a base class with no superclass, ShoppingListItem automatically gains a default initializer implementation that creates a new instance with all of its properties set to their default values. (The name property is an optional String property, and so it automatically receives a default value of nil, even though this value is not written in the code.) The example above uses the default initializer for the ShoppingListItem class to create a new instance of the class with initializer syntax, written as ShoppingListItem(), and assigns this new instance to a variable called item.



Memberwise Initializers for Structure Types</p>

<p>
  In addition to the default initializers mentioned above, structure types automatically receive a <emphasis>memberwise initializer</emphasis> if they provide default values for all of their stored properties and do not define any of their own custom initializers.</p>

<p>
  The memberwise initializer is a shorthand way to initialize the member properties of new structure instances. Initial values for the properties of the new instance can be passed to the memberwise initializer by name.</p>

<p>
  The example below defines a structure called Size with two properties called width and height. Both properties are inferred to be of type Double by assigning a default value of 0.0.</p>

<p>
  Because both stored properties have a default value, the Size structure automatically receives an init(width:height:) memberwise initializer, which you can use to initialize a new Size instance:</p>

<p>struct Size {</p>

<p> var width = 0.0, height = 0.0</p>

<p>}</p>

<p>let twoByTwo = Size(width: 2.0, height: 2.0)







Initializer Delegation for Value Types</p>

<p>
  Initializers can call other initializers to perform part of an instance’s initialization. This process, known as <emphasis>initializer delegation</emphasis>, avoids duplicating code across multiple initializers.</p>

<p>
  The rules for how initializer delegation works, and for what forms of delegation are allowed, are different for value types and class types. Value types (structures and enumerations) do not support inheritance, and so their initializer delegation process is relatively simple, because they can only delegate to another initializer that they provide themselves. Classes, however, can inherit from other classes, as described in Inheritance. This means that classes have additional responsibilities for ensuring that all stored properties they inherit are assigned a suitable value during initialization. These responsibilities are described in Class Inheritance and Initialization below.</p>

<p>
  For value types, you use self.init to refer to other initializers from the same value type when writing your own custom initializers. You can only call self.init from within an initializer.</p>

<p>
  Note that if you define a custom initializer for a value type, you will no longer have access to the default initializer (or the memberwise structure initializer, if it is a structure) for that type. This constraint prevents a situation in which you provide a more complex initializer that performs additional essential setup is circumvented by someone accidentally using one of the automatic initializers instead.</p><empty-line /><p>Note</p>

<p>If you want your custom value type to be initializable with the default initializer and memberwise initializer, and also with your own custom initializers, write your custom initializers in an extension rather than as part of the value type’s original implementation. For more information, see Extensions.</p>

<p>
  The following example defines a custom Rect structure to represent a geometric rectangle. The example requires two supporting structures called Size and Point, both of which provide default values of 0.0 for all of their properties:</p>

<p>struct Size {</p>

<p> var width = 0.0, height = 0.0</p>

<p>}</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p>}</p>

<p>
  You can initialize the Rect structure below in one of three ways—by using its default zero-initialized origin and size property values, by providing a specific origin point and size, or by providing a specific center point and size. These initialization options are represented by three custom initializers that are part of the Rect structure’s definition:</p>

<p>struct Rect {</p>

<p> var origin = Point()</p>

<p> var size = Size()</p>

<p> init() {}</p>

<p> init(origin: Point, size: Size) {</p>

<p> self.origin = origin</p>

<p> self.size = size</p>

<p>    }</p>

<p> init(center: Point, size: Size) {</p>

<p> let originX = center.x - (size.width / 2)</p>

<p> let originY = center.y - (size.height / 2)</p>

<p> self.init(origin: Point(x: originX, y: originY), size: size)</p>

<p>    }</p>

<p>}</p>

<p>
  The first Rect initializer, init(), is functionally the same as the default initializer that the structure would have received if it did not have its own custom initializers. This initializer has an empty body, represented by an empty pair of curly braces {}, and does not perfom any initialization. Calling this initializer returns a Rect instance whose origin and size properties are both initialized with the default values of Point(x: 0.0, y: 0.0) and Size(width: 0.0, height: 0.0) from their property definitions:</p>

<p>let basicRect = Rect()</p>

<p>// basicRect's origin is (0.0, 0.0) and its size is (0.0, 0.0)</p>

<p>
  The second Rect initializer, init(origin:size:), is functionally the same as the memberwise initializer that the structure would have received if it did not have its own custom initializers. This initializer simply assigns the origin and size argument values to the appropriate stored properties:</p>

<p>let originRect = Rect(origin: Point(x: 2.0, y: 2.0),</p>

<p> size: Size(width: 5.0, height: 5.0))</p>

<p>// originRect's origin is (2.0, 2.0) and its size is (5.0, 5.0)</p>

<p>
  The third Rect initializer, init(center:size:), is slightly more complex. It starts by calculating an appropriate origin point based on a center point and a size value. It then calls (or <emphasis>delegates</emphasis>) to the init(origin:size:) initializer, which stores the new origin and size values in the appropriate properties:</p>

<p>let centerRect = Rect(center: Point(x: 4.0, y: 4.0),</p>

<p> size: Size(width: 3.0, height: 3.0))</p>

<p>// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)</p>

<p>
  The init(center:size:) initializer could have assigned the new values of origin and size to the appropriate properties itself. However, it is more convenient (and clearer in intent) for the init(center:size:) initializer to take advantage of an existing initializer that already provides exactly that functionality.</p><empty-line /><p>Note</p>

<p>For an alternative way to write this example without defining the init() and init(origin:size:) initializers yourself, see Extensions.
      





Class Inheritance and Initialization</p>

<p>
  All of a class’s stored properties—including any properties the class inherits from its superclass—<emphasis>must</emphasis> be assigned an initial value during initialization.</p>

<p>
  Swift defines two kinds of initializers for class types to help ensure all stored properties receive an initial value. These are known as designated initializers and convenience initializers.



Designated Initializers and Convenience Initializers</p>

<p>
<emphasis>Designated initializers</emphasis> are the primary initializers for a class. A designated initializer fully initializes all properties introduced by that class and calls an appropriate superclass initializer to continue the initialization process up the superclass chain.</p>

<p>
  Classes tend to have very few designated initializers, and it is quite common for a class to have only one. Designated initializers are “funnel” points through which initialization takes place, and through which the initialization process continues up the superclass chain.</p>

<p>
  Every class must have at least one designated initializer. In some cases, this requirement is satisfied by inheriting one or more designated initializers from a superclass, as described in Automatic Initializer Inheritance below.</p>

<p>
<emphasis>Convenience initializers</emphasis> are secondary, supporting initializers for a class. You can define a convenience initializer to call a designated initializer from the same class as the convenience initializer with some of the designated initializer’s parameters set to default values. You can also define a convenience initializer to create an instance of that class for a specific use case or input value type.</p>

<p>
  You do not have to provide convenience initializers if your class does not require them. Create convenience initializers whenever a shortcut to a common initialization pattern will save time or make initialization of the class clearer in intent.




Initializer Chaining</p>

<p>
  To simplify the relationships between designated and convenience initializers, Swift applies the following three rules for delegation calls between initializers:


<strong>Rule 1</strong></p>

<p>
  Designated initializers must call a designated initializer from their immediate superclass.

<strong>Rule 2</strong></p>

<p>
  Convenience initializers must call another initializer available in the <emphasis>same</emphasis> class.

<strong>Rule 3</strong></p>

<p>
  Convenience initializers must ultimately end up calling a designated initializer.</p>

<p>
  A simple way to remember this is:</p>

<p>
  Designated initializers must always delegate <emphasis>up</emphasis>.</p>

<p>
  Convenience initializers must always delegate <emphasis>across</emphasis>.</p>

<p>
  These rules are illustrated in the figure below:



<image xlink:href="#_12.jpg" /></p>

<p>
  Here, the superclass has a single designated initializer and two convenience initializers. One convenience initializer calls another convenience initializer, which in turn calls the single designated initializer. This satisfies rules 2 and 3 from above. The superclass does not itself have a further superclass, and so rule 1 does not apply.</p>

<p>
  The subclass in this figure has two designated initializers and one convenience initializer. The convenience initializer must call one of the two designated initializers, because it can only call another initializer from the same class. This satisfies rules 2 and 3 from above. Both designated initializers must call the single designated initializer from the superclass, to satisfy rule 1 from above.</p><empty-line /><p>Note</p>

<p>These rules don’t affect how users of your classes <emphasis>create</emphasis> instances of each class. Any initializer in the diagram above can be used to create a fully-initialized instance of the class they belong to. The rules only affect how you write the class’s implementation.</p>

<p>
  The figure below shows a more complex class hierarchy for four classes. It illustrates how the designated initializers in this hierarchy act as “funnel” points for class initialization, simplifying the interrelationships among classes in the chain:



<image xlink:href="#_13.jpg" />




Two-Phase Initialization</p>

<p>
  Class initialization in Swift is a two-phase process. In the first phase, each stored property is assigned an initial value by the class that introduced it. Once the initial state for every stored property has been determined, the second phase begins, and each class is given the opportunity to customize its stored properties further before the new instance is considered ready for use.</p>

<p>
  The use of a two-phase initialization process makes initialization safe, while still giving complete flexibility to each class in a class hierarchy. Two-phase initialization prevents property values from being accessed before they are initialized, and prevents property values from being set to a different value by another initializer unexpectedly.</p><empty-line /><p>Note</p>

<p>Swift’s two-phase initialization process is similar to initialization in Objective-C. The main difference is that during phase 1, Objective-C assigns zero or null values (such as 0 or nil) to every property. Swift’s initialization flow is more flexible in that it lets you set custom initial values, and can cope with types for which 0 or nil is not a valid default value.</p>

<p>
  Swift’s compiler performs four helpful safety-checks to make sure that two-phase initialization is completed without error:


<strong>Safety check 1</strong></p>

<p>
  A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer.</p>

<p>
  As mentioned above, the memory for an object is only considered fully initialized once the initial state of all of its stored properties is known. In order for this rule to be satisfied, a designated initializer must make sure that all its own properties are initialized before it hands off up the chain.


<strong>Safety check 2</strong></p>

<p>
  A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization.

<strong>Safety check 3</strong></p>

<p>
  A convenience initializer must delegate to another initializer before assigning a value to <emphasis>any</emphasis> property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.

<strong>Safety check 4</strong></p>

<p>
  An initializer cannot call any instance methods, read the values of any instance properties, or refer to self as a value until after the first phase of initialization is complete.</p>

<p>
  The class instance is not fully valid until the first phase ends. Properties can only be accessed, and methods can only be called, once the class instance is known to be valid at the end of the first phase.</p>

<p>
  Here’s how two-phase initialization plays out, based on the four safety checks above:</p>

<p>
<strong>Phase 1</strong></p>

<p>
  A designated or convenience initializer is called on a class.</p>

<p>
  Memory for a new instance of that class is allocated. The memory is not yet initialized.</p>

<p>
  A designated initializer for that class confirms that all stored properties introduced by that class have a value. The memory for these stored properties is now initialized.</p>

<p>
  The designated initializer hands off to a superclass initializer to perform the same task for its own stored properties.</p>

<p>
  This continues up the class inheritance chain until the top of the chain is reached.</p>

<p>
  Once the top of the chain is reached, and the final class in the chain has ensured that all of its stored properties have a value, the instance’s memory is considered to be fully initialized, and phase 1 is complete.</p>

<p>
<strong>Phase 2</strong></p>

<p>
  Working back down from the top of the chain, each designated initializer in the chain has the option to customize the instance further. Initializers are now able to access self and can modify its properties, call its instance methods, and so on.</p>

<p>
  Finally, any convenience initializers in the chain have the option to customize the instance and to work with self.</p>

<p>
  Here’s how phase 1 looks for an initialization call for a hypothetical subclass and superclass:



<image xlink:href="#_14.jpg" /></p>

<p>
  In this example, initialization begins with a call to a convenience initializer on the subclass. This convenience initializer cannot yet modify any properties. It delegates across to a designated initializer from the same class.</p>

<p>
  The designated initializer makes sure that all of the subclass’s properties have a value, as per safety check 1. It then calls a designated initializer on its superclass to continue the initialization up the chain.</p>

<p>
  The superclass’s designated initializer makes sure that all of the superclass properties have a value. There are no further superclasses to initialize, and so no further delegation is needed.</p>

<p>
  As soon as all properties of the superclass have an initial value, its memory is considered fully initialized, and Phase 1 is complete.</p>

<p>
  Here’s how phase 2 looks for the same initialization call:



<image xlink:href="#_15.jpg" /></p>

<p>
  The superclass’s designated initializer now has an opportunity to customize the instance further (although it does not have to).</p>

<p>
  Once the superclass’s designated initializer is finished, the subclass’s designated initializer can perform additional customization (although again, it does not have to).</p>

<p>
  Finally, once the subclass’s designated initializer is finished, the convenience initializer that was originally called can perform additional customization.




Initializer Inheritance and Overriding</p>

<p>
  Unlike subclasses in Objective-C, Swift subclasses do not not inherit their superclass initializers by default. Swift’s approach prevents a situation in which a simple initializer from a superclass is automatically inherited by a more specialized subclass and is used to create a new instance of the subclass that is not fully or correctly initialized.</p>

<p>
  If you want your custom subclass to present one or more of the same initializers as its superclass—perhaps to perform some customization during initialization—you can provide an overriding implementation of the same initializer within your custom subclass.</p>

<p>
  If the initializer you are overriding is a <emphasis>designated</emphasis> initializer, you can override its implementation in your subclass and call the superclass version of the initializer from within your overriding version.</p>

<p>
  If the initializer you are overriding is a <emphasis>convenience</emphasis> initializer, your override must call another designated initializer from its own subclass, as per the rules described above in Initializer Chaining.</p><empty-line /><p>Note</p>

<p>Unlike methods, properties, and subscripts, you do not need to write the override keyword when overriding an initializer.
      





Automatic Initializer Inheritance</p>

<p>
  As mentioned above, subclasses do not not inherit their superclass initializers by default. However, superclass initializers <emphasis>are</emphasis> automatically inherited if certain conditions are met. In practice, this means that you do not need to write initializer overrides in many common scenarios, and can inherit your superclass initializers with minimal effort whenever it is safe to do so.</p>

<p>
  Assuming that you provide default values for any new properties you introduce in a subclass, the following two rules apply:


<strong>Rule 1</strong></p>

<p>
  If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.

<strong>Rule 2</strong></p>

<p>
  If your subclass provides an implementation of <emphasis>all</emphasis> of its superclass designated initializers—either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition—then it automatically inherits all of the superclass convenience initializers.</p>

<p>
  These rules apply even if your subclass adds further convenience initializers.</p><empty-line /><p>Note</p>

<p>A subclass can implement a superclass designated initializer as a subclass convenience initializer as part of satisfying rule 2.
      





Syntax for Designated and Convenience Initializers</p>

<p>
  Designated initializers for classes are written in the same way as simple initializers for value types:</p>

<p>init(<emphasis>parameters</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  Convenience initializers are written in the same style, but with the convenience keyword placed before the init keyword, separated by a space:</p>

<p>convenience init(<emphasis>parameters</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}





Designated and Convenience Initializers in Action</p>

<p>
  The following example shows designated initializers, convenience initializers, and automatic initializer inheritance in action. This example defines a hierarchy of three classes called Food, RecipeIngredient, and ShoppingListItem, and demonstrates how their initializers interact.</p>

<p>
  The base class in the hierarchy is called Food, which is a simple class to encapsulate the name of a foodstuff. The Food class introduces a single String property called name and provides two initializers for creating Food instances:</p>

<p>class Food {</p>

<p> var name: String</p>

<p> init(name: String) {</p>

<p> self.name = name</p>

<p>    }</p>

<p> convenience init() {</p>

<p> self.init(name: "[Unnamed]")</p>

<p>    }</p>

<p>}</p>

<p>
  The figure below shows the initializer chain for the Food class:



<image xlink:href="#_16.jpg" /></p>

<p>
  Classes do not have a default memberwise initializer, and so the Food class provides a designated initializer that takes a single argument called name. This initializer can be used to create a new Food instance with a specific name:</p>

<p>let namedMeat = Food(name: "Bacon")</p>

<p>// namedMeat's name is "Bacon"</p>

<p>
  The init(name: String) initializer from the Food class is provided as a <emphasis>designated</emphasis> initializer, because it ensures that all stored properties of a new Food instance are fully initialized. The Food class does not have a superclass, and so the init(name: String) initializer does not need to call super.init() to complete its initialization.</p>

<p>
  The Food class also provides a <emphasis>convenience</emphasis> initializer, init(), with no arguments. The init() initializer provides a default placeholder name for a new food by delegating across to the Food class’s init(name: String) with a name value of [Unnamed]:</p>

<p>let mysteryMeat = Food()</p>

<p>// mysteryMeat's name is "[Unnamed]"</p>

<p>
  The second class in the hierarchy is a subclass of Food called RecipeIngredient. The RecipeIngredient class models an ingredient in a cooking recipe. It introduces an Int property called quantity (in addition to the name property it inherits from Food) and defines two initializers for creating RecipeIngredient instances:</p>

<p>class RecipeIngredient: Food {</p>

<p> var quantity: Int</p>

<p> init(name: String, quantity: Int) {</p>

<p> self.quantity = quantity</p>

<p> super.init(name: name)</p>

<p>    }</p>

<p> convenience init(name: String) {</p>

<p> self.init(name: name, quantity: 1)</p>

<p>    }</p>

<p>}</p>

<p>
  The figure below shows the initializer chain for the RecipeIngredient class:



<image xlink:href="#_17.jpg" /></p>

<p>
  The RecipeIngredient class has a single designated initializer, init(name: String, quantity: Int), which can be used to populate all of the properties of a new RecipeIngredient instance. This initializer starts by assigning the passed quantity argument to the quantity property, which is the only new property introduced by RecipeIngredient. After doing so, the initializer delegates up to the init(name: String) initializer of the Food class. This process satisfies safety check 1 from Two-Phase Initialization above.</p>

<p>
RecipeIngredient also defines a convenience initializer, init(name: String), which is used to create a RecipeIngredient instance by name alone. This convenience initializer assumes a quantity of 1 for any RecipeIngredient instance that is created without an explicit quantity. The definition of this convenience initializer makes RecipeIngredient instances quicker and more convenient to create, and avoids code duplication when creating several single-quantity RecipeIngredient instances. This convenience initializer simply delegates across to the class’s designated initializer.</p>

<p>
  Note that the init(name: String) convenience initializer provided by RecipeIngredient takes the same parameters as the init(name: String) <emphasis>designated</emphasis> initializer from Food. Even though RecipeIngredient provides this initializer as a convenience initializer, RecipeIngredient has nonetheless provided an implementation of all of its superclass’s designated initializers. Therefore, RecipeIngredient automatically inherits all of its superclass’s convenience initializers too.</p>

<p>
  In this example, the superclass for RecipeIngredient is Food, which has a single convenience initializer called init(). This initializer is therefore inherited by RecipeIngredient. The inherited version of init() functions in exactly the same way as the Food version, except that it delegates to the RecipeIngredient version of init(name: String) rather than the Food version.</p>

<p>
  All three of these initializers can be used to create new RecipeIngredient instances:</p>

<p>let oneMysteryItem = RecipeIngredient()</p>

<p>let oneBacon = RecipeIngredient(name: "Bacon")</p>

<p>let sixEggs = RecipeIngredient(name: "Eggs", quantity: 6)</p>

<p>
  The third and final class in the hierarchy is a subclass of RecipeIngredient called ShoppingListItem. The ShoppingListItem class models a recipe ingredient as it appears in a shopping list.</p>

<p>
  Every item in the shopping list starts out as “unpurchased”. To represent this fact, ShoppingListItem introduces a Boolean property called purchased, with a default value of false. ShoppingListItem also adds a computed description property, which provides a textual description of a ShoppingListItem instance:</p>

<p>class ShoppingListItem: RecipeIngredient {</p>

<p> var purchased = false</p>

<p> var description: String {</p>

<p> var output = "\(quantity) x \(name.lowercaseString)"</p>

<p> output += purchased ? " ✔" : " ✘"</p>

<p> return output</p>

<p>    }</p>

<p>}</p><empty-line /><p>Note</p>

<p>ShoppingListItem does not define an initializer to provide an initial value for purchased, because items in a shopping list (as modeled here) always start out unpurchased.</p>

<p>
  Because it provides a default value for all of the properties it introduces and does not define any initializers itself, ShoppingListItem automatically inherits <emphasis>all</emphasis> of the designated and convenience initializers from its superclass.</p>

<p>
  The figure below shows the overall initializer chain for all three classes:



<image xlink:href="#_18.jpg" /></p>

<p>
  You can use all three of the inherited initializers to create a new ShoppingListItem instance:</p>

<p>var breakfastList = [</p>

<p> ShoppingListItem(),</p>

<p> ShoppingListItem(name: "Bacon"),</p>

<p> ShoppingListItem(name: "Eggs", quantity: 6),</p>

<p>]</p>

<p>breakfastList[0].name = "Orange juice"</p>

<p>breakfastList[0].purchased = true</p>

<p>for item in breakfastList {</p>

<p> println(item.description)</p>

<p>}</p>

<p>// 1 x orange juice ✔</p>

<p>// 1 x bacon ✘</p>

<p>// 6 x eggs ✘</p>

<p>
  Here, a new array called breakfastList is created from an array literal containing three new ShoppingListItem instances. The type of the array is inferred to be ShoppingListItem[]. After the array is created, the name of the ShoppingListItem at the start of the array is changed from "[Unnamed]" to "Orange juice" and it is marked as having been purchased. Printing the description of each item in the array shows that their default states have been set as expected.





Setting a Default Property Value with a Closure or Function</p>

<p>
  If a stored property’s default value requires some customization or setup, you can use a closure or global function to provide a customized default value for that property. Whenever a new instance of the type that the property belongs to is initialized, the closure or function is called, and its return value is assigned as the property’s default value.</p>

<p>
  These kinds of closures or functions typically create a temporary value of the same type as the property, tailor that value to represent the desired initial state, and then return that temporary value to be used as the property’s default value.</p>

<p>
  Here’s a skeleton outline of how a closure can be used to provide a default property value:</p>

<p>class SomeClass {</p>

<p> let someProperty: SomeType = {</p>

<p> // create a default value for someProperty inside this closure</p>

<p> // someValue must be of the same type as SomeType</p>

<p> return someValue</p>

<p>        }()</p>

<p>}</p>

<p>
  Note that the closure’s end curly brace is followed by an empty pair of parentheses. This tells Swift to execute the closure immediately. If you omit these parentheses, you are trying to assign the closure itself to the property, and not the return value of the closure.</p><empty-line /><p>Note</p>

<p>If you use a closure to initialize a property, remember that the rest of the instance has not yet been initialized at the point that the closure is executed. This means that you cannot access any other property values from within your closure, even if those properties have default values. You also cannot use the implicit self property, or call any of the instance’s methods.</p>

<p>
  The example below defines a structure called Checkerboard, which models a board for the game of <emphasis>Checkers</emphasis> (also known as <emphasis>Draughts</emphasis>):



<image xlink:href="#_19.jpg" /></p>

<p>
  The game of <emphasis>Checkers</emphasis> is played on a ten-by-ten board, with alternating black and white squares. To represent this game board, the Checkerboard structure has a single property called boardColors, which is an array of 100 Bool values. A value of true in the array represents a black square and a value of false represents a white square. The first item in the array represents the top left square on the board and the last item in the array represents the bottom right square on the board.</p>

<p>
  The boardColors array is initialized with a closure to set up its color values:</p>

<p>struct Checkerboard {</p>

<p> let boardColors: Bool[] = {</p>

<p> var temporaryBoard = Bool[]()</p>

<p> var isBlack = false</p>

<p> for i in 1...10 {</p>

<p> for j in 1...10 {</p>

<p> temporaryBoard.append(isBlack)</p>

<p> isBlack = !isBlack</p>

<p>            }</p>

<p> isBlack = !isBlack</p>

<p>        }</p>

<p> return temporaryBoard</p>

<p>        }()</p>

<p> func squareIsBlackAtRow(row: Int, column: Int) -&gt; Bool {</p>

<p> return boardColors[(row * 10) + column]</p>

<p>    }</p>

<p>}</p>

<p>
  Whenever a new Checkerboard instance is created, the closure is executed, and the default value of boardColors is calculated and returned. The closure in the example above calculates and sets the appropriate color for each square on the board in a temporary array called temporaryBoard, and returns this temporary array as the closure’s return value once its setup is complete. The returned array value is stored in boardColors and can be queried with the squareIsBlackAtRow utility function:</p>

<p>let board = Checkerboard()</p>

<p>println(board.squareIsBlackAtRow(0, column: 1))</p>

<p>// prints "true"</p>

<p>println(board.squareIsBlackAtRow(9, column: 9))</p>

<p>// prints "false"</p>

<p>
Deinitialization</p>

<p>On This Page</p>

<p>

            How Deinitialization Works</p>

<p>

            Deinitializers in Action</p>

<p>
  A <emphasis>deinitializer</emphasis> is called immediately before a class instance is deallocated. You write deinitializers with the deinit keyword, similar to how intializers are written with the init keyword. Deinitializers are only available on class types.




How Deinitialization Works</p>

<p>
  Swift automatically deallocates your instances when they are no longer needed, to free up resources. Swift handles the memory management of instances through <emphasis>automatic reference counting</emphasis> (<emphasis>ARC</emphasis>), as described in Automatic Reference Counting. Typically you don’t need to perform manual clean-up when your instances are deallocated. However, when you are working with your own resources, you might need to perform some additional clean-up yourself. For example, if you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.</p>

<p>
  Class definitions can have at most one deinitializer per class. The deinitializer does not take any parameters and is written without parentheses:</p>

<p>deinit {</p>

<p> // perform the deinitialization</p>

<p>}</p>

<p>
  Deinitializers are called automatically, just before instance deallocation takes place. You are not allowed to call a deinitializer yourself. Superclass deinitializers are inherited by their subclasses, and the superclass deinitializer is called automatically at the end of a subclass deinitializer implementation. Superclass deinitializers are always called, even if a subclass does not provide its own deinitializer.</p>

<p>
  Because an instance is not deallocated until after its deinitializer is called, a deinitializer can access all properties of the instance it is called on and can modify its behavior based on those properties (such as looking up the name of a file that needs to be closed).




Deinitializers in Action</p>

<p>
  Here’s an example of a deinitializer in action. This example defines two new types, Bank and Player, for a simple game. The Bank structure manages a made-up currency, which can never have more than 10,000 coins in circulation. There can only ever be one Bank in the game, and so the Bank is implemented as a structure with static properties and methods to store and manage its current state:</p>

<p>struct Bank {</p>

<p> static var coinsInBank = 10_000</p>

<p> static func vendCoins(var numberOfCoinsToVend: Int) -&gt; Int {</p>

<p> numberOfCoinsToVend = min(numberOfCoinsToVend, coinsInBank)</p>

<p> coinsInBank -= numberOfCoinsToVend</p>

<p> return numberOfCoinsToVend</p>

<p>    }</p>

<p> static func receiveCoins(coins: Int) {</p>

<p> coinsInBank += coins</p>

<p>    }</p>

<p>}</p>

<p>
Bank keeps track of the current number of coins it holds with its coinsInBank property. It also offers two methods—vendCoins and receiveCoins—to handle the distribution and collection of coins.</p>

<p>
vendCoins checks that there are enough coins in the bank before distributing them. If there are not enough coins, Bank returns a smaller number than the number that was requested (and returns zero if no coins are left in the bank). vendCoins declares numberOfCoinsToVend as a variable parameter, so that the number can be modified within the method’s body without the need to declare a new variable. It returns an integer value to indicate the actual number of coins that were provided.</p>

<p>
  The receiveCoins method simply adds the received number of coins back into the bank’s coin store.</p>

<p>
  The Player class describes a player in the game. Each player has a certain number of coins stored in their purse at any time. This is represented by the player’s coinsInPurse property:</p>

<p>class Player {</p>

<p> var coinsInPurse: Int</p>

<p> init(coins: Int) {</p>

<p> coinsInPurse = Bank.vendCoins(coins)</p>

<p>    }</p>

<p> func winCoins(coins: Int) {</p>

<p> coinsInPurse += Bank.vendCoins(coins)</p>

<p>    }</p>

<p> deinit {</p>

<p> Bank.receiveCoins(coinsInPurse)</p>

<p>    }</p>

<p>}</p>

<p>
  Each Player instance is initialized with a starting allowance of a specified number of coins from the bank during initialization, although a Player instance may receive fewer than that number if not enough coins are available.</p>

<p>
  The Player class defines a winCoins method, which retrieves a certain number of coins from the bank and adds them to the player’s purse. The Player class also implements a deinitializer, which is called just before a Player instance is deallocated. Here, the deinitializer simply returns all of the player’s coins to the bank:</p>

<p>var playerOne: Player? = Player(coins: 100)</p>

<p>println("A new player has joined the game with \(playerOne!.coinsInPurse) coins")</p>

<p>// prints "A new player has joined the game with 100 coins"</p>

<p>println("There are now \(Bank.coinsInBank) coins left in the bank")</p>

<p>// prints "There are now 9900 coins left in the bank"</p>

<p>
  A new Player instance is created, with a request for 100 coins if they are available. This Player instance is stored in an optional Player variable called playerOne. An optional variable is used here, because players can leave the game at any point. The optional lets you track whether there is currently a player in the game.</p>

<p>
  Because playerOne is an optional, it is qualified with an exclamation mark (!) when its coinsInPurse property is accessed to print its default number of coins, and whenever its winCoins method is called:</p>

<p>playerOne!.winCoins(2_000)</p>

<p>println("PlayerOne won 2000 coins &amp; now has \(playerOne!.coinsInPurse) coins")</p>

<p>// prints "PlayerOne won 2000 coins &amp; now has 2100 coins"</p>

<p>println("The bank now only has \(Bank.coinsInBank) coins left")</p>

<p>// prints "The bank now only has 7900 coins left"</p>

<p>
  Here, the player has won 2,000 coins. The player’s purse now contains 2,100 coins, and the bank has only 7,900 coins left.</p>

<p>playerOne = nil</p>

<p>println("PlayerOne has left the game")</p>

<p>// prints "PlayerOne has left the game"</p>

<p>println("The bank now has \(Bank.coinsInBank) coins")</p>

<p>// prints "The bank now has 10000 coins"</p>

<p>
  The player has now left the game. This is indicated by setting the optional playerOne variable to nil, meaning “no Player instance.” At the point that this happens, the playerOne variable’s reference to the Player instance is broken. No other properties or variables are still referring to the Player instance, and so it is deallocated in order to free up its memory. Just before this happens, its deinitializer is called automatically, and its coins are returned to the bank.</p>

<p>
Automatic Reference Counting</p>

<p>On This Page</p>

<p>

            How ARC Works</p>

<p>

            ARC in Action</p>

<p>

            Strong Reference Cycles Between Class Instances</p>

<p>

            Resolving Strong Reference Cycles Between Class Instances</p>

<p>

            Strong Reference Cycles for Closures</p>

<p>

            Resolving Strong Reference Cycles for Closures</p>

<p>
  Swift uses <emphasis>Automatic Reference Counting</emphasis> (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you do not need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed.</p>

<p>
  However, in a few cases ARC requires more information about the relationships between parts of your code in order to manage memory for you. This chapter describes those situations and shows how you enable ARC to manage all of your app’s memory.</p><empty-line /><p>Note</p>

<p>Reference counting only applies to instances of classes. Structures and enumerations are value types, not reference types, and are not stored and passed by reference.
      





How ARC Works</p>

<p>
  Every time you create a new instance of a class, ARC allocates a chunk of memory to store information about that instance. This memory holds information about the type of the instance, together with the values of any stored properties associated with that instance.</p>

<p>
  Additionally, when an instance is no longer needed, ARC frees up the memory used by that instance so that the memory can be used for other purposes instead. This ensures that class instances do not take up space in memory when they are no longer needed.</p>

<p>
  However, if ARC were to deallocate an instance that was still in use, it would no longer be possible to access that instance’s properties, or call that instance’s methods. Indeed, if you tried to access the instance, your app would most likely crash.</p>

<p>
  To make sure that instances don’t disappear while they are still needed, ARC tracks how many properties, constants, and variables are currently referring to each class instance. ARC will not deallocate an instance as long as at least one active reference to that instance still exists.</p>

<p>
  To make this possible, whenever you assign a class instance to a property, constant, or variable, that property, constant, or variable makes a <emphasis>strong reference</emphasis> to the instance. The reference is called a “strong“ reference because it keeps a firm hold on that instance, and does not allow it to be deallocated for as long as that strong reference remains.




ARC in Action</p>

<p>
  Here’s an example of how Automatic Reference Counting works. This example starts with a simple class called Person, which defines a stored constant property called name:</p>

<p>class Person {</p>

<p> let name: String</p>

<p> init(name: String) {</p>

<p> self.name = name</p>

<p> println("\(name) is being initialized")</p>

<p>    }</p>

<p> deinit {</p>

<p> println("\(name) is being deinitialized")</p>

<p>    }</p>

<p>}</p>

<p>
  The Person class has an initializer that sets the instance’s name property and prints a message to indicate that initialization is underway. The Person class also has a deinitializer that prints a message when an instance of the class is deallocated.</p>

<p>
  The next code snippet defines three variables of type Person?, which are used to set up multiple references to a new Person instance in subsequent code snippets. Because these variables are of an optional type (Person?, not Person), they are automatically initialized with a value of nil, and do not currently reference a Person instance.</p>

<p>var reference1: Person?</p>

<p>var reference2: Person?</p>

<p>var reference3: Person?</p>

<p>
  You can now create a new Person instance and assign it to one of these three variables:</p>

<p>reference1 = Person(name: "John Appleseed")</p>

<p>// prints "John Appleseed is being initialized"</p>

<p>
  Note that the message "John Appleseed is being initialized" is printed at the point that you call the Person class’s initializer. This confirms that initialization has taken place.</p>

<p>
  Because the new Person instance has been assigned to the reference1 variable, there is now a strong reference from reference1 to the new Person instance. Because there is at least one strong reference, ARC makes sure that this Person is kept in memory and is not deallocated.</p>

<p>
  If you assign the same Person instance to two more variables, two more strong references to that instance are established:</p>

<p>reference2 = reference1</p>

<p>reference3 = reference1</p>

<p>
  There are now <emphasis>three</emphasis> strong references to this single Person instance.</p>

<p>
  If you break two of these strong references (including the original reference) by assigning nil to two of the variables, a single strong reference remains, and the Person instance is not deallocated:</p>

<p>reference1 = nil</p>

<p>reference2 = nil</p>

<p>
  ARC does not deallocate the Person instance until the third and final strong reference is broken, at which point it is clear that you are no longer using the Person instance:</p>

<p>reference3 = nil</p>

<p>// prints "John Appleseed is being deinitialized"






Strong Reference Cycles Between Class Instances</p>

<p>
  In the examples above, ARC is able to track the number of references to the new Person instance you create and to deallocate that Person instance when it is no longer needed.</p>

<p>
  However, it is possible to write code in which an instance of a class <emphasis>never</emphasis> gets to a point where it has zero strong references. This can happen if two class instances hold a strong reference to each other, such that each instance keeps the other alive. This is known as a <emphasis>strong reference cycle</emphasis>.</p>

<p>
  You resolve strong reference cycles by defining some of the relationships between classes as weak or unowned references instead of as strong references. This process is described in Resolving Strong Reference Cycles Between Class Instances. However, before you learn how to resolve a strong reference cycle, it is useful to understand how such a cycle is caused.</p>

<p>
  Here’s an example of how a strong reference cycle can be created by accident. This example defines two classes called Person and Apartment, which model a block of apartments and its residents:</p>

<p>class Person {</p>

<p> let name: String</p>

<p> init(name: String) { self.name = name }</p>

<p> var apartment: Apartment?</p>

<p> deinit { println("\(name) is being deinitialized") }</p>

<p>}</p>

<p>class Apartment {</p>

<p> let number: Int</p>

<p> init(number: Int) { self.number = number }</p>

<p> var tenant: Person?</p>

<p> deinit { println("Apartment #\(number) is being deinitialized") }</p>

<p>}</p>

<p>
  Every Person instance has a name property of type String and an optional apartment property that is initially nil. The apartment property is optional, because a person may not always have an apartment.</p>

<p>
  Similarly, every Apartment instance has a number property of type Int and has an optional tenant property that is initially nil. The tenant property is optional because an apartment may not always have a tenant.</p>

<p>
  Both of these classes also define a deinitializer, which prints the fact that an instance of that class is being deinitialized. This enables you to see whether instances of Person and Apartment are being deallocated as expected.</p>

<p>
  This next code snippet defines two variables of optional type called john and number73, which will be set to a specific Apartment and Person instance below. Both of these variables have an initial value of nil, by virtue of being optional:</p>

<p>var john: Person?</p>

<p>var number73: Apartment?</p>

<p>
  You can now create a specific Person instance and Apartment instance and assign these new instances to the john and number73 variables:</p>

<p>john = Person(name: "John Appleseed")</p>

<p>number73 = Apartment(number: 73)</p>

<p>
  Here’s how the strong references look after creating and assigning these two instances. The john variable now has a strong reference to the new Person instance, and the number73 variable has a strong reference to the new Apartment instance:



<image xlink:href="#_20.jpg" /></p>

<p>
  You can now link the two instances together so that the person has an apartment, and the apartment has a tenant. Note that an exclamation mark (!) is used to unwrap and access the instances stored inside the john and number73 optional variables, so that the properties of those instances can be set:</p>

<p>john!.apartment = number73</p>

<p>number73!.tenant = john</p>

<p>
  Here’s how the strong references look after you link the two instances together:



<image xlink:href="#_21.jpg" /></p>

<p>
  Unfortunately, linking these two instances creates a strong reference cycle between them. The Person instance now has a strong reference to the Apartment instance, and the Apartment instance has a strong reference to the Person instance. Therefore, when you break the strong references held by the john and number73 variables, the reference counts do not drop to zero, and the instances are not deallocated by ARC:</p>

<p>john = nil</p>

<p>number73 = nil</p>

<p>
  Note that neither deinitializer was called when you set these two variables to nil. The strong reference cycle prevents the Person and Apartment instances from ever being deallocated, causing a memory leak in your app.</p>

<p>
  Here’s how the strong references look after you set the john and number73 variables to nil:



<image xlink:href="#_22.jpg" /></p>

<p>
  The strong references between the Person instance and the Apartment instance remain and cannot be broken.




Resolving Strong Reference Cycles Between Class Instances</p>

<p>
  Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and unowned references.</p>

<p>
  Weak and unowned references enable one instance in a reference cycle to refer to the other instance <emphasis>without</emphasis> keeping a strong hold on it. The instances can then refer to each other without creating a strong reference cycle.</p>

<p>
  Use a weak reference whenever it is valid for that reference to become nil at some point during its lifetime. Conversely, use an unowned reference when you know that the reference will never be nil once it has been set during initialization.



Weak References</p>

<p>
  A <emphasis>weak reference</emphasis> is a reference that does not keep a strong hold on the instance it refers to, and so does not stop ARC from disposing of the referenced instance. This behavior prevents the reference from becoming part of a strong reference cycle. You indicate a weak reference by placing the weak keyword before a property or variable declaration.</p>

<p>
  Use a weak reference to avoid reference cycles whenever it is possible for that reference to have “no value” at some point in its life. If the reference will <emphasis>always</emphasis> have a value, use an unowned reference instead, as described in Unowned References. In the Apartment example above, it is appropriate for an apartment to be able to have “no tenant” at some point in its lifetime, and so a weak reference is an appropriate way to break the reference cycle in this case.</p><empty-line /><p>Note</p>

<p>Weak references must be declared as variables, to indicate that their value can change at runtime. A weak reference cannot be declared as a constant.</p>

<p>
  Because weak references are allowed to have “no value”, you must declare every weak reference as having an optional type. Optional types are the preferred way to represent the possibility for “no value” in Swift.</p>

<p>
  Because a weak reference does not keep a strong hold on the instance it refers to, it is possible for that instance to be deallocated while the weak reference is still referring to it. Therefore, ARC automatically sets a weak reference to nil when the instance that it refers to is deallocated. You can check for the existence of a value in the weak reference, just like any other optional value, and you will never end up with a reference to an invalid instance that no longer exists.</p>

<p>
  The example below is identical to the Person and Apartment example from above, with one important difference. This time around, the Apartment type’s tenant property is declared as a weak reference:</p>

<p>class Person {</p>

<p> let name: String</p>

<p> init(name: String) { self.name = name }</p>

<p> var apartment: Apartment?</p>

<p> deinit { println("\(name) is being deinitialized") }</p>

<p>}</p>

<p>class Apartment {</p>

<p> let number: Int</p>

<p> init(number: Int) { self.number = number }</p>

<p> weak var tenant: Person?</p>

<p> deinit { println("Apartment #\(number) is being deinitialized") }</p>

<p>}</p>

<p>
  The strong references from the two variables (john and number73) and the links between the two instances are created as before:</p>

<p>var john: Person?</p>

<p>var number73: Apartment?</p>

<p>john = Person(name: "John Appleseed")</p>

<p>number73 = Apartment(number: 73)</p>

<p>john!.apartment = number73</p>

<p>number73!.tenant = john</p>

<p>
  Here’s how the references look now that you’ve linked the two instances together:



<image xlink:href="#_23.jpg" /></p>

<p>
  The Person instance still has a strong reference to the Apartment instance, but the Apartment instance now has a <emphasis>weak</emphasis> reference to the Person instance. This means that when you break the strong reference held by the john variables, there are no more strong references to the Person instance:



<image xlink:href="#_24.jpg" /></p>

<p>
  Because there are no more strong references to the Person instance, it is deallocated:</p>

<p>john = nil</p>

<p>// prints "John Appleseed is being deinitialized"</p>

<p>
  The only remaining strong reference to the Apartment instance is from the number73 variable. If you break <emphasis>that</emphasis> strong reference, there are no more strong references to the Apartment instance:



<image xlink:href="#_25.jpg" /></p>

<p>
  Because there are no more strong references to the Apartment instance, it too is deallocated:</p>

<p>number73 = nil</p>

<p>// prints "Apartment #73 is being deinitialized"</p>

<p>
  The final two code snippets above show that the deinitializers for the Person instance and Apartment instance print their “deinitialized” messages after the john and number73 variables are set to nil. This proves that the reference cycle has been broken.




Unowned References</p>

<p>
  Like weak references, an <emphasis>unowned reference</emphasis> does not keep a strong hold on the instance it refers to. Unlike a weak reference, however, an unowned reference is assumed to <emphasis>always</emphasis> have a value. Because of this, an unowned reference is always defined as a non-optional type. You indicate an unowned reference by placing the unowned keyword before a property or variable declaration.</p>

<p>
  Because an unowned reference is non-optional, you don’t need to unwrap the unowned reference each time it is used. An unowned reference can always be accessed directly. However, ARC cannot set the reference to nil when the instance it refers to is deallocated, because variables of a non-optional type cannot be set to nil.</p><empty-line /><p>Note</p>

<p>If you try to access an unowned reference after the instance that it references is deallocated, you will trigger a runtime error. Use unowned references only when you are sure that the reference will <emphasis>always</emphasis> refer to an instance.</p>

<p>
  Note also that Swift guarantees your app will crash if you try to access an unowned reference after the instance it references is deallocated. You will never encounter unexpected behavior in this situation. Your app will always crash reliably, although you should, of course, prevent it from doing so.</p>

<p>
  The following example defines two classes, Customer and CreditCard, which model a bank customer and a possible credit card for that customer. These two classes each store an instance of the other class as a property. This relationship has the potential to create a strong reference cycle.</p>

<p>
  The relationship between Customer and CreditCard is slightly different from the relationship between Apartment and Person seen in the weak reference example above. In this data model, a customer may or may not have a credit card, but a credit card will <emphasis>always</emphasis> be associated with a customer. To represent this, the Customer class has an optional card property, but the CreditCard class has a non-optional customer property.</p>

<p>
  Furthermore, a new CreditCard instance can <emphasis>only</emphasis> be created by passing a number value and a customer instance to a custom CreditCard initializer. This ensures that a CreditCard instance always has a customer instance associated with it when the CreditCard instance is created.</p>

<p>
  Because a credit card will always have a customer, you define its customer property as an unowned reference, to avoid a strong reference cycle:</p>

<p>class Customer {</p>

<p> let name: String</p>

<p> var card: CreditCard?</p>

<p> init(name: String) {</p>

<p> self.name = name</p>

<p>    }</p>

<p> deinit { println("\(name) is being deinitialized") }</p>

<p>}</p>

<p>class CreditCard {</p>

<p> let number: Int</p>

<p> unowned let customer: Customer</p>

<p> init(number: Int, customer: Customer) {</p>

<p> self.number = number</p>

<p> self.customer = customer</p>

<p>    }</p>

<p> deinit { println("Card #\(number) is being deinitialized") }</p>

<p>}</p>

<p>
  This next code snippet defines an optional Customer variable called john, which will be used to store a reference to a specific customer. This variable has an initial value of nil, by virtue of being optional:</p>

<p>var john: Customer?</p>

<p>
  You can now create a Customer instance, and use it to initialize and assign a new CreditCard instance as that customer’s card property:</p>

<p>john = Customer(name: "John Appleseed")</p>

<p>john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)</p>

<p>
  Here’s how the references look, now that you’ve linked the two instances:



<image xlink:href="#_26.jpg" /></p>

<p>
  The Customer instance now has a strong reference to the CreditCard instance, and the CreditCard instance has an unowned reference to the Customer instance.</p>

<p>
  Because of the unowned customer reference, when you break the strong reference held by the john variable, there are no more strong references to the Customer instance:



<image xlink:href="#_27.jpg" /></p>

<p>
  Because there are no more strong references to the Customer instance, it is deallocated. After this happens, there are no more strong references to the CreditCard instance, and it too is deallocated:</p>

<p>john = nil</p>

<p>// prints "John Appleseed is being deinitialized"</p>

<p>// prints "Card #1234567890123456 is being deinitialized"</p>

<p>
  The final code snippet above shows that the deinitializers for the Customer instance and CreditCard instance both print their “deinitialized” messages after the john variable is set to nil.




Unowned References and Implicitly Unwrapped Optional Properties</p>

<p>
  The examples for weak and unowned references above cover two of the more common scenarios in which it is necessary to break a strong reference cycle.</p>

<p>
  The Person and Apartment example shows a situation where two properties, both of which are allowed to be nil, have the potential to cause a strong reference cycle. This scenario is best resolved with a weak reference.</p>

<p>
  The Customer and CreditCard example shows a situation where one property that is allowed to be nil and another property that cannot be nil have the potential to cause a strong reference cycle. This scenario is best resolved with an unowned reference.</p>

<p>
  However, there is a third scenario, in which <emphasis>both</emphasis> properties should always have a value, and neither property should ever be nil once initialization is complete. In this scenario, it is useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.</p>

<p>
  This enables both properties to be accessed directly (without optional unwrapping) once initialization is complete, while still avoiding a reference cycle. This section shows you how to set up such a relationship.</p>

<p>
  The example below defines two classes, Country and City, each of which stores an instance of the other class as a property. In this data model, every country must always have a capital city, and every city must always belong to a country. To represent this, the Country class has a capitalCity property, and the City class has a country property:</p>

<p>class Country {</p>

<p> let name: String</p>

<p> let capitalCity: City!</p>

<p> init(name: String, capitalName: String) {</p>

<p> self.name = name</p>

<p> self.capitalCity = City(name: capitalName, country: self)</p>

<p>    }</p>

<p>}</p>

<p>class City {</p>

<p> let name: String</p>

<p> unowned let country: Country</p>

<p> init(name: String, country: Country) {</p>

<p> self.name = name</p>

<p> self.country = country</p>

<p>    }</p>

<p>}</p>

<p>
  To set up the interdependency between the two classes, the initializer for City takes a Country instance, and stores this instance in its country property.</p>

<p>
  The initializer for City is called from within the initializer for Country. However, the initializer for Country cannot pass self to the City initializer until a new Country instance is fully initialized, as described in Two-Phase Initialization.</p>

<p>
  To cope with this requirement, you declare the capitalCity property of Country as an implicitly unwrapped optional property, indicated by the exclamation mark at the end of its type annotation (City!). This means that the capitalCity property has a default value of nil, like any other optional, but can be accessed without the need to unwrap its value as described in Implicitly Unwrapped Optionals.</p>

<p>
  Because capitalCity has a default nil value, a new Country instance is considered fully initialized as soon as the Country instance sets its name property within its initializer. This means that the Country initializer can start to reference and pass around the implicit self property as soon as the name property is set. The Country initializer can therefore pass self as one of the parameters for the City initializer when the Country initializer is setting its own capitalCity property.</p>

<p>
  All of this means that you can create the Country and City instances in a single statement, without creating a strong reference cycle, and the capitalCity property can be accessed directly, without needing to use an exclamation mark to unwrap its optional value:</p>

<p>var country = Country(name: "Canada", capitalName: "Ottawa")</p>

<p>println("\(country.name)'s capital city is called \(country.capitalCity.name)")</p>

<p>// prints "Canada's capital city is called Ottawa"</p>

<p>
  In the example above, the use of an implicitly unwrapped optional means that all of the two-phase class initializer requirements are satisfied. The capitalCity property can be used and accessed like a non-optional value once initialization is complete, while still avoiding a strong reference cycle.





Strong Reference Cycles for Closures</p>

<p>
  You saw above how a strong reference cycle can be created when two class instance properties hold a strong reference to each other. You also saw how to use weak and unowned references to break these strong reference cycles.</p>

<p>
  A strong reference cycle can also occur if you assign a closure to a property of a class instance, and the body of that closure captures the instance. This capture might occur because the closure’s body accesses a property of the instance, such as self.someProperty, or because the closure calls a method on the instance, such as self.someMethod(). In either case, these accesses cause the closure to “capture” self, creating a strong reference cycle.</p>

<p>
  This strong reference cycle occurs because closures, like classes, are <emphasis>reference types</emphasis>. When you assign a closure to a property, you are assigning a <emphasis>reference</emphasis> to that closure. In essence, it’s the same problem as above—two strong references are keeping each other alive. However, rather than two class instances, this time it’s a class instance and a closure that are keeping each other alive.</p>

<p>
  Swift provides an elegant solution to this problem, known as a <emphasis>closure capture list</emphasis>. However, before you learn how to break a strong reference cycle with a closure capture list, it is useful to understand how such a cycle can be caused.</p>

<p>
  The example below shows how you can create a strong reference cycle when using a closure that references self. This example defines a class called HTMLElement, which provides a simple model for an individual element within an HTML document:</p>

<p>class HTMLElement {</p>

<p> let name: String</p>

<p> let text: String?</p>

<p> @lazy var asHTML: () -&gt; String = {</p>

<p> if let text = self.text {</p>

<p> return "&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"</p>

<p>        } else {</p>

<p> return "&lt;\(self.name) /&gt;"</p>

<p>        }</p>

<p>    }</p>

<p> init(name: String, text: String? = nil) {</p>

<p> self.name = name</p>

<p> self.text = text</p>

<p>    }</p>

<p> deinit {</p>

<p> println("\(name) is being deinitialized")</p>

<p>    }</p>

<p>}</p>

<p>
  The HTMLElement class defines a name property, which indicates the name of the element, such as "p" for a paragraph element, or "br" for a line break element. HTMLElement also defines an optional text property, which you can set to a string that represents the text to be rendered within that HTML element.</p>

<p>
  In addition to these two simple properties, the HTMLElement class defines a lazy property called asHTML. This property references a closure that combines name and text into an HTML string fragment. The asHTML property is of type () -&gt; String, or “a function that takes no parameters, and returns a String value”.</p>

<p>
  By default, the asHTML property is assigned a closure that returns a string representation of an HTML tag. This tag contains the optional text value if it exists, or no text content if text does not exist. For a paragraph element, the closure would return "&lt;p&gt;some text&lt;/p&gt;" or "&lt;p /&gt;", depending on whether the text property equals "some text" or nil.</p>

<p>
  The asHTML property is named and used somewhat like an instance method. However, because asHTML is a closure property rather than an instance method, you can replace the default value of the asHTML property with a custom closure, if you want to change the HTML rendering for a particular HTML element.</p><empty-line /><p>Note</p>

<p>The asHTML property is declared as a lazy property, because it is only needed if and when the element actually needs to be rendered as a string value for some HTML output target. The fact that asHTML is a lazy property means that you can refer to self within the default closure, because the lazy property will not be accessed until after initialization has been completed and self is known to exist.</p>

<p>
  The HTMLElement class provides a single initializer, which takes a name argument and (if desired) a text argument to initialize a new element. The class also defines a deinitializer, which prints a message to show when an HTMLElement instance is deallocated.</p>

<p>
  Here’s how you use the HTMLElement class to create and print a new instance:</p>

<p>var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")</p>

<p>println(paragraph!.asHTML())</p>

<p>// prints "&lt;p&gt;hello, world&lt;/p&gt;"</p><empty-line /><p>Note</p>

<p>The paragraph variable above is defined as an <emphasis>optional</emphasis> HTMLElement, so that it can be set to nil below to demonstrate the presence of a strong reference cycle.</p>

<p>
  Unfortunately, the HTMLElement class, as written above, creates a strong reference cycle between an HTMLElement instance and the closure used for its default asHTML value. Here’s how the cycle looks:



<image xlink:href="#_28.jpg" /></p>

<p>
  The instance’s asHTML property holds a strong reference to its closure. However, because the closure refers to self within its body (as a way to reference self.name and self.text), the closure <emphasis>captures</emphasis> self, which means that it holds a strong reference back to the HTMLElement instance. A strong reference cycle is created between the two. (For more information about capturing values in a closure, see Capturing Values.)</p><empty-line /><p>Note</p>

<p>Even though the closure refers to self multiple times, it only captures one strong reference to the HTMLElement instance.</p>

<p>
  If you set the paragraph variable to nil and break its strong reference to the HTMLElement instance, neither the HTMLElement instance nor its closure are deallocated, because of the strong reference cycle:</p>

<p>paragraph = nil</p>

<p>
  Note that the message in the HTMLElement deinitializer is not printed, which shows that the HTMLElement instance is not deallocated.




Resolving Strong Reference Cycles for Closures</p>

<p>
  You resolve a strong reference cycle between a closure and a class instance by defining a <emphasis>capture list</emphasis> as part of the closure’s definition. A capture list defines the rules to use when capturing one or more reference types within the closure’s body. As with strong reference cycles between two class instances, you declare each captured reference to be a weak or unowned reference rather than a strong reference. The appropriate choice of weak or unowned depends on the relationships between the different parts of your code.</p><empty-line /><p>Note</p>

<p>Swift requires you to write self.someProperty or self.someMethod (rather than just someProperty or someMethod) whenever you refer to a member of self within a closure. This helps you remember that it’s possible to capture self by accident.
      




Defining a Capture List</p>

<p>
  Each item in a capture list is a pairing of the weak or unowned keyword with a reference to a class instance (such as self or someInstance). These pairings are written within a pair of square braces, separated by commas.</p>

<p>
  Place the capture list before a closure’s parameter list and return type if they are provided:</p>

<p>@lazy var someClosure: (Int, String) -&gt; String = {</p>

<p>    [unowned self] (index: Int, stringToProcess: String) -&gt; String in</p>

<p> // closure body goes here</p>

<p>}</p>

<p>
  If a closure does not specify a parameter list or return type because they can be inferred from context, place the capture list at the very start of the closure, followed by the in keyword:</p>

<p>@lazy var someClosure: () -&gt; String = {</p>

<p>    [unowned self] in</p>

<p> // closure body goes here</p>

<p>}






Weak and Unowned References</p>

<p>
  Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</p>

<p>
  Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future. Weak references are always of an optional type, and automatically become nil when the instance they reference is deallocated. This enables you to check for their existence within the closure’s body.</p><empty-line /><p>Note</p>

<p>If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.</p>

<p>
  An unowned reference is the appropriate capture method to use to resolve the strong reference cycle in the HTMLElement example from earlier. Here’s how you write the HTMLElement class to avoid the cycle:</p>

<p>class HTMLElement {</p>

<p> let name: String</p>

<p> let text: String?</p>

<p> @lazy var asHTML: () -&gt; String = {</p>

<p>        [unowned self] in</p>

<p> if let text = self.text {</p>

<p> return "&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"</p>

<p>        } else {</p>

<p> return "&lt;\(self.name) /&gt;"</p>

<p>        }</p>

<p>    }</p>

<p> init(name: String, text: String? = nil) {</p>

<p> self.name = name</p>

<p> self.text = text</p>

<p>    }</p>

<p> deinit {</p>

<p> println("\(name) is being deinitialized")</p>

<p>    }</p>

<p>}</p>

<p>
  This implementation of HTMLElement is identical to the previous implementation, apart from the addition of a capture list within the asHTML closure. In this case, the capture list is [unowned self], which means “capture self as an unowned reference rather than a strong reference”.</p>

<p>
  You can create and print an HTMLElement instance as before:</p>

<p>var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")</p>

<p>println(paragraph!.asHTML())</p>

<p>// prints "&lt;p&gt;hello, world&lt;/p&gt;"</p>

<p>
  Here’s how the references look with the capture list in place:



<image xlink:href="#_29.jpg" /></p>

<p>
  This time, the capture of self by the closure is an unowned reference, and does not keep a strong hold on the HTMLElement instance it has captured. If you set the strong reference from the paragraph variable to nil, the HTMLElement instance is deallocated, as can be seen from the printing of its deinitializer message in the example below:</p>

<p>paragraph = nil</p>

<p>// prints "p is being deinitialized"</p>

<p>
Optional Chaining</p>

<p>On This Page</p>

<p>

            Optional Chaining as an Alternative to Forced Unwrapping</p>

<p>

            Defining Model Classes for Optional Chaining</p>

<p>

            Calling Properties Through Optional Chaining</p>

<p>

            Calling Methods Through Optional Chaining</p>

<p>

            Calling Subscripts Through Optional Chaining</p>

<p>

            Linking Multiple Levels of Chaining</p>

<p>

            Chaining on Methods With Optional Return Values</p>

<p>
<emphasis>Optional chaining</emphasis> is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</p><empty-line /><p>Note</p>

<p>Optional chaining in Swift is similar to messaging nil in Objective-C, but in a way that works for any type, and that can be checked for success or failure.
      





Optional Chaining as an Alternative to Forced Unwrapping</p>

<p>
  You specify optional chaining by placing a question mark (?) after the optional value on which you wish to call a property, method or subscript if the optional is non-nil. This is very similar to placing an exclamation mark (!) after an optional value to force the unwrapping of its value. The main difference is that optional chaining fails gracefully when the optional is nil, whereas forced unwrapping triggers a runtime error when the optional is nil.</p>

<p>
  To reflect the fact that optional chaining can be called on a nil value, the result of an optional chaining call is always an optional value, even if the property, method, or subscript you are querying returns a non-optional value. You can use this optional return value to check whether the optional chaining call was successful (the returned optional contains a value), or did not succeed due to a nil value in the chain (the returned optional value is nil).</p>

<p>
  Specifically, the result of an optional chaining call is of the same type as the expected return value, but wrapped in an optional. A property that normally returns an Int will return an Int? when accessed through optional chaining.</p>

<p>
  The next several code snippets demonstrate how optional chaining differs from forced unwrapping and enables you to check for success.</p>

<p>
  First, two classes called Person and Residence are defined:</p>

<p>class Person {</p>

<p> var residence: Residence?</p>

<p>}</p>

<p>class Residence {</p>

<p> var numberOfRooms = 1</p>

<p>}</p>

<p>
Residence instances have a single Int property called numberOfRooms, with a default value of 1. Person instances have an optional residence property of type Residence?.</p>

<p>
  If you create a new Person instance, its residence property is default initialized to nil, by virtue of being optional. In the code below, john has a residence property value of nil:</p>

<p>let john = Person()</p>

<p>
  If you try to access the numberOfRooms property of this person’s residence, by placing an exclamation mark after residence to force the unwrapping of its value, you trigger a runtime error, because there is no residence value to unwrap:</p>

<p>let roomCount = john.residence!.numberOfRooms</p>

<p>// this triggers a runtime error</p>

<p>
  The code above succeeds when john.residence has a non-nil value and will set roomCount to an Int value containing the appropriate number of rooms. However, this code always triggers a runtime error when residence is nil, as illustrated above.</p>

<p>
  Optional chaining provides an alternative way to access the value of numberOfRooms. To use optional chaining, use a question mark in place of the exclamation mark:</p>

<p>if let roomCount = john.residence?.numberOfRooms {</p>

<p> println("John's residence has \(roomCount) room(s).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the number of rooms.")</p>

<p>}</p>

<p>// prints "Unable to retrieve the number of rooms."</p>

<p>
  This tells Swift to “chain” on the optional residence property and to retrieve the value of numberOfRooms if residence exists.</p>

<p>
  Because the attempt to access numberOfRooms has the potential to fail, the optional chaining attempt returns a value of type Int?, or “optional Int”. When residence is nil, as in the example above, this optional Int will also be nil, to reflect the fact that it was not possible to access numberOfRooms.</p>

<p>
  Note that this is true even though numberOfRooms is a non-optional Int. The fact that it is queried through an optional chain means that the call to numberOfRooms will always return an Int? instead of an Int.</p>

<p>
  You can assign a Residence instance to john.residence, so that it no longer has a nil value:</p>

<p>john.residence = Residence()</p>

<p>
john.residence now contains an actual Residence instance, rather than nil. If you try to access numberOfRooms with the same optional chaining as before, it will now return an Int? that contains the default numberOfRooms value of 1:</p>

<p>if let roomCount = john.residence?.numberOfRooms {</p>

<p> println("John's residence has \(roomCount) room(s).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the number of rooms.")</p>

<p>}</p>

<p>// prints "John's residence has 1 room(s)."






Defining Model Classes for Optional Chaining</p>

<p>
  You can use optional chaining with calls to properties, methods, and subscripts that are more than one level deep. This enables you to drill down into subproperties within complex models of interrelated types, and to check whether it is possible to access properties, methods, and subscripts on those subproperties.</p>

<p>
  The code snippets below define four model classes for use in several subsequent examples, including examples of multilevel optional chaining. These classes expand upon the Person and Residence model from above by adding a Room and Address class, with associated properties, methods, and subscripts.</p>

<p>
  The Person class is defined in the same way as before:</p>

<p>class Person {</p>

<p> var residence: Residence?</p>

<p>}</p>

<p>
  The Residence class is more complex than before. This time, the Residence class defines a variable property called rooms, which is initialized with an empty array of type Room[]:</p>

<p>class Residence {</p>

<p> var rooms = Room[]()</p>

<p> var numberOfRooms: Int {</p>

<p> return rooms.count</p>

<p>    }</p>

<p> subscript(i: Int) -&gt; Room {</p>

<p> return rooms[i]</p>

<p>    }</p>

<p> func printNumberOfRooms() {</p>

<p> println("The number of rooms is \(numberOfRooms)")</p>

<p>    }</p>

<p> var address: Address?</p>

<p>}</p>

<p>
  Because this version of Residence stores an array of Room instances, its numberOfRooms property is implemented as a computed property, not a stored property. The computed numberOfRooms property simply returns the value of the count property from the rooms array.</p>

<p>
  As a shortcut to accessing its rooms array, this version of Residence provides a read-only subscript, which starts by asserting that the index passed to the subscript is valid. If the index is valid, the subscript returns the room at the requested index in the rooms array.</p>

<p>
  This version of Residence also provides a method called printNumberOfRooms, which simply prints the number of rooms in the residence.</p>

<p>
  Finally, Residence defines an optional property called address, with a type of Address?. The Address class type for this property is defined below.</p>

<p>
  The Room class used for the rooms array is a simple class with one property called name, and an initializer to set that property to a suitable room name:</p>

<p>class Room {</p>

<p> let name: String</p>

<p> init(name: String) { self.name = name }</p>

<p>}</p>

<p>
  The final class in this model is called Address. This class has three optional properties of type String?. The first two properties, buildingName and buildingNumber, are alternative ways to identify a particular building as part of an address. The third property, street, is used to name the street for that address:</p>

<p>class Address {</p>

<p> var buildingName: String?</p>

<p> var buildingNumber: String?</p>

<p> var street: String?</p>

<p> func buildingIdentifier() -&gt; String? {</p>

<p> if buildingName {</p>

<p> return buildingName</p>

<p>        } else if buildingNumber {</p>

<p> return buildingNumber</p>

<p>        } else {</p>

<p> return nil</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
  The Address class also provides a method called buildingIdentifier, which has a return type of String?. This method checks the buildingName and buildingNumber properties and returns buildingName if it has a value, or buildingNumber if it has a value, or nil if neither property has a value.




Calling Properties Through Optional Chaining</p>

<p>
  As demonstrated in Optional Chaining as an Alternative to Forced Unwrapping, you can use optional chaining to access a property on an optional value, and to check if that property access is successful. You cannot, however, set a property’s value through optional chaining.</p>

<p>
  Use the classes defined above to create a new Person instance, and try to access its numberOfRooms property as before:</p>

<p>let john = Person()</p>

<p>if let roomCount = john.residence?.numberOfRooms {</p>

<p> println("John's residence has \(roomCount) room(s).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the number of rooms.")</p>

<p>}</p>

<p>// prints "Unable to retrieve the number of rooms."</p>

<p>
  Because john.residence is nil, this optional chaining call fails in the same way as before, without error.




Calling Methods Through Optional Chaining</p>

<p>
  You can use optional chaining to call a method on an optional value, and to check whether that method call is successful. You can do this even if that method does not define a return value.</p>

<p>
  The printNumberOfRooms method on the Residence class prints the current value of numberOfRooms. Here’s how the method looks:</p>

<p>func printNumberOfRooms() {</p>

<p> println("The number of rooms is \(numberOfRooms)")</p>

<p>}</p>

<p>
  This method does not specify a return type. However, functions and methods with no return type have an implicit return type of Void, as described in Functions Without Return Values.</p>

<p>
  If you call this method on an optional value with optional chaining, the method’s return type will be Void?, not Void, because return values are always of an optional type when called through optional chaining. This enables you to use an if statement to check whether it was possible to call the printNumberOfRooms method, even though the method does not itself define a return value. The implicit return value from the printNumberOfRooms will be equal to Void if the method was called succesfully through optional chaining, or nil if was not:</p>

<p>if john.residence?.printNumberOfRooms() {</p>

<p> println("It was possible to print the number of rooms.")</p>

<p>} else {</p>

<p> println("It was not possible to print the number of rooms.")</p>

<p>}</p>

<p>// prints "It was not possible to print the number of rooms."






Calling Subscripts Through Optional Chaining</p>

<p>
  You can use optional chaining to try to retrieve a value from a subscript on an optional value, and to check whether that subscript call is successful. You cannot, however, set a subscript through optional chaining.</p><empty-line /><p>Note</p>

<p>When you access a subscript on an optional value through optional chaining, you place the question mark <emphasis>before</emphasis> the subscript’s braces, not after. The optional chaining question mark always follows immediately after the part of the expression that is optional.</p>

<p>
  The example below tries to retrieve the name of the first room in the rooms array of the john.residence property using the subscript defined on the Residence class. Because john.residence is currently nil, the subscript call fails:</p>

<p>if let firstRoomName = john.residence?[0].name {</p>

<p> println("The first room name is \(firstRoomName).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the first room name.")</p>

<p>}</p>

<p>// prints "Unable to retrieve the first room name."</p>

<p>
  The optional chaining question mark in this subscript call is placed immediately after john.residence, before the subscript brackets, because john.residence is the optional value on which optional chaining is being attempted.</p>

<p>
  If you create and assign an actual Residence instance to john.residence, with one or more Room instances in its rooms array, you can use the Residence subscript to access the actual items in the rooms array through optional chaining:</p>

<p>let johnsHouse = Residence()</p>

<p>johnsHouse.rooms += Room(name: "Living Room")</p>

<p>johnsHouse.rooms += Room(name: "Kitchen")</p>

<p>john.residence = johnsHouse</p>

<p>if let firstRoomName = john.residence?[0].name {</p>

<p> println("The first room name is \(firstRoomName).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the first room name.")</p>

<p>}</p>

<p>// prints "The first room name is Living Room."






Linking Multiple Levels of Chaining</p>

<p>
  You can link together multiple levels of optional chaining to drill down to properties, methods, and subscripts deeper within a model. However, multiple levels of optional chaining do not add more levels of optionality to the returned value.</p>

<p>
  To put it another way:</p>

<p>
  If the type you are trying to retrieve is not optional, it will become optional because of the optional chaining.</p>

<p>
  If the type you are trying to retrieve is <emphasis>already</emphasis> optional, it will not become <emphasis>more</emphasis> optional because of the chaining.</p>

<p>
  Therefore:</p>

<p>
  If you try to retrieve an Int value through optional chaining, an Int? is always returned, no matter how many levels of chaining are used.</p>

<p>
  Similarly, if you try to retrieve an Int? value through optional chaining, an Int? is always returned, no matter how many levels of chaining are used.</p>

<p>
  The example below tries to access the street property of the address property of the residence property of john. There are <emphasis>two</emphasis> levels of optional chaining in use here, to chain through the residence and address properties, both of which are of optional type:</p>

<p>if let johnsStreet = john.residence?.address?.street {</p>

<p> println("John's street name is \(johnsStreet).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the address.")</p>

<p>}</p>

<p>// prints "Unable to retrieve the address."</p>

<p>
  The value of john.residence currently contains a valid Residence instance. However, the value of john.residence.address is currently nil. Because of this, the call to john.residence?.address?.street fails.</p>

<p>
  Note that in the example above, you are trying to retrieve the value of the street property. The type of this property is String?. The return value of john.residence?.address?.street is therefore also String?, even though two levels of optional chaining are applied in addition to the underlying optional type of the property.</p>

<p>
  If you set an actual Address instance as the value for john.street.address, and set an an actual value for the address’s street property, you can access the value of property through the multi-level optional chaining:</p>

<p>let johnsAddress = Address()</p>

<p>johnsAddress.buildingName = "The Larches"</p>

<p>johnsAddress.street = "Laurel Street"</p>

<p>john.residence!.address = johnsAddress</p>

<p>if let johnsStreet = john.residence?.address?.street {</p>

<p> println("John's street name is \(johnsStreet).")</p>

<p>} else {</p>

<p> println("Unable to retrieve the address.")</p>

<p>}</p>

<p>// prints "John's street name is Laurel Street."</p>

<p>
  Note the use of an exclamation mark during the assignment of an address instance to john.residence.address. The john.residence property has an optional type, and so you need to unwrap its actual value with an exclamation mark before accessing the residence’s address property.




Chaining on Methods With Optional Return Values</p>

<p>
  The previous example shows how to retrieve the value of a property of optional type through optional chaining. You can also use optional chaining to call a method that returns a value of optional type, and to chain on that method’s return value if needed.</p>

<p>
  The example below calls the Address class’s buildingIdentifier method through optional chaining. This method returns a value of type String?. As described above, the ultimate return type of this method call after optional chaining is also String?:</p>

<p>if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {</p>

<p> println("John's building identifier is \(buildingIdentifier).")</p>

<p>}</p>

<p>// prints "John's building identifier is The Larches."</p>

<p>
  If you want to perform further optional chaining on this method’s return value, place the optional chaining question mark <emphasis>after</emphasis> the method’s parentheses:</p>

<p>if let upper = john.residence?.address?.buildingIdentifier()?.uppercaseString {</p>

<p> println("John's uppercase building identifier is \(upper).")</p>

<p>}</p>

<p>// prints "John's uppercase building identifier is THE LARCHES."</p><empty-line /><p>Note</p>

<p>In the example above, you place the optional chaining question mark <emphasis>after</emphasis> the parentheses, because the optional value you are chaining on is the buildingIdentifier method’s return value, and not the buildingIdentifier method itself.</p>

<p>
Type Casting</p>

<p>On This Page</p>

<p>

            Defining a Class Hierarchy for Type Casting</p>

<p>

            Checking Type</p>

<p>

            Downcasting</p>

<p>

            Type Casting for Any and AnyObject</p>

<p>
<emphasis>Type casting</emphasis> is a way to check the type of an instance, and/or to treat that instance as if it is a different superclass or subclass from somewhere else in its own class hierarchy.</p>

<p>
  Type casting in Swift is implemented with the is and as operators. These two operators provide a simple and expressive way to check the type of a value or cast a value to a different type.</p>

<p>
  You can also use type casting to check whether a type conforms to a protocol, as described in Checking for Protocol Conformance.




Defining a Class Hierarchy for Type Casting</p>

<p>
  You can use type casting with a hierarchy of classes and subclasses to check the type of a particular class instance and to cast that instance to another class within the same hierarchy. The three code snippets below define a hierarchy of classes and an array containing instances of those classes, for use in an example of type casting.</p>

<p>
  The first snippet defines a new base class called MediaItem. This class provides basic functionality for any kind of item that appears in a digital media library. Specifically, it declares a name property of type String, and an init name initializer. (It is assumed that all media items, including all movies and songs, will have a name.)</p>

<p>class MediaItem {</p>

<p> var name: String</p>

<p> init(name: String) {</p>

<p> self.name = name</p>

<p>    }</p>

<p>}</p>

<p>
  The next snippet defines two subclasses of MediaItem. The first subclass, Movie, encapsulates additional information about a movie or film. It adds a director property on top of the base MediaItem class, with a corresponding initializer. The second subclass, Song, adds an artist property and initializer on top of the base class:</p>

<p>class Movie: MediaItem {</p>

<p> var director: String</p>

<p> init(name: String, director: String) {</p>

<p> self.director = director</p>

<p> super.init(name: name)</p>

<p>    }</p>

<p>}</p>

<p>class Song: MediaItem {</p>

<p> var artist: String</p>

<p> init(name: String, artist: String) {</p>

<p> self.artist = artist</p>

<p> super.init(name: name)</p>

<p>    }</p>

<p>}</p>

<p>
  The final snippet creates a constant array called library, which contains two Movie instances and three Song instances. The type of the library array is inferred by initializing it with the contents of an array literal. Swift’s type checker is able to deduce that Movie and Song have a common superclass of MediaItem, and so it infers a type of MediaItem[] for the library array:</p>

<p>let library = [</p>

<p> Movie(name: "Casablanca", director: "Michael Curtiz"),</p>

<p> Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),</p>

<p> Movie(name: "Citizen Kane", director: "Orson Welles"),</p>

<p> Song(name: "The One And Only", artist: "Chesney Hawkes"),</p>

<p> Song(name: "Never Gonna Give You Up", artist: "Rick Astley")</p>

<p>]</p>

<p>// the type of "library" is inferred to be MediaItem[]</p>

<p>
  The items stored in library are still Movie and Song instances behind the scenes. However, if you iterate over the contents of this array, the items you receive back are typed as MediaItem, and not as Movie or Song. In order to work with them as their native type, you need to <emphasis>check</emphasis> their type, or <emphasis>downcast</emphasis> them to a different type, as described below.




Checking Type</p>

<p>
  Use the <emphasis>type check operator</emphasis> (is) to check whether an instance is of a certain subclass type. The type check operator returns true if the instance is of that subclass type and false if it is not.</p>

<p>
  The example below defines two variables, movieCount and songCount, which count the number of Movie and Song instances in the library array:</p>

<p>var movieCount = 0</p>

<p>var songCount = 0</p>

<p>for item in library {</p>

<p> if item is Movie {</p>

<p>        ++movieCount</p>

<p>    } else if item is Song {</p>

<p>        ++songCount</p>

<p>    }</p>

<p>}</p>

<p>println("Media library contains \(movieCount) movies and \(songCount) songs")</p>

<p>// prints "Media library contains 2 movies and 3 songs"</p>

<p>
  This example iterates through all items in the library array. On each pass, the for-in loop sets the item constant to the next MediaItem in the array.</p>

<p>
item is Movie returns true if the current MediaItem is a Movie instance and false if it is not. Similarly, item is Song checks whether the item is a Song instance. At the end of the for-in loop, the values of movieCount and songCount contain a count of how many MediaItem instances were found of each type.




Downcasting</p>

<p>
  A constant or variable of a certain class type may actually refer to an instance of a subclass behind the scenes. Where you believe this is the case, you can try to <emphasis>downcast</emphasis> to the subclass type with the <emphasis>type cast operator</emphasis> (as).</p>

<p>
  Because downcasting can fail, the type cast operator comes in two different forms. The optional form, as?, returns an optional value of the type you are trying to downcast to. The forced form, as, attempts the downcast and force-unwraps the result as a single compound action.</p>

<p>
  Use the optional form of the type cast operator (as?) when you are not sure if the downcast will succeed. This form of the operator will always return an optional value, and the value will be nil if the downcast was not possible. This enables you to check for a successful downcast.</p>

<p>
  Use the forced form of the type cast operator (as) only when you are sure that the downcast will always succeed. This form of the operator will trigger a runtime error if you try to downcast to an incorrect class type.</p>

<p>
  The example below iterates over each MediaItem in library, and prints an appropriate description for each item. To do this, it needs to access each item as a true Movie or Song, and not just as a MediaItem. This is necessary in order for it to be able to access the director or artist property of a Movie or Song for use in the description.</p>

<p>
  In this example, each item in the array might be a Movie, or it might be a Song. You don’t know in advance which actual class to use for each item, and so it is appropriate to use the optional form of the type cast operator (as?) to check the downcast each time through the loop:</p>

<p>for item in library {</p>

<p> if let movie = item as? Movie {</p>

<p> println("Movie: '\(movie.name)', dir. \(movie.director)")</p>

<p>    } else if let song = item as? Song {</p>

<p> println("Song: '\(song.name)', by \(song.artist)")</p>

<p>    }</p>

<p>}</p>

<p>// Movie: 'Casablanca', dir. Michael Curtiz</p>

<p>// Song: 'Blue Suede Shoes', by Elvis Presley</p>

<p>// Movie: 'Citizen Kane', dir. Orson Welles</p>

<p>// Song: 'The One And Only', by Chesney Hawkes</p>

<p>// Song: 'Never Gonna Give You Up', by Rick Astley</p>

<p>
  The example starts by trying to downcast the current item as a Movie. Because item is a MediaItem instance, it’s possible that it <emphasis>might</emphasis> be a Movie; equally, it’s also possible that it might a Song, or even just a base MediaItem. Because of this uncertainty, the as? form of the type cast operator returns an <emphasis>optional</emphasis> value when attempting to downcast to a subclass type. The result of item as Movie is of type Movie?, or “optional Movie”.</p>

<p>
  Downcasting to Movie fails when applied to the two Song instances in the library array. To cope with this, the example above uses optional binding to check whether the optional Movie actually contains a value (that is, to find out whether the downcast succeeded.) This optional binding is written “if let movie = item as? Movie”, which can be read as:</p>

<p>
  “Try to access item as a Movie. If this is successful, set a new temporary constant called movie to the value stored in the returned optional Movie.”</p>

<p>
  If the downcasting succeeds, the properties of movie are then used to print a description for that Movie instance, including the name of its director. A similar principle is used to check for Song instances, and to print an appropriate description (including artist name) whenever a Song is found in the library.</p><empty-line /><p>Note</p>

<p>Casting does not actually modify the instance or change its values. The underlying instance remains the same; it is simply treated and accessed as an instance of the type to which it has been cast.
      





Type Casting for Any and AnyObject</p>

<p>
  Swift provides two special type aliases for working with non-specific types:</p>

<p>
AnyObject can represent an instance of any class type.</p>

<p>
Any can represent an instance of any type at all, apart from function types.</p><empty-line /><p>Note</p>

<p>Use Any and AnyObject only when you explicitly need the behavior and capabilities they provide. It is always better to be specific about the types you expect to work with in your code.
      




AnyObject</p>

<p>
  When working with Cocoa APIs, it is common to receive an array with a type of AnyObject[], or “an array of values of any object type”. This is because Objective-C does not have explicitly typed arrays. However, you can often be confident about the type of objects contained in such an array just from the information you know about the API that provided the array.</p>

<p>
  In these situations, you can use the forced version of the type cast operator (as) to downcast each item in the array to a more specific class type than AnyObject, without the need for optional unwrapping.</p>

<p>
  The example below defines an array of type AnyObject[] and populates this array with three instances of the Movie class:</p>

<p>let someObjects: AnyObject[] = [</p>

<p> Movie(name: "2001: A Space Odyssey", director: "Stanley Kubrick"),</p>

<p> Movie(name: "Moon", director: "Duncan Jones"),</p>

<p> Movie(name: "Alien", director: "Ridley Scott")</p>

<p>]</p>

<p>
  Because this array is known to contain only Movie instances, you can downcast and unwrap directly to a non-optional Movie with the forced version of the type cast operator (as):</p>

<p>for object in someObjects {</p>

<p> let movie = object as Movie</p>

<p> println("Movie: '\(movie.name)', dir. \(movie.director)")</p>

<p>}</p>

<p>// Movie: '2001: A Space Odyssey', dir. Stanley Kubrick</p>

<p>// Movie: 'Moon', dir. Duncan Jones</p>

<p>// Movie: 'Alien', dir. Ridley Scott</p>

<p>
  For an even shorter form of this loop, downcast the someObjects array to a type of Movie[] instead of downcasting each item:</p>

<p>for movie in someObjects as Movie[] {</p>

<p> println("Movie: '\(movie.name)', dir. \(movie.director)")</p>

<p>}</p>

<p>// Movie: '2001: A Space Odyssey', dir. Stanley Kubrick</p>

<p>// Movie: 'Moon', dir. Duncan Jones</p>

<p>// Movie: 'Alien', dir. Ridley Scott






Any</p>

<p>
  Here’s an example of using Any to work with a mix of different types, including non-class types. The example creates an array called things, which can store values of type Any:</p>

<p>var things = Any[]()</p>

<p>things.append(0)</p>

<p>things.append(0.0)</p>

<p>things.append(42)</p>

<p>things.append(3.14159)</p>

<p>things.append("hello")</p>

<p>things.append((3.0, 5.0))</p>

<p>things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))</p>

<p>
  The things array contains two Int values, two Double values, a String value, a tuple of type (Double, Double), and the movie “Ghostbusters”, directed by Ivan Reitman.</p>

<p>
  You can use the is and as operators in a switch statement’s cases to discover the specific type of a constant or variable that is known only to be of type Any or AnyObject. The example below iterates over the items in the things array and queries the type of each item with a switch statement. Several of the switch statement’s cases bind their matched value to a constant of the specified type to enable its value to be printed:</p>

<p>for thing in things {</p>

<p> switch thing {</p>

<p> case 0 as Int:</p>

<p> println("zero as an Int")</p>

<p> case 0 as Double:</p>

<p> println("zero as a Double")</p>

<p> case let someInt as Int:</p>

<p> println("an integer value of \(someInt)")</p>

<p> case let someDouble as Double where someDouble &gt; 0:</p>

<p> println("a positive double value of \(someDouble)")</p>

<p> case is Double:</p>

<p> println("some other double value that I don't want to print")</p>

<p> case let someString as String:</p>

<p> println("a string value of \"\(someString)\"")</p>

<p> case let (x, y) as (Double, Double):</p>

<p> println("an (x, y) point at \(x), \(y)")</p>

<p> case let movie as Movie:</p>

<p> println("a movie called '\(movie.name)', dir. \(movie.director)")</p>

<p> default:</p>

<p> println("something else")</p>

<p>    }</p>

<p>}</p>

<p>// zero as an Int</p>

<p>// zero as a Double</p>

<p>// an integer value of 42</p>

<p>// a positive double value of 3.14159</p>

<p>// a string value of "hello"</p>

<p>// an (x, y) point at 3.0, 5.0</p>

<p>// a movie called 'Ghostbusters', dir. Ivan Reitman</p><empty-line /><p>Note</p>

<p>The cases of a switch statement use the forced version of the type cast operator (as, not as?) to check and cast to a specific type. This check is always safe within the context of a switch case statement.</p>

<p>
Nested Types</p>

<p>On This Page</p>

<p>

            Nested Types in Action</p>

<p>

            Referring to Nested Types</p>

<p>
  Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define <emphasis>nested types</emphasis>, whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.</p>

<p>
  To nest a type within another type, write its definition within the outer braces of the type it supports. Types can be nested to as many levels as are required.




Nested Types in Action</p>

<p>
  The example below defines a structure called BlackjackCard, which models a playing card as used in the game of Blackjack. The BlackJack structure contains two nested enumeration types called Suit and Rank.</p>

<p>
  In Blackjack, the Ace cards have a value of either one or eleven. This feature is represented by a structure called Values, which is nested within the Rank enumeration:</p>

<p>struct BlackjackCard {</p>

<p> // nested Suit enumeration</p>

<p> enum Suit: Character {</p>

<p> case Spades = "♠", Hearts = "♡", Diamonds = "♢", Clubs = "♣"</p>

<p>    }</p>

<p> // nested Rank enumeration</p>

<p> enum Rank: Int {</p>

<p> case Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten</p>

<p> case Jack, Queen, King, Ace</p>

<p> struct Values {</p>

<p> let first: Int, second: Int?</p>

<p>        }</p>

<p> var values: Values {</p>

<p> switch self {</p>

<p> case .Ace:</p>

<p> return Values(first: 1, second: 11)</p>

<p> case .Jack, .Queen, .King:</p>

<p> return Values(first: 10, second: nil)</p>

<p> default:</p>

<p> return Values(first: self.toRaw(), second: nil)</p>

<p>            }</p>

<p>        }</p>

<p>    }</p>

<p> // BlackjackCard properties and methods</p>

<p> let rank: Rank, suit: Suit</p>

<p> var description: String {</p>

<p> var output = "suit is \(suit.toRaw()),"</p>

<p> output += " value is \(rank.values.first)"</p>

<p> if let second = rank.values.second {</p>

<p> output += " or \(second)"</p>

<p>        }</p>

<p> return output</p>

<p>    }</p>

<p>}</p>

<p>
  The Suit enumeration describes the four common playing card suits, together with a raw Character value to represent their symbol.</p>

<p>
  The Rank enumeration describes the thirteen possible playing card ranks, together with a raw Int value to represent their face value. (This raw Int value is not used for the Jack, Queen, King, and Ace cards.)</p>

<p>
  As mentioned above, the Rank enumeration defines a further nested structure of its own, called Values. This structure encapsulates the fact that most cards have one value, but the Ace card has two values. The Values structure defines two properties to represent this:</p>

<p>
first, of type Int</p>

<p>
second, of type Int?, or “optional Int”</p>

<p>
Rank also defines a computed property, values, which returns an instance of the Values structure. This computed property considers the rank of the card and initializes a new Values instance with appropriate values based on its rank. It uses special values for Jack, Queen, King, and Ace. For the numeric cards, it uses the rank’s raw Int value.</p>

<p>
  The BlackjackCard structure itself has two properties—rank and suit. It also defines a computed property called description, which uses the values stored in rank and suit to build a description of the name and value of the card. The description property uses optional binding to check whether there is a second value to display, and if so, inserts additional description detail for that second value.</p>

<p>
  Because BlackjackCard is a structure with no custom initializers, it has an implicit memberwise initializer, as described in Memberwise Initializers for Structure Types. You can use this initializer to initialize a new constant called theAceOfSpades:</p>

<p>let theAceOfSpades = BlackjackCard(rank: .Ace, suit: .Spades)</p>

<p>println("theAceOfSpades: \(theAceOfSpades.description)")</p>

<p>// prints "theAceOfSpades: suit is ♠, value is 1 or 11"</p>

<p>
  Even though Rank and Suit are nested within BlackjackCard, their type can be inferred from context, and so the initialization of this instance is able to refer to the enumeration members by their member names (.Ace and .Spades) alone. In the example above, the description property correctly reports that the Ace of Spades has a value of 1 or 11.




Referring to Nested Types</p>

<p>
  To use a nested type outside of its definition context, prefix its name with the name of the type it is nested within:</p>

<p>let heartsSymbol = BlackjackCard.Suit.Hearts.toRaw()</p>

<p>// heartsSymbol is "♡"</p>

<p>
  For the example above, this enables the names of Suit, Rank, and Values to be kept deliberately short, because their names are naturally qualified by the context in which they are defined.</p>

<p>
Extensions</p>

<p>On This Page</p>

<p>

            Extension Syntax</p>

<p>

            Computed Properties</p>

<p>

            Initializers</p>

<p>

            Methods</p>

<p>

            Subscripts</p>

<p>

            Nested Types</p>

<p>
<emphasis>Extensions</emphasis> add new functionality to an existing class, structure, or enumeration type. This includes the ability to extend types for which you do not have access to the original source code (known as <emphasis>retroactive modeling</emphasis>). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions do not have names.)</p>

<p>
  Extensions in Swift can:</p>

<p>
  Add computed properties and computed static properties</p>

<p>
  Define instance methods and type methods</p>

<p>
  Provide new initializers</p>

<p>
  Define subscripts</p>

<p>
  Define and use new nested types</p>

<p>
  Make an existing type conform to a protocol</p><empty-line /><p>Note</p>

<p>If you define an extension to add new functionality to an existing type, the new functionality will be available on all existing instances of that type, even if they were created before the extension was defined.
      





Extension Syntax</p>

<p>
  Declare extensions with the extension keyword:</p>

<p>extension SomeType {</p>

<p> // new functionality to add to SomeType goes here</p>

<p>}</p>

<p>
  An extension can extend an existing type to make it adopt one or more protocols. Where this is the case, the protocol names are written in exactly the same way as for a class or structure:</p>

<p>extension SomeType: SomeProtocol, AnotherProtocol {</p>

<p> // implementation of protocol requirements goes here</p>

<p>}</p>

<p>
  Adding protocol conformance in this way is described in Adding Protocol Conformance with an Extension.




Computed Properties</p>

<p>
  Extensions can add computed instance properties and computed type properties to existing types. This example adds five computed instance properties to Swift’s built-in Double type, to provide basic support for working with distance units:</p>

<p>extension Double {</p>

<p> var km: Double { return self * 1_000.0 }</p>

<p> var m: Double { return self }</p>

<p> var cm: Double { return self / 100.0 }</p>

<p> var mm: Double { return self / 1_000.0 }</p>

<p> var ft: Double { return self / 3.28084 }</p>

<p>}</p>

<p>let oneInch = 25.4.mm</p>

<p>println("One inch is \(oneInch) meters")</p>

<p>// prints "One inch is 0.0254 meters"</p>

<p>let threeFeet = 3.ft</p>

<p>println("Three feet is \(threeFeet) meters")</p>

<p>// prints "Three feet is 0.914399970739201 meters"</p>

<p>
  These computed properties express that a Double value should be considered as a certain unit of length. Although they are implemented as computed properties, the names of these properties can be appended to a floating-point literal value with dot syntax, as a way to use that literal value to perform distance conversions.</p>

<p>
  In this example, a Double value of 1.0 is considered to represent “one meter”. This is why the m computed property returns self—the expression 1.m is considered to calculate a Double value of 1.0.</p>

<p>
  Other units require some conversion to be expressed as a value measured in meters. One kilometer is the same as 1,000 meters, so the km computed property multiplies the value by 1_000.00 to convert into a number expressed in meters. Similarly, there are 3.28024 feet in a meter, and so the ft computed property divides the underlying Double value by 3.28024, to convert it from feet to meters.</p>

<p>
  These properties are read-only computed properties, and so they are expressed without the get keyword, for brevity. Their return value is of type Double, and can be used within mathematical calculations wherever a Double is accepted:</p>

<p>let aMarathon = 42.km + 195.m</p>

<p>println("A marathon is \(aMarathon) meters long")</p>

<p>// prints "A marathon is 42195.0 meters long"</p><empty-line /><p>Note</p>

<p>Extensions can add new computed properties, but they cannot add stored properties, or add property observers to existing properties.
      





Initializers</p>

<p>
  Extensions can add new initializers to existing types. This enables you to extend other types to accept your own custom types as initializer parameters, or to provide additional initialization options that were not included as part of the type’s original implementation.</p>

<p>
  Extensions can add new convenience initializers to a class, but they cannot add new designated initializers or deinitializers to a class. Designated initializers and deinitializers must always be provided by the original class implementation.</p><empty-line /><p>Note</p>

<p>If you use an extension to add an initializer to a value type that provides default values for all of its stored properties and does not define any custom initializers, you can call the default initializer and memberwise initializer for that value type from within your extension’s initializer.</p>

<p>
  This would not be the case if you had written the initializer as part of the value type’s original implementation, as described in Initializer Delegation for Value Types.</p>

<p>
  The example below defines a custom Rect structure to represent a geometric rectangle. The example also defines two supporting structures called Size and Point, both of which provide default values of 0.0 for all of their properties:</p>

<p>struct Size {</p>

<p> var width = 0.0, height = 0.0</p>

<p>}</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p>}</p>

<p>struct Rect {</p>

<p> var origin = Point()</p>

<p> var size = Size()</p>

<p>}</p>

<p>
  Because the Rect structure provides default values for all of its properties, it receives a default initializer and a memberwise initializer automatically, as described in Default Initializers. These initializers can be used to create new Rect instances:</p>

<p>let defaultRect = Rect()</p>

<p>let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),</p>

<p> size: Size(width: 5.0, height: 5.0))</p>

<p>
  You can extend the Rect structure to provide an additional initializer that takes a specific center point and size:</p>

<p>extension Rect {</p>

<p> init(center: Point, size: Size) {</p>

<p> let originX = center.x - (size.width / 2)</p>

<p> let originY = center.y - (size.height / 2)</p>

<p> self.init(origin: Point(x: originX, y: originY), size: size)</p>

<p>    }</p>

<p>}</p>

<p>
  This new initializer starts by calculating an appropriate origin point based on the provided center point and size value. The initializer then calls the structure’s automatic memberwise initializer init(origin:size:), which stores the new origin and size values in the appropriate properties:</p>

<p>let centerRect = Rect(center: Point(x: 4.0, y: 4.0),</p>

<p> size: Size(width: 3.0, height: 3.0))</p>

<p>// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)</p><empty-line /><p>Note</p>

<p>If you provide a new initializer with an extension, you are still responsible for making sure that each instance is fully initialized once the initializer completes.
      





Methods</p>

<p>
  Extensions can add new instance methods and type methods to existing types. The following example adds a new instance method called repetitions to the Int type:</p>

<p>extension Int {</p>

<p> func repetitions(task: () -&gt; ()) {</p>

<p> for i in 0..self {</p>

<p> task()</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
  The repetitions method takes a single argument of type () -&gt; (), which indicates a function that has no parameters and does not return a value.</p>

<p>
  After defining this extension, you can call the repetitions method on any integer number to perform a task that many number of times:</p>

<p>3.repetitions({</p>

<p> println("Hello!")</p>

<p>    })</p>

<p>// Hello!</p>

<p>// Hello!</p>

<p>// Hello!</p>

<p>
  Use trailing closure syntax to make the call more succinct:</p>

<p>3.repetitions {</p>

<p> println("Goodbye!")</p>

<p>}</p>

<p>// Goodbye!</p>

<p>// Goodbye!</p>

<p>// Goodbye!





Mutating Instance Methods</p>

<p>
  Instance methods added with an extension can also modify (or <emphasis>mutate</emphasis>) the instance itself. Structure and enumeration methods that modify self or its properties must mark the instance method as mutating, just like mutating methods from an original implementation.</p>

<p>
  The example below adds a new mutating method called square to Swift’s Int type, which squares the original value:</p>

<p>extension Int {</p>

<p> mutating func square() {</p>

<p> self = self * self</p>

<p>    }</p>

<p>}</p>

<p>var someInt = 3</p>

<p>someInt.square()</p>

<p>// someInt is now 9







Subscripts</p>

<p>
  Extensions can add new subscripts to an existing type. This example adds an integer subscript to Swift’s built-in Int type. This subscript [n] returns the decimal digit n places in from the right of the number:</p>

<p>
123456789[0] returns 9</p>

<p>
123456789[1] returns 8</p>

<p>
  …and so on:</p>

<p>extension Int {</p>

<p> subscript(digitIndex: Int) -&gt; Int {</p>

<p> var decimalBase = 1</p>

<p> for _ in 1...digitIndex {</p>

<p> decimalBase *= 10</p>

<p>            }</p>

<p> return (self / decimalBase) % 10</p>

<p>    }</p>

<p>}</p>

<p>746381295[0]</p>

<p>// returns 5</p>

<p>746381295[1]</p>

<p>// returns 9</p>

<p>746381295[2]</p>

<p>// returns 2</p>

<p>746381295[8]</p>

<p>// returns 7</p>

<p>
  If the Int value does not have enough digits for the requested index, the subscript implementation returns 0, as if the number had been padded with zeroes to the left:</p>

<p>746381295[9]</p>

<p>// returns 0, as if you had requested:</p>

<p>0746381295[9]






Nested Types</p>

<p>
  Extensions can add new nested types to existing classes, structures and enumerations:</p>

<p>extension Character {</p>

<p> enum Kind {</p>

<p> case Vowel, Consonant, Other</p>

<p>    }</p>

<p> var kind: Kind {</p>

<p> switch String(self).lowercaseString {</p>

<p> case "a", "e", "i", "o", "u":</p>

<p> return .Vowel</p>

<p> case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",</p>

<p> "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":</p>

<p> return .Consonant</p>

<p> default:</p>

<p> return .Other</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
  This example adds a new nested enumeration to Character. This enumeration, called Kind, expresses the kind of letter that a particular character represents. Specifically, it expresses whether the character is a vowel or a consonant in a standard Latin script (without taking into account accents or regional variations), or whether it is another kind of character.</p>

<p>
  This example also adds a new computed instance property to Character, called kind, which returns the appropriate Kind enumeration member for that character.</p>

<p>
  The nested enumeration can now be used with Character values:</p>

<p>func printLetterKinds(word: String) {</p>

<p> println("'\(word)' is made up of the following kinds of letters:")</p>

<p> for character in word {</p>

<p> switch character.kind {</p>

<p> case .Vowel:</p>

<p> print("vowel ")</p>

<p> case .Consonant:</p>

<p> print("consonant ")</p>

<p> case .Other:</p>

<p> print("other ")</p>

<p>        }</p>

<p>    }</p>

<p> print("\n")</p>

<p>}</p>

<p>printLetterKinds("Hello")</p>

<p>// 'Hello' is made up of the following kinds of letters:</p>

<p>// consonant vowel consonant consonant vowel</p>

<p>
  This function, printLetterKinds, takes an input String value and iterates over its characters. For each character, it considers the kind computed property for that character, and prints an appropriate description of that kind. The printLetterKinds function can then be called to print the kinds of letters in an entire word, as shown here for the word "Hello".</p><empty-line /><p>Note</p>

<p>character.kind is already known to be of type Character.Kind. Because of this, all of the Character.Kind member values can be written in shorthand form inside the switch statement, such as .Vowel rather than Character.Kind.Vowel.</p>

<p>
Protocols</p>

<p>On This Page</p>

<p>

            Protocol Syntax</p>

<p>

            Property Requirements</p>

<p>

            Method Requirements</p>

<p>

            Mutating Method Requirements</p>

<p>

            Protocols as Types</p>

<p>

            Delegation</p>

<p>

            Adding Protocol Conformance with an Extension</p>

<p>

            Collections of Protocol Types</p>

<p>

            Protocol Inheritance</p>

<p>

            Protocol Composition</p>

<p>

            Checking for Protocol Conformance</p>

<p>

            Optional Protocol Requirements</p>

<p>
  A <emphasis>protocol</emphasis> defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol doesn’t actually provide an implementation for any of these requirements—it only describes what an implementation will look like. The protocol can then be <emphasis>adopted</emphasis> by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to <emphasis>conform</emphasis> to that protocol.</p>

<p>
  Protocols can require that conforming types have specific instance properties, instance methods, type methods, operators, and subscripts.




Protocol Syntax</p>

<p>
  You define protocols in a very similar way to classes, structures, and enumerations:</p>

<p>protocol SomeProtocol {</p>

<p> // protocol definition goes here</p>

<p>}</p>

<p>
  Custom types state that they adopt a particular protocol by placing the protocol’s name after the type’s name, separated by a colon, as part of their definition. Multiple protocols can be listed, and are separated by commas:</p>

<p>struct SomeStructure: FirstProtocol, AnotherProtocol {</p>

<p> // structure definition goes here</p>

<p>}</p>

<p>
  If a class has a superclass, list the superclass name before any protocols it adopts, followed by a comma:</p>

<p>class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {</p>

<p> // class definition goes here</p>

<p>}






Property Requirements</p>

<p>
  A protocol can require any conforming type to provide an instance property or type property with a particular name and type. The protocol doesn’t specify whether the property should be a stored property or a computed property—it only specifies the required property name and type. The protocol also specifies whether each property must be gettable or gettable <emphasis>and</emphasis> settable.</p>

<p>
  If a protocol requires a property to be gettable and settable, that property requirement cannot be fulfilled by a constant stored property or a read-only computed property. If the protocol only requires a property to be gettable, the requirement can be satisfied by any kind of property, and it is valid for it also to be settable if this is useful for your own code.</p>

<p>
  Property requirements are always declared as variable properties, prefixed with the var keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.</p>

<p>protocol SomeProtocol {</p>

<p> var mustBeSettable: Int { get set }</p>

<p> var doesNotNeedToBeSettable: Int { get }</p>

<p>}</p>

<p>
  Always prefix type property requirements with the class keyword when you define them in a protocol. This is true even though type property requirements are prefixed with the static keyword when implemented by a structure or enumeration:</p>

<p>protocol AnotherProtocol {</p>

<p> class var someTypeProperty: Int { get set }</p>

<p>}</p>

<p>
  Here’s an example of a protocol with a single instance property requirement:</p>

<p>protocol FullyNamed {</p>

<p> var fullName: String { get }</p>

<p>}</p>

<p>
  The FullyNamed protocol defines any kind of thing that has a fully-qualified name. It doesn’t specify what <emphasis>kind</emphasis> of thing it must be—it only specifies that the thing must be able to provide a full name for itself. It specifies this requirement by stating that any FullyNamed type must have a gettable instance property called fullName, which is of type String.</p>

<p>
  Here’s an example of a simple structure that adopts and conforms to the FullyNamed protocol:</p>

<p>struct Person: FullyNamed {</p>

<p> var fullName: String</p>

<p>}</p>

<p>let john = Person(fullName: "John Appleseed")</p>

<p>// john.fullName is "John Appleseed"</p>

<p>
  This example defines a structure called Person, which represents a specific named person. It states that it adopts the FullyNamed protocol as part of the first line of its definition.</p>

<p>
  Each instance of Person has a single stored property called fullName, which is of type String. This matches the single requirement of the FullyNamed protocol, and means that Person has correctly conformed to the protocol. (Swift reports an error at compile-time if a protocol requirement is not fulfilled.)</p>

<p>
  Here’s a more complex class, which also adopts and conforms to the FullyNamed protocol:</p>

<p>class Starship: FullyNamed {</p>

<p> var prefix: String?</p>

<p> var name: String</p>

<p> init(name: String, prefix: String? = nil) {</p>

<p> self.name = name</p>

<p> self.prefix = prefix</p>

<p>    }</p>

<p> var fullName: String {</p>

<p> return (prefix ? prefix! + " " : "") + name</p>

<p>    }</p>

<p>}</p>

<p>var ncc1701 = Starship(name: "Enterprise", prefix: "USS")</p>

<p>// ncc1701.fullName is "USS Enterprise"</p>

<p>
  This class implements the fullName property requirement as a computed read-only property for a starship. Each Starship class instance stores a mandatory name and an optional prefix. The fullName property uses the prefix value if it exists, and prepends it to the beginning of name to create a full name for the starship.




Method Requirements</p>

<p>
  Protocols can require specific instance methods and type methods to be implemented by conforming types. These methods are written as part of the protocol’s definition in exactly the same way as for normal instance and type methods, but without curly braces or a method body. Variadic parameters are allowed, subject to the same rules as for normal methods.</p><empty-line /><p>Note</p>

<p>Protocols use the same syntax as normal methods, but are not allowed to specify default values for method parameters.</p>

<p>
  As with type property requirements, you always prefix type method requirements with the class keyword when they are defined in a protocol. This is true even though type method requirements are prefixed with the static keyword when implemented by a structure or enumeration:</p>

<p>protocol SomeProtocol {</p>

<p> class func someTypeMethod()</p>

<p>}</p>

<p>
  The following example defines a protocol with a single instance method requirement:</p>

<p>protocol RandomNumberGenerator {</p>

<p> func random() -&gt; Double</p>

<p>}</p>

<p>
  This protocol, RandomNumberGenerator, requires any conforming type to have an instance method called random, which returns a Double value whenever it is called. (Although it is not specified as part of the protocol, it is assumed that this value will be a number between 0.0 and 1.0 inclusive.)</p>

<p>
  The RandomNumberGenerator protocol does not make any assumptions about how each random number will be generated—it simply requires the generator to provide a standard way to generate a new random number.</p>

<p>
  Here’s an implementation of a class that adopts and conforms to the RandomNumberGenerator protocol. This class implements a pseudorandom number generator algorithm known as a <emphasis>linear congruential generator</emphasis>:</p>

<p>class LinearCongruentialGenerator: RandomNumberGenerator {</p>

<p> var lastRandom = 42.0</p>

<p> let m = 139968.0</p>

<p> let a = 3877.0</p>

<p> let c = 29573.0</p>

<p> func random() -&gt; Double {</p>

<p> lastRandom = ((lastRandom * a + c) % m)</p>

<p> return lastRandom / m</p>

<p>    }</p>

<p>}</p>

<p>let generator = LinearCongruentialGenerator()</p>

<p>println("Here's a random number: \(generator.random())")</p>

<p>// prints "Here's a random number: 0.37464991998171"</p>

<p>println("And another one: \(generator.random())")</p>

<p>// prints "And another one: 0.729023776863283"






Mutating Method Requirements</p>

<p>
  It is sometimes necessary for a method to modify (or <emphasis>mutate</emphasis>) the instance it belongs to. For instance methods on value types (that is, structures and enumerations) you place the mutating keyword before a method’s func keyword to indicate that the method is allowed to modify the instance it belongs to and/or any properties of that instance. This process is described in Modifying Value Types from Within Instance Methods.</p>

<p>
  If you define a protocol instance method requirement that is intended to mutate instances of any type that adopts the protocol, mark the method with the mutating keyword as part of the protocol’s definition. This enables structures and enumerations to adopt the protocol and satisfy that method requirement.</p><empty-line /><p>Note</p>

<p>If you mark a protocol instance method requirement as mutating, you do not need to write the mutating keyword when writing an implementation of that method for a class. The mutating keyword is only used by structures and enumerations.</p>

<p>
  The example below defines a protocol called Togglable, which defines a single instance method requirement called toggle. As its name suggests, the toggle method is intended to toggle or invert the state of any conforming type, typically by modifying a property of that type.</p>

<p>
  The toggle method is marked with the mutating keyword as part of the Togglable protocol definition, to indicate that the method is expected to mutate the state of a conforming instance when it is called:</p>

<p>protocol Togglable {</p>

<p> mutating func toggle()</p>

<p>}</p>

<p>
  If you implement the Togglable protocol for a structure or enumeration, that structure or enumeration can conform to the protocol by providing an implementation of the toggle method that is also marked as mutating.</p>

<p>
  The example below defines an enumeration called OnOffSwitch. This enumeration toggles between two states, indicated by the enumeration cases On and Off. The enumeration’s toggle implementation is marked as mutating, to match the Togglable protocol’s requirements:</p>

<p>enum OnOffSwitch: Togglable {</p>

<p> case Off, On</p>

<p> mutating func toggle() {</p>

<p> switch self {</p>

<p> case Off:</p>

<p> self = On</p>

<p> case On:</p>

<p> self = Off</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>var lightSwitch = OnOffSwitch.Off</p>

<p>lightSwitch.toggle()</p>

<p>// lightSwitch is now equal to .On






Protocols as Types</p>

<p>
  Protocols do not actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.</p>

<p>
  Because it is a type, you can use a protocol in many places where other types are allowed, including:</p>

<p>
  As a parameter type or return type in a function, method, or initializer</p>

<p>
  As the type of a constant, variable, or property</p>

<p>
  As the type of items in an array, dictionary, or other container</p><empty-line /><p>Note</p>

<p>Because protocols are types, begin their names with a capital letter (such as FullyNamed and RandomNumberGenerator) to match the names of other types in Swift (such as Int, String, and Double).</p>

<p>
  Here’s an example of a protocol used as a type:</p>

<p>class Dice {</p>

<p> let sides: Int</p>

<p> let generator: RandomNumberGenerator</p>

<p> init(sides: Int, generator: RandomNumberGenerator) {</p>

<p> self.sides = sides</p>

<p> self.generator = generator</p>

<p>    }</p>

<p> func roll() -&gt; Int {</p>

<p> return Int(generator.random() * Double(sides)) + 1</p>

<p>    }</p>

<p>}</p>

<p>
  This example defines a new class called Dice, which represents an <emphasis>n</emphasis>-sided dice for use in a board game. Dice instances have an integer property called sides, which represents how many sides they have, and a property called generator, which provides a random number generator from which to create dice roll values.</p>

<p>
  The generator property is of type RandomNumberGenerator. Therefore, you can set it to an instance of <emphasis>any</emphasis> type that adopts the RandomNumberGenerator protocol. Nothing else is required of the instance you assign to this property, except that the instance must adopt the RandomNumberGenerator protocol.</p>

<p>
Dice also has an initializer, to set up its initial state. This initializer has a parameter called generator, which is also of type RandomNumberGenerator. You can pass a value of any conforming type in to this parameter when initializing a new Dice instance.</p>

<p>
Dice provides one instance method, roll, which returns an integer value between 1 and the number of sides on the dice. This method calls the generator’s random method to create a new random number between 0.0 and 1.0, and uses this random number to create a dice roll value within the correct range. Because generator is known to adopt RandomNumberGenerator, it is guaranteed to have a random method to call.</p>

<p>
  Here’s how the Dice class can be used to create a six-sided dice with a LinearCongruentialGenerator instance as its random number generator:</p>

<p>var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())</p>

<p>for _ in 1...5 {</p>

<p> println("Random dice roll is \(d6.roll())")</p>

<p>}</p>

<p>// Random dice roll is 3</p>

<p>// Random dice roll is 5</p>

<p>// Random dice roll is 4</p>

<p>// Random dice roll is 5</p>

<p>// Random dice roll is 4






Delegation</p>

<p>
<emphasis>Delegation</emphasis> is a design pattern that enables a class or structure to hand off (or <emphasis>delegate</emphasis>) some of its responsibilities to an instance of another type. This design pattern is implemented by defining a protocol that encapsulates the delegated responsibilities, such that a conforming type (known as a delegate) is guaranteed to provide the functionality that has been delegated. Delegation can be used to respond to a particular action, or to retrieve data from an external source without needing to know the underlying type of that source.</p>

<p>
  The example below defines two protocols for use with dice-based board games:</p>

<p>protocol DiceGame {</p>

<p> var dice: Dice { get }</p>

<p> func play()</p>

<p>}</p>

<p>protocol DiceGameDelegate {</p>

<p> func gameDidStart(game: DiceGame)</p>

<p> func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)</p>

<p> func gameDidEnd(game: DiceGame)</p>

<p>}</p>

<p>
  The DiceGame protocol is a protocol that can be adopted by any game that involves dice. The DiceGameDelegate protocol can be adopted by any type to track the progress of a DiceGame.</p>

<p>
  Here’s a version of the <emphasis>Snakes and Ladders</emphasis> game originally introduced in Control Flow. This version is adapted to use a Dice instance for its dice-rolls; to adopt the DiceGame protocol; and to notify a DiceGameDelegate about its progress:</p>

<p>class SnakesAndLadders: DiceGame {</p>

<p> let finalSquare = 25</p>

<p> let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())</p>

<p> var square = 0</p>

<p> var board: Int[]</p>

<p> init() {</p>

<p> board = Int[](count: finalSquare + 1, repeatedValue: 0)</p>

<p> board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02</p>

<p> board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08</p>

<p>    }</p>

<p> var delegate: DiceGameDelegate?</p>

<p> func play() {</p>

<p> square = 0</p>

<p> delegate?.gameDidStart(self)</p>

<p> gameLoop: while square != finalSquare {</p>

<p> let diceRoll = dice.roll()</p>

<p> delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)</p>

<p> switch square + diceRoll {</p>

<p> case finalSquare:</p>

<p> break gameLoop</p>

<p> case let newSquare where newSquare &gt; finalSquare:</p>

<p> continue gameLoop</p>

<p> default:</p>

<p> square += diceRoll</p>

<p> square += board[square]</p>

<p>            }</p>

<p>        }</p>

<p> delegate?.gameDidEnd(self)</p>

<p>    }</p>

<p>}</p>

<p>
  For a description of the <emphasis>Snakes and Ladders</emphasis> gameplay, see the Break section of the Control Flow chapter.</p>

<p>
  This version of the game is wrapped up as a class called SnakesAndLadders, which adopts the DiceGame protocol. It provides a gettable dice property and a play method in order to conform to the protocol. (The dice property is declared as a constant property because it does not need to change after initialization, and the protocol only requires that it is gettable.)</p>

<p>
  The <emphasis>Snakes and Ladders</emphasis> game board setup takes place within the class’s init() initializer. All game logic is moved into the protocol’s play method, which uses the protocol’s required dice property to provide its dice roll values.</p>

<p>
  Note that the delegate property is defined as an <emphasis>optional</emphasis> DiceGameDelegate, because a delegate isn’t required in order to play the game. Because it is of an optional type, the delegate property is automatically set to an initial value of nil. Thereafter, the game instantiator has the option to set the property to a suitable delegate.</p>

<p>
DiceGameDelegate provides three methods for tracking the progress of a game. These three methods have been incorporated into the game logic within the play method above, and are called when a new game starts, a new turn begins, or the game ends.</p>

<p>
  Because the delegate property is an <emphasis>optional</emphasis> DiceGameDelegate, the play method uses optional chaining each time it calls a method on the delegate. If the delegate property is nil, these delegate calls fail gracefully and without error. If the delegate property is non-nil, the delegate methods are called, and are passed the SnakesAndLadders instance as a parameter.</p>

<p>
  This next example shows a class called DiceGameTracker, which adopts the DiceGameDelegate protocol:</p>

<p>class DiceGameTracker: DiceGameDelegate {</p>

<p> var numberOfTurns = 0</p>

<p> func gameDidStart(game: DiceGame) {</p>

<p> numberOfTurns = 0</p>

<p> if game is SnakesAndLadders {</p>

<p> println("Started a new game of Snakes and Ladders")</p>

<p>        }</p>

<p> println("The game is using a \(game.dice.sides)-sided dice")</p>

<p>    }</p>

<p> func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {</p>

<p>        ++numberOfTurns</p>

<p> println("Rolled a \(diceRoll)")</p>

<p>    }</p>

<p> func gameDidEnd(game: DiceGame) {</p>

<p> println("The game lasted for \(numberOfTurns) turns")</p>

<p>    }</p>

<p>}</p>

<p>
DiceGameTracker implements all three methods required by DiceGameDelegate. It uses these methods to keep track of the number of turns a game has taken. It resets a numberOfTurns property to zero when the game starts; increments it each time a new turn begins; and prints out the total number of turns once the game has ended.</p>

<p>
  The implementation of gameDidStart shown above uses the game parameter to print some introductory information about the game that is about to be played. The game parameter has a type of DiceGame, not SnakesAndLadders, and so gameDidStart can access and use only methods and properties that are implemented as part of the DiceGame protocol. However, the method is still able to use type casting to query the type of the underlying instance. In this example, it checks whether game is actually an instance of SnakesAndLadders behind the scenes, and prints an appropriate message if so.</p>

<p>
gameDidStart also accesses the dice property of the passed game parameter. Because game is known to conform to the DiceGame protocol, it is guaranteed to have a dice property, and so the gameDidStart method is able to access and print the dice’s sides property, regardless of what kind of game is being played.</p>

<p>
  Here’s how DiceGameTracker looks in action:</p>

<p>let tracker = DiceGameTracker()</p>

<p>let game = SnakesAndLadders()</p>

<p>game.delegate = tracker</p>

<p>game.play()</p>

<p>// Started a new game of Snakes and Ladders</p>

<p>// The game is using a 6-sided dice</p>

<p>// Rolled a 3</p>

<p>// Rolled a 5</p>

<p>// Rolled a 4</p>

<p>// Rolled a 5</p>

<p>// The game lasted for 4 turns






Adding Protocol Conformance with an Extension</p>

<p>
  You can extend an existing type to adopt and conform to a new protocol, even if you do not have access to the source code for the existing type. Extensions can add new properties, methods, and subscripts to an existing type, and are therefore able to add any requirements that a protocol may demand. For more about extensions, see Extensions.</p><empty-line /><p>Note</p>

<p>Existing instances of a type automatically adopt and conform to a protocol when that conformance is added to the instance’s type in an extension.</p>

<p>
  For example, this protocol, called TextRepresentable, can be implemented by any type that has a way to be represented as text. This might be a description of itself, or a text version of its current state:</p>

<p>protocol TextRepresentable {</p>

<p> func asText() -&gt; String</p>

<p>}</p>

<p>
  The Dice class from earlier can be extended to adopt and conform to TextRepresentable:</p>

<p>extension Dice: TextRepresentable {</p>

<p> func asText() -&gt; String {</p>

<p> return "A \(sides)-sided dice"</p>

<p>    }</p>

<p>}</p>

<p>
  This extension adopts the new protocol in exactly the same way as if Dice had provided it in its original implementation. The protocol name is provided after the type name, separated by a colon, and an implementation of all requirements of the protocol is provided within the extension’s curly braces.</p>

<p>
  Any Dice instance can now be treated as TextRepresentable:</p>

<p>let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())</p>

<p>println(d12.asText())</p>

<p>// prints "A 12-sided dice"</p>

<p>
  Similarly, the SnakesAndLadders game class can be extended to adopt and conform to the TextRepresentable protocol:</p>

<p>extension SnakesAndLadders: TextRepresentable {</p>

<p> func asText() -&gt; String {</p>

<p> return "A game of Snakes and Ladders with \(finalSquare) squares"</p>

<p>    }</p>

<p>}</p>

<p>println(game.asText())</p>

<p>// prints "A game of Snakes and Ladders with 25 squares"





Declaring Protocol Adoption with an Extension</p>

<p>
  If a type already conforms to all of the requirements of a protocol, but has not yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>

<p>struct Hamster {</p>

<p> var name: String</p>

<p> func asText() -&gt; String {</p>

<p> return "A hamster named \(name)"</p>

<p>    }</p>

<p>}</p>

<p>extension Hamster: TextRepresentable {}</p>

<p>
  Instances of Hamster can now be used wherever TextRepresentable is the required type:</p>

<p>let simonTheHamster = Hamster(name: "Simon")</p>

<p>let somethingTextRepresentable: TextRepresentable = simonTheHamster</p>

<p>println(somethingTextRepresentable.asText())</p>

<p>// prints "A hamster named Simon"</p><empty-line /><p>Note</p>

<p>Types do not automatically adopt a protocol just by satisfying its requirements. They must always explicitly declare their adoption of the protocol.
      






Collections of Protocol Types</p>

<p>
  A protocol can be used as the type to be stored in a collection such as an array or a dictionary, as mentioned in Protocols as Types. This example creates an array of TextRepresentable things:</p>

<p>let things: TextRepresentable[] = [game, d12, simonTheHamster]</p>

<p>
  It is now possible to iterate over the items in the array, and print each item’s textual representation:</p>

<p>for thing in things {</p>

<p> println(thing.asText())</p>

<p>}</p>

<p>// A game of Snakes and Ladders with 25 squares</p>

<p>// A 12-sided dice</p>

<p>// A hamster named Simon</p>

<p>
  Note that the thing constant is of type TextRepresentable. It is not of type Dice, or DiceGame, or Hamster, even if the actual instance behind the scenes is of one of those types. Nonetheless, because it is of type TextRepresentable, and anything that is TextRepresentable is known to have an asText method, it is safe to call thing.asText each time through the loop.




Protocol Inheritance</p>

<p>
  A protocol can <emphasis>inherit</emphasis> one or more other protocols and can add further requirements on top of the requirements it inherits. The syntax for protocol inheritance is similar to the syntax for class inheritance, but with the option to list multiple inherited protocols, separated by commas:</p>

<p>protocol InheritingProtocol: SomeProtocol, AnotherProtocol {</p>

<p> // protocol definition goes here</p>

<p>}</p>

<p>
  Here’s an example of a protocol that inherits the TextRepresentable protocol from above:</p>

<p>protocol PrettyTextRepresentable: TextRepresentable {</p>

<p> func asPrettyText() -&gt; String</p>

<p>}</p>

<p>
  This example defines a new protocol, PrettyTextRepresentable, which inherits from TextRepresentable. Anything that adopts PrettyTextRepresentable must satisfy all of the requirements enforced by TextRepresentable, <emphasis>plus</emphasis> the additional requirements enforced by PrettyTextRepresentable. In this example, PrettyTextRepresentable adds a single requirement to provide an instance method called asPrettyText that returns a String.</p>

<p>
  The SnakesAndLadders class can be extended to adopt and conform to PrettyTextRepresentable:</p>

<p>extension SnakesAndLadders: PrettyTextRepresentable {</p>

<p> func asPrettyText() -&gt; String {</p>

<p> var output = asText() + ":\n"</p>

<p> for index in 1...finalSquare {</p>

<p> switch board[index] {</p>

<p> case let ladder where ladder &gt; 0:</p>

<p> output += "▲ "</p>

<p> case let snake where snake &lt; 0:</p>

<p> output += "▼ "</p>

<p> default:</p>

<p> output += "○ "</p>

<p>            }</p>

<p>        }</p>

<p> return output</p>

<p>    }</p>

<p>}</p>

<p>
  This extension states that it adopts the PrettyTextRepresentable protocol and provides an implementation of the asPrettyText method for the SnakesAndLadders type. Anything that is PrettyTextRepresentable must also be TextRepresentable, and so the asPrettyText implementation starts by calling the asText method from the TextRepresentable protocol to begin an output string. It appends a colon and a line break, and uses this as the start of its pretty text representation. It then iterates through the array of board squares, and appends an emoji representation for each square:</p>

<p>
  If the square’s value is greater than 0, it is the base of a ladder, and is represented by ▲.</p>

<p>
  If the square’s value is less than 0, it is the head of a snake, and is represented by ▼.</p>

<p>
  Otherwise, the square’s value is 0, and it is a “free” square, represented by ○.</p>

<p>
  The method implementation can now be used to print a pretty text description of any SnakesAndLadders instance:</p>

<p>println(game.asPrettyText())</p>

<p>// A game of Snakes and Ladders with 25 squares:</p>

<p>// ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○






Protocol Composition</p>

<p>
  It can be useful to require a type to conform to multiple protocols at once. You can combine multiple protocols into a single requirement with a <emphasis>protocol composition</emphasis>. Protocol compositions have the form protocol&lt;SomeProtocol, AnotherProtocol&gt;. You can list as many protocols within the pair of angle brackets (&lt;&gt;) as you need, separated by commas.</p>

<p>
  Here’s an example that combines two protocols called Named and Aged into a single protocol composition requirement on a function parameter:</p>

<p>protocol Named {</p>

<p> var name: String { get }</p>

<p>}</p>

<p>protocol Aged {</p>

<p> var age: Int { get }</p>

<p>}</p>

<p>struct Person: Named, Aged {</p>

<p> var name: String</p>

<p> var age: Int</p>

<p>}</p>

<p>func wishHappyBirthday(celebrator: protocol&lt;Named, Aged&gt;) {</p>

<p> println("Happy birthday \(celebrator.name) - you're \(celebrator.age)!")</p>

<p>}</p>

<p>let birthdayPerson = Person(name: "Malcolm", age: 21)</p>

<p>wishHappyBirthday(birthdayPerson)</p>

<p>// prints "Happy birthday Malcolm - you're 21!"</p>

<p>
  This example defines a protocol called Named, with a single requirement for a gettable String property called name. It also defines a protocol called Aged, with a single requirement for a gettable Int property called age. Both of these protocols are adopted by a structure called Person.</p>

<p>
  The example also defines a function called wishHappyBirthday, which takes a single parameter called celebrator. The type of this parameter is protocol&lt;Named, Aged&gt;, which means “any type that conforms to both the Named and Aged protocols.” It doesn’t matter what specific type is passed to the function, as long as it conforms to both of the required protocols.</p>

<p>
  The example then creates a new Person instance called birthdayPerson and passes this new instance to the wishHappyBirthday function. Because Person conforms to both protocols, this is a valid call, and the wishHappyBirthday function is able to print its birthday greeting.</p><empty-line /><p>Note</p>

<p>Protocol compositions do not define a new, permanent protocol type. Rather, they define a temporary local protocol that has the combined requirements of all protocols in the composition.
      





Checking for Protocol Conformance</p>

<p>
  You can use the is and as operators described in Type Casting to check for protocol conformance, and to cast to a specific protocol. Checking for and casting to a protocol follows exactly the same syntax as checking for and casting to a type:</p>

<p>
  The is operator returns true if an instance conforms to a protocol and returns false if it does not.</p>

<p>
  The as? version of the downcast operator returns an optional value of the protocol’s type, and this value is nil if the instance does not conform to that protocol.</p>

<p>
  The as version of the downcast operator forces the downcast to the protocol type and triggers a runtime error if the downcast does not succeed.</p>

<p>
  This example defines a protocol called HasArea, with a single property requirement of a gettable Double property called area:</p>

<p>@objc protocol HasArea {</p>

<p> var area: Double { get }</p>

<p>}</p><empty-line /><p>Note</p>

<p>You can check for protocol conformance only if your protocol is marked with the @objc attribute, as seen for the HasArea protocol above. This attribute indicates that the protocol should be exposed to Objective-C code and is described in <emphasis>Using Swift with Cocoa and Objective-C</emphasis>. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to be able to check for protocol conformance.</p>

<p>
  Note also that @objc protocols can be adopted only by classes, and not by structures or enumerations. If you mark your protocol as @objc in order to check for conformance, you will be able to apply that protocol only to class types.</p>

<p>
  Here are two classes, Circle and Country, both of which conform to the HasArea protocol:</p>

<p>class Circle: HasArea {</p>

<p> let pi = 3.1415927</p>

<p> var radius: Double</p>

<p> var area: Double { return pi * radius * radius }</p>

<p> init(radius: Double) { self.radius = radius }</p>

<p>}</p>

<p>class Country: HasArea {</p>

<p> var area: Double</p>

<p> init(area: Double) { self.area = area }</p>

<p>}</p>

<p>
  The Circle class implements the area property requirement as a computed property, based on a stored radius property. The Country class implements the area requirement directly as a stored property. Both classes correctly conform to the HasArea protocol.</p>

<p>
  Here’s a class called Animal, which does not conform to the HasArea protocol:</p>

<p>class Animal {</p>

<p> var legs: Int</p>

<p> init(legs: Int) { self.legs = legs }</p>

<p>}</p>

<p>
  The Circle, Country and Animal classes do not have a shared base class. Nonetheless, they are all classes, and so instances of all three types can be used to initialize an array that stores values of type AnyObject:</p>

<p>let objects: AnyObject[] = [</p>

<p> Circle(radius: 2.0),</p>

<p> Country(area: 243_610),</p>

<p> Animal(legs: 4)</p>

<p>]</p>

<p>
  The objects array is initialized with an array literal containing a Circle instance with a radius of 2 units; a Country instance initialized with the surface area of the United Kingdom in square kilometers; and an Animal instance with four legs.</p>

<p>
  The objects array can now be iterated, and each object in the array can be checked to see if it conforms to the HasArea protocol:</p>

<p>for object in objects {</p>

<p> if let objectWithArea = object as? HasArea {</p>

<p> println("Area is \(objectWithArea.area)")</p>

<p>    } else {</p>

<p> println("Something that doesn't have an area")</p>

<p>    }</p>

<p>}</p>

<p>// Area is 12.5663708</p>

<p>// Area is 243610.0</p>

<p>// Something that doesn't have an area</p>

<p>
  Whenever an object in the array conforms to the HasArea protocol, the optional value returned by the as? operator is unwrapped with optional binding into a constant called objectWithArea. The objectWithArea constant is known to be of type HasArea, and so its area property can be accessed and printed in a type-safe way.</p>

<p>
  Note that the underlying objects are not changed by the casting process. They continue to be a Circle, a Country and an Animal. However, at the point that they are stored in the objectWithArea constant, they are only known to be of type HasArea, and so only their area property can be accessed.




Optional Protocol Requirements</p>

<p>
  You can define <emphasis>optional requirements</emphasis> for protocols, These requirements do not have to be implemented by types that conform to the protocol. Optional requirements are prefixed by the @optional keyword as part of the protocol’s definition.</p>

<p>
  An optional protocol requirement can be called with optional chaining, to account for the possibility that the requirement was not implemented by a type that conforms to the protocol. For information on optional chaining, see Optional Chaining.</p>

<p>
  You check for an implementation of an optional requirement by writing a question mark after the name of the requirement when it is called, such as someOptionalMethod?(someArgument). Optional property requirements, and optional method requirements that return a value, will always return an optional value of the appropriate type when they are accessed or called, to reflect the fact that the optional requirement may not have been implemented.</p><empty-line /><p>Note</p>

<p>Optional protocol requirements can only be specified if your protocol is marked with the @objc attribute. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to specify optional requirements.</p>

<p>
  Note also that @objc protocols can be adopted only by classes, and not by structures or enumerations. If you mark your protocol as @objc in order to specify optional requirements, you will only be able to apply that protocol to class types.</p>

<p>
  The following example defines an integer-counting class called Counter, which uses an external data source to provide its increment amount. This data source is defined by the CounterDataSource protocol, which has two optional requirements:</p>

<p>@objc protocol CounterDataSource {</p>

<p> @optional func incrementForCount(count: Int) -&gt; Int</p>

<p> @optional var fixedIncrement: Int { get }</p>

<p>}</p>

<p>
  The CounterDataSource protocol defines an optional method requirement called incrementForCount and an optional property requirement called fixedIncrement. These requirements define two different ways for data sources to provide an appropriate increment amount for a Counter instance.</p><empty-line /><p>Note</p>

<p>Strictly speaking, you can write a custom class that conforms to CounterDataSource without implementing <emphasis>either</emphasis> protocol requirement. They are both optional, after all. Although technically allowed, this wouldn’t make for a very good data source.</p>

<p>
  The Counter class, defined below, has an optional dataSource property of type CounterDataSource?:</p>

<p>@objc class Counter {</p>

<p> var count = 0</p>

<p> var dataSource: CounterDataSource?</p>

<p> func increment() {</p>

<p> if let amount = dataSource?.incrementForCount?(count) {</p>

<p> count += amount</p>

<p>        } else if let amount = dataSource?.fixedIncrement? {</p>

<p> count += amount</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
  The Counter class stores its current value in a variable property called count. The Counter class also defines a method called increment, which increments the count property every time the method is called.</p>

<p>
  The increment method first tries to retrieve an increment amount by looking for an implementation of the incrementForCount method on its data source. The increment method uses optional chaining to try to call incrementForCount, and passes the current count value as the method’s single argument.</p>

<p>
  Note <emphasis>two</emphasis> levels of optional chaining at play here. Firstly, it is possible that dataSource may be nil, and so dataSource has a question mark after its name to indicate that incrementForCount should only be called if dataSource is non-nil. Secondly, even if dataSource <emphasis>does</emphasis> exist, there is no guarantee that it implements incrementForCount, because it is an optional requirement. This is why incrementForCount is also written with a question mark after its name.</p>

<p>
  Because the call to incrementForCount can fail for either of these two reasons, the call returns an <emphasis>optional</emphasis> Int value. This is true even though incrementForCount is defined as returning a non-optional Int value in the definition of CounterDataSource.</p>

<p>
  After calling incrementForCount, the optional Int that it returns is unwrapped into a constant called amount, using optional binding. If the optional Int does contain a value—that is, if the delegate and method both exist, and the method returned a value—the unwrapped amount is added onto the stored count property, and incrementation is complete.</p>

<p>
  If it is <emphasis>not</emphasis> possible to retrieve a value from the incrementForCount method—either because dataSource is nil, or because the data source does not implement incrementForCount—then the increment method tries to retrieve a value from the data source’s fixedIncrement property instead. The fixedIncrement property is also an optional requirement, and so its name is also written using optional chaining with a question mark on the end, to indicate that the attempt to access the property’s value can fail. As before, the returned value is an optional Int value, even though fixedIncrement is defined as a non-optional Int property as part of the CounterDataSource protocol definition.</p>

<p>
  Here’s a simple CounterDataSource implementation where the data source returns a constant value of 3 every time it is queried. It does this by implementing the optional fixedIncrement property requirement:</p>

<p>class ThreeSource: CounterDataSource {</p>

<p> let fixedIncrement = 3</p>

<p>}</p>

<p>
  You can use an instance of ThreeSource as the data source for a new Counter instance:</p>

<p>var counter = Counter()</p>

<p>counter.dataSource = ThreeSource()</p>

<p>for _ in 1...4 {</p>

<p> counter.increment()</p>

<p> println(counter.count)</p>

<p>}</p>

<p>// 3</p>

<p>// 6</p>

<p>// 9</p>

<p>// 12</p>

<p>
  The code above creates a new Counter instance; sets its data source to be a new ThreeSource instance; and calls the counter’s increment method four times. As expected, the counter’s count property increases by three each time increment is called.</p>

<p>
  Here’s a more complex data source called TowardsZeroSource, which makes a Counter instance count up or down towards zero from its current count value:</p>

<p>class TowardsZeroSource: CounterDataSource {</p>

<p> func incrementForCount(count: Int) -&gt; Int {</p>

<p> if count == 0 {</p>

<p> return 0</p>

<p>        } else if count &lt; 0 {</p>

<p> return 1</p>

<p>        } else {</p>

<p> return -1</p>

<p>        }</p>

<p>    }</p>

<p>}</p>

<p>
  The TowardsZeroSource class implements the optional incrementForCount method from the CounterDataSource protocol and uses the count argument value to work out which direction to count in. If count is already zero, the method returns 0 to indicate that no further counting should take place.</p>

<p>
  You can use an instance of TowardsZeroSource with the existing Counter instance to count from -4 to zero. Once the counter reaches zero, no more counting takes place:</p>

<p>counter.count = -4</p>

<p>counter.dataSource = TowardsZeroSource()</p>

<p>for _ in 1...5 {</p>

<p> counter.increment()</p>

<p> println(counter.count)</p>

<p>}</p>

<p>// -3</p>

<p>// -2</p>

<p>// -1</p>

<p>// 0</p>

<p>// 0</p>

<p>
Generics</p>

<p>On This Page</p>

<p>

            The Problem That Generics Solve</p>

<p>

            Generic Functions</p>

<p>

            Type Parameters</p>

<p>

            Naming Type Parameters</p>

<p>

            Generic Types</p>

<p>

            Type Constraints</p>

<p>

            Associated Types</p>

<p>

            Where Clauses</p>

<p>
<emphasis>Generic code</emphasis> enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.</p>

<p>
  Generics are one of the most powerful features of Swift, and much of the Swift standard library is built with generic code. In fact, you’ve been using generics throughout this Language Guide, even if you didn’t realize it. For example, Swift’s Array and Dictionary types are both generic collections. You can create an array that holds Int values, or an array that holds String values, or indeed an array for any other type that can be created in Swift. Similarly, you can create a dictionary to store values of any specified type, and there are no limitations on what that type can be.




The Problem That Generics Solve</p>

<p>
  Here’s a standard, non-generic function called swapTwoInts, which swaps two Int values:</p>

<p>func swapTwoInts(inout a: Int, inout b: Int) {</p>

<p> let temporaryA = a</p>

<p> a = b</p>

<p> b = temporaryA</p>

<p>}</p>

<p>
  This function makes use of in-out parameters to swap the values of a and b, as described in In-Out Parameters.</p>

<p>
  The swapTwoInts function swaps the original value of b into a, and the original value of a into b. You can call this function to swap the values in two Int variables:</p>

<p>var someInt = 3</p>

<p>var anotherInt = 107</p>

<p>swapTwoInts(&amp;someInt, &amp;anotherInt)</p>

<p>println("someInt is now \(someInt), and anotherInt is now \(anotherInt)")</p>

<p>// prints "someInt is now 107, and anotherInt is now 3"</p>

<p>
  The swapTwoInts function is useful, but it can only be used with Int values. If you want to swap two String values, or two Double values, you have to write more functions, such as the swapTwoStrings and swapTwoDoubles functions shown below:</p>

<p>func swapTwoStrings(inout a: String, inout b: String) {</p>

<p> let temporaryA = a</p>

<p> a = b</p>

<p> b = temporaryA</p>

<p>}</p>

<p>func swapTwoDoubles(inout a: Double, inout b: Double) {</p>

<p> let temporaryA = a</p>

<p> a = b</p>

<p> b = temporaryA</p>

<p>}</p>

<p>
  You may have noticed that the bodies of the swapTwoInts, swapTwoStrings, and swapTwoDoubles functions are identical. The only difference is the type of the values that they accept (Int, String, and Double).</p>

<p>
  It would be much more useful, and considerably more flexible, to write a single function that could swap two values of <emphasis>any</emphasis> type. This is the kind of problem that generic code can solve. (A generic version of these functions is defined below.)</p><empty-line /><p>Note</p>

<p>In all three functions, it is important that the types of a and b are defined to be the same as each other. If a and b were not of the same type, it would not be possible to swap their values. Swift is a type-safe language, and does not allow (for example) a variable of type String and a variable of type Double to swap values with each other. Attempting to do so would be reported as a compile-time error.
      





Generic Functions</p>

<p>
<emphasis>Generic functions</emphasis> can work with any type. Here’s a generic version of the swapTwoInts function from above, called swapTwoValues:</p>

<p>func swapTwoValues&lt;T&gt;(inout a: T, inout b: T) {</p>

<p> let temporaryA = a</p>

<p> a = b</p>

<p> b = temporaryA</p>

<p>}</p>

<p>
  The body of the swapTwoValues function is identical to the body of the swapTwoInts function. However, the first line of swapTwoValues is slightly different from swapTwoInts. Here’s how the first lines compare:</p>

<p>func swapTwoInts(inout a: Int, inout b: Int)</p>

<p>func swapTwoValues&lt;T&gt;(inout a: T, inout b: T)</p>

<p>
  The generic version of the function uses a <emphasis>placeholder</emphasis> type name (called T, in this case) instead of an <emphasis>actual</emphasis> type name (such as Int, String, or Double). The placeholder type name doesn’t say anything about what T must be, but it <emphasis>does</emphasis> say that both a and b must be of the same type T, whatever T represents. The actual type to use in place of T will be determined each time the swapTwoValues function is called.</p>

<p>
  The other difference is that the generic function’s name (swapTwoValues) is followed by the placeholder type name (T) inside angle brackets (&lt;T&gt;). The brackets tell Swift that T is a placeholder type name within the swapTwoValues function definition. Because T is a placeholder, Swift does not look for an actual type called T.</p>

<p>
  The swapTwoValues function can now be called in the same way as swapTwoInts, except that it can be passed two values of <emphasis>any</emphasis> type, as long as both of those values are of the same type as each other. Each time swapTwoValues is called, the type to use for T is inferred from the types of values passed to the function.</p>

<p>
  In the two examples below, T is inferred to be Int and String respectively:</p>

<p>var someInt = 3</p>

<p>var anotherInt = 107</p>

<p>swapTwoValues(&amp;someInt, &amp;anotherInt)</p>

<p>// someInt is now 107, and anotherInt is now 3</p>

<p>var someString = "hello"</p>

<p>var anotherString = "world"</p>

<p>swapTwoValues(&amp;someString, &amp;anotherString)</p>

<p>// someString is now "world", and anotherString is now "hello"</p><empty-line /><p>Note</p>

<p>The swapTwoValues function defined above is inspired by a generic function called swap, which is part of the Swift standard library, and is automatically made available for you to use in your apps. If you need the behavior of the swapTwoValues function in your own code, you can use Swift’s existing swap function rather than providing your own implementation.
      





Type Parameters</p>

<p>
  In the swapTwoValues example above, the placeholder type T is an example of a <emphasis>type parameter</emphasis>. Type parameters specify and name a placeholder type, and are written immediately after the function’s name, between a pair of matching angle brackets (such as &lt;T&gt;).</p>

<p>
  Once specified, a type parameter can be used to define the type of a function’s parameters (such as the a and b parameters of the swapTwoValues function); or as the function’s return type; or as a type annotation within the body of the function. In each case, the placeholder type represented by the type parameter is replaced with an <emphasis>actual</emphasis> type whenever the function is called. (In the swapTwoValues example above, T was replaced with Int the first time the function was called, and was replaced with String the second time it was called.)</p>

<p>
  You can provide more than one type parameter by writing multiple type parameter names within the angle brackets, separated by commas.




Naming Type Parameters</p>

<p>
  In simple cases where a generic function or generic type needs to refer to a single placeholder type (such as the swapTwoValues generic function above, or a generic collection that stores a single type, such as Array), it is traditional to use the single-character name T for the type parameter. However, you are can use any valid identifier as the type parameter name.</p>

<p>
  If you are defining more complex generic functions, or generic types with multiple parameters, it can be useful to provide more descriptive type parameter names. For example, Swift’s Dictionary type has two type parameters—one for its keys and one for its values. If you were writing Dictionary yourself, you might name these two type parameters KeyType and ValueType to remind you of their purpose as you use them within your generic code.</p><empty-line /><p>Note</p>

<p>Always give type parameters UpperCamelCase names (such as T and KeyType) to indicate that they are a placeholder for a <emphasis>type</emphasis>, not a value.
      





Generic Types</p>

<p>
  In addition to generic functions, Swift enables you to define your own <emphasis>generic types</emphasis>. These are custom classes, structures, and enumerations that can work with <emphasis>any</emphasis> type, in a similar way to Array and Dictionary.</p>

<p>
  This section shows you how to write a generic collection type called Stack. A stack is an ordered set of values, similar to an array, but with a more restricted set of operations than Swift’s Array type. An array allows new items to be inserted and removed at any location in the array. A stack, however, allows new items to be appended only to the end of the collection (known as <emphasis>pushing</emphasis> a new value on to the stack). Similarly, a stack allows items to be removed only from the end of the collection (known as <emphasis>popping</emphasis> a value off the stack).</p><empty-line /><p>Note</p>

<p>The concept of a stack is used by the UINavigationController class to model the view controllers in its navigation hierarchy. You call the UINavigationController class pushViewController:animated: method to add (or push) a view controller on to the navigation stack, and its popViewControllerAnimated: method to remove (or pop) a view controller from the navigation stack. A stack is a useful collection model whenever you need a strict “last in, first out” approach to managing a collection.</p>

<p>
  The illustration below shows the push / pop behavior for a stack:



<image xlink:href="#_30.jpg" /></p>

<p>
  There are currently three values on the stack.</p>

<p>
  A fourth value is “pushed” on to the top of the stack.</p>

<p>
  The stack now holds four values, with the most recent one at the top.</p>

<p>
  The top item in the stack is removed, or “popped”.</p>

<p>
  After popping a value, the stack once again holds three values.</p>

<p>
  Here’s how to write a non-generic version of a stack, in this case for a stack of Int values:</p>

<p>struct IntStack {</p>

<p> var items = Int[]()</p>

<p> mutating func push(item: Int) {</p>

<p> items.append(item)</p>

<p>    }</p>

<p> mutating func pop() -&gt; Int {</p>

<p> return items.removeLast()</p>

<p>    }</p>

<p>}</p>

<p>
  This structure uses an Array property called items to store the values in the stack. Stack provides two methods, push and pop, to push and pop values on and off the stack. These methods are marked as mutating, because they need to modify (or <emphasis>mutate</emphasis>) the structure’s items array.</p>

<p>
  The IntStack type shown above can only be used with Int values, however. It would be much more useful to define a <emphasis>generic</emphasis> Stack class, that can manage a stack of <emphasis>any</emphasis> type of value.</p>

<p>
  Here’s a generic version of the same code:</p>

<p>struct Stack&lt;T&gt; {</p>

<p> var items = T[]()</p>

<p> mutating func push(item: T) {</p>

<p> items.append(item)</p>

<p>    }</p>

<p> mutating func pop() -&gt; T {</p>

<p> return items.removeLast()</p>

<p>    }</p>

<p>}</p>

<p>
  Note how the generic version of Stack is essentially the same as the non-generic version, but with a placeholder type parameter called T instead of an actual type of Int. This type parameter is written within a pair of angle brackets (&lt;T&gt;) immediately after the structure’s name.</p>

<p>
T defines a placeholder name for “some type T” to be provided later on. This future type can be referred to as “T” anywhere within the structure’s definition. In this case, T is used as a placeholder in three places:</p>

<p>
  To create a property called items, which is initialized with an empty array of values of type T</p>

<p>
  To specify that the push method has a single parameter called item, which must be of type T</p>

<p>
  To specify that the value returned by the pop method will be a value of type T</p>

<p>
  You create instances of Stack in a similar way to Array and Dictionary, by writing the actual type to be used for this specific stack within angle brackets after the type name when creating a new instance with initializer syntax:</p>

<p>var stackOfStrings = Stack&lt;String&gt;()</p>

<p>stackOfStrings.push("uno")</p>

<p>stackOfStrings.push("dos")</p>

<p>stackOfStrings.push("tres")</p>

<p>stackOfStrings.push("cuatro")</p>

<p>// the stack now contains 4 strings</p>

<p>
  Here’s how stackOfStrings looks after pushing these four values on to the stack:



<image xlink:href="#_31.jpg" /></p>

<p>
  Popping a value from the stack returns and removes the top value, "cuatro":</p>

<p>let fromTheTop = stackOfStrings.pop()</p>

<p>// fromTheTop is equal to "cuatro", and the stack now contains 3 strings</p>

<p>
  Here’s how the stack looks after popping its top value:



<image xlink:href="#_32.jpg" /></p>

<p>
  Because it is a generic type, Stack can be used to create a stack of <emphasis>any</emphasis> valid type in Swift, in a similar manner to Array and Dictionary.




Type Constraints</p>

<p>
  The swapTwoValues function and the Stack type can work with any type. However, it is sometimes useful to enforce certain <emphasis>type constraints</emphasis> on the types that can be used with generic functions and generic types. Type constraints specify that a type parameter must inherit from a specific class, or conform to a particular protocol or protocol composition.</p>

<p>
  For example, Swift’s Dictionary type places a limitation on the types that can be used as keys for a dictionary. As described in Dictionaries, the type of a dictionary’s keys must be <emphasis>hashable</emphasis>. That is, it must provide a way to make itself uniquely representable. Dictionary needs its keys to be hashable so that it can check whether it already contains a value for a particular key. Without this requirement, Dictionary could not tell whether it should insert or replace a value for a particular key, nor would it be able to find a value for a given key that is already in the dictionary.</p>

<p>
  This requirement is enforced by a type constraint on the key type for Dictionary, which specifies that the key type must conform to the Hashable protocol, a special protocol defined in the Swift standard library. All of Swift’s basic types (such as String, Int, Double, and Bool) are hashable by default.</p>

<p>
  You can define your own type constraints when creating custom generic types, and these constraints provide much of the power of generic programming. Abstract concepts like Hashable characterize types in terms of their conceptual characteristics, rather than their explicit type.



Type Constraint Syntax</p>

<p>
  You write type constraints by placing a single class or protocol constraint after a type parameter’s name, separated by a colon, as part of the type parameter list. The basic syntax for type constraints on a generic function is shown below (although the syntax is the same for generic types):</p>

<p>func someFunction&lt;T: SomeClass, U: SomeProtocol&gt;(someT: T, someU: U) {</p>

<p> // function body goes here</p>

<p>}</p>

<p>
  The hypothetical function above has two type parameters. The first type parameter, T, has a type constraint that requires T to be a subclass of SomeClass. The second type parameter, U, has a type constraint that requires U to conform to the protocol SomeProtocol.




Type Constraints in Action</p>

<p>
  Here’s a non-generic function called findStringIndex, which is given a String value to find and an array of String values within which to find it. The findStringIndex function returns an optional Int value, which will be the index of the first matching string in the array if it is found, or nil if the string cannot be found:</p>

<p>func findStringIndex(array: String[], valueToFind: String) -&gt; Int? {</p>

<p> for (index, value) in enumerate(array) {</p>

<p> if value == valueToFind {</p>

<p> return index</p>

<p>        }</p>

<p>    }</p>

<p> return nil</p>

<p>}</p>

<p>
  The findStringIndex function can be used to find a string value in an array of strings:</p>

<p>let strings = ["cat", "dog", "llama", "parakeet", "terrapin"]</p>

<p>if let foundIndex = findStringIndex(strings, "llama") {</p>

<p> println("The index of llama is \(foundIndex)")</p>

<p>}</p>

<p>// prints "The index of llama is 2"</p>

<p>
  The principle of finding the index of a value in an array isn’t useful only for strings, however. You can write the same functionality as a generic function called findIndex, by replacing any mention of strings with values of some type T instead.</p>

<p>
  Here’s how you might expect a generic version of findStringIndex, called findIndex, to be written. Note that the return type of this function is still Int?, because the function returns an optional index number, not an optional value from the array. Be warned, though—this function does not compile, for reasons explained after the example:</p>

<p>func findIndex&lt;T&gt;(array: T[], valueToFind: T) -&gt; Int? {</p>

<p> for (index, value) in enumerate(array) {</p>

<p> if value == valueToFind {</p>

<p> return index</p>

<p>        }</p>

<p>    }</p>

<p> return nil</p>

<p>}</p>

<p>
  This function does not compile as written above. The problem lies with the equality check, “if value == valueToFind”. Not every type in Swift can be compared with the equal to operator (==). If you create your own class or structure to represent a complex data model, for example, then the meaning of “equal to” for that class or structure is not something that Swift can guess for you. Because of this, it is not possible to guarantee that this code will work for <emphasis>every</emphasis> possible type T, and an appropriate error is reported when you try to compile the code.</p>

<p>
  All is not lost, however. The Swift standard library defines a protocol called Equatable, which requires any conforming type to implement the equal to operator (==) and the not equal to operator (!=) to compare any two values of that type. All of Swift’s standard types automatically support the Equatable protocol.</p>

<p>
  Any type that is Equatable can be used safely with the findIndex function, because it is guaranteed to support the equal to operator. To express this fact, you write a type constraint of Equatable as part of the type parameter’s definition when you define the function:</p>

<p>func findIndex&lt;T: Equatable&gt;(array: T[], valueToFind: T) -&gt; Int? {</p>

<p> for (index, value) in enumerate(array) {</p>

<p> if value == valueToFind {</p>

<p> return index</p>

<p>        }</p>

<p>    }</p>

<p> return nil</p>

<p>}</p>

<p>
  The single type parameter for findIndex is written as T: Equatable, which means “any type T that conforms to the Equatable protocol.”</p>

<p>
  The findIndex function now compiles successfully and can be used with any type that is Equatable, such as Double or String:</p>

<p>let doubleIndex = findIndex([3.14159, 0.1, 0.25], 9.3)</p>

<p>// doubleIndex is an optional Int with no value, because 9.3 is not in the array</p>

<p>let stringIndex = findIndex(["Mike", "Malcolm", "Andrea"], "Andrea")</p>

<p>// stringIndex is an optional Int containing a value of 2







Associated Types</p>

<p>
  When defining a protocol, it is sometimes useful to declare one or more <emphasis>associated types</emphasis> as part of the protocol’s definition. An associated type gives a placeholder name (or <emphasis>alias</emphasis>) to a type that is used as part of the protocol. The actual type to use for that associated type is not specified until the protocol is adopted. Associated types are specified with the typealias keyword.



Associated Types in Action</p>

<p>
  Here’s an example of a protocol called Container, which declares an associated type called ItemType:</p>

<p>protocol Container {</p>

<p> typealias ItemType</p>

<p> mutating func append(item: ItemType)</p>

<p> var count: Int { get }</p>

<p> subscript(i: Int) -&gt; ItemType { get }</p>

<p>}</p>

<p>
  The Container protocol defines three required capabilities that any container must provide:</p>

<p>
  It must be possible to add a new item to the container with an append method.</p>

<p>
  It must be possible to access a count of the items in the container through a count property that returns an Int value.</p>

<p>
  It must be possible to retrieve each item in the container with a subscript that takes an Int index value.</p>

<p>
  This protocol doesn’t specify how the items in the container should be stored or what type they are allowed to be. The protocol only specifies the three bits of functionality that any type must provide in order to be considered a Container. A conforming type can provide additional functionality, as long as it satisfies these three requirements.</p>

<p>
  Any type that conforms to the Container protocol must be able to specify the type of values it stores. Specifically, it must ensure that only items of the right type are added to the container, and it must be clear about the type of the items returned by its subscript.</p>

<p>
  To define these requirements, the Container protocol needs a way to refer to the type of the elements that a container will hold, without knowing what that type is for a specific container. The Container protocol needs to specify that any value passed to the append method must have the same type as the container’s element type, and that the value returned by the container’s subscript will be of the same type as the container’s element type.</p>

<p>
  To achieve this, the Container protocol declares an associated type called ItemType, written as typealias ItemType. The protocol does not define what ItemType is an alias <emphasis>for</emphasis>—that information is left for any conforming type to provide. Nonetheless, the ItemType alias provides a way to refer to the type of the items in a Container, and to define a type for use with the append method and subscript, to ensure that the expected behavior of any Container is enforced.</p>

<p>
  Here’s a version of the non-generic IntStack type from earlier, adapted to conform to the Container protocol:</p>

<p>struct IntStack: Container {</p>

<p> // original IntStack implementation</p>

<p> var items = Int[]()</p>

<p> mutating func push(item: Int) {</p>

<p> items.append(item)</p>

<p>    }</p>

<p> mutating func pop() -&gt; Int {</p>

<p> return items.removeLast()</p>

<p>    }</p>

<p> // conformance to the Container protocol</p>

<p> typealias ItemType = Int</p>

<p> mutating func append(item: Int) {</p>

<p> self.push(item)</p>

<p>    }</p>

<p> var count: Int {</p>

<p> return items.count</p>

<p>    }</p>

<p> subscript(i: Int) -&gt; Int {</p>

<p> return items[i]</p>

<p>    }</p>

<p>}</p>

<p>
  The IntStack type implements all three of the Container protocol’s requirements, and in each case wraps part of the IntStack type’s existing functionality to satisfy these requirements.</p>

<p>
  Moreover, IntStack specifies that for this implementation of Container, the appropriate ItemType to use is a type of Int. The definition of typealias ItemType = Int turns the abstract type of ItemType into a concrete type of Int for this implementation of the Container protocol.</p>

<p>
  Thanks to Swift’s type inference, you don’t actually need to declare a concrete ItemType of Int as part of the definition of IntStack. Because IntStack conforms to all of the requirements of the Container protocol, Swift can infer the appropriate ItemType to use, simply by looking at the type of the append method’s item parameter and the return type of the subscript. Indeed, if you delete the typealias ItemType = Int line from the code above, everything still works, because it is clear what type should be used for ItemType.</p>

<p>
  You can also make the generic Stack type conform to the Container protocol:</p>

<p>struct Stack&lt;T&gt;: Container {</p>

<p> // original Stack&lt;T&gt; implementation</p>

<p> var items = T[]()</p>

<p> mutating func push(item: T) {</p>

<p> items.append(item)</p>

<p>    }</p>

<p> mutating func pop() -&gt; T {</p>

<p> return items.removeLast()</p>

<p>    }</p>

<p> // conformance to the Container protocol</p>

<p> mutating func append(item: T) {</p>

<p> self.push(item)</p>

<p>    }</p>

<p> var count: Int {</p>

<p> return items.count</p>

<p>    }</p>

<p> subscript(i: Int) -&gt; T {</p>

<p> return items[i]</p>

<p>    }</p>

<p>}</p>

<p>
  This time, the placeholder type parameter T is used as the type of the append method’s item parameter and the return type of the subscript. Swift can therefore infer that T is the appropriate type to use as the ItemType for this particular container.




Extending an Existing Type to Specify an Associated Type</p>

<p>
  You can extend an existing type to add conformance to a protocol, as described in Adding Protocol Conformance with an Extension. This includes a protocol with an associated type.</p>

<p>
  Swift’s Array type already provides an append method, a count property, and a subscript with an Int index to retrieve its elements. These three capabilities match the requirements of the Container protocol. This means that you can extend Array to conform to the Container protocol simply by declaring that Array adopts the protocol. You do this with an empty extension, as described in Declaring Protocol Adoption with an Extension:</p>

<p>extension Array: Container {}</p>

<p>
  Array’s existing append method and subscript enable Swift to infer the appropriate type to use for ItemType, just as for the generic Stack type above. After defining this extension, you can use any Array as a Container.





Where Clauses</p>

<p>
  Type constraints, as described in Type Constraints, enable you to define requirements on the type parameters associated with a generic function or type.</p>

<p>
  It can also be useful to define requirements for associated types. You do this by defining <emphasis>where clauses</emphasis> as part of a type parameter list. A where clause enables you to require that an associated type conforms to a certain protocol, and/or that certain type parameters and associated types be the same. You write a where clause by placing the where keyword immediately after the list of type parameters, followed by one or more constraints for associated types, and/or one or more equality relationships between types and associated types.</p>

<p>
  The example below defines a generic function called allItemsMatch, which checks to see if two Container instances contain the same items in the same order. The function returns a Boolean value of true if all items match and a value of false if they do not.</p>

<p>
  The two containers to be checked do not have to be the same type of container (although they can be), but they do have to hold the same type of items. This requirement is expressed through a combination of type constraints and where clauses:</p>

<p>func allItemsMatch&lt;</p>

<p> C1: Container, C2: Container</p>

<p> where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;</p>

<p>    (someContainer: C1, anotherContainer: C2) -&gt; Bool {</p>

<p> // check that both containers contain the same number of items</p>

<p> if someContainer.count != anotherContainer.count {</p>

<p> return false</p>

<p>        }</p>

<p> // check each pair of items to see if they are equivalent</p>

<p> for i in 0..someContainer.count {</p>

<p> if someContainer[i] != anotherContainer[i] {</p>

<p> return false</p>

<p>            }</p>

<p>        }</p>

<p> // all items match, so return true</p>

<p> return true</p>

<p>}</p>

<p>
  This function takes two arguments called someContainer and anotherContainer. The someContainer argument is of type C1, and the anotherContainer argument is of type C2. Both C1 and C2 are placeholder type parameters for two container types to be determined when the function is called.</p>

<p>
  The function’s type parameter list places the following requirements on the two type parameters:</p>

<p>
C1 must conform to the Container protocol (written as C1: Container).</p>

<p>
C2 must also conform to the Container protocol (written as C2: Container).</p>

<p>
  The ItemType for C1 must be the same as the ItemType for C2 (written as C1.ItemType == C2.ItemType).</p>

<p>
  The ItemType for C1 must conform to the Equatable protocol (written as C1.ItemType: Equatable).</p>

<p>
  The third and fourth requirements are defined as part of a where clause, and are written after the where keyword as part of the function’s type parameter list.</p>

<p>
  These requirements mean:</p>

<p>
someContainer is a container of type C1.</p>

<p>
anotherContainer is a container of type C2.</p>

<p>
someContainer and anotherContainer contain the same type of items.</p>

<p>
  The items in someContainer can be checked with the not equal operator (!=) to see if they are different from each other.</p>

<p>
  The third and fourth requirements combine to mean that the items in anotherContainer can <emphasis>also</emphasis> be checked with the != operator, because they are exactly the same type as the items in someContainer.</p>

<p>
  These requirements enable the allItemsMatch function to compare the two containers, even if they are of a different container type.</p>

<p>
  The allItemsMatch function starts by checking that both containers contain the same number of items. If they contain a different number of items, there is no way that they can match, and the function returns false.</p>

<p>
  After making this check, the function iterates over all of the items in someContainer with a for-in loop and the half-closed range operator (..). For each item, the function checks whether the item from someContainer is not equal to the corresponding item in anotherContainer. If the two items are not equal, then the two containers do not match, and the function returns false.</p>

<p>
  If the loop finishes without finding a mismatch, the two containers match, and the function returns true.</p>

<p>
  Here’s how the allItemsMatch function looks in action:</p>

<p>var stackOfStrings = Stack&lt;String&gt;()</p>

<p>stackOfStrings.push("uno")</p>

<p>stackOfStrings.push("dos")</p>

<p>stackOfStrings.push("tres")</p>

<p>var arrayOfStrings = ["uno", "dos", "tres"]</p>

<p>if allItemsMatch(stackOfStrings, arrayOfStrings) {</p>

<p> println("All items match.")</p>

<p>} else {</p>

<p> println("Not all items match.")</p>

<p>}</p>

<p>// prints "All items match."</p>

<p>
  The example above creates a Stack instance to store String values, and pushes three strings onto the stack. The example also creates an Array instance initialized with an array literal containing the same three strings as the stack. Even though the stack and the array are of a different type, they both conform to the Container protocol, and both contain the same type of values. You can therefore call the allItemsMatch function with these two containers as its arguments. In the example above, the allItemsMatch function correctly reports that all of the items in the two containers match.</p>

<p>
Advanced Operators</p>

<p>On This Page</p>

<p>

            Bitwise Operators</p>

<p>

            Overflow Operators</p>

<p>

            Precedence and Associativity</p>

<p>

            Operator Functions</p>

<p>

            Custom Operators</p>

<p>
  In addition to the operators described in Basic Operators, Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C.</p>

<p>
  Unlike arithmetic operators in C, arithmetic operators in Swift do not overflow by default. Overflow behavior is trapped and reported as an error. To opt in to overflow behavior, use Swift’s second set of arithmetic operators that overflow by default, such as the overflow addition operator (&amp;+). All of these overflow operators begin with an ampersand (&amp;).</p>

<p>
  When you define your own structures, classes, and enumerations, it can be useful to provide your own implementations of the standard Swift operators for these custom types. Swift makes it easy to provide tailored implementations of these operators and to determine exactly what their behavior should be for each type you create.</p>

<p>
  You’re not just limited to the predefined operators. Swift gives you the freedom to define your own custom infix, prefix, postfix, and assignment operators, with custom precedence and associativity values. These operators can be used and adopted in your code just like any of the predefined operators, and you can even extend existing types to support the custom operators you define.




Bitwise Operators</p>

<p>
<emphasis>Bitwise operators</emphasis> enable you to manipulate the individual raw data bits within a data structure. They are often used in low-level programming, such as graphics programming and device driver creation. Bitwise operators can also be useful when you work with raw data from external sources, such as encoding and decoding data for communication over a custom protocol.</p>

<p>
  Swift supports all of the bitwise operators found in C, as described below.



Bitwise NOT Operator</p>

<p>
  The <emphasis>bitwise NOT operator</emphasis> (~) inverts all bits in a number:



<image xlink:href="#_33.jpg" /></p>

<p>
  The bitwise NOT operator is a prefix operator, and appears immediately before the value it operates on, without any white space:</p>

<p>let initialBits: UInt8 = 0b00001111</p>

<p>let invertedBits = ~initialBits // equals 11110000</p>

<p>
UInt8 integers have eight bits and can store any value between 0 and 255. This example initializes a UInt8 integer with the binary value 00001111, which has its first four bits set to 0, and its second four bits set to 1. This is equivalent to a decimal value of 15.</p>

<p>
  The bitwise NOT operator is then used to create a new constant called invertedBits, which is equal to initialBits, but with all of the bits inverted. Zeroes become ones, and ones become zeroes. The value of invertedBits is 11110000, which is equal to an unsigned decimal value of 240.




Bitwise AND Operator</p>

<p>
  The <emphasis>bitwise AND operator</emphasis> (&amp;) combines the bits of two numbers. It returns a new number whose bits are set to 1 only if the bits were equal to 1 in <emphasis>both</emphasis> input numbers:



<image xlink:href="#_34.jpg" /></p>

<p>
  In the example below, the values of firstSixBits and lastSixBits both have four middle bits equal to 1. The bitwise AND operator combines them to make the number 00111100, which is equal to an unsigned decimal value of 60:</p>

<p>let firstSixBits: UInt8 = 0b11111100</p>

<p>let lastSixBits: UInt8  = 0b00111111</p>

<p>let middleFourBits = firstSixBits &amp; lastSixBits // equals 00111100






Bitwise OR Operator</p>

<p>
  The <emphasis>bitwise OR operator</emphasis> (|) compares the bits of two numbers. The operator returns a new number whose bits are set to 1 if the bits are equal to 1 in <emphasis>either</emphasis> input number:



<image xlink:href="#_35.jpg" /></p>

<p>
  In the example below, the values of someBits and moreBits have different bits set to 1. The bitwise OR operator combines them to make the number 11111110, which equals an unsigned decimal of 254:</p>

<p>let someBits: UInt8 = 0b10110010</p>

<p>let moreBits: UInt8 = 0b01011110</p>

<p>let combinedbits = someBits | moreBits // equals 11111110






Bitwise XOR Operator</p>

<p>
  The <emphasis>bitwise XOR operator</emphasis>, or “exclusive OR operator” (^), compares the bits of two numbers. The operator returns a new number whose bits are set to 1 where the input bits are different and are set to 0 where the input bits are the same:



<image xlink:href="#_36.jpg" /></p>

<p>
  In the example below, the values of firstBits and otherBits each have a bit set to 1 in a location that the other does not. The bitwise XOR operator sets both of these bits to 1 in its output value. All of the other bits in firstBits and otherBits match and are set to 0 in the output value:</p>

<p>let firstBits: UInt8 = 0b00010100</p>

<p>let otherBits: UInt8 = 0b00000101</p>

<p>let outputBits = firstBits ^ otherBits // equals 00010001






Bitwise Left and Right Shift Operators</p>

<p>
  The <emphasis>bitwise left shift operator</emphasis> (&lt;&lt;) and <emphasis>bitwise right shift operator</emphasis> (&gt;&gt;) move all bits in a number to the left or the right by a certain number of places, according to the rules defined below.</p>

<p>
  Bitwise left and right shifts have the effect of multiplying or dividing an integer number by a factor of two. Shifting an integer’s bits to the left by one position doubles its value, whereas shifting it to the right by one position halves its value.



Shifting Behavior for Unsigned Integers</p>

<p>
  The bit-shifting behavior for unsigned integers is as follows:</p>

<p>
  Existing bits are moved to the left or right by the requested number of places.</p>

<p>
  Any bits that are moved beyond the bounds of the integer’s storage are discarded.</p>

<p>
  Zeroes are inserted in the spaces left behind after the original bits are moved to the left or right.</p>

<p>
  This approach is known as a <emphasis>logical shift</emphasis>.</p>

<p>
  The illustration below shows the results of 11111111 &lt;&lt; 1 (which is 11111111 shifted to the left by 1 place), and 11111111 &gt;&gt; 1 (which is 11111111 shifted to the right by 1 place). Blue numbers are shifted, gray numbers are discarded, and orange zeroes are inserted:



<image xlink:href="#_37.jpg" /></p>

<p>
  Here’s how bit shifting looks in Swift code:</p>

<p>let shiftBits: UInt8 = 4 // 00000100 in binary</p>

<p>shiftBits &lt;&lt; 1 // 00001000</p>

<p>shiftBits &lt;&lt; 2 // 00010000</p>

<p>shiftBits &lt;&lt; 5 // 10000000</p>

<p>shiftBits &lt;&lt; 6 // 00000000</p>

<p>shiftBits &gt;&gt; 2 // 00000001</p>

<p>
  You can use bit shifting to encode and decode values within other data types:</p>

<p>let pink: UInt32 = 0xCC6699</p>

<p>let redComponent = (pink &amp; 0xFF0000) &gt;&gt; 16 // redComponent is 0xCC, or 204</p>

<p>let greenComponent = (pink &amp; 0x00FF00) &gt;&gt; 8 // greenComponent is 0x66, or 102</p>

<p>let blueComponent = pink &amp; 0x0000FF // blueComponent is 0x99, or 153</p>

<p>
  This example uses a UInt32 constant called pink to store a Cascading Style Sheets color value for the color pink. The CSS color value #CC6699 is written as 0xCC6699 in Swift’s hexadecimal number representation. This color is then decomposed into its red (CC), green (66), and blue (99) components by the bitwise AND operator (&amp;) and the bitwise right shift operator (&gt;&gt;).</p>

<p>
  The red component is obtained by performing a bitwise AND between the numbers 0xCC6699 and 0xFF0000. The zeroes in 0xFF0000 effectively “mask” the second and third bytes of 0xCC6699, causing the 6699 to be ignored and leaving 0xCC0000 as the result.</p>

<p>
  This number is then shifted 16 places to the right (&gt;&gt; 16). Each pair of characters in a hexadecimal number uses 8 bits, so a move 16 places to the right will convert 0xCC0000 into 0x0000CC. This is the same as 0xCC, which has a decimal value of 204.</p>

<p>
  Similarly, the green component is obtained by performing a bitwise AND between the numbers 0xCC6699 and 0x00FF00, which gives an output value of 0x006600. This output value is then shifted eight places to the right, giving a a value of 0x66, which has a decimal value of 102.</p>

<p>
  Finally, the blue component is obtained by performing a bitwise AND between the numbers 0xCC6699 and 0x0000FF, which gives an output value of 0x000099. There’s no need to shift this to the right, as 0x000099 already equals 0x99, which has a decimal value of 153.




Shifting Behavior for Signed Integers</p>

<p>
  The shifting behavior is more complex for signed integers than for unsigned integers, because of the way signed integers are represented in binary. (The examples below are based on 8-bit signed integers for simplicity, but the same principles apply for signed integers of any size.)</p>

<p>
  Signed integers use their first bit (known as the <emphasis>sign bit</emphasis>) to indicate whether the integer is positive or negative. A sign bit of 0 means positive, and a sign bit of 1 means negative.</p>

<p>
  The remaining bits (known as the <emphasis>value bits</emphasis>) store the actual value. Positive numbers are stored in exactly the same way as for unsigned integers, counting upwards from 0. Here’s how the bits inside an Int8 look for the number 4:



<image xlink:href="#_38.jpg" /></p>

<p>
  The sign bit is 0 (meaning “positive”), and the seven value bits are just the number 4, written in binary notation.</p>

<p>
  Negative numbers, however, are stored differently. They are stored by subtracting their absolute value from 2 to the power of n, where n is the number of value bits. An eight-bit number has seven value bits, so this means 2 to the power of 7, or 128.</p>

<p>
  Here’s how the bits inside an Int8 look for the number -4:



<image xlink:href="#_39.jpg" /></p>

<p>
  This time, the sign bit is 1 (meaning “negative”), and the seven value bits have a binary value of 124 (which is 128 - 4):



<image xlink:href="#_40.jpg" /></p>

<p>
  The encoding for negative numbers is known as a <emphasis>two’s complement</emphasis> representation. It may seem an unusual way to represent negative numbers, but it has several advantages.</p>

<p>
  First, you can add -1 to -4, simply by performing a standard binary addition of all eight bits (including the sign bit), and discarding anything that doesn’t fit in the eight bits once you’re done:



<image xlink:href="#_41.jpg" /></p>

<p>
  Second, the two’s complement representation also lets you shift the bits of negative numbers to the left and right like positive numbers, and still end up doubling them for every shift you make to the left, or halving them for every shift you make to the right. To achieve this, an extra rule is used when signed integers are shifted to the right:</p>

<p>
  When you shift signed integers to the right, apply the same rules as for unsigned integers, but fill any empty bits on the left with the <emphasis>sign bit</emphasis>, rather than with a zero.





<image xlink:href="#_42.jpg" /></p>

<p>
  This action ensures that signed integers have the same sign after they are shifted to the right, and is known as an <emphasis>arithmetic shift</emphasis>.</p>

<p>
  Because of the special way that positive and negative numbers are stored, shifting either of them to the right moves them closer to zero. Keeping the sign bit the same during this shift means that negative integers remain negative as their value moves closer to zero.






Overflow Operators</p>

<p>
  If you try to insert a number into an integer constant or variable that cannot hold that value, by default Swift reports an error rather than allowing an invalid value to be created. This behavior gives extra safety when you work with numbers that are too large or too small.</p>

<p>
  For example, the Int16 integer type can hold any signed integer number between -32768 and 32767. Trying to set a UInt16 constant or variable to a number outside of this range causes an error:</p>

<p>var potentialOverflow = Int16.max</p>

<p>// potentialOverflow equals 32767, which is the largest value an Int16 can hold</p>

<p>potentialOverflow += 1</p>

<p>// this causes an error</p>

<p>
  Providing error handling when values get too large or too small gives you much more flexibility when coding for boundary value conditions.</p>

<p>
  However, when you specifically want an overflow condition to truncate the number of available bits, you can opt in to this behavior rather than triggering an error. Swift provides five arithmetic <emphasis>overflow operators</emphasis> that opt in to the overflow behavior for integer calculations. These operators all begin with an ampersand (&amp;):</p>

<p>
  Overflow addition (&amp;+)</p>

<p>
  Overflow subtraction (&amp;-)</p>

<p>
  Overflow multiplication (&amp;*)</p>

<p>
  Overflow division (&amp;/)</p>

<p>
  Overflow remainder (&amp;%)





Value Overflow</p>

<p>
  Here’s an example of what happens when an unsigned value is allowed to overflow, using the overflow addition operator (&amp;+):</p>

<p>var willOverflow = UInt8.max</p>

<p>// willOverflow equals 255, which is the largest value a UInt8 can hold</p>

<p>willOverflow = willOverflow &amp;+ 1</p>

<p>// willOverflow is now equal to 0</p>

<p>
  The variable willOverflow is initialized with the largest value a UInt8 can hold (255, or 11111111 in binary). It is then incremented by 1 using the overflow addition operator (&amp;+). This pushes its binary representation just over the size that a UInt8 can hold, causing it to overflow beyond its bounds, as shown in the diagram below. The value that remains within the bounds of the UInt8 after the overflow addition is 00000000, or zero:



<image xlink:href="#_43.jpg" />




Value Underflow</p>

<p>
  Numbers can also become too small to fit in their type’s maximum bounds. Here’s an example.</p>

<p>
  The <emphasis>smallest</emphasis> value that a UInt8 can hold is 0 (which is 00000000 in eight-bit binary form). If you subtract 1 from 00000000 using the overflow subtraction operator, the number will overflow back round to 11111111, or 255 in decimal:



<image xlink:href="#_44.jpg" /></p>

<p>
  Here’s how that looks in Swift code:</p>

<p>var willUnderflow = UInt8.min</p>

<p>// willUnderflow equals 0, which is the smallest value a UInt8 can hold</p>

<p>willUnderflow = willUnderflow &amp;- 1</p>

<p>// willUnderflow is now equal to 255</p>

<p>
  A similar underflow occurs for signed integers. All subtraction for signed integers is performed as straight binary subtraction, with the sign bit included as part of the numbers being subtracted, as described in Bitwise Left and Right Shift Operators. The smallest number that an Int8 can hold is -128, which is 10000000 in binary. Subtracting 1 from this binary number with the overflow operator gives a binary value of 01111111, which toggles the sign bit and gives positive 127, the largest positive value that an Int8 can hold:



<image xlink:href="#_45.jpg" /></p>

<p>
  Here’s the same thing in Swift code:</p>

<p>var signedUnderflow = Int8.min</p>

<p>// signedUnderflow equals -128, which is the smallest value an Int8 can hold</p>

<p>signedUnderflow = signedUnderflow &amp;- 1</p>

<p>// signedUnderflow is now equal to 127</p>

<p>
  The end result of the overflow and underflow behavior described above is that for both signed and unsigned integers, overflow always wraps around from the largest valid integer value back to the smallest, and underflow always wraps around from the smallest value to the largest.




Division by Zero</p>

<p>
  Dividing a number by zero (i / 0), or trying to calculate remainder by zero (i % 0), causes an error:</p>

<p>let x = 1</p>

<p>let y = x / 0</p>

<p>
  However, the overflow versions of these operators (&amp;/ and &amp;%) return a value of zero if you divide by zero:</p>

<p>let x = 1</p>

<p>let y = x &amp;/ 0</p>

<p>// y is equal to 0







Precedence and Associativity</p>

<p>
  Operator <emphasis>precedence</emphasis> gives some operators higher priority than others; these operators are calculated first.</p>

<p>
  Operator <emphasis>associativity</emphasis> defines how operators of the same precedence are grouped together (or <emphasis>associated</emphasis>)—either grouped from the left, or grouped from the right. Think of it as meaning “they associate with the expression to their left,” or “they associate with the expression to their right.”</p>

<p>
  It is important to consider each operator’s precedence and associativity when working out the order in which a compound expression will be calculated. Here’s an example. Why does the following expression equal 4?</p>

<p>2 + 3 * 4 % 5</p>

<p>// this equals 4</p>

<p>
  Taken strictly from left to right, you might expect this to read as follows:</p>

<p>
  2 plus 3 equals 5;</p>

<p>
  5 times 4 equals 20;</p>

<p>
  20 remainder 5 equals 0</p>

<p>
  However, the actual answer is 4, not 0. Higher-precedence operators are evaluated before lower-precedence ones. In Swift, as in C, the multiplication operator (*) and the remainder operator (%) have a higher precedence than the addition operator (+). As a result, they are both evaluated before the addition is considered.</p>

<p>
  However, multiplication and remainder have the <emphasis>same</emphasis> precedence as each other. To work out the exact evaluation order to use, you also need to consider their associativity. Multiplication and remainder both associate with the expression to their left. Think of this as adding implicit parentheses around these parts of the expression, starting from their left:</p>

<p>2 + ((3 * 4) % 5)</p>

<p>
(3 * 4) is 12, so this is equivalent to:</p>

<p>2 + (12 % 5)</p>

<p>
(12 % 5) is 2, so this is equivalent to:</p>

<p>2 + 2</p>

<p>
  This calculation yields the final answer of 4.</p>

<p>
  For a complete list of Swift operator precedences and associativity rules, see Expressions.</p><empty-line /><p>Note</p>

<p>Swift’s operator precedences and associativity rules are simpler and more predictable than those found in C and Objective-C. However, this means that they are not the same as in C-based languages. Be careful to ensure that operator interactions still behave in the way you intend when porting existing code to Swift.
      





Operator Functions</p>

<p>
  Classes and structures can provide their own implementations of existing operators. This is known as <emphasis>overloading</emphasis> the existing operators.</p>

<p>
  The example below shows how to implement the arithmetic addition operator (+) for a custom structure. The arithmetic addition operator is a <emphasis>binary operator</emphasis> because it operates on two targets and is said to be <emphasis>infix</emphasis> because it appears in between those two targets.</p>

<p>
  The example defines a Vector2D structure for a two-dimensional position vector (x, y), followed by a definition of an <emphasis>operator function</emphasis> to add together instances of the Vector2D structure:</p>

<p>struct Vector2D {</p>

<p> var x = 0.0, y = 0.0</p>

<p>}</p>

<p>@infix func + (left: Vector2D, right: Vector2D) -&gt; Vector2D {</p>

<p> return Vector2D(x: left.x + right.x, y: left.y + right.y)</p>

<p>}</p>

<p>
  The operator function is defined as a global function called +, which takes two input parameters of type Vector2D and returns a single output value, also of type Vector2D. You implement an infix operator by writing the @infix attribute before the func keyword when declaring the operator function.</p>

<p>
  In this implementation, the input parameters are named left and right to represent the Vector2D instances that will be on the left side and right side of the + operator. The function returns a new Vector2D instance, whose x and y properties are initialized with the sum of the x and y properties from the two Vector2D instances that are added together.</p>

<p>
  The function is defined globally, rather than as a method on the Vector2D structure, so that it can be used as an infix operator between existing Vector2D instances:</p>

<p>let vector = Vector2D(x: 3.0, y: 1.0)</p>

<p>let anotherVector = Vector2D(x: 2.0, y: 4.0)</p>

<p>let combinedVector = vector + anotherVector</p>

<p>// combinedVector is a Vector2D instance with values of (5.0, 5.0)</p>

<p>
  This example adds together the vectors (3.0, 1.0) and (2.0, 4.0) to make the vector (5.0, 5.0), as illustrated below.



<image xlink:href="#_46.jpg" />



Prefix and Postfix Operators</p>

<p>
  The example shown above demonstrates a custom implementation of a binary infix operator. Classes and structures can also provide implementations of the standard <emphasis>unary operators</emphasis>. Unary operators operate on a single target. They are <emphasis>prefix</emphasis> if they precede their target (such as -a) and <emphasis>postfix</emphasis> operators if they follow their target (such as i++).</p>

<p>
  You implement a prefix or postfix unary operator by writing the @prefix or @postfix attribute before the func keyword when declaring the operator function:</p>

<p>@prefix func - (vector: Vector2D) -&gt; Vector2D {</p>

<p> return Vector2D(x: -vector.x, y: -vector.y)</p>

<p>}</p>

<p>
  The example above implements the unary minus operator (-a) for Vector2D instances. The unary minus operator is a prefix operator, and so this function has to be qualified with the @prefix attribute.</p>

<p>
  For simple numeric values, the unary minus operator converts positive numbers into their negative equivalent and vice versa. The corresponding implementation for Vector2D instances performs this operation on both the x and y properties:</p>

<p>let positive = Vector2D(x: 3.0, y: 4.0)</p>

<p>let negative = -positive</p>

<p>// negative is a Vector2D instance with values of (-3.0, -4.0)</p>

<p>let alsoPositive = -negative</p>

<p>// alsoPositive is a Vector2D instance with values of (3.0, 4.0)






Compound Assignment Operators</p>

<p>
<emphasis>Compound assignment operators</emphasis> combine assignment (=) with another operation. For example, the addition assignment operator (+=) combines addition and assignment into a single operation. Operator functions that implement compound assignment must be qualified with the @assignment attribute. You must also mark a compound assignment operator’s left input parameter as inout, because the parameter’s value will be modified directly from within the operator function.</p>

<p>
  The example below implements an addition assignment operator function for Vector2D instances:</p>

<p>@assignment func += (inout left: Vector2D, right: Vector2D) {</p>

<p> left = left + right</p>

<p>}</p>

<p>
  Because an addition operator was defined earlier, you don’t need to reimplement the addition process here. Instead, the addition assignment operator function takes advantage of the existing addition operator function, and uses it to set the left value to be the left value plus the right value:</p>

<p>var original = Vector2D(x: 1.0, y: 2.0)</p>

<p>let vectorToAdd = Vector2D(x: 3.0, y: 4.0)</p>

<p>original += vectorToAdd</p>

<p>// original now has values of (4.0, 6.0)</p>

<p>
  You can combine the @assignment attribute with either the @prefix or @postfix attribute, as in this implementation of the prefix increment operator (++a) for Vector2D instances:</p>

<p>@prefix @assignment func ++ (inout vector: Vector2D) -&gt; Vector2D {</p>

<p> vector += Vector2D(x: 1.0, y: 1.0)</p>

<p> return vector</p>

<p>}</p>

<p>
  The prefix increment operator function above takes advantage of the addition assignment operator defined earlier. It adds a Vector2D with x and y values of 1.0 to the Vector2D on which it is called, and returns the result:</p>

<p>var toIncrement = Vector2D(x: 3.0, y: 4.0)</p>

<p>let afterIncrement = ++toIncrement</p>

<p>// toIncrement now has values of (4.0, 5.0)</p>

<p>// afterIncrement also has values of (4.0, 5.0)</p><empty-line /><p>Note</p>

<p>It is not possible to overload the default assignment operator (=). Only the compound assignment operators can be overloaded. Similarly, the ternary conditional operator (a ? b : c) cannot be overloaded.
      





Equivalence Operators</p>

<p>
  Custom classes and structures do not receive a default implementation of the <emphasis>equivalence operators</emphasis>, known as the “equal to” operator (==) and “not equal to” operator (!=). It is not possible for Swift to guess what would qualify as “equal” for your own custom types, because the meaning of “equal” depends on the roles that those types play in your code.</p>

<p>
  To use the equivalence operators to check for equivalence of your own custom type, provide an implementation of the operators in the same way as for other infix operators:</p>

<p>@infix func == (left: Vector2D, right: Vector2D) -&gt; Bool {</p>

<p> return (left.x == right.x) &amp;&amp; (left.y == right.y)</p>

<p>}</p>

<p>@infix func != (left: Vector2D, right: Vector2D) -&gt; Bool {</p>

<p> return !(left == right)</p>

<p>}</p>

<p>
  The above example implements an “equal to” operator (==) to check if two Vector2D instances have equivalent values. In the context of Vector2D, it makes sense to consider “equal” as meaning “both instances have the same x values and y values”, and so this is the logic used by the operator implementation. The example also implements the “not equal to” operator (!=), which simply returns the inverse of the result of the “equal to” operator.</p>

<p>
  You can now use these operators to check whether two Vector2D instances are equivalent:</p>

<p>let twoThree = Vector2D(x: 2.0, y: 3.0)</p>

<p>let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)</p>

<p>if twoThree == anotherTwoThree {</p>

<p> println("These two vectors are equivalent.")</p>

<p>}</p>

<p>// prints "These two vectors are equivalent."







Custom Operators</p>

<p>
  You can declare and implement your own <emphasis>custom operators</emphasis> in addition to the standard operators provided by Swift. Custom operators can be defined only with the characters / = - + * % &lt; &gt; ! &amp; | ^ . ~.</p>

<p>
  New operators are declared at a global level using the operator keyword, and can be declared as prefix, infix or postfix:</p>

<p>operator prefix +++ {}</p>

<p>
  The example above defines a new prefix operator called +++. This operator does not have an existing meaning in Swift, and so it is given its own custom meaning below in the specific context of working with Vector2D instances. For the purposes of this example, +++ is treated as a new “prefix doubling incrementer” operator. It doubles the x and y values of a Vector2D instance, by adding the vector to itself with the addition assignment operator defined earlier:</p>

<p>@prefix @assignment func +++ (inout vector: Vector2D) -&gt; Vector2D {</p>

<p> vector += vector</p>

<p> return vector</p>

<p>}</p>

<p>
  This implementation of +++ is very similar to the implementation of ++ for Vector2D, except that this operator function adds the vector to itself, rather than adding Vector2D(1.0, 1.0):</p>

<p>var toBeDoubled = Vector2D(x: 1.0, y: 4.0)</p>

<p>let afterDoubling = +++toBeDoubled</p>

<p>// toBeDoubled now has values of (2.0, 8.0)</p>

<p>// afterDoubling also has values of (2.0, 8.0)





Precedence and Associativity for Custom Infix Operators</p>

<p>
  Custom infix operators can also specify a <emphasis>precedence</emphasis> and an <emphasis>associativity</emphasis>. See Precedence and Associativity for an explanation of how these two characteristics affect an infix operator’s interaction with other infix operators.</p>

<p>
  The possible values for associativity are left, right, and none. Left-associative operators associate to the left if written next to other left-associative operators of the same precedence. Similarly, right-associative operators associate to the right if written next to other right-associative operators of the same precedence. Non-associative operators cannot be written next to other operators with the same precedence.</p>

<p>
  The associativity value defaults to none if it is not specified. The precedence value defaults to 100 if it is not specified.</p>

<p>
  The following example defines a new custom infix operator called +-, with left associativity and a precedence of 140:</p>

<p>operator infix +- { associativity left precedence 140 }</p>

<p>func +- (left: Vector2D, right: Vector2D) -&gt; Vector2D {</p>

<p> return Vector2D(x: left.x + right.x, y: left.y - right.y)</p>

<p>}</p>

<p>let firstVector = Vector2D(x: 1.0, y: 2.0)</p>

<p>let secondVector = Vector2D(x: 3.0, y: 4.0)</p>

<p>let plusMinusVector = firstVector +- secondVector</p>

<p>// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)</p>

<p>
  This operator adds together the x values of two vectors, and subtracts the y value of the second vector from the first. Because it is in essence an “additive” operator, it has been given the same associativity and precedence values (left and 140) as default additive infix operators such as + and -. For a complete list of the default Swift operator precedence and associativity settings, see Expressions.</p>

<p>
About the Language Reference</p>

<p>
  This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler.</p>

<p>
  The Swift language is relatively small, because many common types, functions, and operators that appear virtually everywhere in Swift code are actually defined in the Swift standard library. Although these types, functions, and operators are not part of the Swift language itself, they are used extensively in the discussions and code examples in this part of the book.




How to Read the Grammar</p>

<p>
  The notation used to describe the formal grammar of the Swift programming language follows a few conventions:</p>

<p>
  An arrow (→) is used to mark grammar productions and can be read as “can consist of.“</p>

<p>
  Syntactic categories are indicated by <emphasis>italic</emphasis> text and appear on both sides of a grammar production rule.</p>

<p>
  Literal words and punctuation are indicated by boldface constant width text and appear only on the right-hand side of a grammar production rule.</p>

<p>
  Alternative grammar productions are separated by vertical bars (|). When alternative productions are too long to read easily, they are broken into multiple grammar production rules on new lines.</p>

<p>
  In a few cases, regular font text is used to describe the right-hand side of a grammar production rule.</p>

<p>
  Optional syntactic categories and literals are marked by a trailing subscript, <emphasis>opt</emphasis>.</p>

<p>
  As an example, the grammar of a getter-setter block is defined as follows:</p>

<p>
  Grammar of a getter-setter block</p>

<p>


  getter-setter-block


  →

{­getter-clause­setter-clause­<sub>opt</sub>­}­

{­setter-clause­getter-clause­}­</p>

<p>
  This definition indicates that a getter-setter block can consist of a getter clause followed by an optional setter clause, enclosed in braces, <emphasis>or</emphasis> a setter clause followed by a getter clause, enclosed in braces. The grammar production above is equivalent to the following two productions, where the alternatives are spelled out explicitly:</p>

<p>
  Grammar of a getter setter block</p>

<p>


  getter-setter-block


  →
{­getter-clause­setter-clause­<sub>opt</sub>­}­</p>

<p>


  getter-setter-block


  →
{­setter-clause­getter-clause­}­</p>

<p>
Lexical Structure</p>

<p>On This Page</p>

<p>

            Whitespace and Comments</p>

<p>

            Identifiers</p>

<p>

            Keywords</p>

<p>

            Literals</p>

<p>

            Operators</p>

<p>
  The <emphasis>lexical structure</emphasis> of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters.</p>

<p>
  In most cases, tokens are generated from the characters of a Swift source file by considering the longest possible substring from the input text, within the constraints of the grammar that are specified below. This behavior is referred to as <emphasis>longest match</emphasis> or <emphasis>maximal munch</emphasis>.




Whitespace and Comments</p>

<p>
  Whitespace has two uses: to separate tokens in the source file and to help determine whether an operator is a prefix or postfix (see Operators), but is otherwise ignored. The following characters are considered whitespace: space (U+0020), line feed (U+000A), carriage return (U+000D), horizontal tab (U+0009), vertical tab (U+000B), form feed (U+000C) and null (U+0000).</p>

<p>
  Comments are treated as whitespace by the compiler. Single line comments begin with <emphasis>//</emphasis> and continue until the end of the line. Multiline comments begin with /* and end with */. Nesting is allowed, but the comment markers must be balanced.




Identifiers</p>

<p>
<emphasis>Identifiers</emphasis> begin with an upper case or lower case letter A through Z, an underscore (_), a noncombining alphanumeric Unicode character in the Basic Multilingual Plane, or a character outside the Basic Multilingual Plan that isn’t in a Private Use Area. After the first character, digits and combining Unicode characters are also allowed.</p>

<p>
  To use a reserved word as an identifier, put a backtick (`) before and after it. For example, class is not a valid identifier, but `class` is valid. The backticks are not considered part of the identifier; `x` and x have the same meaning.</p>

<p>
  Inside a closure with no explicit parameter names, the parameters are implicitly named $0, $1, $2, and so on. These names are valid identifiers within the scope of the closure.</p>

<p>
  Grammar of an identifier</p>

<p>


  identifier


  →
identifier-characters­<sub>opt</sub>­</p>

<p>


  identifier


  →
`­identifier-characters­<sub>opt</sub>­`­</p>

<p>


  identifier


  →
implicit-parameter-name­</p>

<p>


  identifier-list


  →

identifier­

identifier-list­</p>

<p>


  identifier-head


  →
Upper- or lowercase letter A through Z</p>

<p>


  identifier-head


  →
U+00A8, U+00AA, U+00AD, U+00AF, U+00B2–U+00B5, or U+00B7–U+00BA</p>

<p>


  identifier-head


  →
U+00BC–U+00BE, U+00C0–U+00D6, U+00D8–U+00F6, or U+00F8–U+00FF</p>

<p>


  identifier-head


  →
U+0100–U+02FF, U+0370–U+167F, U+1681–U+180D, or U+180F–U+1DBF</p>

<p>


  identifier-head


  →
U+1E00–U+1FFF</p>

<p>


  identifier-head


  →
U+200B–U+200D, U+202A–U+202E, U+203F–U+2040, U+2054, or U+2060–U+206F</p>

<p>


  identifier-head


  →
U+2070–U+20CF, U+2100–U+218F, U+2460–U+24FF, or U+2776–U+2793</p>

<p>


  identifier-head


  →
U+2C00–U+2DFF or U+2E80–U+2FFF</p>

<p>


  identifier-head


  →
U+3004–U+3007, U+3021–U+302F, U+3031–U+303F, or U+3040–U+D7FF</p>

<p>


  identifier-head


  →
U+F900–U+FD3D, U+FD40–U+FDCF, U+FDF0–U+FE1F, or U+FE30–U+FE44</p>

<p>


  identifier-head


  →
U+FE47–U+FFFD</p>

<p>


  identifier-head


  →
U+10000–U+1FFFD, U+20000–U+2FFFD, U+30000–U+3FFFD, or U+40000–U+4FFFD</p>

<p>


  identifier-head


  →
U+50000–U+5FFFD, U+60000–U+6FFFD, U+70000–U+7FFFD, or U+80000–U+8FFFD</p>

<p>


  identifier-head


  →
U+90000–U+9FFFD, U+A0000–U+AFFFD, U+B0000–U+BFFFD, or U+C0000–U+CFFFD</p>

<p>


  identifier-head


  →
U+D0000–U+DFFFD or U+E0000–U+EFFFD</p>

<p>


  identifier-character


  →
Digit 0 through 9</p>

<p>


  identifier-character


  →
U+0300–U+036F, U+1DC0–U+1DFF, U+20D0–U+20FF, or U+FE20–U+FE2F</p>

<p>


  identifier-character


  →
identifier-head­</p>

<p>


  identifier-characters


  →
identifier-characters­<sub>opt</sub>­</p>

<p>


  implicit-parameter-name


  →
$­decimal-digits­






Keywords</p>

<p>
  The following keywords are reserved and may not be used as identifiers, unless they’re escaped with backticks, as described above in Identifiers.</p>

<p>
  Keywords used in declarations: class, deinit, enum, extension, func, import, init, let, protocol, static, struct, subscript, typealias, and var.</p>

<p>
  Keywords used in statements: break, case, continue, default, do, else, fallthrough, if, in, for, return, switch, where, and while.</p>

<p>
  Keywords used in expressions and types: as, dynamicType, is, new, super, self, Self, Type, __COLUMN__, __FILE__, __FUNCTION__, and __LINE__.</p>

<p>
  Keywords reserved in particular contexts: associativity, didSet, get, infix, inout, left, mutating, none, nonmutating, operator, override, postfix, precedence, prefix, right, set, unowned, unowned(safe), unowned(unsafe), weak and willSet. Outside the context in which they appear in the grammar, they can be used as identifiers.






Literals</p>

<p>
  A <emphasis>literal</emphasis> is the source code representation of a value of an integer, floating-point number, or string type. The following are examples of literals:</p>

<p>42 // Integer literal</p>

<p>3.14159 // Floating-point literal</p>

<p>"Hello, world!" // String literal</p>

<p>
  Grammar of a literal</p>

<p>


  literal


  →

integer-literal­

floating-point-literal­

string-literal­






Integer Literals</p>

<p>
<emphasis>Integer literals</emphasis> represent integer values of unspecified precision. By default, integer literals are expressed in decimal; you can specify an alternate base using a prefix. Binary literals begin with 0b, octal literals begin with 0o, and hexadecimal literals begin with 0x.</p>

<p>
  Decimal literals contain the digits 0 through 9. Binary literals contain 0 and 1, octal literals contain 0 through 7, and hexadecimal literals contain 0 through 9 as well as A through F in upper- or lowercase.</p>

<p>
  Negative integers literals are expressed by prepending a minus sign (-) to an integer literal, as in -42.</p>

<p>
  Underscores (_) are allowed between digits for readability, but are ignored and therefore don’t affect the value of the literal. Integer literals can begin with leading zeros (0), but are likewise ignored and don’t affect the base or value of the literal.</p>

<p>
  Unless otherwise specified, the default type of an integer literal is the Swift standard library type Int. The Swift standard library also defines types for various sizes of signed and unsigned integers, as described in Integers.</p>

<p>
  Grammar of an integer literal</p>

<p>


  integer-literal


  →
binary-literal­</p>

<p>


  integer-literal


  →
octal-literal­</p>

<p>


  integer-literal


  →
decimal-literal­</p>

<p>


  integer-literal


  →
hexadecimal-literal­</p>

<p>


  binary-literal


  →
0b­binary-literal-characters­<sub>opt</sub>­</p>

<p>


  binary-digit


  →
Digit 0 or 1</p>

<p>


  binary-literal-character


  →

binary-digit­

_­</p>

<p>


  binary-literal-characters


  →
binary-literal-characters­<sub>opt</sub>­</p>

<p>


  octal-literal


  →
0o­octal-literal-characters­<sub>opt</sub>­</p>

<p>


  octal-digit


  →
Digit 0 through 7</p>

<p>


  octal-literal-character


  →

octal-digit­

_­</p>

<p>


  octal-literal-characters


  →
octal-literal-characters­<sub>opt</sub>­</p>

<p>


  decimal-literal


  →
decimal-literal-characters­<sub>opt</sub>­</p>

<p>


  decimal-digit


  →
Digit 0 through 9</p>

<p>


  decimal-digits


  →
decimal-digits­<sub>opt</sub>­</p>

<p>


  decimal-literal-character


  →

decimal-digit­

_­</p>

<p>


  decimal-literal-characters


  →
decimal-literal-characters­<sub>opt</sub>­</p>

<p>


  hexadecimal-literal


  →
0x­hexadecimal-literal-characters­<sub>opt</sub>­</p>

<p>


  hexadecimal-digit


  →
Digit 0 through 9, a through f, or A through F</p>

<p>


  hexadecimal-literal-character


  →

hexadecimal-digit­

_­</p>

<p>


  hexadecimal-literal-characters


  →
hexadecimal-literal-characters­<sub>opt</sub>­






Floating-Point Literals</p>

<p>
<emphasis>Floating-point literals</emphasis> represent floating-point values of unspecified precision.</p>

<p>
  By default, floating-point literals are expressed in decimal (with no prefix), but they can also be expressed in hexadecimal (with a 0x prefix).</p>

<p>
  Decimal floating-point literals consist of a sequence of decimal digits followed by either a decimal fraction, a decimal exponent, or both. The decimal fraction consists of a decimal point (.) followed by a sequence of decimal digits. The exponent consists of an upper- or lowercase e prefix followed by sequence of decimal digits that indicates what power of 10 the value preceding the e is multiplied by. For example, 1.25e2 represents 1.25 ⨉ 10<sup>2</sup>, which evaluates to 125.0. Similarly, 1.25e-2 represents 1.25 ⨉ 10<sup>-2</sup>, which evaluates to 0.0125.</p>

<p>
  Hexadecimal floating-point literals consist of a 0x prefix, followed by an optional hexadecimal fraction, followed by a hexadecimal exponent. The hexadecimal fraction consists of a decimal point followed by a sequence of hexadecimal digits. The exponent consists of an upper- or lowercase p prefix followed by sequence of decimal digits that indicates what power of 2 the value preceding the p is multiplied by. For example, 0xFp2 represents 15 ⨉ 2<sup>2</sup>, which evaluates to 60. Similarly, 0xFp-2 represents 15 ⨉ 2<sup>-2</sup>, which evaluates to 3.75.</p>

<p>
  Unlike with integer literals, negative floating-point numbers are expressed by applying the unary minus operator (-) to a floating-point literal, as in -42.0. The result is an expression, not a floating-point integer literal.</p>

<p>
  Underscores (_) are allowed between digits for readability, but are ignored and therefore don’t affect the value of the literal. Floating-point literals can begin with leading zeros (0), but are likewise ignored and don’t affect the base or value of the literal.</p>

<p>
  Unless otherwise specified, the default type of a floating-point literal is the Swift standard library type Double, which represents a 64-bit floating-point number. The Swift standard library also defines a Float type, which represents a 32-bit floating-point number.</p>

<p>
  Grammar of a floating-point literal</p>

<p>


  floating-point-literal


  →
decimal-fraction­<sub>opt</sub>­decimal-exponent­<sub>opt</sub>­</p>

<p>


  floating-point-literal


  →
hexadecimal-fraction­<sub>opt</sub>­hexadecimal-exponent­</p>

<p>


  decimal-fraction


  →
.­decimal-literal­</p>

<p>


  decimal-exponent


  →
sign­<sub>opt</sub>­decimal-literal­</p>

<p>


  hexadecimal-fraction


  →
.­hexadecimal-literal­<sub>opt</sub>­</p>

<p>


  hexadecimal-exponent


  →
sign­<sub>opt</sub>­hexadecimal-literal­</p>

<p>


  floating-point-e


  →

e­

E­</p>

<p>


  floating-point-p


  →

p­

P­</p>

<p>


  sign


  →

+­

-­







String Literals</p>

<p>
  A string literal is a sequence of characters surrounded by double quotes, with the following form:</p>

<p>"<emphasis>characters</emphasis>"</p>

<p>
  String literals cannot contain an unescaped double quote ("), an unescaped backslash (\), a carriage return, or a line feed.</p>

<p>
  Special characters can be included in string literals using the following escape sequences:</p>

<p>
  Null Character (\0)</p>

<p>
  Backslash (\\)</p>

<p>
  Horizontal Tab (\t)</p>

<p>
  Line Feed (\n)</p>

<p>
  Carriage Return (\r)</p>

<p>
  Double Quote (\")</p>

<p>
  Single Quote (\')</p>

<p>
  Characters can also be expressed by \x followed by two hexadecimal digits, \u followed by four hexadecimal digits, or \U followed by eight hexadecimal digits. The digits in these escape sequences identify a Unicode codepoint.</p>

<p>
  The value of an expression can be inserted into a string literal by placing the expression in parentheses after a backslash (\). The interpolated expression must not contain an unescaped double quote ("), an unescaped backslash (\), a carriage return, or a line feed. The expression must evaluate to a value of a type that the String class has an initializer for.</p>

<p>
  For example, all the following string literals have the same value:</p>

<p>"1 2 3"</p>

<p>"1 2 \(3)"</p>

<p>"1 2 \(1 + 2)"</p>

<p>var x = 3; "1 2 \(x)"</p>

<p>
  The default type of a string literal is String. The characters that make up a string are of type Character. For more information about the String and Character types, see Strings and Characters.</p>

<p>
  Grammar of a string literal</p>

<p>


  string-literal


  →
"­quoted-text­"­</p>

<p>


  quoted-text


  →
quoted-text­<sub>opt</sub>­</p>

<p>


  quoted-text-item


  →
escaped-character­</p>

<p>


  quoted-text-item


  →
\(­expression­)­</p>

<p>


  quoted-text-item


  →
Any Unicode extended grapheme cluster except "­, \­, U+000A, or U+000D</p>

<p>


  escaped-character


  →

\0­

\\­

\t­

\n­

\r­

\"­

\'­</p>

<p>


  escaped-character


  →
\x­hexadecimal-digit­</p>

<p>


  escaped-character


  →
\u­hexadecimal-digit­hexadecimal-digit­</p>

<p>


  escaped-character


  →
\U­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­







Operators</p>

<p>
  The Swift standard library defines a number of operators for your use, many of which are discussed in Basic Operators and Advanced Operators. The present section describes which characters can be used as operators.</p>

<p>
  Operators are made up of one or more of the following characters: /, =, -, +, !, *, %, &lt;, &gt;, &amp;, |, ^, ~, and .. That said, the tokens =, -&gt;, //, /*, */, ., and the unary prefix operator &amp; are reserved. These tokens can’t be overloaded, nor can they be used to define custom operators.</p>

<p>
  The whitespace around an operator is used to determine whether an operator is used as a prefix operator, a postfix operator, or a binary operator. This behavior is summarized in the following rules:</p>

<p>
  If an operator has whitespace around both sides or around neither side, it is treated as a binary operator. As an example, the + operator in a+b and a + b is treated as a binary operator.</p>

<p>
  If an operator has whitespace on the left side only, it is treated as a prefix unary operator. As an example, the ++ operator in a ++b is treated as a prefix unary operator.</p>

<p>
  If an operator has whitespace on the right side only, it is treated as a postfix unary operator. As an example, the ++ operator in a++ b is treated as a postfix unary operator.</p>

<p>
  If an operator has no whitespace on the left but is followed immediately by a dot (.), it is treated as a postfix unary operator. As an example, the ++ operator in a++.b is treated as a postfix unary operator (a++ . b rather than a ++ .b).</p>

<p>
  For the purposes of these rules, the characters (, [, and { before an operator, the characters ), ], and } after an operator, and the characters ,, ;, and : are also considered whitespace.</p>

<p>
  There is one caveat to the rules above. If the ! or ? operator has no whitespace on the left, it is treated as a postfix operator, regardless of whether it has whitespace on the right. To use the ? operator as syntactic sugar for the Optional type, it must not have whitespace on the left. To use it in the conditional (? :) operator, it must have whitespace around both sides.</p>

<p>
  In certain constructs, operators with a leading &lt; or &gt; may be split into two or more tokens. The remainder is treated the same way and may be split again. As a result, there is no need to use whitespace to disambiguate between the closing &gt; characters in constructs like Dictionary&lt;String, Array&lt;Int&gt;&gt;. In this example, the closing &gt; characters are not treated as a single token that may then be misinterpreted as a bit shift &gt;&gt; operator.</p>

<p>
  To learn how to define new, custom operators, see Custom Operators and Operator Declaration. To learn how to overload existing operators, see Operator Functions.</p>

<p>
  Grammar of operators</p>

<p>


  operator


  →
operator­<sub>opt</sub>­</p>

<p>


  operator-character


  →

/­

=­

-­

+­

!­

*­

%­

&lt;­

&gt;­

&amp;­

|­

^­

~­

.­</p>

<p>


  binary-operator


  →
operator­</p>

<p>


  prefix-operator


  →
operator­</p>

<p>


  postfix-operator


  →
operator­</p>

<p>
Types</p>

<p>On This Page</p>

<p>

            Type Annotation</p>

<p>

            Type Identifier</p>

<p>

            Tuple Type</p>

<p>

            Function Type</p>

<p>

            Array Type</p>

<p>

            Optional Type</p>

<p>

            Implicitly Unwrapped Optional Type</p>

<p>

            Protocol Composition Type</p>

<p>

            Metatype Type</p>

<p>

            Type Inheritance Clause</p>

<p>

            Type Inference</p>

<p>
  In Swift, there are two kinds of types: named types and compound types. A <emphasis>named type</emphasis> is a type that can be given a particular name when it is defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named MyClass have the type MyClass. In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values.</p>

<p>
  Data types that are normally considered basic or primitive in other languages—such as types that represent numbers, characters, and strings—are actually named types, defined and implemented in the Swift standard library using structures. Because they are named types, you can extend their behavior to suit the needs of your program, using an extension declaration, discussed in Extensions and Extension Declaration.</p>

<p>
  A <emphasis>compound type</emphasis> is a type without a name, defined in the Swift language itself. There are two compound types: function types and tuple types. A compound type may contain named types and other compound types. For instance, the tuple type (Int, (Int, Int)) contains two elements: The first is the named type Int, and the second is another compound type (Int, Int).</p>

<p>
  This chapter discusses the types defined in the Swift language itself and describes the type inference behavior of Swift.</p>

<p>
  Grammar of a type</p>

<p>


  type


  →

array-type­

function-type­

type-identifier­

tuple-type­

optional-type­

implicitly-unwrapped-optional-type­

protocol-composition-type­

metatype-type­







Type Annotation</p>

<p>
  A <emphasis>type annotation</emphasis> explicitly specifies the type of a variable or expression. Type annotations begin with a colon (:) and end with a type, as the following examples show:</p>

<p>let someTuple: (Double, Double) = (3.14159, 2.71828)</p>

<p>func someFunction(a: Int) { /* ... */ }</p>

<p>
  In the first example, the expression someTuple is specified to have the tuple type (Double, Double). In the second example, the parameter a to the function someFunction is specified to have the type Int.</p>

<p>
  Type annotations can contain an optional list of type attributes before the type.</p>

<p>
  Grammar of a type annotation</p>

<p>


  type-annotation


  →
:­attributes­<sub>opt</sub>­type­






Type Identifier</p>

<p>
  A type identifier refers to either a named type or a type alias of a named or compound type.</p>

<p>
  Most of the time, a type identifier directly refers to a named type with the same name as the identifier. For example, Int is a type identifier that directly refers to the named type Int, and the type identifier Dictionary&lt;String, Int&gt; directly refers to the named type Dictionary&lt;String, Int&gt;.</p>

<p>
  There are two cases in which a type identifier does not refer to a type with the same name. In the first case, a type identifier refers to a type alias of a named or compound type. For instance, in the example below, the use of Point in the type annotation refers to the tuple type (Int, Int).</p>

<p>typealias Point = (Int, Int)</p>

<p>let origin: Point = (0, 0)</p>

<p>
  In the second case, a type identifier uses dot (.) syntax to refer to named types declared in other modules or nested within other types. For example, the type identifier in the following code references the named type MyType that is declared in the ExampleModule module.</p>

<p>var someValue: ExampleModule.MyType</p>

<p>
  Grammar of a type identifier</p>

<p>


  type-identifier


  →

generic-argument-clause­<sub>opt</sub>­

generic-argument-clause­<sub>opt</sub>­.­type-identifier­</p>

<p>


  type-name


  →
identifier­






Tuple Type</p>

<p>
  A tuple type is a comma-separated list of zero or more types, enclosed in parentheses.</p>

<p>
  You can use a tuple type as the return type of a function to enable the function to return a single tuple containing multiple values. You can also name the elements of a tuple type and use those names to refer to the values of the individual elements. An element name consists of an identifier followed immediately by a colon (:). For an example that demonstrates both of these features, see Functions with Multiple Return Values.</p>

<p>
Void is a typealias for the the empty tuple type, (). If there is only one element inside the parentheses, the type is simply the type of that element. For example, the type of (Int) is Int, not (Int). As a result, you can label a tuple element only when the tuple type has two or more elements.</p>

<p>
  Grammar of a tuple type</p>

<p>


  tuple-type


  →
(­tuple-type-body­<sub>opt</sub>­)­</p>

<p>


  tuple-type-body


  →
tuple-type-element-list­...­<sub>opt</sub>­</p>

<p>


  tuple-type-element-list


  →

tuple-type-element­

tuple-type-element-list­</p>

<p>


  tuple-type-element


  →

attributes­<sub>opt</sub>­inout­<sub>opt</sub>­type­

inout­<sub>opt</sub>­type-annotation­</p>

<p>


  element-name


  →
identifier­






Function Type</p>

<p>
  A function type represents the type of a function, method, or closure and consists of a parameter and return type separated by an arrow (-&gt;):</p>

<p><emphasis>parameter type</emphasis> -&gt; <emphasis>return type</emphasis></p>

<p>
  Because the <emphasis>parameter type</emphasis> and the <emphasis>return type</emphasis> can be a tuple type, function types support functions and methods that take multiple paramaters and return multiple values.</p>

<p>
  You can apply the auto_closure attribute to a function type that has a parameter type of () and that returns the type of an expression (see Type Attributes). An autoclosure function captures an implicit closure over the specified expression, instead of the expression itself. The following example uses the auto_closure attribute in defining a very simple assert function:</p>

<p>func simpleAssert(condition: @auto_closure () -&gt; Bool, message: String) {</p>

<p> if !condition() {</p>

<p> println(message)</p>

<p>    }</p>

<p>}</p>

<p>let testNumber = 5</p>

<p>simpleAssert(testNumber % 2 == 0, "testNumber isn't an even number.")</p>

<p>// prints "testNumber isn't an even number."</p>

<p>
  A function type can have a variadic parameter as the last parameter in its <emphasis>parameter type</emphasis>. Syntactically, a variadic parameter consists of a base type name followed immediately by three dots (...), as in Int.... A variadic parameter is treated as an array that contains elements of the base type name. For instance, the variadic parameter Int... is treated as Int[]. For an example that uses a variadic parameter, see Variadic Parameters.</p>

<p>
  To specify an in-out parameter, prefix the parameter type with the inout keyword. You can’t mark a variadic parameter or a return type with the inout keyword. In-out parameters are discussed in In-Out Parameters.</p>

<p>
  The type of a curried function is equivalent to a nested function type. For example, the type of the curried function addTwoNumbers()() below is Int -&gt; Int -&gt; Int:</p>

<p>func addTwoNumbers(a: Int)(b: Int) -&gt; Int {</p>

<p> return a + b</p>

<p>}</p>

<p>addTwoNumbers(4)(5) // Returns 9</p>

<p>
  The function types of a curried function are grouped from right to left. For instance, the function type Int -&gt; Int -&gt; Int is understood as Int -&gt; (Int -&gt; Int)—that is, a function that takes an Int and returns another function that takes and return an Int. For example, you can rewrite the curried function addTwoNumbers()() as the following nested function:</p>

<p>func addTwoNumbers(a: Int) -&gt; (Int -&gt; Int) {</p>

<p> func addTheSecondNumber(b: Int) -&gt; Int {</p>

<p> return a + b</p>

<p>    }</p>

<p> return addTheSecondNumber</p>

<p>}</p>

<p>addTwoNumbers(4)(5) // Returns 9</p>

<p>
  Grammar of a function type</p>

<p>


  function-type


  →
type­






Array Type</p>

<p>
  The Swift language uses square brackets ([]) immediately after the name of a type as syntactic sugar for the named type Array&lt;T&gt;, which is defined in the Swift standard library. In other words, the following two declarations are equivalent:</p>

<p>let someArray: String[] = ["Alex", "Brian", "Dave"]</p>

<p>let someArray: Array&lt;String&gt; = ["Alex", "Brian", "Dave"]</p>

<p>
  In both cases, the constant someArray is declared as an array of strings. The elements of an array can be accessed using square brackets as well: someArray[0] refers to the element at index 0, "Alex".</p>

<p>
  As the above example also shows, you can use square brackets to create an array using an array literal. Empty array literals are written using an empty pair of square brackets and can be used to create an empty array of a specified type.</p>

<p>var emptyArray: Double[] = []</p>

<p>
  You can create multidimensional arrays by chaining multiple sets of square brackets to the name of the base type of the elements. For example, you can create a three-dimensional array of integers using three sets of square brackets:</p>

<p>var array3D: Int[][][] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]</p>

<p>
  When accessing the elements in a multidimensional array, the left-most subscript index refers to the element at that index in the outermost array. The next subscript index to the right refers to the element at that index in the array that’s nested one level in. And so on. This means that in the example above, array3D[0] refers to [[1, 2], [3, 4]], array3D[0][1] refers to [3, 4], and array3D[0][1][1] refers to the value 4.</p>

<p>
  For a detailed discussion of the Swift standard library Array type, see Arrays.</p>

<p>
  Grammar of an array type</p>

<p>


  array-type


  →

type­[­]­

array-type­[­]­







Optional Type</p>

<p>
  The Swift language defines the postfix ? as syntactic sugar for the named type Optional&lt;T&gt;, which is defined in the Swift standard library. In other words, the following two declarations are equivalent:</p>

<p>var optionalInteger: Int?</p>

<p>var optionalInteger: Optional&lt;Int&gt;</p>

<p>
  In both cases, the variable optionalInteger is declared to have the type of an optional integer. Note that no whitespace may appear between the type and the ?.</p>

<p>
  The type Optional&lt;T&gt; is an enumeration with two cases, None and Some(T), which are used to represent values that may or may not be present. Any type can be explicitly declared to be (or implicitly converted to) an optional type. When declaring an optional type, be sure to use parentheses to properly scope the ? operator. As an example, to declare an optional array of integers, write the type annotation as (Int[])?; writing Int[]? produces an error.</p>

<p>
  If you don’t provide an initial value when you declare an optional variable or property, its value automatically defaults to nil.</p>

<p>
  Optionals conform to the LogicValue protocol and therefore may occur in a Boolean context. In that context, if an instance of an optional type T? contains any value of type T (that is, it’s value is Optional.Some(T)), the optional type evaluates to true. Otherwise, it evaluates to false.</p>

<p>
  If an instance of an optional type contains a value, you can access that value using the postfix operator !, as shown below:</p>

<p>optionalInteger = 42</p>

<p>optionalInteger! // 42</p>

<p>
  Using the ! operator to unwrap an optional that has a value of nil results in a runtime error.</p>

<p>
  You can also use optional chaining and optional binding to conditionally perform an operation on an optional expression. If the value is nil, no operation is performed and therefore no runtime error is produced.</p>

<p>
  For more information and to see examples that show how to use optional types, see Optionals.</p>

<p>
  Grammar of an optional type</p>

<p>


  optional-type


  →
type­?­






Implicitly Unwrapped Optional Type</p>

<p>
  The Swift language defines the postfix ! as syntactic sugar for the named type ImplicitlyUnwrappedOptional&lt;T&gt;, which is defined in the Swift standard library. In other words, the following two declarations are equivalent:</p>

<p>var implicitlyUnwrappedString: String!</p>

<p>var implicitlyUnwrappedString: ImplicitlyUnwrappedOptional&lt;String&gt;</p>

<p>
  In both cases, the variable implicitlyUnwrappedString is declared to have the type of an implicitly unwrapped optional string. Note that no whitespace may appear between the type and the !.</p>

<p>
  You can use implicitly unwrapped optionals in all the same places in your code that you can use optionals. For instance, you can assign values of implicitly unwrapped optionals to variables, constants, and properties of optionals, and vice versa.</p>

<p>
  As with optionals, if you don’t provide an initial value when you declare an implicitly unwrapped optional variable or property, it’s value automatically defaults to nil.</p>

<p>
  Because the value of an implicitly unwrapped optional is automatically unwrapped when you use it, there’s no need to use the ! operator to unwrap it. That said, if you try to use an implicitly unwrapped optional that has a value of nil, you’ll get a runtime error.</p>

<p>
  Use optional chaining to conditionally perform an operation on an implicitly unwrapped optional expression. If the value is nil, no operation is performed and therefore no runtime error is produced.</p>

<p>
  For more information about implicitly unwrapped optional types, see Implicitly Unwrapped Optionals.</p>

<p>
  Grammar of an implicitly unwrapped optional type</p>

<p>


  implicitly-unwrapped-optional-type


  →
type­!­






Protocol Composition Type</p>

<p>
  A protocol composition type describes a type that conforms to each protocol in a list of specified protocols. Protocol composition types may be used in type annotations and in generic parameters.</p>

<p>
  Protocol composition types have the following form:</p>

<p>protocol&lt;<emphasis>Protocol 1</emphasis>, <emphasis>Protocol 2</emphasis>&gt;</p>

<p>
  A protocol composition type allows you to specify a value whose type conforms to the requirements of multiple protocols without having to explicitly define a new, named protocol that inherits from each protocol you want the type to conform to. For example, specifying a protocol composition type protocol&lt;ProtocolA, ProtocolB, ProtocolC&gt; is effectively the same as defining a new protocol ProtocolD that inherits from ProtocolA, ProtocolB, and ProtocolC, but without having to introduce a new name.</p>

<p>
  Each item in a protocol composition list must be either the name of protocol or a type alias of a protocol composition type. If the list is empty, it specifies the empty protocol composition type, which every type conforms to.</p>

<p>
  Grammar of a protocol composition type</p>

<p>


  protocol-composition-type


  →
protocol­&lt;­protocol-identifier-list­<sub>opt</sub>­&gt;­</p>

<p>


  protocol-identifier-list


  →

protocol-identifier­

protocol-identifier-list­</p>

<p>


  protocol-identifier


  →
type-identifier­






Metatype Type</p>

<p>
  A metatype type refers to the type of any type, including class types, structure types, enumeration types, and protocol types.</p>

<p>
  The metatype of a class, structure, or enumeration type is the name of that type followed by .Type. The metatype of a protocol type—not the concrete type that conforms to the protocol at runtime—is the name of that protocol followed by .Protocol. For example, the metatype of the class type SomeClass is SomeClass.Type and the metatype of the protocol SomeProtocol is SomeProtocol.Protocol.</p>

<p>
  You can use the postfix self expression to access a type as a value. For example, SomeClass.self returns SomeClass itself, not an instance of SomeClass. And SomeProtocol.self returns SomeProtocol itself, not an instance of a type that conforms to SomeProtocol at runtime. You can use a dynamicType expression with an instance of a type to access that instance’s runtime type as a value, as the following example shows:</p>

<p>class SomeBaseClass {</p>

<p> class func printClassName() {</p>

<p> println("SomeBaseClass")</p>

<p>    }</p>

<p>}</p>

<p>class SomeSubClass: SomeBaseClass {</p>

<p> override class func printClassName() {</p>

<p> println("SomeSubClass")</p>

<p>    }</p>

<p>}</p>

<p>let someInstance: SomeBaseClass = SomeSubClass()</p>

<p>// someInstance is of type SomeBaseClass at compile time, but</p>

<p>// someInstance is of type SomeSubClass at runtime</p>

<p>someInstance.dynamicType.printClassName()</p>

<p>// prints "SomeSubClass"</p>

<p>
  Grammar of a metatype type</p>

<p>


  metatype-type


  →

type­.­Type­

type­.­Protocol­







Type Inheritance Clause</p>

<p>
  A type inheritance clause is used to specify which class a named type inherits from and which protocols a named type conforms to. A type inheritance clause begins with a colon (:), followed by a comma-separated list of type identifiers.</p>

<p>
  Class types may inherit from a single superclass and conform to any number of protocols. When defining a class, the name of the superclass must appear first in the list of type identifiers, followed by any number of protocols the class must conform to. If the class does not inherit from another class, the list may begin with a protocol instead. For an extended discussion and several examples of class inheritance, see Inheritance.</p>

<p>
  Other named types may only inherit from or conform to a list of protocols. Protocol types may inherit from any number of other protocols. When a protocol type inherits from other protocols, the set of requirements from those other protocols are aggregated together, and any type that inherits from the current protocol must conform to all of those requirements.</p>

<p>
  A type inheritance clause in an enumeration definition may be either a list of protocols, or in the case of an enumeration that assigns raw values to its cases, a single, named type that specifies the type of those raw values. For an example of an enumeration definition that uses a type inheritance clause to specify the type of its raw values, see Raw Values.</p>

<p>
  Grammar of a type inheritance clause</p>

<p>


  type-inheritance-clause


  →
:­type-inheritance-list­</p>

<p>


  type-inheritance-list


  →

type-identifier­

type-inheritance-list­







Type Inference</p>

<p>
  Swift uses type inference extensively, allowing you to omit the type or part of the type of many variables and expressions in your code. For example, instead of writing var x: Int = 0, you can omit the type completely and simply write var x = 0—the compiler correctly infers that x names a value of type Int. Similarly, you can omit part of a type when the full type can be inferred from context. For instance, if you write let dict: Dictionary = ["A": 1], the compiler infers that dict has the type Dictionary&lt;String, Int&gt;.</p>

<p>
  In both of the examples above, the type information is passed up from the leaves of the expression tree to its root. That is, the type of x in var x: Int = 0 is inferred by first checking the type of 0 and then passing this type information up to the root (the variable x).</p>

<p>
  In Swift, type information can also flow in the opposite direction—from the root down to the leaves. In the following example, for instance, the explicit type annotation (: Float) on the constant eFloat causes the numeric literal 2.71828 to have type Float instead of type Double.</p>

<p>let e = 2.71828 // The type of e is inferred to be Double.</p>

<p>let eFloat: Float = 2.71828 // The type of eFloat is Float.</p>

<p>
  Type inference in Swift operates at the level of a single expression or statement. This means that all of the information needed to infer an omitted type or part of a type in an expression must be accessible from type-checking the expression or one of its subexpressions.</p>

<p>
Expressions</p>

<p>On This Page</p>

<p>

            Prefix Expressions</p>

<p>

            Binary Expressions</p>

<p>

            Primary Expressions</p>

<p>

            Postfix Expressions</p>

<p>
  In Swift, there are four kinds of expressions: prefix expressions, binary expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.</p>

<p>
  Prefix and binary expressions let you apply operators to smaller expressions. Primary expressions are conceptually the simplest kind of expression, and they provide a way to access values. Postfix expressions, like prefix and binary expressions, let you build up more complex expressions using postfixes such as function calls and member access. Each kind of expression is described in detail in the sections below.</p>

<p>
  Grammar of an expression</p>

<p>


  expression


  →
binary-expressions­<sub>opt</sub>­</p>

<p>


  expression-list


  →

expression­

expression-list­







Prefix Expressions</p>

<p>
<emphasis>Prefix expressions</emphasis> combine an optional prefix operator with an expression. Prefix operators take one argument, the expression that follows them.</p>

<p>
  The Swift standard library provides the following prefix operators:</p>

<p>
++ Increment</p>

<p>
-- Decrement</p>

<p>
! Logical NOT</p>

<p>
~ Bitwise NOT</p>

<p>
+ Unary plus</p>

<p>
- Unary minus</p>

<p>
  For information about the behavior of these operators, see Basic Operators and Advanced Operators.</p>

<p>
  In addition to the standard library operators listed above, you use &amp; immediately before the name of a variable that’s being passed as an in-out argument to a function call expression. For more information and to see an example, see In-Out Parameters.</p>

<p>
  Grammar of a prefix expression</p>

<p>


  prefix-expression


  →
prefix-operator­<sub>opt</sub>­postfix-expression­</p>

<p>


  prefix-expression


  →
in-out-expression­</p>

<p>


  in-out-expression


  →
&amp;­identifier­






Binary Expressions</p>

<p>
<emphasis>Binary expressions</emphasis> combine an infix binary operator with the expression that it takes as its left-hand and right-hand arguments. It has the following form:</p>

<p><emphasis>left-hand argument</emphasis> <emphasis>operator</emphasis> <emphasis>right-hand argument</emphasis></p>

<p>
  The Swift standard library provides the following binary operators:</p>

<p>
<strong>Exponentiative (No associativity, precedence level 160)</strong></p>

<p>
&lt;&lt; Bitwise left shift</p>

<p>
&gt;&gt; Bitwise right shift</p>

<p>
<strong>Multiplicative (Left associative, precedence level 150)</strong></p>

<p>
* Multiply</p>

<p>
/ Divide</p>

<p>
% Remainder</p>

<p>
&amp;* Multiply, ignoring overflow</p>

<p>
&amp;/ Divide, ignoring overflow</p>

<p>
&amp;% Remainder, ignoring overflow</p>

<p>
&amp; Bitwise AND</p>

<p>
<strong>Additive (Left associative, precedence level 140)</strong></p>

<p>
+ Add</p>

<p>
- Subtract</p>

<p>
&amp;+ Add with overflow</p>

<p>
&amp;- Subtract with overflow</p>

<p>
| Bitwise OR</p>

<p>
^ Bitwise XOR</p>

<p>
<strong>Range (No associativity, precedence level 135)</strong></p>

<p>
.. Half-closed range</p>

<p>
... Closed range</p>

<p>
<strong>Cast (No associativity, precedence level 132)</strong></p>

<p>
is Type check</p>

<p>
as Type cast</p>

<p>
<strong>Comparative (No associativity, precedence level 130)</strong></p>

<p>
&lt; Less than</p>

<p>
&lt;= Less than or equal</p>

<p>
&gt; Greater than</p>

<p>
&gt;= Greater than or equal</p>

<p>
== Equal</p>

<p>
!= Not equal</p>

<p>
=== Identical</p>

<p>
!== Not identical</p>

<p>
~= Pattern match</p>

<p>
<strong>Conjunctive (Left associative, precedence level 120)</strong></p>

<p>
&amp;&amp; Logical AND</p>

<p>
<strong>Disjunctive (Left associative, precedence level 110)</strong></p>

<p>
|| Logical OR</p>

<p>
<strong>Ternary Conditional (Right associative, precedence level 100)</strong></p>

<p>
?: Ternary conditional</p>

<p>
<strong>Assignment (Right associative, precedence level 90)</strong></p>

<p>
= Assign</p>

<p>
*= Multiply and assign</p>

<p>
/= Divide and assign</p>

<p>
%= Remainder and assign</p>

<p>
+= Add and assign</p>

<p>
-= Subtract and assign</p>

<p>
&lt;&lt;= Left bit shift and assign</p>

<p>
&gt;&gt;= Right bit shift and assign</p>

<p>
&amp;= Bitwise AND and assign</p>

<p>
^= Bitwise XOR and assign</p>

<p>
|= Bitwise OR and assign</p>

<p>
&amp;&amp;= Logical AND and assign</p>

<p>
||= Logical OR and assign</p>

<p>
  For information about the behavior of these operators, see Basic Operators and Advanced Operators.</p><empty-line /><p>Note</p>

<p>At parse time, an expression made up of binary operators is represented as a flat list. This list is transformed into a tree by applying operator precedence For example, the expression 2 + 3 * 5 is initially understood as a flat list of five items, 2, +, `` 3``, *, and 5. This process transforms it into the tree (2 + (3 * 5)).</p>

<p>
  Grammar of a binary expression</p>

<p>


  binary-expression


  →
binary-operator­prefix-expression­</p>

<p>


  binary-expression


  →
prefix-expression­</p>

<p>


  binary-expression


  →
prefix-expression­</p>

<p>


  binary-expression


  →
type-casting-operator­</p>

<p>


  binary-expressions


  →
binary-expressions­<sub>opt</sub>­





Assignment Operator</p>

<p>
  The <emphasis>assigment operator</emphasis> sets a new value for a given expression. It has the following form:</p>

<p><emphasis>expression</emphasis> = <emphasis>value</emphasis></p>

<p>
  The value of the <emphasis>expression</emphasis> is set to the value obtained by evaluating the <emphasis>value</emphasis>. If the <emphasis>expression</emphasis> is a tuple, the <emphasis>value</emphasis> must be a tuple with the same number of elements. (Nested tuples are allowed.) Assignment is performed from each part of the <emphasis>value</emphasis> to the corresponding part of the <emphasis>expression</emphasis>. For example:</p>

<p>(a, _, (b, c)) = ("test", 9.45, (12, 3))</p>

<p>// a is "test", b is 12, c is 3, and 9.45 is ignored</p>

<p>
  The assignment operator does not return any value.</p>

<p>
  Grammar of an assignment operator</p>

<p>


  assignment-operator


  →
=­






Ternary Conditional Operator</p>

<p>
  The <emphasis>ternary conditional operator</emphasis> evaluates to one of two given values based on the value of a condition. It has the following form:</p>

<p><emphasis>condition</emphasis> ? <emphasis>expression used if true</emphasis> : <emphasis>expression used if false</emphasis></p>

<p>
  If the <emphasis>condition</emphasis> evaluates to true, the conditional operator evaluates the first expression and returns its value. Otherwise, it evaluates the second expression and returns its value. The unused expression is not evaluated.</p>

<p>
  For an example that uses the ternary conditional operator, see Ternary Conditional Operator.</p>

<p>
  Grammar of a conditional operator</p>

<p>


  conditional-operator


  →
?­expression­:­






Type-Casting Operators</p>

<p>
  There are two type-casting operators, the as operator and the is operator. They have the following form:</p>

<p><emphasis>expression</emphasis> as <emphasis>type</emphasis></p>

<p><emphasis>expression</emphasis> as? <emphasis>type</emphasis></p>

<p><emphasis>expression</emphasis> is <emphasis>type</emphasis></p>

<p>
  The as operator performs a cast of the <emphasis>expression</emphasis> to the specified <emphasis>type</emphasis>. It behaves as follows:</p>

<p>
  If conversion to the specified <emphasis>type</emphasis> is guaranteed to succeed, the value of the <emphasis>expression</emphasis> is returned as an instance of the specified <emphasis>type</emphasis>. An example is casting from a subclass to a superclass.</p>

<p>
  If conversion to the specified <emphasis>type</emphasis> is guaranteed to fail, a compile-time error is raised.</p>

<p>
  Otherwise, if it’s not known at compile time whether the conversion will succeed, the type of the cast expresion is an optional of the specified <emphasis>type</emphasis>. At runtime, if the cast succeeds, the value of <emphasis>expression</emphasis> is wrapped in an optional and returned; otherwise, the value returned is nil. An example is casting from a superclass to a subclass.</p>

<p>class SomeSuperType {}</p>

<p>class SomeType: SomeSuperType {}</p>

<p>class SomeChildType: SomeType {}</p>

<p>let s = SomeType()</p>

<p>let x = s as SomeSuperType // known to succeed; type is SomeSuperType</p>

<p>let y = s as Int // known to fail; compile-time error</p>

<p>let z = s as SomeChildType // might fail at runtime; type is SomeChildType?</p>

<p>
  Specifying a type with as provides the same information to the compiler as a type annotation, as shown in the following example:</p>

<p>let y1 = x as SomeType // Type information from 'as'</p>

<p>let y2: SomeType = x // Type information from an annotation</p>

<p>
  The is operator checks at runtime to see whether the <emphasis>expression</emphasis> is of the specified <emphasis>type</emphasis>. If so, it returns true; otherwise, it returns false.</p>

<p>
  The check must not be known to be true or false at compile time. The following are invalid:</p>

<p>"hello" is String</p>

<p>"hello" is Int</p>

<p>
  For more information about type casting and to see more examples that use the type-casting operators, see Type Casting.</p>

<p>
  Grammar of a type-casting operator</p>

<p>


  type-casting-operator


  →

is­type­

as­?­<sub>opt</sub>­type­








Primary Expressions</p>

<p>
<emphasis>Primary expressions</emphasis> are the most basic kind of expression. They can be used as expressions on their own, and they can be combined with other tokens to make prefix expressions, binary expressions, and postfix expressions.</p>

<p>
  Grammar of a primary expression</p>

<p>


  primary-expression


  →
identifier­generic-argument-clause­<sub>opt</sub>­</p>

<p>


  primary-expression


  →
literal-expression­</p>

<p>


  primary-expression


  →
self-expression­</p>

<p>


  primary-expression


  →
superclass-expression­</p>

<p>


  primary-expression


  →
closure-expression­</p>

<p>


  primary-expression


  →
parenthesized-expression­</p>

<p>


  primary-expression


  →
implicit-member-expression­</p>

<p>


  primary-expression


  →
wildcard-expression­





Literal Expression</p>

<p>
  A <emphasis>literal expression</emphasis> consists of either an ordinary literal (such as a string or a number), an array or dictionary literal, or one of the following special literals:</p>

<p>




<strong></strong></p>

<p><strong>
  Literal
</strong>
<strong></strong></p>

<p><strong>
  Type
</strong>
<strong></strong></p>

<p><strong>
  Value
</strong></p>

<p>
__FILE__</p>

<p>
  String</p>

<p>
  The name of the file in which it appears.</p>

<p>
__LINE__</p>

<p>
  Int</p>

<p>
  The line number on which it appears.</p>

<p>
__COLUMN__</p>

<p>
  Int</p>

<p>
  The column number in which it begins.</p>

<p>
__FUNCTION__</p>

<p>
  String</p>

<p>
  The name of the declaration in which it appears.</p>

<p>
  Inside a function, the value of __FUNCTION__ is the name of that function, inside a method it is the name of that method, inside a property getter or setter it is the name of that property, inside special members like init or subscript it is the name of that keyword, and at the top level of a file it is the name of the current module.</p>

<p>
  An <emphasis>array literal</emphasis> is an ordered collection of values. It has the following form:</p>

<p>[<emphasis>value 1</emphasis>, <emphasis>value 2</emphasis>, <emphasis>...</emphasis>]</p>

<p>
  The last expression in the array can be followed by an optional comma. An empty array literal is written as an empty pair of brackets ([]). The value of an array literal has type T[], where T is the type of the expressions inside it. If there are expressions of multiple types, T is their closest common supertype.</p>

<p>
  A <emphasis>dictionary literal</emphasis> is an unordered collection of key-value pairs. It has the following form:</p>

<p>[<emphasis>key 1</emphasis>: <emphasis>value 1</emphasis>, <emphasis>key 2</emphasis>: <emphasis>value 2</emphasis>, <emphasis>...</emphasis>]</p>

<p>
  The last expression in the dictionary can be followed by an optional comma. An empty dictionary literal is written as a colon inside a pair of brackets ([:]) to distinguish it from an empty array literal. The value of a dictionary literal has type Dictionary&lt;KeyType, ValueType&gt;, where KeyType is the type of its key expressions and ValueType is the type of its value expressions. If there are expressions of multiple types, KeyType and ValueType are the closest common supertype for their respective values.</p>

<p>
  Grammar of a literal expression</p>

<p>


  literal-expression


  →
literal­</p>

<p>


  literal-expression


  →

array-literal­

dictionary-literal­</p>

<p>


  literal-expression


  →

__FILE__­

__LINE__­

__COLUMN__­

__FUNCTION__­</p>

<p>


  array-literal


  →
[­array-literal-items­<sub>opt</sub>­]­</p>

<p>


  array-literal-items


  →

array-literal-item­,­<sub>opt</sub>­

array-literal-items­</p>

<p>


  array-literal-item


  →
expression­</p>

<p>


  dictionary-literal


  →

[­dictionary-literal-items­]­

[­:­]­</p>

<p>


  dictionary-literal-items


  →

dictionary-literal-item­,­<sub>opt</sub>­

dictionary-literal-items­</p>

<p>


  dictionary-literal-item


  →
expression­






Self Expression</p>

<p>
  The self expression is an explicit reference to the current type or instance of the type in which it occurs. It has the following forms:</p>

<p>self</p>

<p>self.<emphasis>member name</emphasis></p>

<p>self[<emphasis>subscript index</emphasis>]</p>

<p>self(<emphasis>initializer arguments</emphasis>)</p>

<p>self.init(<emphasis>initializer arguments</emphasis>)</p>

<p>
  In an initializer, subscript, or instance method, self refers to the current instance of the type in which it occurs. In a static or class method, self refers to the current type in which it occurs.</p>

<p>
  The self expression is used to specify scope when accessing members, providing disambiguation when there is another variable of the same name in scope, such as a function parameter. For example:</p>

<p>class SomeClass {</p>

<p> var greeting: String</p>

<p> init(greeting: String) {</p>

<p> self.greeting = greeting</p>

<p>    }</p>

<p>}</p>

<p>
  In a mutating method of value type, you can assign a new instance of that value type to self. For example:</p>

<p>struct Point {</p>

<p> var x = 0.0, y = 0.0</p>

<p> mutating func moveByX(deltaX: Double, y deltaY: Double) {</p>

<p> self = Point(x: x + deltaX, y: y + deltaY)</p>

<p>    }</p>

<p>}</p>

<p>
  Grammar of a self expression</p>

<p>


  self-expression


  →
self­</p>

<p>


  self-expression


  →
self­.­identifier­</p>

<p>


  self-expression


  →
self­[­expression­]­</p>

<p>


  self-expression


  →
self­.­init­






Superclass Expression</p>

<p>
  A <emphasis>superclass expression</emphasis> lets a class interact with its superclass. It has one of the following forms:</p>

<p>super.<emphasis>member name</emphasis></p>

<p>super[<emphasis>subscript index</emphasis>]</p>

<p>super.init(<emphasis>initializer arguments</emphasis>)</p>

<p>
  The first form is used to access a member of the superclass. The second form is used to access the superclass’s subscript implementation. The third form is used to access an initializer of the superclass.</p>

<p>
  Subclasses can use a superclass expression in their implementation of members, subscripting, and initializers to make use of the implementation in their superclass.</p>

<p>
  Grammar of a superclass expression</p>

<p>


  superclass-expression


  →

superclass-method-expression­

superclass-subscript-expression­

superclass-initializer-expression­</p>

<p>


  superclass-method-expression


  →
super­.­identifier­</p>

<p>


  superclass-subscript-expression


  →
super­[­expression­]­</p>

<p>


  superclass-initializer-expression


  →
super­.­init­






Closure Expression</p>

<p>
  A <emphasis>closure expression</emphasis> creates a closure, also known as a <emphasis>lambda</emphasis> or an <emphasis>anonymous function</emphasis> in other programming languages. Like function declarations, closures contain statements which they execute, and they capture values from their enclosing scope. It has the following form:</p>

<p>{ (<emphasis>parameters</emphasis>) -&gt; <emphasis>return type</emphasis> in</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The <emphasis>parameters</emphasis> have the same form as the parameters in a function declaration, as described in Function Declaration.</p>

<p>
  There are several special forms that allow closures to be written more concisely:</p>

<p>
  A closure can omit the types of its parameters, its return type, or both. If you omit the parameter names and both types, omit the in keyword before the statements. If the omitted types can’t be inferred, a compile-time error is raised.</p>

<p>
  A closure may omit names for its parameters. Its parameters are then implicitly named $ followed by their position: $0, $1, $2, and so on.</p>

<p>
  A closure that consists of only a single expression is understood to return the value of that expression. The contents of this expression is also considered when performing type inference on the surrounding expression.</p>

<p>
  The following closure expressions are equivalent:</p>

<p>myFunction {</p>

<p>    (x: Int, y: Int) -&gt; Int in</p>

<p> return x + y</p>

<p>}</p>

<p>myFunction {</p>

<p>    (x, y) in</p>

<p> return x + y</p>

<p>}</p>

<p>myFunction { return $0 + $1 }</p>

<p>myFunction { $0 + $1 }</p>

<p>
  For information about passing a closure as an argument to a function, see Function Call Expression.</p>

<p>
  A closure expression can explicitly specify the values that it captures from the surrounding scope using a <emphasis>capture list</emphasis>. A capture list is written as a comma separated list surrounded by square brackets, before the list of parameters. If you use a capture list, you must also use the in keyword, even if you omit the parameter names, parameter types, and return type.</p>

<p>
  Each entry in the capture list can be marked as weak or unowned to capture a weak or unowned reference to the value.</p>

<p>myFunction { print(self.title) }                    // strong capture</p>

<p>myFunction { [weak self] in print(self!.title) }    // weak capture</p>

<p>myFunction { [unowned self] in print(self.title) }  // unowned capture</p>

<p>
  You can also bind arbitrary expression to named values in the capture list. The expression is evaluated when the closure is formed, and captured with the specified strength. For example:</p>

<p>// Weak capture of "self.parent" as "parent"</p>

<p>myFunction { [weak parent = self.parent] in print(parent!.title) }</p>

<p>
  For more information and examples of closure expressions, see Closure Expressions.</p>

<p>
  Grammar of a closure expression</p>

<p>


  closure-expression


  →
{­statements­}­</p>

<p>


  closure-signature


  →
parameter-clause­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
identifier-list­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
parameter-clause­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
identifier-list­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
capture-list­in­</p>

<p>


  capture-list


  →
[­expression­]­</p>

<p>


  capture-specifier


  →

weak­

unowned­

unowned(safe)­

unowned(unsafe)­







Implicit Member Expression</p>

<p>
  An <emphasis>implicit member expression</emphasis> is an abbreviated way to access a member of a type, such as an enumeration case or a class method, in a context where type inference can determine the implied type. It has the following form:</p>

<p>.<emphasis>member name</emphasis></p>

<p>
  For example:</p>

<p>var x = MyEnumeration.SomeValue</p>

<p>x = .AnotherValue</p>

<p>
  Grammar of a implicit member expression</p>

<p>


  implicit-member-expression


  →
.­identifier­






Parenthesized Expression</p>

<p>
  A <emphasis>parenthesized expression</emphasis> consists of a comma-separated list of expressions surrounded by parentheses. Each expression can have an optional identifier before it, separated by a colon (:). It has the following form:</p>

<p>(<emphasis>identifier 1</emphasis>: <emphasis>expression 1</emphasis>, <emphasis>identifier 2</emphasis>: <emphasis>expression 2</emphasis>, <emphasis>...</emphasis>)</p>

<p>
  Use parenthesized expressions to create tuples and to pass arguments to a function call. If there is only one value inside the parenthesized expression, the type of the parenthesized expression is the type of that value. For example, the type of the parenthesized expression (1) is Int, not (Int).</p>

<p>
  Grammar of a parenthesized expression</p>

<p>


  parenthesized-expression


  →
(­expression-element-list­<sub>opt</sub>­)­</p>

<p>


  expression-element-list


  →

expression-element­

expression-element-list­</p>

<p>


  expression-element


  →

expression­

identifier­:­expression­







Wildcard Expression</p>

<p>
  A <emphasis>wildcard expression</emphasis> is used to explicitly ignore a value during an assignment. For example, in the following assignment 10 is assigned to x and 20 is ignored:</p>

<p>(x, _) = (10, 20)</p>

<p>// x is 10, 20 is ignored</p>

<p>
  Grammar of a wildcard expression</p>

<p>


  wildcard-expression


  →
_­







Postfix Expressions</p>

<p>
<emphasis>Postfix expressions</emphasis> are formed by applying a postfix operator or other postfix syntax to an expression. Syntactically, every primary expression is also a postfix expression.</p>

<p>
  The Swift standard library provides the following postfix operators:</p>

<p>
++ Increment</p>

<p>
-- Decrement</p>

<p>
  For information about the behavior of these operators, see Basic Operators and Advanced Operators.</p>

<p>
  Grammar of a postfix expression</p>

<p>


  postfix-expression


  →
primary-expression­</p>

<p>


  postfix-expression


  →
postfix-operator­</p>

<p>


  postfix-expression


  →
function-call-expression­</p>

<p>


  postfix-expression


  →
initializer-expression­</p>

<p>


  postfix-expression


  →
explicit-member-expression­</p>

<p>


  postfix-expression


  →
postfix-self-expression­</p>

<p>


  postfix-expression


  →
dynamic-type-expression­</p>

<p>


  postfix-expression


  →
subscript-expression­</p>

<p>


  postfix-expression


  →
forced-value-expression­</p>

<p>


  postfix-expression


  →
optional-chaining-expression­





Function Call Expression</p>

<p>
  A <emphasis>function call expression</emphasis> consists of a function name followed by a comma-separated list of the function’s arguments in parentheses. Function call expressions have the following form:</p>

<p><emphasis>function name</emphasis>(<emphasis>argument value 1</emphasis>, <emphasis>argument value 2</emphasis>)</p>

<p>
  The <emphasis>function name</emphasis> can be any expression whose value is of a function type.</p>

<p>
  If the function definition includes names for its parameters, the function call must include names before its argument values separated by a colon (:). This kind of function call expression has the following form:</p>

<p><emphasis>function name</emphasis>(<emphasis>argument name 1</emphasis>: <emphasis>argument value 1</emphasis>, <emphasis>argument name 2</emphasis>: <emphasis>argument value 2</emphasis>)</p>

<p>
  A function call expression can include a trailing closure in the form of a closure expression immediately after the closing parenthesis. The trailing closure is understood as an argument to the function, added after the last parenthesized argument. The following function calls are equivalent:</p>

<p>// someFunction takes an integer and a closure as its arguments</p>

<p>someFunction(x, {$0 == 13})</p>

<p>someFunction(x) {$0 == 13}</p>

<p>
  If the trailing closure is the function’s only argument, the parentheses can be omitted.</p>

<p>// someFunction takes a closure as its only argument</p>

<p>myData.someMethod() {$0 == 13}</p>

<p>myData.someMethod {$0 == 13}</p>

<p>
  Grammar of a function call expression</p>

<p>


  function-call-expression


  →
parenthesized-expression­</p>

<p>


  function-call-expression


  →
parenthesized-expression­<sub>opt</sub>­trailing-closure­</p>

<p>


  trailing-closure


  →
closure-expression­






Initializer Expression</p>

<p>
  An <emphasis>initializer expression</emphasis> provides access to a type’s initializer. It has the following form:</p>

<p><emphasis>expression</emphasis>.init(<emphasis>initializer arguments</emphasis>)</p>

<p>
  You use the initializer expression in a function call expression to initialize a new instance of a type. Unlike functions, an initializer can’t be used as a value. For example:</p>

<p>var x = SomeClass.someClassFunction // ok</p>

<p>var y = SomeClass.init // error</p>

<p>
  You also use an initializer expression to delegate to the initializer of a superclass.</p>

<p>class SomeSubClass: SomeSuperClass {</p>

<p> init() {</p>

<p> // subclass initialization goes here</p>

<p> super.init()</p>

<p>    }</p>

<p>}</p>

<p>
  Grammar of an initializer expression</p>

<p>


  initializer-expression


  →
postfix-expression­.­init­






Explicit Member Expression</p>

<p>
  A <emphasis>explicit member expression</emphasis> allows access to the members of a named type, a tuple, or a module. It consists of a period (.) between the item and the identifier of its member.</p>

<p><emphasis>expression</emphasis>.<emphasis>member name</emphasis></p>

<p>
  The members of a named type are named as part of the type’s declaration or extension. For example:</p>

<p>class SomeClass {</p>

<p> var someProperty = 42</p>

<p>}</p>

<p>let c = SomeClass()</p>

<p>let y = c.someProperty // Member access</p>

<p>
  The members of a tuple are implicitly named using integers in the order they appear, starting from zero. For example:</p>

<p>var t = (10, 20, 30)</p>

<p>t.0 = t.1</p>

<p>// Now t is (20, 20, 30)</p>

<p>
  The members of a module access the top-level declarations of that module.</p>

<p>
  Grammar of an explicit member expression</p>

<p>


  explicit-member-expression


  →
decimal-digit­</p>

<p>


  explicit-member-expression


  →
identifier­generic-argument-clause­<sub>opt</sub>­






Postfix Self Expression</p>

<p>
  A postfix self expression consists of an expression or the name of a type, immediately followed by .self. It has the following forms:</p>

<p><emphasis>expression</emphasis>.self</p>

<p><emphasis>type</emphasis>.self</p>

<p>
  The first form evaluates to the value of the <emphasis>expression</emphasis>. For example, x.self evaluates to x.</p>

<p>
  The second form evaluates to the value of the <emphasis>type</emphasis>. Use this form to access a type as a value. For example, because SomeClass.self evaluates to the SomeClass type itself, you can pass it to a function or method that accepts a type-level argument.</p>

<p>
  Grammar of a self expression</p>

<p>


  postfix-self-expression


  →
postfix-expression­.­self­






Dynamic Type Expression</p>

<p>
  A dynamicType expression consists of an expression, immediately followed by .dynamicType. It has the following form:</p>

<p><emphasis>expression</emphasis>.dynamicType</p>

<p>
  The <emphasis>expression</emphasis> can’t be the name of a type. The entire dynamicType expression evaluates to the value of the runtime type of the <emphasis>expression</emphasis>, as the following example shows:</p>

<p>class SomeBaseClass {</p>

<p> class func printClassName() {</p>

<p> println("SomeBaseClass")</p>

<p>    }</p>

<p>}</p>

<p>class SomeSubClass: SomeBaseClass {</p>

<p> override class func printClassName() {</p>

<p> println("SomeSubClass")</p>

<p>    }</p>

<p>}</p>

<p>let someInstance: SomeBaseClass = SomeSubClass()</p>

<p>// someInstance is of type SomeBaseClass at compile time, but</p>

<p>// someInstance is of type SomeSubClass at runtime</p>

<p>someInstance.dynamicType.printClassName()</p>

<p>// prints "SomeSubClass"</p>

<p>
  Grammar of a dynamic type expression</p>

<p>


  dynamic-type-expression


  →
postfix-expression­.­dynamicType­






Subscript Expression</p>

<p>
  A <emphasis>subscript expression</emphasis> provides subscript access using the getter and setter of the corresponding subscript declaration. It has the following form:</p>

<p><emphasis>expression</emphasis>[<emphasis>index expressions</emphasis>]</p>

<p>
  To evaluate the value of a subscript expression, the subscript getter for the <emphasis>expression</emphasis>’s type is called with the <emphasis>index expressions</emphasis> passed as the subscript parameters. To set its value, the subscript setter is called in the same way.</p>

<p>
  For information about subscript declarations, see Protocol Subscript Declaration.</p>

<p>
  Grammar of a subscript expression</p>

<p>


  subscript-expression


  →
expression-list­]­






Forced-Value Expression</p>

<p>
  A <emphasis>forced-value expression</emphasis> unwraps an optional value that you are certain is not nil. It has the following form:</p>

<p><emphasis>expression</emphasis>!</p>

<p>
  If the value of the <emphasis>expression</emphasis> is not nil, the optional value is unwrapped and returned with the corresponding nonoptional type. Otherwise, a runtime error is raised.</p>

<p>
  Grammar of a forced-value expression</p>

<p>


  forced-value-expression


  →
postfix-expression­!­






Optional-Chaining Expression</p>

<p>
  An <emphasis>optional-chaining expression</emphasis> provides a simplified syntax for using optional values in postfix expressions. It has the following form:</p>

<p><emphasis>expression</emphasis>?</p>

<p>
  On its own, the postfix ? operator simply returns the value of its argument as an optional.</p>

<p>
  Postfix expressions that contain an optional-chaining expression are evaluated in a special way. If the optional-chaining expression is nil, all of the other operations in the postfix expression are ignored and the entire postfix expression evaluates to nil. If the optional-chaining expression is not nil, the value of the optional-chaining expression is unwrapped and used to evaluate the rest of the postfix expression. In either case, the value of the postfix expression is still of an optional type.</p>

<p>
  If a postfix expression that contains an optional-chaining expression is nested inside other postfix expressions, only the outermost expression returns an optional type. In the example below, when c is not nil, its value is unwrapped and used to evaluate both .property and .performAction(), and the entire expression c?.property.performAction() has a value of an optional type.</p>

<p>var c: SomeClass?</p>

<p>var result: Bool? = c?.property.performAction()</p>

<p>
  The following example shows the behavior of the example above without using optional chaining.</p>

<p>if let unwrappedC = c {</p>

<p> result = unwrappedC.property.performAction()</p>

<p>}</p>

<p>
  Grammar of an optional-chaining expression</p>

<p>


  optional-chaining-expression


  →
postfix-expression­?­</p>

<p>
Statements</p>

<p>On This Page</p>

<p>

            Loop Statements</p>

<p>

            Branch Statements</p>

<p>

            Labeled Statement</p>

<p>

            Control Transfer Statements</p>

<p>
  In Swift, there are two kinds of statements: simple statements and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Control flow statements are used to control the flow of execution in a program. There are three types of control flow statements in Swift: loop statements, branch statements, and control transfer statements.</p>

<p>
  Loop statements allow a block of code to be executed repeatedly, branch statements allow a certain block of code to be executed only when certain conditions are met, and control transfer statements provide a way to alter the order in which code is executed. Each type of control flow statement is described in detail below.</p>

<p>
  A semicolon (;) can optionally appear after any statement and is used to separate multiple statements if they appear on the same line.</p>

<p>
  Grammar of a statement</p>

<p>


  statement


  →
expression­;­<sub>opt</sub>­</p>

<p>


  statement


  →
declaration­;­<sub>opt</sub>­</p>

<p>


  statement


  →
loop-statement­;­<sub>opt</sub>­</p>

<p>


  statement


  →
branch-statement­;­<sub>opt</sub>­</p>

<p>


  statement


  →
labeled-statement­</p>

<p>


  statement


  →
control-transfer-statement­;­<sub>opt</sub>­</p>

<p>


  statements


  →
statements­<sub>opt</sub>­






Loop Statements</p>

<p>
  Loop statements allow a block of code to be executed repeatedly, depending on the conditions specified in the loop. Swift has four loop statements: a for statement, a for-in statement, a while statement, and a do-while statement.</p>

<p>
  Control flow in a loop statement can be changed by a break statement and a continue statement and is discussed in Continue Statement below.</p>

<p>
  Grammar of a loop statement</p>

<p>


  loop-statement


  →
for-statement­</p>

<p>


  loop-statement


  →
for-in-statement­</p>

<p>


  loop-statement


  →
while-statement­</p>

<p>


  loop-statement


  →
do-while-statement­





For Statement</p>

<p>
  A for statement allows a block of code to be executed repeatedly while incrementing a counter, as long as a condition remains true.</p>

<p>
  A for statement has the following form:</p>

<p>for <emphasis>initialization</emphasis>; <emphasis>condition</emphasis>; <emphasis>increment</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The semicolons between the <emphasis>initialization</emphasis>, <emphasis>condition</emphasis>, and <emphasis>increment</emphasis> are required. The braces around the <emphasis>statements</emphasis> in the body of the loop are also required.</p>

<p>
  A for statement is executed as follows:</p>

<p>
  The <emphasis>initialization</emphasis> is evaluated only once. It is typically used to declare and initialize any variables that are needed for the remainder of the loop.</p>

<p>
  The <emphasis>condition</emphasis> expression is evaluated.</p>

<p>
  If true, the program executes the <emphasis>statements</emphasis>, and execution continues to step 3. If false, the program does not execute the <emphasis>statements</emphasis> or the <emphasis>increment</emphasis> expression, and the program is finished executing the for statement.</p>

<p>
  The <emphasis>increment</emphasis> expression is evaluated, and execution returns to step 2.</p>

<p>
  Variables defined within the <emphasis>initialization</emphasis> are valid only within the scope of the for statement itself.</p>

<p>
  The value of the <emphasis>condition</emphasis> expression must have a type that conforms to the LogicValue protocol.</p>

<p>
  Grammar of a for statement</p>

<p>


  for-statement


  →
for­expression­<sub>opt</sub>­;­expression­<sub>opt</sub>­code-block­</p>

<p>


  for-statement


  →
for­(­expression­<sub>opt</sub>­;­expression­<sub>opt</sub>­)­code-block­</p>

<p>


  for-init


  →

variable-declaration­

expression-list­







For-In Statement</p>

<p>
  A for-in statement allows a block of code to be executed once for each item in a collection (or any type) that conforms to the Sequence protocol.</p>

<p>
  A for-in statement has the following form:</p>

<p>for <emphasis>item</emphasis> in <emphasis>collection</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The generate method is called on the <emphasis>collection</emphasis> expression to obtain a value of a generator type—that is, a type that conforms to the Generator protocol. The program begins executing a loop by calling the next method on the stream. If the value returned is not None, it is assigned to the <emphasis>item</emphasis> pattern, the program executes the <emphasis>statements</emphasis>, and then continues execution at the beginning of the loop. Otherwise, the program does not perform assignment or execute the <emphasis>statements</emphasis>, and it is finished executing the for-in statement.</p>

<p>
  Grammar of a for-in statement</p>

<p>


  for-in-statement


  →
for­pattern­in­expression­code-block­






While Statement</p>

<p>
  A while statement allows a block of code to be executed repeatedly, as long as a condition remains true.</p>

<p>
  A while statement has the following form:</p>

<p>while <emphasis>condition</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  A while statement is executed as follows:</p>

<p>
  The <emphasis>condition</emphasis> is evaluated.</p>

<p>
  If true, execution continues to step 2. If false, the program is finished executing the while statement.</p>

<p>
  The program executes the <emphasis>statements</emphasis>, and execution returns to step 1.</p>

<p>
  Because the value of the <emphasis>condition</emphasis> is evaluated before the <emphasis>statements</emphasis> are executed, the <emphasis>statements</emphasis> in a while statement can be executed zero or more times.</p>

<p>
  The value of the <emphasis>condition</emphasis> must have a type that conforms to the LogicValue protocol. The condition can also be an optional binding declaration, as discussed in Optional Binding.</p>

<p>
  Grammar of a while statement</p>

<p>


  while-statement


  →
while­code-block­</p>

<p>


  while-condition


  →

expression­

declaration­







Do-While Statement</p>

<p>
  A do-while statement allows a block of code to be executed one or more times, as long as a condition remains true.</p>

<p>
  A do-while statement has the following form:</p>

<p>do {</p>

<p>    <emphasis>statements</emphasis></p>

<p>} while <emphasis>condition</emphasis></p>

<p>
  A do-while statement is executed as follows:</p>

<p>
  The program executes the <emphasis>statements</emphasis>, and execution continues to step 2.</p>

<p>
  The <emphasis>condition</emphasis> is evaluated.</p>

<p>
  If true, execution returns to step 1. If false, the program is finished executing the do-while statement.</p>

<p>
  Because the value of the <emphasis>condition</emphasis> is evaluated after the <emphasis>statements</emphasis> are executed, the <emphasis>statements</emphasis> in a do-while statement are executed at least once.</p>

<p>
  The value of the <emphasis>condition</emphasis> must have a type that conforms to the LogicValue protocol. The condition can also be an optional binding declaration, as discussed in Optional Binding.</p>

<p>
  Grammar of a do-while statement</p>

<p>


  do-while-statement


  →
do­code-block­while­while-condition­







Branch Statements</p>

<p>
  Branch statements allow the program to execute certain parts of code depending on the value of one or more conditions. The values of the conditions specified in a branch statement control how the program branches and, therefore, what block of code is executed. Swift has two branch statements: an if statement and a switch statement.</p>

<p>
  Control flow in a switch statement can be changed by a break statement and is discussed in Break Statement below.</p>

<p>
  Grammar of a branch statement</p>

<p>


  branch-statement


  →
if-statement­</p>

<p>


  branch-statement


  →
switch-statement­





If Statement</p>

<p>
  An if statement is used for executing code based on the evaluation of one or more conditions.</p>

<p>
  There are two basic forms of an if statement. In each form, the opening and closing braces are required.</p>

<p>
  The first form allows code to be executed only when a condition is true and has the following form:</p>

<p>if <emphasis>condition</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The second form of an if statement provides an additional <emphasis>else clause</emphasis> (introduced by the else keyword) and is used for executing one part of code when the condition is true and another part code when the same condition is false. When a single else clause is present, an if statement has the following form:</p>

<p>if <emphasis>condition</emphasis> {</p>

<p>    <emphasis>statements to execute if condition is true</emphasis></p>

<p>} else {</p>

<p>    <emphasis>statements to execute if condition is false</emphasis></p>

<p>}</p>

<p>
  The else clause of an if statement can contain another if statement to test more than one condition. An if statement chained together in this way has the following form:</p>

<p>if <emphasis>condition 1</emphasis> {</p>

<p>    <emphasis>statements to execute if condition 1 is true</emphasis></p>

<p>} else if <emphasis>condition 2</emphasis> {</p>

<p>    <emphasis>statements to execute if condition 2 is true</emphasis></p>

<p>} else {</p>

<p>    <emphasis>statements to execute if both conditions are false</emphasis></p>

<p>}</p>

<p>
  The value of any condition in an if statement must have a type that conforms to the LogicValue protocol. The condition can also be an optional binding declaration, as discussed in Optional Binding.</p>

<p>
  Grammar of an if statement</p>

<p>


  if-statement


  →
if­code-block­else-clause­<sub>opt</sub>­</p>

<p>


  if-condition


  →

expression­

declaration­</p>

<p>


  else-clause


  →

else­code-block­

else­if-statement­







Switch Statement</p>

<p>
  A switch statement allows certain blocks of code to be executed depending on the value of a control expression.</p>

<p>
  A switch statement has the following form:</p>

<p>switch <emphasis>control expression</emphasis> {</p>

<p>case <emphasis>pattern 1</emphasis>:</p>

<p>    <emphasis>statements</emphasis></p>

<p>case <emphasis>pattern 2</emphasis> where <emphasis>condition</emphasis>:</p>

<p>    <emphasis>statements</emphasis></p>

<p>case <emphasis>pattern 3</emphasis> where <emphasis>condition</emphasis>,</p>

<p><emphasis>pattern 4</emphasis> where <emphasis>condition</emphasis>:</p>

<p>    <emphasis>statements</emphasis></p>

<p>default:</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The <emphasis>control expression</emphasis> of the switch statement is evaluated and then compared with the patterns specified in each case. If a match is found, the program executes the <emphasis>statements</emphasis> listed within the scope of that case. The scope of each case can’t be empty. As a result, you must include at least one statement following the colon (:) of each case label. Use a single break statement if you don’t intend to execute any code in the body of a matched case.</p>

<p>
  The values of expressions your code can branch on is very flexible. For instance, in addition to the values of scalar types, such as integers and characters, your code can branch on the values of any type, including floating-point numbers, strings, tuples, instances of custom classes, and optionals. The value of the <emphasis>control expression</emphasis> can even be matched to the value of a case in an enumeration and checked for inclusion in a specified range of values. For examples of how to use these various types of values in switch statements, see Switch in the Control Flow chapter.</p>

<p>
  A switch case can optionally contain a guard expression after each pattern. A <emphasis>guard expression</emphasis> is introduced by the keyword where followed by an expression, and is used to provide an additional condition before a pattern in a case is considered matched to the <emphasis>control expression</emphasis>. If a guard expression is present, the <emphasis>statements</emphasis> within the relevant case are executed only if the value of the <emphasis>control expression</emphasis> matches one of the patterns of the case and the guard expression evaluates to true. For instance, a <emphasis>control expression</emphasis> matches the case in the example below only if it is a tuple that contains two elements of the same value, such as (1, 1).</p>

<p>case let (x, y) where x == y:</p>

<p>
  As the above example shows, patterns in a case can also bind constants using the keyword let (they can also bind variables using the keyword var). These constants (or variables) can then be referenced in a corresponding guard expression and throughout the rest of the code within the scope of the case. That said, if the case contains multiple patterns that match the control expression, none of those patterns can contain constant or variable bindings.</p>

<p>
  A switch statement can also include a default case, introduced by the keyword default. The code within a default case is executed only if no other cases match the control expression. A switch statement can include only one default case, which must appear at the end of the switch statement.</p>

<p>
  Although the actual execution order of pattern-matching operations, and in particular the evaluation order of patterns in cases, is unspecified, pattern matching in a switch statement behaves as if the evaluation is performed in source order—that is, the order in which they appear in source code. As a result, if multiple cases contain patterns that evaluate to the same value, and thus can match the value of the control expression, the program executes only the code within the first matching case in source order.



Switch Statements Must Be Exhaustive</p>

<p>
  In Swift, every possible value of the control expression’s type must match the value of at least one pattern of a case. When this simply isn’t feasible (for instance, when the control expression’s type is Int), you can include a default case to satisfy the requirement.




Execution Does Not Fall Through Cases Implicitly</p>

<p>
  After the code within a matched case has finished executing, the program exits from the switch statement. Program execution does not continue or “fall through” to the next case or default case. That said, if you want execution to continue from one case to the next, explicitly include a fallthrough statement, which simply consists of the keyword fallthrough, in the case from which you want execution to continue. For more information about the fallthrough statement, see Fallthrough Statement below.</p>

<p>
  Grammar of a switch statement</p>

<p>


  switch-statement


  →
switch­expression­{­switch-cases­<sub>opt</sub>­}­</p>

<p>


  switch-cases


  →
switch-cases­<sub>opt</sub>­</p>

<p>


  switch-case


  →

statements­

statements­</p>

<p>


  switch-case


  →

case-label­;­

default-label­;­</p>

<p>


  case-label


  →
case­case-item-list­:­</p>

<p>


  case-item-list


  →

pattern­guard-clause­<sub>opt</sub>­

pattern­case-item-list­</p>

<p>


  default-label


  →
default­:­</p>

<p>


  guard-clause


  →
where­guard-expression­</p>

<p>


  guard-expression


  →
expression­








Labeled Statement</p>

<p>
  You can prefix a loop statement or a switch statement with a <emphasis>statement label</emphasis>, which consists of the name of the label followed immediately by a colon (:). Use statement labels with break and continue statements to be explicit about how you want to change control flow in a loop statement or a switch statement, as discussed in Continue Statement below.</p>

<p>
  The scope of a labeled statement is the entire statement following the statement label. You can nest labeled statements, but the name of each statement label must be unique.</p>

<p>
  For more information and to see examples of how to use statement labels, see Labeled Statements in the Control Flow chapter.</p>

<p>
  Grammar of a labeled statement</p>

<p>


  labeled-statement


  →

loop-statement­

switch-statement­</p>

<p>


  statement-label


  →
label-name­:­</p>

<p>


  label-name


  →
identifier­






Control Transfer Statements</p>

<p>
  Control transfer statements can change the order in which code in your program is executed by unconditionally transferring program control from one piece of code to another. Swift has four control transfer statements: a break statement, a continue statement, a fallthrough statement, and a return statement.</p>

<p>
  Grammar of a control transfer statement</p>

<p>


  control-transfer-statement


  →
break-statement­</p>

<p>


  control-transfer-statement


  →
continue-statement­</p>

<p>


  control-transfer-statement


  →
fallthrough-statement­</p>

<p>


  control-transfer-statement


  →
return-statement­





Break Statement</p>

<p>
  A break statement ends program execution of a loop or a switch statement. A break statement can consist of only the keyword break, or it can consist of the keyword break followed by the name of a statement label, as shown below.</p>

<p>break</p>

<p>break <emphasis>label name</emphasis></p>

<p>
  When a break statement is followed by the name of a statement label, it ends program execution of the loop or switch statement named by that label.</p>

<p>
  When a break statement is not followed by the name of a statement label, it ends program execution of the switch statement or the innermost enclosing loop statement in which it occurs.</p>

<p>
  In both cases, program control is then transferred to the first line of code following the enclosing loop or switch statement, if any.</p>

<p>
  For examples of how to use a break statement, see Break and Labeled Statements in the Control Flow chapter.</p>

<p>
  Grammar of a break statement</p>

<p>


  break-statement


  →
break­label-name­<sub>opt</sub>­






Continue Statement</p>

<p>
  A continue statement ends program execution of the current iteration of a loop statement but does not stop execution of the loop statement. A continue statement can consist of only the keyword continue, or it can consist of the keyword continue followed by the name of a statement label, as shown below.</p>

<p>continue</p>

<p>continue <emphasis>label name</emphasis></p>

<p>
  When a continue statement is followed by the name of a statement label, it ends program execution of the current iteration of the loop statement named by that label.</p>

<p>
  When a continue statement is not followed by the name of a statement label, it ends program execution of the current iteration of the innermost enclosing loop statement in which it occurs.</p>

<p>
  In both cases, program control is then transferred to the condition of the enclosing loop statement.</p>

<p>
  In a for statement, the increment expression is still evaluated after the continue statement is executed, because the increment expression is evaluated after the execution of the loop’s body.</p>

<p>
  For examples of how to use a continue statement, see Continue and Labeled Statements in the Control Flow chapter.</p>

<p>
  Grammar of a continue statement</p>

<p>


  continue-statement


  →
continue­label-name­<sub>opt</sub>­






Fallthrough Statement</p>

<p>
  A fallthrough statement consists of the fallthrough keyword and occurs only in a case block of a switch statement. A fallthrough statement causes program execution to continue from one case in a switch statement to the next case. Program execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.</p>

<p>
  A fallthrough statement can appear anywhere inside a switch statement, not just as the last statement of a case block, but it can’t be used in the final case block. It also cannot transfer control into a case block whose pattern contains value binding patterns.</p>

<p>
  For an example of how to use a fallthrough statement in a switch statement, see Control Transfer Statements in the Control Flow chapter.</p>

<p>
  Grammar of a fallthrough statement</p>

<p>


  fallthrough-statement


  →
fallthrough­






Return Statement</p>

<p>
  A return statement occurs only in the body of a function or method definition and causes program execution to return to the calling function or method. Program execution continues at the point immediately following the function or method call.</p>

<p>
  A return statement can consist of only the keyword return, or it can consist of the keyword return followed by an expression, as shown below.</p>

<p>return</p>

<p>return <emphasis>expression</emphasis></p>

<p>
  When a return statement is followed by an expression, the value of the expression is returned to the calling function or method. If the value of the expression does not match the value of the return type declared in the function or method declaration, the expression’s value is converted to the return type before it is returned to the calling function or method.</p>

<p>
  When a return statement is not followed by an expression, it can be used only to return from a function or method that does not return a value (that is, when the return type of the function or method is Void or ()).</p>

<p>
  Grammar of a return statement</p>

<p>


  return-statement


  →
return­expression­<sub>opt</sub>­</p>

<p>
Declarations</p>

<p>On This Page</p>

<p>

            Module Scope</p>

<p>

            Code Blocks</p>

<p>

            Import Declaration</p>

<p>

            Constant Declaration</p>

<p>

            Variable Declaration</p>

<p>

            Type Alias Declaration</p>

<p>

            Function Declaration</p>

<p>

            Enumeration Declaration</p>

<p>

            Structure Declaration</p>

<p>

            Class Declaration</p>

<p>

            Protocol Declaration</p>

<p>

            Initializer Declaration</p>

<p>

            Deinitializer Declaration</p>

<p>

            Extension Declaration</p>

<p>

            Subscript Declaration</p>

<p>

            Operator Declaration</p>

<p>
  A <emphasis>declaration</emphasis> introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, variables and constants, and to define new, named enumeration, structure, class, and protocol types. You can also use a declaration to extend the the behavior of an existing named type and to import symbols into your program that are declared elsewhere.</p>

<p>
  In Swift, most declarations are also definitions in the sense that they are implemented or initialized at the same time they are declared. That said, because protocols don’t implement their members, most protocol members are declarations only. For convenience and because the distinction isn’t that important in Swift, the term <emphasis>declaration</emphasis> covers both declarations and definitions.</p>

<p>
  Grammar of a declaration</p>

<p>


  declaration


  →
import-declaration­</p>

<p>


  declaration


  →
constant-declaration­</p>

<p>


  declaration


  →
variable-declaration­</p>

<p>


  declaration


  →
typealias-declaration­</p>

<p>


  declaration


  →
function-declaration­</p>

<p>


  declaration


  →
enum-declaration­</p>

<p>


  declaration


  →
struct-declaration­</p>

<p>


  declaration


  →
class-declaration­</p>

<p>


  declaration


  →
protocol-declaration­</p>

<p>


  declaration


  →
initializer-declaration­</p>

<p>


  declaration


  →
deinitializer-declaration­</p>

<p>


  declaration


  →
extension-declaration­</p>

<p>


  declaration


  →
subscript-declaration­</p>

<p>


  declaration


  →
operator-declaration­</p>

<p>


  declarations


  →
declarations­<sub>opt</sub>­</p>

<p>


  declaration-specifiers


  →
declaration-specifiers­<sub>opt</sub>­</p>

<p>


  declaration-specifier


  →

class­

mutating­

nonmutating­

override­

static­

unowned­

unowned(safe)­

unowned(unsafe)­

weak­







Module Scope</p>

<p>
  The module scope defines the code that’s visible to other code in Swift source files that are part of the same module. The top-level code in a Swift source file consists of zero or more statements, declarations, and expressions. Variables, constants, and other named declarations that are declared at the top-level of a source file are visible to code in every source file that is part of the same module.</p>

<p>
  Grammar of a top-level declaration</p>

<p>


  top-level-declaration


  →
statements­<sub>opt</sub>­






Code Blocks</p>

<p>
  A <emphasis>code block</emphasis> is used by a variety of declarations and control structures to group statements together. It has the following form:</p>

<p>{</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The <emphasis>statements</emphasis> inside a code block include declarations, expressions, and other kinds of statements and are executed in order of their appearance in source code.</p>

<p>
  Grammar of a code block</p>

<p>


  code-block


  →
{­statements­<sub>opt</sub>­}­






Import Declaration</p>

<p>
  An <emphasis>import declaration</emphasis> lets you access symbols that are declared outside the current file. The basic form imports the entire module; it consists of the import keyword followed by a module name:</p>

<p>import <emphasis>module</emphasis></p>

<p>
  Providing more detail limits which symbols are imported—you can specify a specific submodule or a specific declaration within a module or submodule. When this detailed form is used, only the imported symbol (and not the module that declares it) is made available in the current scope.</p>

<p>import <emphasis>import kind</emphasis> <emphasis>module</emphasis>.<emphasis>symbol name</emphasis></p>

<p>import <emphasis>module</emphasis>.<emphasis>submodule</emphasis></p>

<p>
  Grammar of an import declaration</p>

<p>


  import-declaration


  →
attributes­<sub>opt</sub>­import­import-path­</p>

<p>


  import-kind


  →

typealias­

struct­

class­

enum­

protocol­

var­

func­</p>

<p>


  import-path


  →

import-path-identifier­

import-path­</p>

<p>


  import-path-identifier


  →

identifier­

operator­







Constant Declaration</p>

<p>
  A <emphasis>constant declaration</emphasis> introduces a constant named value into your program. Constant declarations are declared using the keyword let and have the following form:</p>

<p>let <emphasis>constant name</emphasis>: <emphasis>type</emphasis> = <emphasis>expression</emphasis></p>

<p>
  A constant declaration defines an immutable binding between the <emphasis>constant name</emphasis> and the value of the initializer <emphasis>expression</emphasis>; after the value of a constant is set, it cannot be changed. That said, if a constant is initialized with a class object, the object itself can change, but the binding between the constant name and the object it refers to can’t.</p>

<p>
  When a constant is declared at global scope, it must be initialized with a value. When a constant declaration occurs in the context of a class or structure declaration, it is considered a <emphasis>constant property</emphasis>. Constant declarations are not computed properties and therefore do not have getters or setters.</p>

<p>
  If the <emphasis>constant name</emphasis> of a constant declaration is a tuple pattern, the name of each item in the tuple is bound to the corresponding value in the initializer <emphasis>expression</emphasis>.</p>

<p>let (firstNumber, secondNumber) = (10, 42)</p>

<p>
  In this example, firstNumber is a named constant for the value 10, and secondNumber is a named constant for the value 42. Both constants can now be used independently:</p>

<p>println("The first number is \(firstNumber).")</p>

<p>// prints "The first number is 10."</p>

<p>println("The second number is \(secondNumber).")</p>

<p>// prints "The second number is 42."</p>

<p>
  The type annotation (: <emphasis>type</emphasis>) is optional in a constant declaration when the type of the <emphasis>constant name</emphasis> can be inferred, as described in Type Inference.</p>

<p>
  To declare a static constant property, mark the declaration with the static keyword. Static properties are discussed in Type Properties.</p>

<p>
  For more information about constants and for guidance about when to use them, see Constants and Variables and Stored Properties.</p>

<p>
  Grammar of a constant declaration</p>

<p>


  constant-declaration


  →
attributes­<sub>opt</sub>­pattern-initializer-list­</p>

<p>


  pattern-initializer-list


  →

pattern-initializer­

pattern-initializer-list­</p>

<p>


  pattern-initializer


  →
pattern­initializer­<sub>opt</sub>­</p>

<p>


  initializer


  →
=­expression­






Variable Declaration</p>

<p>
  A <emphasis>variable declaration</emphasis> introduces a variable named value into your program and is declared using the keyword var.</p>

<p>
  Variable declarations have several forms that declare different kinds of named, mutable values, including stored and computed variables and properties, stored variable and property observers, and static variable properties. The appropriate form to use depends on the scope at which the variable is declared and the kind of variable you intend to declare.</p><empty-line /><p>Note</p>

<p>You can also declare properties in the context of a protocol declaration, as described in Protocol Property Declaration.</p>

<p>
  You can override a property in a subclass by prefixing the subclass’s property declaration with the override keyword, as described in Overriding.



Stored Variables and Stored Variable Properties</p>

<p>
  The following form declares a stored variable or stored variable property:</p>

<p>var <emphasis>variable name</emphasis>: <emphasis>type</emphasis> = <emphasis>expression</emphasis></p>

<p>
  You define this form of a variable declaration at global scope, the local scope of a function, or in the context of a class or structure declaration. When a variable declaration of this form is declared at global scope or the local scope of a function, it is referred to as a <emphasis>stored variable</emphasis>. When it is declared in the context of a class or structure declaration, it is referred to as a <emphasis>stored variable property</emphasis>.</p>

<p>
  The initializer <emphasis>expression</emphasis> can’t be present in a protocol declaration, but in all other contexts, the initializer <emphasis>expression</emphasis> is optional. That said, if no initializer <emphasis>expression</emphasis> is present, the variable declaration must include an explicit type annotation (: <emphasis>type</emphasis>).</p>

<p>
  As with constant declarations, if the <emphasis>variable name</emphasis> is a tuple pattern, the name of each item in the tuple is bound to the corresponding value in the initializer <emphasis>expression</emphasis>.</p>

<p>
  As their names suggest, the value of a stored variable or a stored variable property is stored in memory.




Computed Variables and Computed Properties</p>

<p>
  The following form declares a computed variable or computed property:</p>

<p>var <emphasis>variable name</emphasis>: <emphasis>type</emphasis> {</p>

<p>get {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>set(<emphasis>setter name</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>}</p>

<p>
  You define this form of a variable declaration at global scope, the local scope of a function, or in the context of a class, structure, enumeration, or extension declaration. When a variable declaration of this form is declared at global scope or the local scope of a function, it is referred to as a <emphasis>computed variable</emphasis>. When it is declared in the context of a class, structure, or extension declaration, it is referred to as a <emphasis>computed property</emphasis>.</p>

<p>
  The getter is used to read the value, and the setter is used to write the value. The setter clause is optional, and when only a getter is needed, you can omit both clauses and simply return the requested value directly, as described in Read-Only Computed Properties. But if you provide a setter clause, you must also provide a getter clause.</p>

<p>
  The <emphasis>setter name</emphasis> and enclosing parentheses is optional. If you provide a setter name, it is used as the name of the parameter to the setter. If you do not provide a setter name, the default parameter name to the setter is newValue, as described in Shorthand Setter Declaration.</p>

<p>
  Unlike stored named values and stored variable properties, the value of a computed named value or a computed property is not stored in memory.</p>

<p>
  For more information and to see examples of computed properties, see Computed Properties.




Stored Variable Observers and Property Observers</p>

<p>
  You can also declare a stored variable or property with willSet and didSet observers. A stored variable or property declared with observers has the following form:</p>

<p>var <emphasis>variable name</emphasis>: <emphasis>type</emphasis> = <emphasis>expression</emphasis> {</p>

<p>willSet(<emphasis>setter name</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>didSet(<emphasis>setter name</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>}</p>

<p>
  You define this form of a variable declaration at global scope, the local scope of a function, or in the context of a class or structure declaration. When a variable declaration of this form is declared at global scope or the local scope of a function, the observers are referred to as <emphasis>stored variable observers</emphasis>. When it is declared in the context of a class or structure declaration, the observers are referred to as <emphasis>property observers</emphasis>.</p>

<p>
  You can add property observers to any stored property. You can also add property observers to any inherited property (whether stored or computed) by overriding the property within a subclass, as described in Overriding Property Observers.</p>

<p>
  The initializer <emphasis>expression</emphasis> is optional in the context of a class or structure declaration, but required elsewhere. The type annotation is required in all variable declarations that include observers, regardless of the context in which they are declared.</p>

<p>
  The willSet and didSet observers provide a way to observe (and to respond appropriately) when the value of a variable or property is being set. The observers are not called when the variable or property is first initialized. Instead, they are called only when the value is set outside of an initialization context.</p>

<p>
  A willSet observer is called just before the value of the variable or property is set. The new value is passed to the willSet observer as a constant, and therefore it can’t be changed in the implementation of the willSet clause. The didSet observer is called immediately after the new value is set. In contrast to the willSet observer, the old value of the variable or property is passed to the didSet observer in case you still need access to it. That said, if you assign a value to a variable or property within its own didSet observer clause, that new value that you assign will replace the one that was just set and passed to the willSet observer.</p>

<p>
  The <emphasis>setter name</emphasis> and enclosing parentheses in the willSet and didSet clauses are optional. If you provide setter names, they are used as the parameter names to the willSet and didSet observers. If you do not provide setter names, the default parameter name to the willSet observer is newValue and the default parameter name to the didSet observer is oldValue.</p>

<p>
  The didSet clause is optional when you provide a willSet clause. Likewise, the willSet clause is optional when you provide a didSet clause.</p>

<p>
  For more information and to see an example of how to use property observers, see Property Observers.




Class and Static Variable Properties</p>

<p>
  To declare a class computed property, mark the declaration with the class keyword. To declare a static variable property, mark the declaration with the static keyword. Class and static properties are discussed in Type Properties.</p>

<p>
  Grammar of a variable declaration</p>

<p>


  variable-declaration


  →
pattern-initializer-list­</p>

<p>


  variable-declaration


  →
variable-name­type-annotation­code-block­</p>

<p>


  variable-declaration


  →
variable-name­type-annotation­getter-setter-block­</p>

<p>


  variable-declaration


  →
variable-name­type-annotation­getter-setter-keyword-block­</p>

<p>


  variable-declaration


  →
variable-name­type-annotation­willSet-didSet-block­</p>

<p>


  variable-declaration-head


  →
attributes­<sub>opt</sub>­declaration-specifiers­<sub>opt</sub>­var­</p>

<p>


  variable-name


  →
identifier­</p>

<p>


  getter-setter-block


  →
{­setter-clause­<sub>opt</sub>­}­</p>

<p>


  getter-setter-block


  →
{­getter-clause­}­</p>

<p>


  getter-clause


  →
attributes­<sub>opt</sub>­get­code-block­</p>

<p>


  setter-clause


  →
attributes­<sub>opt</sub>­set­code-block­</p>

<p>


  setter-name


  →
(­identifier­)­</p>

<p>


  getter-setter-keyword-block


  →
{­setter-keyword-clause­<sub>opt</sub>­}­</p>

<p>


  getter-setter-keyword-block


  →
{­getter-keyword-clause­}­</p>

<p>


  getter-keyword-clause


  →
attributes­<sub>opt</sub>­get­</p>

<p>


  setter-keyword-clause


  →
attributes­<sub>opt</sub>­set­</p>

<p>


  willSet-didSet-block


  →
{­didSet-clause­<sub>opt</sub>­}­</p>

<p>


  willSet-didSet-block


  →
{­willSet-clause­}­</p>

<p>


  willSet-clause


  →
attributes­<sub>opt</sub>­willSet­code-block­</p>

<p>


  didSet-clause


  →
attributes­<sub>opt</sub>­didSet­code-block­







Type Alias Declaration</p>

<p>
  A <emphasis>type alias declaration</emphasis> introduces a named alias of an existing type into your program. Type alias declarations begin with the keyword typealias and have the following form:</p>

<p>typealias <emphasis>name</emphasis> = <emphasis>existing type</emphasis></p>

<p>
  After a type alias is declared, the aliased <emphasis>name</emphasis> can be used instead of the <emphasis>existing type</emphasis> everywhere in your program. The <emphasis>existing type</emphasis> can be a named type or a compound type. Type aliases do not create new types; they simply allow a name to refer to an existing type.</p>

<p>
  See also Protocol Associated Type Declaration.</p>

<p>
  Grammar of a type alias declaration</p>

<p>


  typealias-declaration


  →
typealias-assignment­</p>

<p>


  typealias-head


  →
typealias­typealias-name­</p>

<p>


  typealias-name


  →
identifier­</p>

<p>


  typealias-assignment


  →
=­type­






Function Declaration</p>

<p>
  A :newTerm`function declaration` introduces a function or method into your program. A function declared in the context of class, structure, enumeration, or protocol is referred to as a <emphasis>method</emphasis>. Function declarations are declared using the keyword func and have the following form:</p>

<p>func <emphasis>function name</emphasis>(<emphasis>parameters</emphasis>) -&gt; <emphasis>return type</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  If the function has a return type of Void, the return type can be omitted as follows:</p>

<p>func <emphasis>function name</emphasis>(<emphasis>parameters</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  The type of each parameter must be included—it can’t be inferred. By default, the parameters to a function are constants. Write var in front of a parameter’s name to make it a variable, scoping any changes made to the variable just to the function body, or write inout to make those changes also apply to the argument that was passed in the caller’s scope. For a discussion of in-out parameters, see In-Out Parameters.</p>

<p>
  Functions can return multiple values using a tuple type as the return type of the function.</p>

<p>
  A function definition can appear inside another function declaration. This kind of function is known as a <emphasis>nested function</emphasis>. For a discussion of nested functions, see Nested Functions.



Parameter Names</p>

<p>
  Function parameters are a comma separated list where each parameter has one of several forms. The order of arguments in a function call must match the order of parameters in the function’s declaration. The simplest entry in a parameter list has the following form:</p>

<p><emphasis>parameter name</emphasis>: <emphasis>parameter type</emphasis></p>

<p>
  For function parameters, the parameter name is used within the function body, but is not used when calling the function. For method parameters, the parameter name is used as within the function body, and is also used as a label for the argument when calling the method. The name of a method’s first parameter is used only within the function body, like the parameter of a function. For example:</p>

<p>func f(x: Int, y: String) -&gt; String {</p>

<p> return y + String(x)</p>

<p>}</p>

<p>f(7, "hello")  // x and y have no name</p>

<p>class C {</p>

<p> func f(x: Int, y: String) -&gt; String {</p>

<p> return y + String(x)</p>

<p>    }</p>

<p>}</p>

<p>let c = C()</p>

<p>c.f(7, y: "hello")  // x has no name, y has a name</p>

<p>
  You can override the default behavior for how parameter names are used with one of the following forms:</p>

<p><emphasis>external parameter name</emphasis> <emphasis>local parameter name</emphasis>: <emphasis>parameter type</emphasis></p>

<p>#<emphasis>parameter name</emphasis>: <emphasis>parameter type</emphasis></p>

<p>_ <emphasis>local parameter name</emphasis>: <emphasis>parameter type</emphasis></p>

<p>
  A second name before the local parameter name gives the parameter an external name, which can be different than the local parameter name. The external parameter name must be used when the function is called. The corresponding argument must have the external name in function or method calls.</p>

<p>
  A hash symbol (#) before a parameter name indicates that the name should be used as both an external and a local parameter name. It has the same meaning as writing the local parameter name twice. The corresponding argument must have this name in function or method calls.</p>

<p>
  An underscore (_) before a local parameter name gives that parameter no name to be used in function calls. The corresponding argument must have no name in function or method calls.




Special Kinds of Parameters</p>

<p>
  Parameters can be ignored, take a variable number of values, and provide default values using the following forms:</p>

<p>_ : &lt;#parameter type#.</p>

<p><emphasis>parameter name</emphasis>: <emphasis>parameter type</emphasis>...</p>

<p><emphasis>parameter name</emphasis>: <emphasis>parameter type</emphasis> = <emphasis>default argument value</emphasis></p>

<p>
  A parameter named with an underscore (_) is explicitly ignored an can’t be accessed within the body of the function.</p>

<p>
  A parameter with a base type name followed immediately by three dots (...) is understood as a variadic parameter. A function can have at most one variadic parameter, which must be its last parameter. A variadic parameter is treated as an array that contains elements of the base type name. For instance, the variadic parameter Int... is treated as Int[]. For an example that uses a variadic parameter, see Variadic Parameters.</p>

<p>
  A parameter with an equals sign (=) and an expression after its type is understood to have a default value of the given expression. If the parameter is omitted when calling the function, the default value is used instead. If the parameter is not omitted, it must have its name in the function call. For example, f() and f(x: 7) are both valid calls to a function with a single default parameter named x, but f(7) is invalid because it provides a value without a name.




Special Kinds of Methods</p>

<p>
  Methods on an enumeration or a structure that modify self must be marked with the mutating keyword at the start of the function declaration.</p>

<p>
  Methods that override a superclass method must be marked with the override keyword at the start of the function declaration. It is an error to override a method without the override keyword or to use the override keyword on a method that doesn’t override a superclass method.</p>

<p>
  Methods associated with a type rather than an instance of a type must be marked with the static attribute for enumerations and structures or the class attribute for classes.




Curried Functions and Methods</p>

<p>
  Curried functions and methods have the following form:</p>

<p>func <emphasis>function name</emphasis>(<emphasis>parameters</emphasis>)(<emphasis>parameters</emphasis>) -&gt; <emphasis>return type</emphasis> {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  A function declared this way is understood as a function whose return type is another function. For example, the following two declarations are equivalent:</p>

<p>func addTwoNumbers(a: Int)(b: Int) -&gt; Int {</p>

<p> return a + b</p>

<p>}</p>

<p>func addTwoNumbers(a: Int) -&gt; (Int -&gt; Int) {</p>

<p> func addTheSecondNumber(b: Int) -&gt; Int {</p>

<p> return a + b</p>

<p>    }</p>

<p> return addTheSecondNumber</p>

<p>}</p>

<p>addTwoNumbers(4)(5) // Returns 9</p>

<p>
  Multiple levels of currying are allowed.</p>

<p>
  Grammar of a function declaration</p>

<p>


  function-declaration


  →
function-name­generic-parameter-clause­<sub>opt</sub>­function-body­</p>

<p>


  function-head


  →
attributes­<sub>opt</sub>­declaration-specifiers­<sub>opt</sub>­func­</p>

<p>


  function-name


  →

identifier­

operator­</p>

<p>


  function-signature


  →
function-result­<sub>opt</sub>­</p>

<p>


  function-result


  →
-&gt;­attributes­<sub>opt</sub>­type­</p>

<p>


  function-body


  →
code-block­</p>

<p>


  parameter-clauses


  →
parameter-clauses­<sub>opt</sub>­</p>

<p>


  parameter-clause


  →

(­)­

(­parameter-list­...­<sub>opt</sub>­)­</p>

<p>


  parameter-list


  →

parameter­

parameter-list­</p>

<p>


  parameter


  →
inout­<sub>opt</sub>­let­<sub>opt</sub>­#­<sub>opt</sub>­local-parameter-name­<sub>opt</sub>­type-annotation­default-argument-clause­<sub>opt</sub>­</p>

<p>


  parameter


  →
inout­<sub>opt</sub>­var­#­<sub>opt</sub>­local-parameter-name­<sub>opt</sub>­type-annotation­default-argument-clause­<sub>opt</sub>­</p>

<p>


  parameter


  →
attributes­<sub>opt</sub>­type­</p>

<p>


  parameter-name


  →

identifier­

_­</p>

<p>


  local-parameter-name


  →

identifier­

_­</p>

<p>


  default-argument-clause


  →
=­expression­







Enumeration Declaration</p>

<p>
  An <emphasis>enumeration declaration</emphasis> introduces a named enumeration type into your program.</p>

<p>
  Enumeration declarations have two basic forms and are declared using the keyword enum. The body of an enumeration declared using either form contains zero or more values—called <emphasis>enumeration cases</emphasis>—and any number of declarations, including computed properties, instance methods, static methods, initializers, type aliases, and even other enumeration, structure, and class declarations. Enumeration declarations can’t contain destructor or protocol declarations.</p>

<p>
  Unlike classes and structures, enumeration types do not have an implicitly provided default initializer; all initializers must be declared explicitly. Initializers can delegate to other initializers in the enumeration, but the initialization process is complete only after an initializer assigns one of the enumeration cases to self.</p>

<p>
  Like structures but unlike classes, enumerations are value types; instances of an enumeration are copied when assigned to variables or constants, or when passed as arguments to a function call. For information about value types, see Structures and Enumerations Are Value Types.</p>

<p>
  You can extend the behavior of an enumeration type with an extension declaration, as discussed in Extension Declaration.



Enumerations with Cases of Any Type</p>

<p>
  The following form declares an enumeration type that contains enumeration cases of any type:</p>

<p>enum <emphasis>enumeration name</emphasis> {</p>

<p>    case <emphasis>enumeration case 1</emphasis></p>

<p>    case <emphasis>enumeration case 2</emphasis>(<emphasis>associated value types</emphasis>)</p>

<p>}</p>

<p>
  Enumerations declared in this form are sometimes called <emphasis>discriminated unions</emphasis> in other programming languages.</p>

<p>
  In this form, each case block consists of the keyword case followed by one or more enumeration cases, separated by commas. The name of each case must be unique. Each case can also specify that it stores values of a given type. These types are specified in the <emphasis>associated value types</emphasis> tuple, immediately following the name of the case. For more information and to see examples of cases with associated value types, see Associated Values.




Enumerations with Raw Cases Values</p>

<p>
  The following form declares an enumeration type that contains enumeration cases of the same basic type:</p>

<p>enum <emphasis>enumeration name</emphasis>: <emphasis>raw value type</emphasis> {</p>

<p>    case <emphasis>enumeration case 1</emphasis> = <emphasis>raw value 1</emphasis></p>

<p>    case <emphasis>enumeration case 2</emphasis> = <emphasis>raw value 2</emphasis></p>

<p>}</p>

<p>
  In this form, each case block consists of the keyword case, followed by one or more enumeration cases, separated by commas. Unlike the cases in the first form, each case has an underlying value, called a <emphasis>raw value</emphasis>, of the same basic type. The type of these values is specified in the <emphasis>raw value type</emphasis> and must represent a literal integer, floating-point number, character, or string.</p>

<p>
  Each case must have a unique name and be assigned a unique raw value. If the raw value type is specified as Int and you don’t assign a value to the cases explicitly, they are implicitly assigned the values 0, 1, 2, and so on. Each unassigned case of type Int is implicitly assigned a raw value that is automatically incremented from the raw value of the previous case.</p>

<p>enum ExampleEnum: Int {</p>

<p> case A, B, C = 5, D</p>

<p>}</p>

<p>
  In the above example, the value of ExampleEnum.A is 0 and the value of ExampleEnum.B is 1. And because the value of ExampleEnum.C is explicitly set to 5, the value of ExampleEnum.D is automatically incremented from 5 and is therefore 6.</p>

<p>
  The raw value of an enumeration case can be accessed by calling its toRaw method, as in ExampleEnum.B.toRaw(). You can also use a raw value to find a corresponding case, if there is one, by calling the fromRaw method, which returns an optional case. For more information and to see examples of cases with raw value types, see Raw Values.




Accessing Enumeration Cases</p>

<p>
  To reference the case of an enumeration type, use dot (.) syntax, as in EnumerationType.EnumerationCase. When the enumeration type can be inferred from context, you can omit it (the dot is still required), as described in Enumeration Syntax and Implicit Member Expression.</p>

<p>
  To check the values of enumeration cases, use a switch statement, as shown in Matching Enumeration Values with a Switch Statement. The enumeration type is pattern-matched against the enumeration case patterns in the case blocks of the switch statement, as described in Enumeration Case Pattern.</p>

<p>
  Grammar of an enumeration declaration</p>

<p>


  enum-declaration


  →

attributes­<sub>opt</sub>­union-style-enum­

attributes­<sub>opt</sub>­raw-value-style-enum­</p>

<p>


  union-style-enum


  →
generic-parameter-clause­<sub>opt</sub>­{­union-style-enum-members­<sub>opt</sub>­}­</p>

<p>


  union-style-enum-members


  →
union-style-enum-members­<sub>opt</sub>­</p>

<p>


  union-style-enum-member


  →

declaration­

union-style-enum-case-clause­</p>

<p>


  union-style-enum-case-clause


  →
attributes­<sub>opt</sub>­case­union-style-enum-case-list­</p>

<p>


  union-style-enum-case-list


  →

union-style-enum-case­

union-style-enum-case-list­</p>

<p>


  union-style-enum-case


  →
tuple-type­<sub>opt</sub>­</p>

<p>


  enum-name


  →
identifier­</p>

<p>


  enum-case-name


  →
identifier­</p>

<p>


  raw-value-style-enum


  →
generic-parameter-clause­<sub>opt</sub>­:­type-identifier­{­raw-value-style-enum-members­<sub>opt</sub>­}­</p>

<p>


  raw-value-style-enum-members


  →
raw-value-style-enum-members­<sub>opt</sub>­</p>

<p>


  raw-value-style-enum-member


  →

declaration­

raw-value-style-enum-case-clause­</p>

<p>


  raw-value-style-enum-case-clause


  →
attributes­<sub>opt</sub>­case­raw-value-style-enum-case-list­</p>

<p>


  raw-value-style-enum-case-list


  →

raw-value-style-enum-case­

raw-value-style-enum-case-list­</p>

<p>


  raw-value-style-enum-case


  →
raw-value-assignment­<sub>opt</sub>­</p>

<p>


  raw-value-assignment


  →
=­literal­







Structure Declaration</p>

<p>
  A <emphasis>structure declaration</emphasis> introduces a named structure type into your program. Structure declarations are declared using the keyword struct and have the following form:</p>

<p>struct <emphasis>structure name</emphasis>: <emphasis>adopted protocols</emphasis> {</p>

<p>    <emphasis>declarations</emphasis></p>

<p>}</p>

<p>
  The body of a structure contains zero or more <emphasis>declarations</emphasis>. These <emphasis>declarations</emphasis> can include both stored and computed properties, static properties, instance methods, static methods, initializers, type aliases, and even other structure, class, and enumeration declarations. Structure declarations can’t contain destructor or protocol declarations. For a discussion and several examples of structures that include various kinds of declarations, see Classes and Structures.</p>

<p>
  Structure types can adopt any number of protocols, but can’t inherit from classes, enumerations, or other structures.</p>

<p>
  There are three ways create an instance of a previously declared structure:</p>

<p>
  Call one of the initializers declared within the structure, as described in Initializers.</p>

<p>
  If no initializers are declared, call the structure’s memberwise initializer, as described in Memberwise Initializers for Structure Types.</p>

<p>
  If no initializers are declared, and all properties of the structure declaration were given initial values, call the structure’s default initializer, as described in Default Initializers.</p>

<p>
  The process of initializing a structure’s declared properties is described in Initialization.</p>

<p>
  Properties of a structure instance can be accessed using dot (.) syntax, as described in Accessing Properties.</p>

<p>
  Structures are value types; instances of a structure are copied when assigned to variables or constants, or when passed as arguments to a function call. For information about value types, see Structures and Enumerations Are Value Types.</p>

<p>
  You can extend the behavior of a structure type with an extension declaration, as discussed in Extension Declaration.</p>

<p>
  Grammar of a structure declaration</p>

<p>


  struct-declaration


  →
attributes­<sub>opt</sub>­struct­generic-parameter-clause­<sub>opt</sub>­type-inheritance-clause­<sub>opt</sub>­struct-body­</p>

<p>


  struct-name


  →
identifier­</p>

<p>


  struct-body


  →
{­declarations­<sub>opt</sub>­}­






Class Declaration</p>

<p>
  A <emphasis>class declaration</emphasis> introduces a named class type into your program. Class declarations are declared using the keyword class and have the following form:</p>

<p>class <emphasis>class name</emphasis>: <emphasis>superclass</emphasis>, <emphasis>adopted protocols</emphasis> {</p>

<p>    <emphasis>declarations</emphasis></p>

<p>}</p>

<p>
  The body of a class contains zero or more <emphasis>declarations</emphasis>. These <emphasis>declarations</emphasis> can include both stored and computed properties, instance methods, class methods, initializers, a single destructor method, type aliases, and even other class, structure, and enumeration declarations. Class declarations can’t contain protocol declarations. For a discussion and several examples of classes that include various kinds of declarations, see Classes and Structures.</p>

<p>
  A class type can inherit from only one parent class, its <emphasis>superclass</emphasis>, but can adopt any number of protocols. The <emphasis>superclass</emphasis> appears first in the <strong>type-inheritance-clause</strong>, followed by any <emphasis>adopted protocols</emphasis>.</p>

<p>
  As discussed in Initializer Declaration, classes can have designated and convenience initializers. When you declare either kind of initializer, you can require any subclass to override it by marking the initializer with the required attribute. The designated initializer of a class must initialize all of the class’s declared properties and it must do so before calling any of its superclass’s designated initializers.</p>

<p>
  A class can override properties, methods, and initializers of its superclass. Overridden methods and properties must be marked with the override keyword.</p>

<p>
  Although properties and methods declared in the <emphasis>superclass</emphasis> are inherited by the current class, designated initializers declared in the <emphasis>superclass</emphasis> are not. That said, if the current class overrides all of the superclass’s designated initializers, it inherits the superclass’s convenience initializers. Swift classes do not inherit from a universal base class.</p>

<p>
  There are two ways create an instance of a previously declared class:</p>

<p>
  Call one of the initializers declared within the class, as described in Initializers.</p>

<p>
  If no initializers are declared, and all properties of the class declaration were given initial values, call the class’s default initializer, as described in Default Initializers.</p>

<p>
  Access properties of a class instance with dot (.) syntax, as described in Accessing Properties.</p>

<p>
  Classes are reference types; instances of a class are referred to, rather than copied, when assigned to variables or constants, or when passed as arguments to a function call. For information about reference types, see Structures and Enumerations Are Value Types.</p>

<p>
  You can extend the behavior of a class type with an extension declaration, as discussed in Extension Declaration.</p>

<p>
  Grammar of a class declaration</p>

<p>


  class-declaration


  →
attributes­<sub>opt</sub>­class­generic-parameter-clause­<sub>opt</sub>­type-inheritance-clause­<sub>opt</sub>­class-body­</p>

<p>


  class-name


  →
identifier­</p>

<p>


  class-body


  →
{­declarations­<sub>opt</sub>­}­






Protocol Declaration</p>

<p>
  A <emphasis>protocol declaration</emphasis> introduces a named protocol type into your program. Protocol declarations are declared using the keyword protocol and have the following form:</p>

<p>protocol <emphasis>protocol name</emphasis>: <emphasis>inherited protocols</emphasis> {</p>

<p>    <emphasis>protocol member declarations</emphasis></p>

<p>}</p>

<p>
  The body of a protocol contains zero or more <emphasis>protocol member declarations</emphasis>, which describe the conformance requirements that any type adopting the protocol must fulfill. In particular, a protocol can declare that conforming types must implement certain properties, methods, initializers, and subscripts. Protocols can also declare special kinds of type aliases, called <emphasis>associated types</emphasis>, that can specify relationships among the various declarations of the protocol. The <emphasis>protocol member declarations</emphasis> are discussed in detail below.</p>

<p>
  Protocol types can inherit from any number of other protocols. When a protocol type inherits from other protocols, the set of requirements from those other protocols are aggregated, and any type that inherits from the current protocol must conform to all those requirements. For an example of how to use protocol inheritance, see Protocol Inheritance.</p><empty-line /><p>Note</p>

<p>You can also aggregate the conformance requirements of multiple protocols using protocol composition types, as described in Protocol Composition Type and Protocol Composition.</p>

<p>
  You can add protocol conformance to a previously declared type by adopting the protocol in an extension declaration of that type. In the extension, you must implement all of the adopted protocol’s requirements. If the type already implements all of the requirements, you can leave the body of the extension declaration empty.</p>

<p>
  By default, types that conform to a protocol must implement all properties, methods, and subscripts declared in the protocol. That said, you can mark these protocol member declarations with the optional attribute to specify that their implementation by a conforming type is optional. The optional attribute can be applied only to protocols that are marked with the objc attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements. For more information about how to use the optional attribute and for guidance about how to access optional protocol members—for example, when you’re not sure whether a conforming type implements them—see Optional Protocol Requirements.</p>

<p>
  To restrict the adoption of a protocol to class types only, mark the entire protocol declaration with the class_protocol attribute. Any protocol that inherits from a protocol marked with the class_protocol attribute can likewise be adopted only by a class type.</p><empty-line /><p>Note</p>

<p>If a protocol is already marked with the objc attribute, the class_protocol attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the class_protocol attribute explicitly.</p>

<p>
  Protocols are named types, and thus they can appear in all the same places in your code as other named types, as discussed in Protocols as Types. However, you can’t construct an instance of a protocol, because protocols do not actually provide the implementations for the requirements they specify.</p>

<p>
  You can use protocols to declare which methods a delegate of a class or structure should implement, as described in Delegation.</p>

<p>
  Grammar of a protocol declaration</p>

<p>


  protocol-declaration


  →
attributes­<sub>opt</sub>­protocol­type-inheritance-clause­<sub>opt</sub>­protocol-body­</p>

<p>


  protocol-name


  →
identifier­</p>

<p>


  protocol-body


  →
{­protocol-member-declarations­<sub>opt</sub>­}­</p>

<p>


  protocol-member-declaration


  →
protocol-property-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-method-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-initializer-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-subscript-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-associated-type-declaration­</p>

<p>


  protocol-member-declarations


  →
protocol-member-declarations­<sub>opt</sub>­





Protocol Property Declaration</p>

<p>
  Protocols declare that conforming types must implement a property by including a <emphasis>protocol property declaration</emphasis> in the body of the protocol declaration. Protocol property declarations have a special form of a variable declaration:</p>

<p>var <emphasis>property name</emphasis>: <emphasis>type</emphasis> { get set }</p>

<p>
  As with other protocol member declarations, these property declarations declare only the getter and setter requirements for types that conform to the protocol. As a result, you don’t implement the getter or setter directly in the protocol in which it is declared.</p>

<p>
  The getter and setter requirements can be satisfied by a conforming type in a variety of ways. If a property declaration includes both the get and set keywords, a conforming type can implement it with a stored variable property or a computed property that is both readable and writeable (that is, one that implements both a getter and a setter). However, that property declaration can’t be implemented as a constant property or a read-only computed property. If a property declaration includes only the get keyword, it can be implemented as any kind of property. For examples of conforming types that implement the property requirements of a protocol, see Property Requirements.</p>

<p>
  See also Variable Declaration.</p>

<p>
  Grammar of a protocol property declaration</p>

<p>


  protocol-property-declaration


  →
variable-name­type-annotation­getter-setter-keyword-block­






Protocol Method Declaration</p>

<p>
  Protocols declare that conforming types must implement a method by including a protocol method declaration in the body of the protocol declaration. Protocol method declarations have the same form as function declarations, with two exceptions: They don’t include a function body, and you can’t provide any default parameter values as part of the function declaration. For examples of conforming types that implement the method requirements of a protocol, see Method Requirements.</p>

<p>
  To declare a class or static method requirement in a protocol declaration, mark the method declaration with the class keyword. Classes that implement this method also declare the method with the class keyword. Structures that implement it must declare the method with the static keyword instead. If you’re implementing the method in an extension, use the class keyword if you’re extending a class and the static keyword if you’re extending a structure.</p>

<p>
  See also Function Declaration.</p>

<p>
  Grammar of a protocol method declaration</p>

<p>


  protocol-method-declaration


  →
function-name­generic-parameter-clause­<sub>opt</sub>­function-signature­






Protocol Initializer Declaration</p>

<p>
  Protocols declare that conforming types must implement an initializer by including a protocol initializer declaration in the body of the protocol declaration. Protocol initializer declarations have the same form as initializer declarations, except they don’t include the initializer’s body.</p>

<p>
  See also Initializer Declaration.</p>

<p>
  Grammar of a protocol initializer declaration</p>

<p>


  protocol-initializer-declaration


  →
generic-parameter-clause­<sub>opt</sub>­parameter-clause­






Protocol Subscript Declaration</p>

<p>
  Protocols declare that conforming types must implement a subscript by including a protocol subscript declaration in the body of the protocol declaration. Protocol property declarations have a special form of a subscript declaration:</p>

<p>subscript (<emphasis>parameters</emphasis>) -&gt; <emphasis>return type</emphasis> { get set }</p>

<p>
  Subscript declarations only declare the minimum getter and setter implementation requirements for types that conform to the protocol. If the subscript declaration includes both the get and set keywords, a conforming type must implement both a getter and a setter clause. If the subscript declaration includes only the get keyword, a conforming type must implement <emphasis>at least</emphasis> a getter clause and optionally can implement a setter clause.</p>

<p>
  See also Subscript Declaration.</p>

<p>
  Grammar of a protocol subscript declaration</p>

<p>


  protocol-subscript-declaration


  →
subscript-result­getter-setter-keyword-block­






Protocol Associated Type Declaration</p>

<p>
  Protocols declare associated types using the keyword typealias. An associated type provides an alias for a type that is used as part of a protocol’s declaration. Accosiated types are similiar to type paramters in generic parameter clauses, but they’re associated with Self in the protocol in which they’re declared. In that context, Self refers to the eventual type that conforms to the protocol. For more information and examples, see Associated Types.</p>

<p>
  See also Type Alias Declaration.</p>

<p>
  Grammar of a protocol associated type declaration</p>

<p>


  protocol-associated-type-declaration


  →
type-inheritance-clause­<sub>opt</sub>­typealias-assignment­<sub>opt</sub>­







Initializer Declaration</p>

<p>
  An <emphasis>initializer declaration</emphasis> introduces an initializer for a class, structure, or enumeration into your program. Initializer declarations are declared using the keyword init and have two basic forms.</p>

<p>
  Structure, enumeration, and class types can have any number of initializers, but the rules and associated behavior for class initializers are different. Unlike structures and enumerations, classes have two kinds of initializers: designated initializers and convenience initializers, as described in Initialization.</p>

<p>
  The following form declares initializers for structures, enumerations, and designated initializers of classes:</p>

<p>init(<emphasis>parameters</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  A designated initializer of a class initializes all of the class’s properties directly. It can’t call any other initializers of the same class, and if the class has a superclass, it must call one of the superclass’s designated initializers. If the class inherits any properties from its superclass, one of the superclass’s designated initializers must be called before any of these properties can be set or modified in the current class.</p>

<p>
  Designated initializers can be declared in the context of a class declaration only and therefore can’t be added to a class using an extension declaration.</p>

<p>
  Initializers in structures and enumerations can call other declared initializers to delegate part or all of the initialization process.</p>

<p>
  To declare convenience initializers for a class, prefix the initializer declaration with the context-sensitive keyword convenience.</p>

<p>convenience init(<emphasis>parameters</emphasis>) {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  Convenience initializers can delegate the initialization process to another convenience initializer or to one of the class’s designated initializers. That said, the initialization processes must end with a call to a designated initializer that ultimately initializes the class’s properties. Convenience initializers can’t call a superclass’s initializers.</p>

<p>
  You can mark designated and convenience initializers with the required attribute to require that every subclass implement the initializer. Because designated initializers are not inherited by subclasses, they must be implemented directly. Required convenience initializers can be either implemented explicitly or inherited when the subclass directly implements all of the superclass’s designated initializers (or overrides the designated initializers with convenience initializers). Unlike methods, properties, and subscripts, you don’t need to mark overridden initializers with the override keyword.</p>

<p>
  To see examples of initializers in various type declarations, see Initialization.</p>

<p>
  Grammar of an initializer declaration</p>

<p>


  initializer-declaration


  →
generic-parameter-clause­<sub>opt</sub>­initializer-body­</p>

<p>


  initializer-head


  →
attributes­<sub>opt</sub>­convenience­<sub>opt</sub>­init­</p>

<p>


  initializer-body


  →
code-block­






Deinitializer Declaration</p>

<p>
  A <emphasis>deinitializer declaration</emphasis> declares a deinitializer for a class type. Deinitializers take no parameters and have the following form:</p>

<p>deinit {</p>

<p>    <emphasis>statements</emphasis></p>

<p>}</p>

<p>
  A deinitializer is called automatically when there are no longer any references to a class object, just before the class object is deallocated. A deinitializer can be declared only in the body of a class declaration—but not in an extension of a class—and each class can have at most one.</p>

<p>
  A subclass inherits its superclass’s deinitializer, which is implicitly called just before the subclass object is deallocated. The subclass object is not deallocated until all deinitializers in its inheritance chain have finished executing.</p>

<p>
  Deinitializers are not called directly.</p>

<p>
  For an example of how to use a deinitializer in a class declaration, see Deinitialization.</p>

<p>
  Grammar of a deinitializer declaration</p>

<p>


  deinitializer-declaration


  →
attributes­<sub>opt</sub>­deinit­code-block­






Extension Declaration</p>

<p>
  An <emphasis>extension declaration</emphasis> allows you to extend the behavior of existing class, structure, and enumeration types. Extension declarations begin with the keyword extension and have the following form:</p>

<p>extension <emphasis>type</emphasis>: <emphasis>adopted protocols</emphasis> {</p>

<p>    <emphasis>declarations</emphasis></p>

<p>}</p>

<p>
  The body of an extension declaration contains zero or more <emphasis>declarations</emphasis>. These <emphasis>declarations</emphasis> can include computed properties, computed static properties, instance methods, static and class methods, initializers, subscript declarations, and even class, structure, and enumeration declarations. Extension declarations can’t contain destructor or protocol declarations, store properties, property observers, or other extension declarations. For a discussion and several examples of extensions that include various kinds of declarations, see Extensions.</p>

<p>
  Extension declarations can add protocol conformance to an existing class, structure, and enumeration type in the <emphasis>adopted protocols</emphasis>. Extension declarations can’t add class inheritance to an existing class, and therefore the <strong>type-inheritance-clause</strong> in an extension declaration contains only a list of protocols.</p>

<p>
  Properties, methods, and initializers of an existing type can’t be overridden in an extension of that type.</p>

<p>
  Extension declarations can contain initializer declarations. That said, if the type you’re extending is defined in another module, an initializer declaration must delegate to an initializer already defined in that module to ensure members of that type are properly initialized.</p>

<p>
  Grammar of an extension declaration</p>

<p>


  extension-declaration


  →
extension­type-identifier­type-inheritance-clause­<sub>opt</sub>­extension-body­</p>

<p>


  extension-body


  →
{­declarations­<sub>opt</sub>­}­






Subscript Declaration</p>

<p>
  A <emphasis>subscript</emphasis> declaration allows you to add subscripting support for objects of a particular type and are typically used to provide a convenient syntax for accessing the elements in a collection, list, or sequence. Subscript declarations are declared using the keyword subscript and have the following form:</p>

<p>subscript (<emphasis>parameters</emphasis>) -&gt; <emphasis>return type</emphasis> {</p>

<p>    get {</p>

<p>        <emphasis>statements</emphasis></p>

<p>    }</p>

<p>    set(<emphasis>setter name</emphasis>) {</p>

<p>        <emphasis>statements</emphasis></p>

<p>    }</p>

<p>}</p>

<p>
  Subscript declarations can appear only in the context of a class, structure, enumeration, extension, or protocol declaration.</p>

<p>
  The <emphasis>parameters</emphasis> specify one or more indexes used to access elements of the corresponding type in a subscript expression (for example, the i in the expression object[i]). Although the indexes used to access the elements can be of any type, each parameter must include a type annotation to specify the type of each index. The <emphasis>return type</emphasis> specifies the type of the element being accessed.</p>

<p>
  As with computed properties, subscript declarations support reading and writing the value of the accessed elements. The getter is used to read the value, and the setter is used to write the value. The setter clause is optional, and when only a getter is needed, you can omit both clauses and simply return the requested value directly. That said, if you provide a setter clause, you must also provide a getter clause.</p>

<p>
  The <emphasis>setter name</emphasis> and enclosing parentheses are optional. If you provide a setter name, it is used as the name of the parameter to the setter. If you do not provide a setter name, the default parameter name to the setter is value. That type of the <emphasis>setter name</emphasis> must be the same as the <emphasis>return type</emphasis>.</p>

<p>
  You can overload a subscript declaration in the type in which it is declared, as long as the <emphasis>parameters</emphasis> or the <emphasis>return type</emphasis> differ from the one you’re overloading. You can also override a subscript declaration inherited from a superclass. When you do so, you must mark the overridden subscript declaration with the override keyword.</p>

<p>
  You can also declare subscripts in the context of a protocol declaration, as described in Protocol Subscript Declaration.</p>

<p>
  For more information about subscripting and to see examples of subscript declarations, see Subscripts.</p>

<p>
  Grammar of a subscript declaration</p>

<p>


  subscript-declaration


  →
subscript-result­code-block­</p>

<p>


  subscript-declaration


  →
subscript-result­getter-setter-block­</p>

<p>


  subscript-declaration


  →
subscript-result­getter-setter-keyword-block­</p>

<p>


  subscript-head


  →
attributes­<sub>opt</sub>­subscript­parameter-clause­</p>

<p>


  subscript-result


  →
-&gt;­attributes­<sub>opt</sub>­type­






Operator Declaration</p>

<p>
  An <emphasis>operator declaration</emphasis> introduces a new infix, prefix, or postfix operator into your program and is declared using the contextual keyword operator.</p>

<p>
  You can declare operators of three different fixities: infix, prefix, and postfix. The <emphasis>fixity</emphasis> of an operator specifies the relative position of an operator to its operands.</p>

<p>
  There are three basic forms of an operator declaration, one for each fixity. The fixity of the operator is specified by including the contextual keyword infix, prefix, or postfix between operator and the name of the operator. In each form, the name of the operator can contain only the operator characters defined in Operators.</p>

<p>
  The following form declares a new infix operator:</p>

<p>operator infix <emphasis>operator name</emphasis> {</p>

<p>    precedence <emphasis>precedence level</emphasis></p>

<p>    associativity <emphasis>associativity</emphasis></p>

<p>}</p>

<p>
  An <emphasis>infix operator</emphasis> is a binary operator that is written between its two operands, such as the familiar addition operator (+) in the expression 1 + 2.</p>

<p>
  Infix operators can optionally specify a precedence, associativity, or both.</p>

<p>
  The <emphasis>precedence</emphasis> of an operator specifies how tightly an operator binds to its operands in the absence of grouping parentheses. You specify the precedence of an operator by writing the contextual keyword precedence followed by the <emphasis>precedence level</emphasis>. The <emphasis>precedence level</emphasis> can be any whole number (decimal integer) from 0 to 255; unlike decimal integer literals, it can’t contain any underscore characters. Although the precedence level is a specific number, it is significant only relative to another operator. That is, when two operators compete with each other for their operands, such as in the expression 2 + 3 * 5, the operator with the higher precedence level binds more tightly to its operands.</p>

<p>
  The <emphasis>associativity</emphasis> of an operator specifies how a sequence of operators with the same precedence level are grouped together in the absence of grouping parentheses. You specify the associativity of an operator by writing the contextual keyword associativity followed by the <emphasis>associativity</emphasis>, which is one of the contextual keywords left, right, or none. Operators that are left-associative group left-to-right. For example, the subtraction operator (-) is left-associative, and therefore the expression 4 - 5 - 6 is grouped as (4 - 5) - 6 and evaluates to -7. Operators that are right-associative group right-to-left, and operators that are specified with an associativity of none don’t associate at all. Nonassociative operators of the same precedence level can’t appear adjacent to each to other. For example, 1 &lt; 2 &lt; 3 is not a valid expression.</p>

<p>
  Infix operators that are declared without specifying a precedence or associativity are initialized with a precedence level of 100 and an associativity of none.</p>

<p>
  The following form declares a new prefix operator:</p>

<p>operator prefix <emphasis>operator name</emphasis> {}</p>

<p>
  A <emphasis>prefix operator</emphasis> is a unary operator that is written immediately before its operand, such as the prefix increment operator (++) is in the expression ++i.</p>

<p>
  Prefix operators declarations don’t specify a precedence level. Prefix operators are nonassociative.</p>

<p>
  The following form declares a new postfix operator:</p>

<p>operator postfix <emphasis>operator name</emphasis> {}</p>

<p>
  A <emphasis>postfix operator</emphasis> is a unary operator that is written immediately after its operand, such as the postfix increment operator (++) is in the expression i++.</p>

<p>
  As with prefix operators, postfix operator declarations don’t specify a precedence level. Postfix operators are nonassociative.</p>

<p>
  After declaring a new operator, you implement it by declaring a function that has the same name as the operator. To see an example of how to create and implement a new operator, see Custom Operators.</p>

<p>
  Grammar of an operator declaration</p>

<p>


  operator-declaration


  →

prefix-operator-declaration­

postfix-operator-declaration­

infix-operator-declaration­</p>

<p>


  prefix-operator-declaration


  →
operator­prefix­operator­{­}­</p>

<p>


  postfix-operator-declaration


  →
operator­postfix­operator­{­}­</p>

<p>


  infix-operator-declaration


  →
operator­infix­operator­{­infix-operator-attributes­<sub>opt</sub>­}­</p>

<p>


  infix-operator-attributes


  →
associativity-clause­<sub>opt</sub>­</p>

<p>


  precedence-clause


  →
precedence­precedence-level­</p>

<p>


  precedence-level


  →
Digit 0 through 255</p>

<p>


  associativity-clause


  →
associativity­associativity­</p>

<p>


  associativity


  →

left­

right­

none­</p>

<p>
Attributes</p>

<p>On This Page</p>

<p>

            Declaration Attributes</p>

<p>

            Type Attributes</p>

<p>
<emphasis>Attributes</emphasis> provide more information about a declaration or type. There are two kinds of attributes in Swift, those that apply to declarations and those that apply to types. For instance, the required attribute—when applied to a designated or convenience initializer declaration of a class—indicates that every subclass must implement that initializer. And the noreturn attribute—when applied to a function or method type—indicates that the function or method doesn’t return to its caller.</p>

<p>
  You specify an attribute by writing the @ symbol followed by the attribute’s name and any arguments that the attribute accepts:</p>

<p>@<emphasis>attribute name</emphasis></p>

<p>@<emphasis>attribute name</emphasis>(<emphasis>attribute arguments</emphasis>)</p>

<p>
  Some declaration attributes accept arguments that specify more information about the attribute and how it applies to a particular declaration. These <emphasis>attribute arguments</emphasis> are enclosed in parentheses, and their format is defined by the attribute they belong to.




Declaration Attributes</p>

<p>
  You can apply a declaration attribute to declarations only. However, you can also apply the noreturn attribute to a function or method <emphasis>type</emphasis>.


<strong>assignment</strong></p>

<p>
  Apply this attribute to functions that overload a compound assignment operator. Functions that overload a compound assignment operator must mark their initial input parameter as inout. For an example of how to use the assignment attribute, see Compound Assignment Operators.



<strong>class_protocol</strong></p>

<p>
  Apply this attribute to a protocol to indicate that the protocol can be adopted by class types only.</p>

<p>
  If you apply the objc attribute to a protocol, the class_protocol attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the class_protocol attribute explicitly.


<strong>exported</strong></p>

<p>
  Apply this attribute to an import declaration to export the imported module, submodule, or declaration from the current module. If another module imports the current module, that other module can access the items exported by the current module.

<strong>final</strong></p>

<p>
  Apply this attribute to a class or to a property, method, or subscript member of a class. It’s applied to a class to indicate that the class can’t be subclassed. It’s applied to a property, method, or subscript of a class to indicate that that class member can’t be overridden in any subclass.



<strong>lazy</strong></p>

<p>
  Apply this attribute to a stored variable property of a class or structure to indicate that the property’s initial value is calculated and stored at most once, when the property is first accessed. For an example of how to use the lazy attribute, see Lazy Stored Properties.

<strong>noreturn</strong></p>

<p>
  Apply this attribute to a function or method declaration to indicate that the corresponding type of that function or method, T, is @noreturn T. You can mark a function or method type with this attribute to indicate that the function or method doesn’t return to its caller.</p>

<p>
  You can override a function or method that is not marked with the noreturn attribute with a function or method that is. That said, you can’t override a function or method that is marked with the noreturn attribute with a function or method that is not. Similar rules apply when you implement a protocol method in a conforming type.


<strong>NSCopying</strong></p>

<p>
  Apply this attribute to a stored variable property of a class. This attribute causes the property’s setter to be synthesized with a <emphasis>copy</emphasis> of the property’s value—returned by the copyWithZone method—instead of the value of the property itself. The type of the property must conform to the NSCopying protocol.</p>

<p>
  The NSCopying attribute behaves in a way similar to the Objective-C copy property attribute.




<strong>NSManaged</strong></p>

<p>
  Apply this attribute to a stored variable property of a class that inherits from NSManagedObject to indicate that the storage and implementation of the property are provided dynamically by Core Data at runtime based on the associated entity description.

<strong>objc</strong></p>

<p>
  Apply this attribute to any declaration that can be represented in Objective-C—for example, non-nested classes, protocols, properties and methods (including getters and setters) of classes and protocols, initializers, deinitializers, and subscripts. The objc attribute tells the compiler that a declaration is available to use in Objective-C code.</p>

<p>
  If you apply the objc attribute to a class or protocol, it’s implicitly applied to the members of that class or protocol. The compiler also implicitly adds the objc attribute to a class that inherits from another class marked with the objc attribute. Protocols marked with the objc attribute can’t inherit from protocols that aren’t.</p>

<p>
  The objc attribute optionally accepts a single attribute argument, which consists of an identifier. Use this attribute when you want to expose a different name to Objective-C for the entity the objc attribute applies to. You can use this argument to name classes, protocols, methods, getters, setters, and initializers. The example below exposes the getter for the enabled property of the ExampleClass to Objective-C code as isEnabled rather than just as the name of the property itself.</p>

<p>@objc</p>

<p>class ExampleClass {</p>

<p> var enabled: Bool {</p>

<p> @objc(isEnabled) get {</p>

<p> // Return the appropriate value</p>

<p>    }</p>

<p>    }</p>

<p>}






<strong>optional</strong></p>

<p>
  Apply this attribute to a protocol’s property, method, or subscript members to indicate that a conforming type isn’t required to implement those members.</p>

<p>
  You can apply the optional attribute only to protocols that are marked with the objc attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements. For more information about how to use the optional attribute and for guidance about how to access optional protocol members—for example, when you’re not sure whether a conforming type implements them—see Optional Protocol Requirements.




<strong>required</strong></p>

<p>
  Apply this attribute to a designated or convenience initializer of a class to indicate that every subclass must implement that initializer.</p>

<p>
  Required designated initializers must be implemented explicitly. Required convenience initializers can be either implemented explicitly or inherited when the subclass directly implements all of the superclass’s designated initializers (or when the subclass overrides the designated initializers with convenience initializers).





Declaration Attributes Used by Interface Builder</p>

<p>
  Interface Builder attributes are declaration attributes used by Interface Builder to synchronize with Xcode. Swift provides the following Interface Builder attributes: IBAction, IBDesignable, IBInspectable, and IBOutlet. These attributes are conceptually the same as their Objective-C counterparts.</p>

<p>
  You apply the IBOutlet and IBInspectable attributes to property declarations of a class. You apply the IBAction attribute to method declarations of a class and the IBDesignable attribute to class declarations.





Type Attributes</p>

<p>
  You can apply type attributes to types only. However, you can also apply the noreturn attribute to a function or method <emphasis>declaration</emphasis>.


<strong>auto_closure</strong></p>

<p>
  This attribute is used to delay the evaluation of an expression by automatically wrapping that expression in a closure with no arguments. Apply this attribute to a function or method type that takes no arguments and that returns the type of the expression. For an example of how to use the auto_closure attribute, see Function Type.

<strong>noreturn</strong></p>

<p>
  Apply this attribute to the type of a function or method to indicate that the function or method doesn’t return to its caller. You can also mark a function or method declaration with this attribute to indicate that the corresponding type of that function or method, T, is @noreturn T.</p>

<p>
  Grammar of an attribute</p>

<p>


  attribute


  →
@­attribute-argument-clause­<sub>opt</sub>­</p>

<p>


  attribute-name


  →
identifier­</p>

<p>


  attribute-argument-clause


  →
(­balanced-tokens­<sub>opt</sub>­)­</p>

<p>


  attributes


  →
attributes­<sub>opt</sub>­</p>

<p>


  balanced-tokens


  →
balanced-tokens­<sub>opt</sub>­</p>

<p>


  balanced-token


  →
(­balanced-tokens­<sub>opt</sub>­)­</p>

<p>


  balanced-token


  →
[­balanced-tokens­<sub>opt</sub>­]­</p>

<p>


  balanced-token


  →
{­balanced-tokens­<sub>opt</sub>­}­</p>

<p>


  balanced-token


  →
Any identifier, keyword, literal, or operator</p>

<p>


  balanced-token


  →
Any punctuation except (­, )­, [­, ]­, {­, or }­</p>

<p>
Patterns</p>

<p>On This Page</p>

<p>

            Wildcard Pattern</p>

<p>

            Identifier Pattern</p>

<p>

            Value-Binding Pattern</p>

<p>

            Tuple Pattern</p>

<p>

            Enumeration Case Pattern</p>

<p>

            Type-Casting Patterns</p>

<p>

            Expression Pattern</p>

<p>
  A <emphasis>pattern</emphasis> represents the structure of a single value or a composite value. For example, the structure of a tuple (1, 2) is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern (x, y) matches the tuple (1, 2) and any other two-element tuple. In addition matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name.</p>

<p>
  In Swift, patterns occur in variable and constant declarations (on their left-hand side), in for-in statements, and in switch statements (in their case labels). Although any pattern can occur in the case labels of a switch statement, in the other contexts, only wildcard patterns, identifier patterns, and patterns containing those two patterns can occur.</p>

<p>
  You can specify a type annotation for a wildcard pattern, an identifier pattern, and a tuple pattern to constraint the pattern to match only values of a certain type.</p>

<p>
  Grammar of a pattern</p>

<p>


  pattern


  →
type-annotation­<sub>opt</sub>­</p>

<p>


  pattern


  →
type-annotation­<sub>opt</sub>­</p>

<p>


  pattern


  →
value-binding-pattern­</p>

<p>


  pattern


  →
type-annotation­<sub>opt</sub>­</p>

<p>


  pattern


  →
enum-case-pattern­</p>

<p>


  pattern


  →
type-casting-pattern­</p>

<p>


  pattern


  →
expression-pattern­






Wildcard Pattern</p>

<p>
  A <emphasis>wildcard pattern</emphasis> matches and ignores any value and consists of an underscore (_). Use a wildcard pattern when you don’t care about the values being matched against. For example, the following code iterates through the closed range 1..3, ignoring the current value of the range on each iteration of the loop:</p>

<p>for _ in 1...3 {</p>

<p> // Do something three times.</p>

<p>}</p>

<p>
  Grammar of a wildcard pattern</p>

<p>


  wildcard-pattern


  →
_­






Identifier Pattern</p>

<p>
  An <emphasis>identifier pattern</emphasis> matches any value and binds the matched value to a variable or constant name. For example, in the following constant declaration, someValue is an identifier pattern that matches the value 42 of type Int:</p>

<p>let someValue = 42</p>

<p>
  When the match succeeds, the value 42 is bound (assigned) to the constant name someValue.</p>

<p>
  When the pattern on the left-hand side of a variable or constant declaration is an identifier pattern, the identifier pattern is implicitly a subpattern of a value-binding pattern.</p>

<p>
  Grammar of an identifier pattern</p>

<p>


  identifier-pattern


  →
identifier­






Value-Binding Pattern</p>

<p>
  A <emphasis>value-binding pattern</emphasis> binds matched values to variable or constant names. Value-binding patterns that bind a matched value to the name of a constant begin with the keyword let; those that bind to the name of variable begin with the keyword var.</p>

<p>
  Identifiers patterns within a value-binding pattern bind new named variables or constants to their matching values. For example, you can decompose the elements of a tuple and bind the value of each element to a corresponding identifier pattern.</p>

<p>let point = (3, 2)</p>

<p>switch point {</p>

<p> // Bind x and y to the elements of point.</p>

<p>case let (x, y):</p>

<p> println("The point is at (\(x), \(y)).")</p>

<p>}</p>

<p>// prints "The point is at (3, 2)."</p>

<p>
  In the example above, let distributes to each identifier pattern in the tuple pattern (x, y). Because of this behavior, the switch cases case let (x, y): and case (let x, let y): match the same values.</p>

<p>
  Grammar of a value-binding pattern</p>

<p>


  value-binding-pattern


  →

var­pattern­

let­pattern­







Tuple Pattern</p>

<p>
  A <emphasis>tuple pattern</emphasis> is a comma-separated list of zero or more patterns, enclosed in parentheses. Tuple patterns match values of corresponding tuple types.</p>

<p>
  You can constrain a tuple pattern to match certain kinds of tuple types by using type annotations. For example, the tuple pattern (x, y): (Int, Int) in the constant declaration let (x, y): (Int, Int) = (1, 2) matches only tuple types in which both elements are of type Int. To constrain only some elements of a tuple pattern, provide type annotations directly to those individual elements. For example, the tuple pattern in let (x: String, y) matches any two-element tuple type, as long as the first element is of type String.</p>

<p>
  When a tuple pattern is used as the pattern in a for-in statement or in a variable or constant declaration, it can contain only wildcard patterns, identifier patterns, or other tuple patterns that contain those. For example, the following code isn’t valid because the element 0 in the tuple pattern (x, 0) is an expression pattern:</p>

<p>let points = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)]</p>

<p>// This code isn't valid.</p>

<p>for (x, 0) in points {</p>

<p> /* ... */</p>

<p>}</p>

<p>
  The parentheses around a tuple pattern that contains a single element have no effect. The pattern matches values of that single element’s type. For example, the following are equivalent:</p>

<p>let a = 2 // a: Int = 2</p>

<p>let (a) = 2 // a: Int = 2</p>

<p>let (a): Int = 2 // a: Int = 2</p>

<p>
  Grammar of a tuple pattern</p>

<p>


  tuple-pattern


  →
(­tuple-pattern-element-list­<sub>opt</sub>­)­</p>

<p>


  tuple-pattern-element-list


  →

tuple-pattern-element­

tuple-pattern-element-list­</p>

<p>


  tuple-pattern-element


  →
pattern­






Enumeration Case Pattern</p>

<p>
  An <emphasis>enumeration case pattern</emphasis> matches a case of an existing enumeration type. Enumeration case patterns appear only in switch statement case labels.</p>

<p>
  If the enumeration case you’re trying to match has any associated values, the corresponding enumeration case pattern must specify a tuple pattern that contains one element for each associated value. For an example that uses a switch statement to match enumeration cases containing associated values, see Associated Values.</p>

<p>
  Grammar of an enumeration case pattern</p>

<p>


  enum-case-pattern


  →
type-identifier­<sub>opt</sub>­.­enum-case-name­tuple-pattern­<sub>opt</sub>­






Type-Casting Patterns</p>

<p>
  There are two type-casting patterns, the is pattern and the as pattern. Both type-casting patterns appear only in switch statement case labels. The is and as patterns have the following form:</p>

<p>is <emphasis>type</emphasis></p>

<p><emphasis>pattern</emphasis> as <emphasis>type</emphasis></p>

<p>
  The is pattern matches a value if the type of that value at runtime is the same as the type specified in the right-hand side of the is pattern—or a subclass of that type. The is pattern behaves like the is operator in that they both perform a type cast but discard the returned type.</p>

<p>
  The as pattern matches a value if the type of that value at runtime is the same as the type specified in the right-hand side of the as pattern—or a subclass of that type. If the match succeeds, the type of the matched value is cast to the <emphasis>pattern</emphasis> specified in the left-hand side of the as pattern.</p>

<p>
  For an example that uses a switch statement to match values with is and as patterns, see Type Casting for Any and AnyObject.</p>

<p>
  Grammar of a type casting pattern</p>

<p>


  type-casting-pattern


  →

is-pattern­

as-pattern­</p>

<p>


  is-pattern


  →
is­type­</p>

<p>


  as-pattern


  →
type­






Expression Pattern</p>

<p>
  An <emphasis>expression pattern</emphasis> represents the value of an expression. Expression patterns appear only in switch statement case labels.</p>

<p>
  The expression represented by the expression pattern is compared with the value of an input expression using the Swift standard library ~= operator. The matches succeeds if the ~= operator returns true. By default, the ~= operator compares two values of the same type using the == operator. It can also match an integer value with a range of integers in an Range object, as the following example shows:</p>

<p>let point = (1, 2)</p>

<p>switch point {</p>

<p>case (0, 0):</p>

<p> println("(0, 0) is at the origin.")</p>

<p>case (-2...2, -2...2):</p>

<p> println("(\(point.0), \(point.1)) is near the origin.")</p>

<p>default:</p>

<p> println("The point is at (\(point.0), \(point.1)).")</p>

<p>}</p>

<p>// prints "(1, 2) is near the origin."</p>

<p>
  You can overload the ~= operator to provide custom expression matching behavior. For example, you can rewrite the above example to compare the point expression with a string representations of points.</p>

<p>// Overload the ~= operator to match a string with an integer</p>

<p>func ~=(pattern: String, value: Int) -&gt; Bool {</p>

<p> return pattern == "\(value)"</p>

<p>}</p>

<p>switch point {</p>

<p>case ("0", "0"):</p>

<p> println("(0, 0) is at the origin.")</p>

<p>case ("-2...2", "-2...2"):</p>

<p> println("(\(point.0), \(point.1)) is near the origin.")</p>

<p>default:</p>

<p> println("The point is at (\(point.0), \(point.1)).")</p>

<p>}</p>

<p>// prints "(1, 2) is near the origin."</p>

<p>
  Grammar of an expression pattern</p>

<p>


  expression-pattern


  →
expression­</p>

<p>
Generic Parameters and Arguments</p>

<p>On This Page</p>

<p>

            Generic Parameter Clause</p>

<p>

            Generic Argument Clause</p>

<p>
  This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called.</p>

<p>
  For an overview of generics in Swift, see Generics.




Generic Parameter Clause</p>

<p>
  A <emphasis>generic parameter clause</emphasis> specifies the type parameters of a generic type or function, along with any associated constraints and requirements on those parameters. A generic parameter clause is enclosed in angle brackets (&lt;&gt;) and has one of the following forms:</p>

<p>&lt;<emphasis>generic parameter list</emphasis>&gt;</p>

<p>&lt;<emphasis>generic parameter list</emphasis> where <emphasis>requirements</emphasis>&gt;</p>

<p>
  The <emphasis>generic parameter list</emphasis> is a comma-separated list of generic parameters, each of which has the following form:</p>

<p><emphasis>type parameter</emphasis>: <emphasis>constraint</emphasis></p>

<p>
  A generic parameter consists of a <emphasis>type parameter</emphasis> followed by an optional <emphasis>constraint</emphasis>. A <emphasis>type parameter</emphasis> is simply the name of a placeholder type (for instance, T, U, V, KeyType, ValueType, and so on). You have access to the type parameters (and any of their associated types) in the rest of the type, function, or initializer declaration, including in the signature of the function or initializer.</p>

<p>
  The <emphasis>constraint</emphasis> specifies that a type parameter inherits from a specific class or conforms to a protocol or protocol composition. For instance, in the generic function below, the generic parameter T: Comparable indicates that any type argument substituted for the type parameter T must conform to the Comparable protocol.</p>

<p>func simpleMin&lt;T: Comparable&gt;(x: T, y: T) -&gt; T {</p>

<p> if x &lt; y {</p>

<p> return y</p>

<p>    }</p>

<p> return x</p>

<p>}</p>

<p>
  Because Int and Double, for example, both conform to the Comparable protocol, this function accepts arguments of either type. In contrast with generic types, you don’t specify a generic argument clause when you use a generic function or initializer. The type arguments are instead inferred from the type of the arguments passed to the function or initializer.</p>

<p>simpleMin(17, 42) // T is inferred to be Int</p>

<p>simpleMin(3.14159, 2.71828) // T is inferred to be Double





Where Clauses</p>

<p>
  You can specify additional requirements on type parameters and their associated types by including a where clause after the <emphasis>generic parameter list</emphasis>. A where clause consists of the keyword where, followed by a comma-separated list of one or more <emphasis>requirements</emphasis>.</p>

<p>
  The <emphasis>requirements</emphasis> in a where clause specify that a type parameter inherits from a class or conforms to a protocol or protocol composition. Although the where clause provides syntactic sugar for expressing simple constraints on type parameters (for instance, T: Comparable is equivalent to T where T: Comparable and so on), you can use it to provide more complex constraints on type parameters and their associated types. For instance, you can express the constraints that a generic type T inherits from a class C and conforms to a protocol P as &lt;T where T: C, T: P&gt;.</p>

<p>
  As mentioned above, you can constrain the associated types of type parameters to conform to protocols. For example, the generic parameter clause &lt;T: Generator where T.Element: Equatable&gt; specifies that T conforms to the Generator protocol and the associated type of T, T.Element, conforms to the Equatable protocol (T has the associated type Element because Generator declares Element and T conforms to Generator).</p>

<p>
  You can also specify the requirement that two types be identical, using the == operator. For example, the generic parameter clause &lt;T: Generator, U: Generator where T.Element == U.Element&gt; expresses the constraints that T and U conform to the Generator protocol and that their associated types must be identical.</p>

<p>
  Any type argument substituted for a type parameter must meet all the constraints and requirements placed on the type parameter.</p>

<p>
  You can overload a generic function or initializer by providing different constraints, requirements, or both on the type parameters in the generic parameter clause. When you call an overloaded generic function or initializer, the compiler uses these constraints to resolve which overloaded function or initializer to invoke.</p>

<p>
  You can subclass a generic class, but the subclass must also be a generic class.</p>

<p>
  Grammar of a generic parameter clause</p>

<p>


  generic-parameter-clause


  →
&lt;­requirement-clause­<sub>opt</sub>­&gt;­</p>

<p>


  generic-parameter-list


  →

generic-parameter­

generic-parameter-list­</p>

<p>


  generic-parameter


  →
type-name­</p>

<p>


  generic-parameter


  →
type-name­:­type-identifier­</p>

<p>


  generic-parameter


  →
type-name­:­protocol-composition-type­</p>

<p>


  requirement-clause


  →
where­requirement-list­</p>

<p>


  requirement-list


  →

requirement­

requirement-list­</p>

<p>


  requirement


  →

conformance-requirement­

same-type-requirement­</p>

<p>


  conformance-requirement


  →
type-identifier­:­type-identifier­</p>

<p>


  conformance-requirement


  →
type-identifier­:­protocol-composition-type­</p>

<p>


  same-type-requirement


  →
type-identifier­==­type-identifier­







Generic Argument Clause</p>

<p>
  A <emphasis>generic argument clause</emphasis> specifies the type arguments of a generic type. A generic argument clause is enclosed in angle brackets (&lt;&gt;) and has the following form:</p>

<p>&lt;<emphasis>generic argument list</emphasis>&gt;</p>

<p>
  The <emphasis>generic argument list</emphasis> is a comma-separated list of type arguments. A <emphasis>type argument</emphasis> is the name of an actual concrete type that replaces a corresponding type parameter in the generic parameter clause of a generic type. The result is a specialized version of that generic type. As an example, the Swift standard library defines a generic dictionary type as:</p>

<p>struct Dictionary&lt;KeyType: Hashable, ValueType&gt;: Collection, DictionaryLiteralConvertible {</p>

<p> /* ... */</p>

<p>}</p>

<p>
  The specialized version of the generic Dictionary type, Dictionary&lt;String, Int&gt; is formed by replacing the generic parameters KeyType: Hashable and ValueType with the concrete type arguments String and Int. Each type argument must satisfy all the constraints of the generic parameter it replaces, including any additional requirements specified in a where clause. In the example above, the KeyType type parameter is constrained to conform to the Hashable protocol and therefore String must also conform to the Hashable protocol.</p>

<p>
  You can also replace a type parameter with a type argument that is itself a specialized version of a generic type (provided it satisfies the appropriate constraints and requirements). For example, you can replace the type parameter T in Array&lt;T&gt; with a specialized version of an array, Array&lt;Int&gt;, to form an array whose elements are themselves arrays of integers.</p>

<p>let arrayOfArrays: Array&lt;Array&lt;Int&gt;&gt; = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</p>

<p>
  As mentioned in Generic Parameter Clause, you don’t use a generic argument clause to specify the type arguments of a generic function or initializer.</p>

<p>
  Grammar of a generic argument clause</p>

<p>


  generic-argument-clause


  →
&lt;­generic-argument-list­&gt;­</p>

<p>


  generic-argument-list


  →

generic-argument­

generic-argument-list­</p>

<p>


  generic-argument


  →
type­</p>

<p>
Summary of the Grammar</p>

<p>On This Page</p>

<p>

            Statements</p>

<p>

            Generic Parameters and Arguments</p>

<p>

            Declarations</p>

<p>

            Patterns</p>

<p>

            Attributes</p>

<p>

            Expressions</p>

<p>

            Lexical Structure</p>

<p>

            Types
          






Statements</p>

<p>
  Grammar of a statement</p>

<p>


  statement


  →
expression­;­<sub>opt</sub>­</p>

<p>


  statement


  →
declaration­;­<sub>opt</sub>­</p>

<p>


  statement


  →
loop-statement­;­<sub>opt</sub>­</p>

<p>


  statement


  →
branch-statement­;­<sub>opt</sub>­</p>

<p>


  statement


  →
labeled-statement­</p>

<p>


  statement


  →
control-transfer-statement­;­<sub>opt</sub>­</p>

<p>


  statements


  →
statement­statements­<sub>opt</sub>­</p>

<p>
  Grammar of a loop statement</p>

<p>


  loop-statement


  →
for-statement­</p>

<p>


  loop-statement


  →
for-in-statement­</p>

<p>


  loop-statement


  →
while-statement­</p>

<p>


  loop-statement


  →
do-while-statement­</p>

<p>
  Grammar of a for statement</p>

<p>


  for-statement


  →
for­for-init­<sub>opt</sub>­;­expression­<sub>opt</sub>­;­expression­<sub>opt</sub>­code-block­</p>

<p>


  for-statement


  →
for­(­for-init­<sub>opt</sub>­;­expression­<sub>opt</sub>­;­expression­<sub>opt</sub>­)­code-block­</p>

<p>


  for-init


  →

variable-declaration­

expression-list­</p>

<p>
  Grammar of a for-in statement</p>

<p>


  for-in-statement


  →
for­pattern­in­expression­code-block­</p>

<p>
  Grammar of a while statement</p>

<p>


  while-statement


  →
while­while-condition­code-block­</p>

<p>


  while-condition


  →

expression­

declaration­</p>

<p>
  Grammar of a do-while statement</p>

<p>


  do-while-statement


  →
do­code-block­while­while-condition­</p>

<p>
  Grammar of a branch statement</p>

<p>


  branch-statement


  →
if-statement­</p>

<p>


  branch-statement


  →
switch-statement­</p>

<p>
  Grammar of an if statement</p>

<p>


  if-statement


  →
if­if-condition­code-block­else-clause­<sub>opt</sub>­</p>

<p>


  if-condition


  →

expression­

declaration­</p>

<p>


  else-clause


  →

else­code-block­

else­if-statement­</p>

<p>
  Grammar of a switch statement</p>

<p>


  switch-statement


  →
switch­expression­{­switch-cases­<sub>opt</sub>­}­</p>

<p>


  switch-cases


  →
switch-case­switch-cases­<sub>opt</sub>­</p>

<p>


  switch-case


  →

case-label­statements­

default-label­statements­</p>

<p>


  switch-case


  →

case-label­;­

default-label­;­</p>

<p>


  case-label


  →
case­case-item-list­:­</p>

<p>


  case-item-list


  →

pattern­guard-clause­<sub>opt</sub>­

pattern­guard-clause­<sub>opt</sub>­,­case-item-list­</p>

<p>


  default-label


  →
default­:­</p>

<p>


  guard-clause


  →
where­guard-expression­</p>

<p>


  guard-expression


  →
expression­</p>

<p>
  Grammar of a labeled statement</p>

<p>


  labeled-statement


  →

statement-label­loop-statement­

statement-label­switch-statement­</p>

<p>


  statement-label


  →
label-name­:­</p>

<p>


  label-name


  →
identifier­</p>

<p>
  Grammar of a control transfer statement</p>

<p>


  control-transfer-statement


  →
break-statement­</p>

<p>


  control-transfer-statement


  →
continue-statement­</p>

<p>


  control-transfer-statement


  →
fallthrough-statement­</p>

<p>


  control-transfer-statement


  →
return-statement­</p>

<p>
  Grammar of a break statement</p>

<p>


  break-statement


  →
break­label-name­<sub>opt</sub>­</p>

<p>
  Grammar of a continue statement</p>

<p>


  continue-statement


  →
continue­label-name­<sub>opt</sub>­</p>

<p>
  Grammar of a fallthrough statement</p>

<p>


  fallthrough-statement


  →
fallthrough­</p>

<p>
  Grammar of a return statement</p>

<p>


  return-statement


  →
return­expression­<sub>opt</sub>­






Generic Parameters and Arguments</p>

<p>
  Grammar of a generic parameter clause</p>

<p>


  generic-parameter-clause


  →
&lt;­generic-parameter-list­requirement-clause­<sub>opt</sub>­&gt;­</p>

<p>


  generic-parameter-list


  →

generic-parameter­

generic-parameter­,­generic-parameter-list­</p>

<p>


  generic-parameter


  →
type-name­</p>

<p>


  generic-parameter


  →
type-name­:­type-identifier­</p>

<p>


  generic-parameter


  →
type-name­:­protocol-composition-type­</p>

<p>


  requirement-clause


  →
where­requirement-list­</p>

<p>


  requirement-list


  →

requirement­

requirement­,­requirement-list­</p>

<p>


  requirement


  →

conformance-requirement­

same-type-requirement­</p>

<p>


  conformance-requirement


  →
type-identifier­:­type-identifier­</p>

<p>


  conformance-requirement


  →
type-identifier­:­protocol-composition-type­</p>

<p>


  same-type-requirement


  →
type-identifier­==­type-identifier­</p>

<p>
  Grammar of a generic argument clause</p>

<p>


  generic-argument-clause


  →
&lt;­generic-argument-list­&gt;­</p>

<p>


  generic-argument-list


  →

generic-argument­

generic-argument­,­generic-argument-list­</p>

<p>


  generic-argument


  →
type­






Declarations</p>

<p>
  Grammar of a declaration</p>

<p>


  declaration


  →
import-declaration­</p>

<p>


  declaration


  →
constant-declaration­</p>

<p>


  declaration


  →
variable-declaration­</p>

<p>


  declaration


  →
typealias-declaration­</p>

<p>


  declaration


  →
function-declaration­</p>

<p>


  declaration


  →
enum-declaration­</p>

<p>


  declaration


  →
struct-declaration­</p>

<p>


  declaration


  →
class-declaration­</p>

<p>


  declaration


  →
protocol-declaration­</p>

<p>


  declaration


  →
initializer-declaration­</p>

<p>


  declaration


  →
deinitializer-declaration­</p>

<p>


  declaration


  →
extension-declaration­</p>

<p>


  declaration


  →
subscript-declaration­</p>

<p>


  declaration


  →
operator-declaration­</p>

<p>


  declarations


  →
declaration­declarations­<sub>opt</sub>­</p>

<p>


  declaration-specifiers


  →
declaration-specifier­declaration-specifiers­<sub>opt</sub>­</p>

<p>


  declaration-specifier


  →

class­

mutating­

nonmutating­

override­

static­

unowned­

unowned(safe)­

unowned(unsafe)­

weak­</p>

<p>
  Grammar of a top-level declaration</p>

<p>


  top-level-declaration


  →
statements­<sub>opt</sub>­</p>

<p>
  Grammar of a code block</p>

<p>


  code-block


  →
{­statements­<sub>opt</sub>­}­</p>

<p>
  Grammar of an import declaration</p>

<p>


  import-declaration


  →
attributes­<sub>opt</sub>­import­import-kind­<sub>opt</sub>­import-path­</p>

<p>


  import-kind


  →

typealias­

struct­

class­

enum­

protocol­

var­

func­</p>

<p>


  import-path


  →

import-path-identifier­

import-path-identifier­.­import-path­</p>

<p>


  import-path-identifier


  →

identifier­

operator­</p>

<p>
  Grammar of a constant declaration</p>

<p>


  constant-declaration


  →
attributes­<sub>opt</sub>­declaration-specifiers­<sub>opt</sub>­let­pattern-initializer-list­</p>

<p>


  pattern-initializer-list


  →

pattern-initializer­

pattern-initializer­,­pattern-initializer-list­</p>

<p>


  pattern-initializer


  →
pattern­initializer­<sub>opt</sub>­</p>

<p>


  initializer


  →
=­expression­</p>

<p>
  Grammar of a variable declaration</p>

<p>


  variable-declaration


  →
variable-declaration-head­pattern-initializer-list­</p>

<p>


  variable-declaration


  →
variable-declaration-head­variable-name­type-annotation­code-block­</p>

<p>


  variable-declaration


  →
variable-declaration-head­variable-name­type-annotation­getter-setter-block­</p>

<p>


  variable-declaration


  →
variable-declaration-head­variable-name­type-annotation­getter-setter-keyword-block­</p>

<p>


  variable-declaration


  →
variable-declaration-head­variable-name­type-annotation­initializer­<sub>opt</sub>­willSet-didSet-block­</p>

<p>


  variable-declaration-head


  →
attributes­<sub>opt</sub>­declaration-specifiers­<sub>opt</sub>­var­</p>

<p>


  variable-name


  →
identifier­</p>

<p>


  getter-setter-block


  →
{­getter-clause­setter-clause­<sub>opt</sub>­}­</p>

<p>


  getter-setter-block


  →
{­setter-clause­getter-clause­}­</p>

<p>


  getter-clause


  →
attributes­<sub>opt</sub>­get­code-block­</p>

<p>


  setter-clause


  →
attributes­<sub>opt</sub>­set­setter-name­<sub>opt</sub>­code-block­</p>

<p>


  setter-name


  →
(­identifier­)­</p>

<p>


  getter-setter-keyword-block


  →
{­getter-keyword-clause­setter-keyword-clause­<sub>opt</sub>­}­</p>

<p>


  getter-setter-keyword-block


  →
{­setter-keyword-clause­getter-keyword-clause­}­</p>

<p>


  getter-keyword-clause


  →
attributes­<sub>opt</sub>­get­</p>

<p>


  setter-keyword-clause


  →
attributes­<sub>opt</sub>­set­</p>

<p>


  willSet-didSet-block


  →
{­willSet-clause­didSet-clause­<sub>opt</sub>­}­</p>

<p>


  willSet-didSet-block


  →
{­didSet-clause­willSet-clause­}­</p>

<p>


  willSet-clause


  →
attributes­<sub>opt</sub>­willSet­setter-name­<sub>opt</sub>­code-block­</p>

<p>


  didSet-clause


  →
attributes­<sub>opt</sub>­didSet­setter-name­<sub>opt</sub>­code-block­</p>

<p>
  Grammar of a type alias declaration</p>

<p>


  typealias-declaration


  →
typealias-head­typealias-assignment­</p>

<p>


  typealias-head


  →
typealias­typealias-name­</p>

<p>


  typealias-name


  →
identifier­</p>

<p>


  typealias-assignment


  →
=­type­</p>

<p>
  Grammar of a function declaration</p>

<p>


  function-declaration


  →
function-head­function-name­generic-parameter-clause­<sub>opt</sub>­function-signature­function-body­</p>

<p>


  function-head


  →
attributes­<sub>opt</sub>­declaration-specifiers­<sub>opt</sub>­func­</p>

<p>


  function-name


  →

identifier­

operator­</p>

<p>


  function-signature


  →
parameter-clauses­function-result­<sub>opt</sub>­</p>

<p>


  function-result


  →
-&gt;­attributes­<sub>opt</sub>­type­</p>

<p>


  function-body


  →
code-block­</p>

<p>


  parameter-clauses


  →
parameter-clause­parameter-clauses­<sub>opt</sub>­</p>

<p>


  parameter-clause


  →

(­)­

(­parameter-list­...­<sub>opt</sub>­)­</p>

<p>


  parameter-list


  →

parameter­

parameter­,­parameter-list­</p>

<p>


  parameter


  →
inout­<sub>opt</sub>­let­<sub>opt</sub>­#­<sub>opt</sub>­parameter-name­local-parameter-name­<sub>opt</sub>­type-annotation­default-argument-clause­<sub>opt</sub>­</p>

<p>


  parameter


  →
inout­<sub>opt</sub>­var­#­<sub>opt</sub>­parameter-name­local-parameter-name­<sub>opt</sub>­type-annotation­default-argument-clause­<sub>opt</sub>­</p>

<p>


  parameter


  →
attributes­<sub>opt</sub>­type­</p>

<p>


  parameter-name


  →

identifier­

_­</p>

<p>


  local-parameter-name


  →

identifier­

_­</p>

<p>


  default-argument-clause


  →
=­expression­</p>

<p>
  Grammar of an enumeration declaration</p>

<p>


  enum-declaration


  →

attributes­<sub>opt</sub>­union-style-enum­

attributes­<sub>opt</sub>­raw-value-style-enum­</p>

<p>


  union-style-enum


  →
enum-name­generic-parameter-clause­<sub>opt</sub>­{­union-style-enum-members­<sub>opt</sub>­}­</p>

<p>


  union-style-enum-members


  →
union-style-enum-member­union-style-enum-members­<sub>opt</sub>­</p>

<p>


  union-style-enum-member


  →

declaration­

union-style-enum-case-clause­</p>

<p>


  union-style-enum-case-clause


  →
attributes­<sub>opt</sub>­case­union-style-enum-case-list­</p>

<p>


  union-style-enum-case-list


  →

union-style-enum-case­

union-style-enum-case­,­union-style-enum-case-list­</p>

<p>


  union-style-enum-case


  →
enum-case-name­tuple-type­<sub>opt</sub>­</p>

<p>


  enum-name


  →
identifier­</p>

<p>


  enum-case-name


  →
identifier­</p>

<p>


  raw-value-style-enum


  →
enum-name­generic-parameter-clause­<sub>opt</sub>­:­type-identifier­{­raw-value-style-enum-members­<sub>opt</sub>­}­</p>

<p>


  raw-value-style-enum-members


  →
raw-value-style-enum-member­raw-value-style-enum-members­<sub>opt</sub>­</p>

<p>


  raw-value-style-enum-member


  →

declaration­

raw-value-style-enum-case-clause­</p>

<p>


  raw-value-style-enum-case-clause


  →
attributes­<sub>opt</sub>­case­raw-value-style-enum-case-list­</p>

<p>


  raw-value-style-enum-case-list


  →

raw-value-style-enum-case­

raw-value-style-enum-case­,­raw-value-style-enum-case-list­</p>

<p>


  raw-value-style-enum-case


  →
enum-case-name­raw-value-assignment­<sub>opt</sub>­</p>

<p>


  raw-value-assignment


  →
=­literal­</p>

<p>
  Grammar of a structure declaration</p>

<p>


  struct-declaration


  →
attributes­<sub>opt</sub>­struct­struct-name­generic-parameter-clause­<sub>opt</sub>­type-inheritance-clause­<sub>opt</sub>­struct-body­</p>

<p>


  struct-name


  →
identifier­</p>

<p>


  struct-body


  →
{­declarations­<sub>opt</sub>­}­</p>

<p>
  Grammar of a class declaration</p>

<p>


  class-declaration


  →
attributes­<sub>opt</sub>­class­class-name­generic-parameter-clause­<sub>opt</sub>­type-inheritance-clause­<sub>opt</sub>­class-body­</p>

<p>


  class-name


  →
identifier­</p>

<p>


  class-body


  →
{­declarations­<sub>opt</sub>­}­</p>

<p>
  Grammar of a protocol declaration</p>

<p>


  protocol-declaration


  →
attributes­<sub>opt</sub>­protocol­protocol-name­type-inheritance-clause­<sub>opt</sub>­protocol-body­</p>

<p>


  protocol-name


  →
identifier­</p>

<p>


  protocol-body


  →
{­protocol-member-declarations­<sub>opt</sub>­}­</p>

<p>


  protocol-member-declaration


  →
protocol-property-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-method-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-initializer-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-subscript-declaration­</p>

<p>


  protocol-member-declaration


  →
protocol-associated-type-declaration­</p>

<p>


  protocol-member-declarations


  →
protocol-member-declaration­protocol-member-declarations­<sub>opt</sub>­</p>

<p>
  Grammar of a protocol property declaration</p>

<p>


  protocol-property-declaration


  →
variable-declaration-head­variable-name­type-annotation­getter-setter-keyword-block­</p>

<p>
  Grammar of a protocol method declaration</p>

<p>


  protocol-method-declaration


  →
function-head­function-name­generic-parameter-clause­<sub>opt</sub>­function-signature­</p>

<p>
  Grammar of a protocol initializer declaration</p>

<p>


  protocol-initializer-declaration


  →
initializer-head­generic-parameter-clause­<sub>opt</sub>­parameter-clause­</p>

<p>
  Grammar of a protocol subscript declaration</p>

<p>


  protocol-subscript-declaration


  →
subscript-head­subscript-result­getter-setter-keyword-block­</p>

<p>
  Grammar of a protocol associated type declaration</p>

<p>


  protocol-associated-type-declaration


  →
typealias-head­type-inheritance-clause­<sub>opt</sub>­typealias-assignment­<sub>opt</sub>­</p>

<p>
  Grammar of an initializer declaration</p>

<p>


  initializer-declaration


  →
initializer-head­generic-parameter-clause­<sub>opt</sub>­parameter-clause­initializer-body­</p>

<p>


  initializer-head


  →
attributes­<sub>opt</sub>­convenience­<sub>opt</sub>­init­</p>

<p>


  initializer-body


  →
code-block­</p>

<p>
  Grammar of a deinitializer declaration</p>

<p>


  deinitializer-declaration


  →
attributes­<sub>opt</sub>­deinit­code-block­</p>

<p>
  Grammar of an extension declaration</p>

<p>


  extension-declaration


  →
extension­type-identifier­type-inheritance-clause­<sub>opt</sub>­extension-body­</p>

<p>


  extension-body


  →
{­declarations­<sub>opt</sub>­}­</p>

<p>
  Grammar of a subscript declaration</p>

<p>


  subscript-declaration


  →
subscript-head­subscript-result­code-block­</p>

<p>


  subscript-declaration


  →
subscript-head­subscript-result­getter-setter-block­</p>

<p>


  subscript-declaration


  →
subscript-head­subscript-result­getter-setter-keyword-block­</p>

<p>


  subscript-head


  →
attributes­<sub>opt</sub>­subscript­parameter-clause­</p>

<p>


  subscript-result


  →
-&gt;­attributes­<sub>opt</sub>­type­</p>

<p>
  Grammar of an operator declaration</p>

<p>


  operator-declaration


  →

prefix-operator-declaration­

postfix-operator-declaration­

infix-operator-declaration­</p>

<p>


  prefix-operator-declaration


  →
operator­prefix­operator­{­}­</p>

<p>


  postfix-operator-declaration


  →
operator­postfix­operator­{­}­</p>

<p>


  infix-operator-declaration


  →
operator­infix­operator­{­infix-operator-attributes­<sub>opt</sub>­}­</p>

<p>


  infix-operator-attributes


  →
precedence-clause­<sub>opt</sub>­associativity-clause­<sub>opt</sub>­</p>

<p>


  precedence-clause


  →
precedence­precedence-level­</p>

<p>


  precedence-level


  →
Digit 0 through 255</p>

<p>


  associativity-clause


  →
associativity­associativity­</p>

<p>


  associativity


  →

left­

right­

none­







Patterns</p>

<p>
  Grammar of a pattern</p>

<p>


  pattern


  →
wildcard-pattern­type-annotation­<sub>opt</sub>­</p>

<p>


  pattern


  →
identifier-pattern­type-annotation­<sub>opt</sub>­</p>

<p>


  pattern


  →
value-binding-pattern­</p>

<p>


  pattern


  →
tuple-pattern­type-annotation­<sub>opt</sub>­</p>

<p>


  pattern


  →
enum-case-pattern­</p>

<p>


  pattern


  →
type-casting-pattern­</p>

<p>


  pattern


  →
expression-pattern­</p>

<p>
  Grammar of a wildcard pattern</p>

<p>


  wildcard-pattern


  →
_­</p>

<p>
  Grammar of an identifier pattern</p>

<p>


  identifier-pattern


  →
identifier­</p>

<p>
  Grammar of a value-binding pattern</p>

<p>


  value-binding-pattern


  →

var­pattern­

let­pattern­</p>

<p>
  Grammar of a tuple pattern</p>

<p>


  tuple-pattern


  →
(­tuple-pattern-element-list­<sub>opt</sub>­)­</p>

<p>


  tuple-pattern-element-list


  →

tuple-pattern-element­

tuple-pattern-element­,­tuple-pattern-element-list­</p>

<p>


  tuple-pattern-element


  →
pattern­</p>

<p>
  Grammar of an enumeration case pattern</p>

<p>


  enum-case-pattern


  →
type-identifier­<sub>opt</sub>­.­enum-case-name­tuple-pattern­<sub>opt</sub>­</p>

<p>
  Grammar of a type casting pattern</p>

<p>


  type-casting-pattern


  →

is-pattern­

as-pattern­</p>

<p>


  is-pattern


  →
is­type­</p>

<p>


  as-pattern


  →
pattern­as­type­</p>

<p>
  Grammar of an expression pattern</p>

<p>


  expression-pattern


  →
expression­






Attributes</p>

<p>
  Grammar of an attribute</p>

<p>


  attribute


  →
@­attribute-name­attribute-argument-clause­<sub>opt</sub>­</p>

<p>


  attribute-name


  →
identifier­</p>

<p>


  attribute-argument-clause


  →
(­balanced-tokens­<sub>opt</sub>­)­</p>

<p>


  attributes


  →
attribute­attributes­<sub>opt</sub>­</p>

<p>


  balanced-tokens


  →
balanced-token­balanced-tokens­<sub>opt</sub>­</p>

<p>


  balanced-token


  →
(­balanced-tokens­<sub>opt</sub>­)­</p>

<p>


  balanced-token


  →
[­balanced-tokens­<sub>opt</sub>­]­</p>

<p>


  balanced-token


  →
{­balanced-tokens­<sub>opt</sub>­}­</p>

<p>


  balanced-token


  →
Any identifier, keyword, literal, or operator</p>

<p>


  balanced-token


  →
Any punctuation except (­, )­, [­, ]­, {­, or }­






Expressions</p>

<p>
  Grammar of an expression</p>

<p>


  expression


  →
prefix-expression­binary-expressions­<sub>opt</sub>­</p>

<p>


  expression-list


  →

expression­

expression­,­expression-list­</p>

<p>
  Grammar of a prefix expression</p>

<p>


  prefix-expression


  →
prefix-operator­<sub>opt</sub>­postfix-expression­</p>

<p>


  prefix-expression


  →
in-out-expression­</p>

<p>


  in-out-expression


  →
&amp;­identifier­</p>

<p>
  Grammar of a binary expression</p>

<p>


  binary-expression


  →
binary-operator­prefix-expression­</p>

<p>


  binary-expression


  →
assignment-operator­prefix-expression­</p>

<p>


  binary-expression


  →
conditional-operator­prefix-expression­</p>

<p>


  binary-expression


  →
type-casting-operator­</p>

<p>


  binary-expressions


  →
binary-expression­binary-expressions­<sub>opt</sub>­</p>

<p>
  Grammar of an assignment operator</p>

<p>


  assignment-operator


  →
=­</p>

<p>
  Grammar of a conditional operator</p>

<p>


  conditional-operator


  →
?­expression­:­</p>

<p>
  Grammar of a type-casting operator</p>

<p>


  type-casting-operator


  →

is­type­

as­?­<sub>opt</sub>­type­</p>

<p>
  Grammar of a primary expression</p>

<p>


  primary-expression


  →
identifier­generic-argument-clause­<sub>opt</sub>­</p>

<p>


  primary-expression


  →
literal-expression­</p>

<p>


  primary-expression


  →
self-expression­</p>

<p>


  primary-expression


  →
superclass-expression­</p>

<p>


  primary-expression


  →
closure-expression­</p>

<p>


  primary-expression


  →
parenthesized-expression­</p>

<p>


  primary-expression


  →
implicit-member-expression­</p>

<p>


  primary-expression


  →
wildcard-expression­</p>

<p>
  Grammar of a literal expression</p>

<p>


  literal-expression


  →
literal­</p>

<p>


  literal-expression


  →

array-literal­

dictionary-literal­</p>

<p>


  literal-expression


  →

__FILE__­

__LINE__­

__COLUMN__­

__FUNCTION__­</p>

<p>


  array-literal


  →
[­array-literal-items­<sub>opt</sub>­]­</p>

<p>


  array-literal-items


  →

array-literal-item­,­<sub>opt</sub>­

array-literal-item­,­array-literal-items­</p>

<p>


  array-literal-item


  →
expression­</p>

<p>


  dictionary-literal


  →

[­dictionary-literal-items­]­

[­:­]­</p>

<p>


  dictionary-literal-items


  →

dictionary-literal-item­,­<sub>opt</sub>­

dictionary-literal-item­,­dictionary-literal-items­</p>

<p>


  dictionary-literal-item


  →
expression­:­expression­</p>

<p>
  Grammar of a self expression</p>

<p>


  self-expression


  →
self­</p>

<p>


  self-expression


  →
self­.­identifier­</p>

<p>


  self-expression


  →
self­[­expression­]­</p>

<p>


  self-expression


  →
self­.­init­</p>

<p>
  Grammar of a superclass expression</p>

<p>


  superclass-expression


  →

superclass-method-expression­

superclass-subscript-expression­

superclass-initializer-expression­</p>

<p>


  superclass-method-expression


  →
super­.­identifier­</p>

<p>


  superclass-subscript-expression


  →
super­[­expression­]­</p>

<p>


  superclass-initializer-expression


  →
super­.­init­</p>

<p>
  Grammar of a closure expression</p>

<p>


  closure-expression


  →
{­closure-signature­<sub>opt</sub>­statements­}­</p>

<p>


  closure-signature


  →
parameter-clause­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
identifier-list­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
capture-list­parameter-clause­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
capture-list­identifier-list­function-result­<sub>opt</sub>­in­</p>

<p>


  closure-signature


  →
capture-list­in­</p>

<p>


  capture-list


  →
[­capture-specifier­expression­]­</p>

<p>


  capture-specifier


  →

weak­

unowned­

unowned(safe)­

unowned(unsafe)­</p>

<p>
  Grammar of a implicit member expression</p>

<p>


  implicit-member-expression


  →
.­identifier­</p>

<p>
  Grammar of a parenthesized expression</p>

<p>


  parenthesized-expression


  →
(­expression-element-list­<sub>opt</sub>­)­</p>

<p>


  expression-element-list


  →

expression-element­

expression-element­,­expression-element-list­</p>

<p>


  expression-element


  →

expression­

identifier­:­expression­</p>

<p>
  Grammar of a wildcard expression</p>

<p>


  wildcard-expression


  →
_­</p>

<p>
  Grammar of a postfix expression</p>

<p>


  postfix-expression


  →
primary-expression­</p>

<p>


  postfix-expression


  →
postfix-expression­postfix-operator­</p>

<p>


  postfix-expression


  →
function-call-expression­</p>

<p>


  postfix-expression


  →
initializer-expression­</p>

<p>


  postfix-expression


  →
explicit-member-expression­</p>

<p>


  postfix-expression


  →
postfix-self-expression­</p>

<p>


  postfix-expression


  →
dynamic-type-expression­</p>

<p>


  postfix-expression


  →
subscript-expression­</p>

<p>


  postfix-expression


  →
forced-value-expression­</p>

<p>


  postfix-expression


  →
optional-chaining-expression­</p>

<p>
  Grammar of a function call expression</p>

<p>


  function-call-expression


  →
postfix-expression­parenthesized-expression­</p>

<p>


  function-call-expression


  →
postfix-expression­parenthesized-expression­<sub>opt</sub>­trailing-closure­</p>

<p>


  trailing-closure


  →
closure-expression­</p>

<p>
  Grammar of an initializer expression</p>

<p>


  initializer-expression


  →
postfix-expression­.­init­</p>

<p>
  Grammar of an explicit member expression</p>

<p>


  explicit-member-expression


  →
postfix-expression­.­decimal-digit­</p>

<p>


  explicit-member-expression


  →
postfix-expression­.­identifier­generic-argument-clause­<sub>opt</sub>­</p>

<p>
  Grammar of a self expression</p>

<p>


  postfix-self-expression


  →
postfix-expression­.­self­</p>

<p>
  Grammar of a dynamic type expression</p>

<p>


  dynamic-type-expression


  →
postfix-expression­.­dynamicType­</p>

<p>
  Grammar of a subscript expression</p>

<p>


  subscript-expression


  →
postfix-expression­[­expression-list­]­</p>

<p>
  Grammar of a forced-value expression</p>

<p>


  forced-value-expression


  →
postfix-expression­!­</p>

<p>
  Grammar of an optional-chaining expression</p>

<p>


  optional-chaining-expression


  →
postfix-expression­?­






Lexical Structure</p>

<p>
  Grammar of an identifier</p>

<p>


  identifier


  →
identifier-head­identifier-characters­<sub>opt</sub>­</p>

<p>


  identifier


  →
`­identifier-head­identifier-characters­<sub>opt</sub>­`­</p>

<p>


  identifier


  →
implicit-parameter-name­</p>

<p>


  identifier-list


  →

identifier­

identifier­,­identifier-list­</p>

<p>


  identifier-head


  →
Upper- or lowercase letter A through Z</p>

<p>


  identifier-head


  →
U+00A8, U+00AA, U+00AD, U+00AF, U+00B2–U+00B5, or U+00B7–U+00BA</p>

<p>


  identifier-head


  →
U+00BC–U+00BE, U+00C0–U+00D6, U+00D8–U+00F6, or U+00F8–U+00FF</p>

<p>


  identifier-head


  →
U+0100–U+02FF, U+0370–U+167F, U+1681–U+180D, or U+180F–U+1DBF</p>

<p>


  identifier-head


  →
U+1E00–U+1FFF</p>

<p>


  identifier-head


  →
U+200B–U+200D, U+202A–U+202E, U+203F–U+2040, U+2054, or U+2060–U+206F</p>

<p>


  identifier-head


  →
U+2070–U+20CF, U+2100–U+218F, U+2460–U+24FF, or U+2776–U+2793</p>

<p>


  identifier-head


  →
U+2C00–U+2DFF or U+2E80–U+2FFF</p>

<p>


  identifier-head


  →
U+3004–U+3007, U+3021–U+302F, U+3031–U+303F, or U+3040–U+D7FF</p>

<p>


  identifier-head


  →
U+F900–U+FD3D, U+FD40–U+FDCF, U+FDF0–U+FE1F, or U+FE30–U+FE44</p>

<p>


  identifier-head


  →
U+FE47–U+FFFD</p>

<p>


  identifier-head


  →
U+10000–U+1FFFD, U+20000–U+2FFFD, U+30000–U+3FFFD, or U+40000–U+4FFFD</p>

<p>


  identifier-head


  →
U+50000–U+5FFFD, U+60000–U+6FFFD, U+70000–U+7FFFD, or U+80000–U+8FFFD</p>

<p>


  identifier-head


  →
U+90000–U+9FFFD, U+A0000–U+AFFFD, U+B0000–U+BFFFD, or U+C0000–U+CFFFD</p>

<p>


  identifier-head


  →
U+D0000–U+DFFFD or U+E0000–U+EFFFD</p>

<p>


  identifier-character


  →
Digit 0 through 9</p>

<p>


  identifier-character


  →
U+0300–U+036F, U+1DC0–U+1DFF, U+20D0–U+20FF, or U+FE20–U+FE2F</p>

<p>


  identifier-character


  →
identifier-head­</p>

<p>


  identifier-characters


  →
identifier-character­identifier-characters­<sub>opt</sub>­</p>

<p>


  implicit-parameter-name


  →
$­decimal-digits­</p>

<p>
  Grammar of a literal</p>

<p>


  literal


  →

integer-literal­

floating-point-literal­

string-literal­</p>

<p>
  Grammar of an integer literal</p>

<p>


  integer-literal


  →
binary-literal­</p>

<p>


  integer-literal


  →
octal-literal­</p>

<p>


  integer-literal


  →
decimal-literal­</p>

<p>


  integer-literal


  →
hexadecimal-literal­</p>

<p>


  binary-literal


  →
0b­binary-digit­binary-literal-characters­<sub>opt</sub>­</p>

<p>


  binary-digit


  →
Digit 0 or 1</p>

<p>


  binary-literal-character


  →

binary-digit­

_­</p>

<p>


  binary-literal-characters


  →
binary-literal-character­binary-literal-characters­<sub>opt</sub>­</p>

<p>


  octal-literal


  →
0o­octal-digit­octal-literal-characters­<sub>opt</sub>­</p>

<p>


  octal-digit


  →
Digit 0 through 7</p>

<p>


  octal-literal-character


  →

octal-digit­

_­</p>

<p>


  octal-literal-characters


  →
octal-literal-character­octal-literal-characters­<sub>opt</sub>­</p>

<p>


  decimal-literal


  →
decimal-digit­decimal-literal-characters­<sub>opt</sub>­</p>

<p>


  decimal-digit


  →
Digit 0 through 9</p>

<p>


  decimal-digits


  →
decimal-digit­decimal-digits­<sub>opt</sub>­</p>

<p>


  decimal-literal-character


  →

decimal-digit­

_­</p>

<p>


  decimal-literal-characters


  →
decimal-literal-character­decimal-literal-characters­<sub>opt</sub>­</p>

<p>


  hexadecimal-literal


  →
0x­hexadecimal-digit­hexadecimal-literal-characters­<sub>opt</sub>­</p>

<p>


  hexadecimal-digit


  →
Digit 0 through 9, a through f, or A through F</p>

<p>


  hexadecimal-literal-character


  →

hexadecimal-digit­

_­</p>

<p>


  hexadecimal-literal-characters


  →
hexadecimal-literal-character­hexadecimal-literal-characters­<sub>opt</sub>­</p>

<p>
  Grammar of a floating-point literal</p>

<p>


  floating-point-literal


  →
decimal-literal­decimal-fraction­<sub>opt</sub>­decimal-exponent­<sub>opt</sub>­</p>

<p>


  floating-point-literal


  →
hexadecimal-literal­hexadecimal-fraction­<sub>opt</sub>­hexadecimal-exponent­</p>

<p>


  decimal-fraction


  →
.­decimal-literal­</p>

<p>


  decimal-exponent


  →
floating-point-e­sign­<sub>opt</sub>­decimal-literal­</p>

<p>


  hexadecimal-fraction


  →
.­hexadecimal-literal­<sub>opt</sub>­</p>

<p>


  hexadecimal-exponent


  →
floating-point-p­sign­<sub>opt</sub>­hexadecimal-literal­</p>

<p>


  floating-point-e


  →

e­

E­</p>

<p>


  floating-point-p


  →

p­

P­</p>

<p>


  sign


  →

+­

-­</p>

<p>
  Grammar of a string literal</p>

<p>


  string-literal


  →
"­quoted-text­"­</p>

<p>


  quoted-text


  →
quoted-text-item­quoted-text­<sub>opt</sub>­</p>

<p>


  quoted-text-item


  →
escaped-character­</p>

<p>


  quoted-text-item


  →
\(­expression­)­</p>

<p>


  quoted-text-item


  →
Any Unicode extended grapheme cluster except "­, \­, U+000A, or U+000D</p>

<p>


  escaped-character


  →

\0­

\\­

\t­

\n­

\r­

\"­

\'­</p>

<p>


  escaped-character


  →
\x­hexadecimal-digit­hexadecimal-digit­</p>

<p>


  escaped-character


  →
\u­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­</p>

<p>


  escaped-character


  →
\U­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­hexadecimal-digit­</p>

<p>
  Grammar of operators</p>

<p>


  operator


  →
operator-character­operator­<sub>opt</sub>­</p>

<p>


  operator-character


  →

/­

=­

-­

+­

!­

*­

%­

&lt;­

&gt;­

&amp;­

|­

^­

~­

.­</p>

<p>


  binary-operator


  →
operator­</p>

<p>


  prefix-operator


  →
operator­</p>

<p>


  postfix-operator


  →
operator­






Types</p>

<p>
  Grammar of a type</p>

<p>


  type


  →

array-type­

function-type­

type-identifier­

tuple-type­

optional-type­

implicitly-unwrapped-optional-type­

protocol-composition-type­

metatype-type­</p>

<p>
  Grammar of a type annotation</p>

<p>


  type-annotation


  →
:­attributes­<sub>opt</sub>­type­</p>

<p>
  Grammar of a type identifier</p>

<p>


  type-identifier


  →

type-name­generic-argument-clause­<sub>opt</sub>­

type-name­generic-argument-clause­<sub>opt</sub>­.­type-identifier­</p>

<p>


  type-name


  →
identifier­</p>

<p>
  Grammar of a tuple type</p>

<p>


  tuple-type


  →
(­tuple-type-body­<sub>opt</sub>­)­</p>

<p>


  tuple-type-body


  →
tuple-type-element-list­...­<sub>opt</sub>­</p>

<p>


  tuple-type-element-list


  →

tuple-type-element­

tuple-type-element­,­tuple-type-element-list­</p>

<p>


  tuple-type-element


  →

attributes­<sub>opt</sub>­inout­<sub>opt</sub>­type­

inout­<sub>opt</sub>­element-name­type-annotation­</p>

<p>


  element-name


  →
identifier­</p>

<p>
  Grammar of a function type</p>

<p>


  function-type


  →
type­-&gt;­type­</p>

<p>
  Grammar of an array type</p>

<p>


  array-type


  →

type­[­]­

array-type­[­]­</p>

<p>
  Grammar of an optional type</p>

<p>


  optional-type


  →
type­?­</p>

<p>
  Grammar of an implicitly unwrapped optional type</p>

<p>


  implicitly-unwrapped-optional-type


  →
type­!­</p>

<p>
  Grammar of a protocol composition type</p>

<p>


  protocol-composition-type


  →
protocol­&lt;­protocol-identifier-list­<sub>opt</sub>­&gt;­</p>

<p>


  protocol-identifier-list


  →

protocol-identifier­

protocol-identifier­,­protocol-identifier-list­</p>

<p>


  protocol-identifier


  →
type-identifier­</p>

<p>
  Grammar of a metatype type</p>

<p>


  metatype-type


  →

type­.­Type­

type­.­Protocol­</p>

<p>
  Grammar of a type inheritance clause</p>

<p>


  type-inheritance-clause


  →
:­type-inheritance-list­</p>

<p>


  type-inheritance-list


  →

type-identifier­

type-identifier­,­type-inheritance-list­</p>
</section>

</body><binary id="_15.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4ge4SUNDX1BST0ZJTEUAAQEAAAeoYXBwbAIgAABtbnR
yUkdCIFhZWiAH2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLWFwcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABWxjcHJ0AAAG5AAAADh3dHB0AAAH
HAAAABRyWFlaAAAHMAAAABRnWFlaAAAHRAAAABRiWFlaAAAHWAAAABRyVFJDAAAHbAAAAA5
jaGFkAAAHfAAAACxiVFJDAAAHbAAAAA5nVFJDAAAHbAAAAA5kZXNjAAAAAAAAABRHZW5lcm
ljIFJHQiBQcm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJvZmlsZQAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAe
AAAADHNrU0sAAAAoAAABeGhySFIAAAAoAAABoGNhRVMAAAAkAAAByHB0QlIAAAAmAAAB7HV
rVUEAAAAqAAACEmZyRlUAAAAoAAACPHpoVFcAAAAWAAACZGl0SVQAAAAoAAACem5iTk8AAA
AmAAAComtvS1IAAAAWAAACyGNzQ1oAAAAiAAAC3mhlSUwAAAAeAAADAGRlREUAAAAsAAADH
mh1SFUAAAAoAAADSnN2U0UAAAAmAAAConpoQ04AAAAWAAADcmphSlAAAAAaAAADiHJvUk8A
AAAkAAADomVsR1IAAAAiAAADxnB0UE8AAAAmAAAD6G5sTkwAAAAoAAAEDmVzRVMAAAAmAAA
D6HRoVEgAAAAkAAAENnRyVFIAAAAiAAAEWmZpRkkAAAAoAAAEfHBsUEwAAAAsAAAEpHJ1Ul
UAAAAiAAAE0GFyRUcAAAAmAAAE8mVuVVMAAAAmAAAFGGRhREsAAAAuAAAFPgBWAWEAZQBvA
GIAZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGkBDQBrAGkAIABS
AEcAQgAgAHAAcgBvAGYAaQBsAFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIAaQB
jAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUAbgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQ
Q4BDkAIAQ/BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwAIABnAOkAbgDpAHIAa
QBxAHUAZQAgAFIAVgBCkBp1KAAgAFIARwBCACCCcl9pY8+P8ABQAHIAbwBmAGkAbABvACAA
UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8ARwBlAG4AZQByAGkAcwBrACAAUgBHAEIALQBwAHI
AbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3wATwBiAGUAYwBuAP0AIABSAEcAQgAgAH
AAcgBvAGYAaQBsBeQF6AXVBeQF2QXcACAAUgBHAEIAIAXbBdwF3AXZAEEAbABsAGcAZQBtA
GUAaQBuAGUAcwAgAFIARwBCAC0AUAByAG8AZgBpAGwAwQBsAHQAYQBsAOEAbgBvAHMAIABS
AEcAQgAgAHAAcgBvAGYAaQBsZm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABSAEcAQgA
gMNcw7TDVMKEwpDDrAFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIAaQBjA5MDtQ
O9A7kDugPMACADwAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAgAFIARwBCACAAZ
wBlAG4A6QByAGkAYwBvAEEAbABnAGUAbQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUA
bA5CDhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQOGwBHAGUAbgBlAGwAIABSAEc
AQgAgAFAAcgBvAGYAaQBsAGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAG
kAbABpAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQxB
EkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEGSgZBACAAUgBH
AEIAIAYnBkQGOQYnBkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZQB
HAGUAbgBlAHIAZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABzAGV0ZXh0AAAAAE
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
vHbmxGRmo5upc1/MRiTrFRkIToUpORYUN3OrWrzW/2LcepTszLtl481FiwmuzkY91qIvPz+
desmNGqJj19IndE6lO33tsmOW1KqE/FkokpAiR4bWK1UYluaq93/3UbCPGhyM9k7Kzj2rHY
1WuVVtsXg83zuNHlLlIqTstFo9QciJBzYis6Lbe6ikWmZqYnI6x5mM+LEd0uetqmeno1VUR
FXpHr/v1Xr1KaapmE9nGRWZROdCyXWPG4RHsm+GcjV1Kq2WJ5C9TJqPGrFaixYLIEdkCGjm
w4meiKiO7tnSQpmUlaZA4FtRjIxEs6efr6TFl6jOSixVl5mJDWN+0VrvteXrUnr1TG0/+o5
o33hvcg4zG5RO4V314sFyNVV6XWovsRT3L5PV11dnXwokSSsc9yzKqrWvRXW8yp029P5EYh
xHwojYkN7mPatrXNWxUUz5jKGrzUusvHn4r4apYrbbLU8NnSa1adV0zT+WdNdNu0/hIaWqr
kPWlWJwi8O+1/wDFzN5y6tPg0+gU+KlMj1iLHajkRXuVkO1EWzNTm7tnQRCFPzcGUiSkOYe
yBEW18NF5neXqQvy9dqkrK8VgT0aHB7jUd0eRe5+RWdGredp/K0alP5j8JllI2a4xk+2XbB
gTKOXNa7mY1yI36vk7hkOzJ+qJKVXJ97ZhebjcBFVnR056WKidw5/HqU7MwYUGNNRIjINnB
o51ubZqMxMp62kLguUo2bZZbalvX0lOvVbEQtzU7zKR0qWnqXW6tDpqQp2BDzUiwo0RUe7m
VURFsXn51TnL0aRp9Uok9MJTJikRYLFctrVhtctir0dCpzWLzEJlp+bk5lZiXmIkOKvS9ru
dfLrMidrtUqEHgZqdiRIfdZzIi+WzpLTo1XbxOERq07bbNeADrc4AAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJv9HH/Uf6X+sm5CPo4/6j/S/wBZNzxv5
X+Wf+/D0tD/ABwENy9lY05HpcvLsz4sR0RGttRLV+rrJkR6v9sVA/FiexpXQnbUif8AfhOr
G9G3/e6G6HV/d63rMRodX93resxOpg27upiGfWoy5ZodX93resxGh1f3et6zE6mB3dTEHWo
y5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX9
3resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh
1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6z
E6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dT
EHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5Z
odX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93re
sxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3
et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6m
B3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHW
oy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX
93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxG
h1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6
zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3d
TEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5
ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93r
esxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f
3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6
mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEHWoy5ZodX93resxGh1f3et6zE6mB3dTEH
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
ZXqjHqbMialNyvE3zFRY9YSuzsy37PPYnSlhaN6vdE7U+yaT9Yk6bNyUrMvc2LPxFhQERqr
a5Et59RrqrlnS6VUH0/g5ycmoTUdFhScu6KsJF6M6zmQ1WWceFpfkjL56cKs49+bbzo2xEt
LPJtRTKOr1LJCtSjosSK1k9JTsJysbEalifWTnTu9HXqiKY23kmqfwyco8uJVmRMesUSZe6
I9VhwnpAV3BREVLUeip9Xm1601mwlsr6bDyWg1qfjRIENUax3CwVa58Szoa2y1bV6LCJ1Cp
8dyDyrl49Ll6fPysWycSWW1kV6qi59utbDNq2YuUOQbZuzima9ef7PC8E3Mt8Ntlha2PZF0
+7f0vLWlVOoMp6sm5KaioroUKdl3QliprbbzKKhlxRKbUJqnRYkeJOSysR0vBgue96ubnJm
onTzdK9w1n0jZrnZOw4X766rwVgWfaREtzl8n2bfyGT0KG76UcrIysRYjGSrWus50RYaKqe
ZOoi2nbdO877MlPpIydiSrIsvEmpiK5XI6Wgy7nRWWdKub3E5z1Wa9SKvkLHqkKrzUnIuVi
LNSqObFhLntSyxOdFt5l8CmJkPBhtykytiIxqPWo2K6znssVfaqkTjc30S5VInQlYciJq/x
YRMU07+n0rNU7ev26HVcraZQ5iHKzbZx73QkiIsKWfERUW1OlE6eYUPLGkZQzkeUkHx+Gl2
Z8RsWC5maltndMXKfKSNS5aVpdJhpMVqfajJaF0oxO7EdqanP1eBTDmMnVya+jysQ5Z7o9R
jysSLNTS/bjPVq5y29PNatmKlYpjb1W3ndlRfpGyehxnokSaiS0N+Y+chyz3QGr99E9hJoM
aHMQWRoMRsSHEajmPatqORedFRTntDl8o35CSqQJzJ9lKdI/W4SBEWxmb9bOVHWW9NvhtJN
kNLJKZGU6A2cZONYx2ZHY1zWvbnKqWI5EXosT8hVTER6FNUz7t+ADNoAAAAABdya7XpT7q+
8paLuTXa9KfdX3lOr+P8Alza/4bQAHU50fonbPX/vwfdcSAj9E7Z6/wDfg+64kBrq/L+o8Q
pp/H9+Qj1f7YqB+LE9jSQker/bFQPxYnsaNL5fvwjU+P68pCADJoo77K+Qw4H7BnkMx32V8
hhwP2DPITCtT2ACygAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPK/toP3/AOymYYa/toP3
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
6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecre
oNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYL
qctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6
g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgu
py2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3q
DSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6
nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreo
NIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLq
ctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g
0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgup
y2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qD
SCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6n
LYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoN
IKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqc
tiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0
go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy
2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDS
Cj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nL
Yg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNI
KPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6hhT2VUmxOApi8fnH8
0OHCRVS3Wq6iY065n2RNdMfl5of1spa+5OdOEhJb4Ua60kBq6BS4lMkXcYfwk1MPWLHfrcv
c/I2hOpMTV6FETFPqAAzXWY8rLzTUbMS8KMidCRGI72mPyLSd2Sdw3AzgTFUx7SjaJYPItJ
3ZJ3DcByLSd2Sdw3AzgTfVlFsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLS
d2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6
slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3Z
J3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2S
dw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6sls
YYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3D
cByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3
AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYP
ItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcBy
LSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3Azg
L6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ
3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd
2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6s
lsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ
3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sd
w3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsY
YPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3Dc
ByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3A
zgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPI
tJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByL
Sd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL
6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3
ZJ3DcDIgSktKoqS8vCgovSkNiN9heBE1TPvKdogABCX/9k=
</binary><binary id="_6.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCADwAfgDASIAAhEBAxEB/8QAHAAAAwEBAAMBAAAAA
AAAAAAAAAYHBQgCAwQB/8QATxAAAAQDBAYGBwQHBgUDBQAAAAECAwQFBwYRNnQSITdzsbIT
MTQ1s8EUQVFhcnXCMnGBhBUWIjNWkaEXQlJilNEjgpPS4iSS8URUVaLw/8QAFQEBAQAAAAA
AAAAAAAAAAAAAAAH/xAAXEQEBAQEAAAAAAAAAAAAAAAAAAUER/9oADAMBAAIRAxEAPwCzAA
AAAAAAAAMW1loSsvIHZqcL6V0akp6PpNC+87uu4+ADaAFiBtmUbYR21PoBoJtDi/R+lvv0V
GX2rvXd7BnwNSExtiJhab9FGgoF8mvR/SL9O80FfpaOr7fs9QB3AJlKayJmk4gpf+gTa9Li
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
</binary><binary id="_0.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCACFAqIDASIAAhEBAxEB/8QAGwABAQEBAQEBAQAAA
AAAAAAAAAUGBAcDAgH/xABBEAABAgMFBQMKBQIFBQAAAAAAAQIDBAUGERNVlBIWIdHSMTVy
BxQVQVFhgbGysyIycYORNnMkQlJioRcjgsHh/8QAGQEBAQADAQAAAAAAAAAAAAAAAAECAwQ
F/8QAHxEBAAIDAAMBAQEAAAAAAAAAAAESAhFRAxMxMjMh/9oADAMBAAIRAxEAPwD2YAl1er
xabHloMGU85fMI9URYuxds3e5faBUBA3gqOTN1adI3gqOTN1adJNwxtHV8EDeCo5M3Vp0je
Co5M3Vp0jcFo6vggbwVHJm6tOkbwVHJm6tOkbgtHV8EDeCo5M3Vp0jeCo5M3Vp0jcFo6vgg
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
</binary><binary id="_44.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAFKA8wDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAIEAwUGBwEI/8QAVxAAAQMCAQUJCwkFBgMHBQEAAAECAwQFEQYSEyFVBxUWMVFz
k7LRFDI0QVNhcYGUoqQiNldykZWxs8EjJDM1gxdCREVWoVJ00jdUdYLC0+EIJUNikvD/xAA
ZAQEBAQEBAQAAAAAAAAAAAAAAAQIDBAX/xAArEQEAAgAFBAECBwEBAAAAAAAAAQIDERITMR
QhMlFhBEEzQ3GBkbHwwUT/2gAMAwEAAhEDEQA/APZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAaLKDKbeK52Wi7j0++tX3Pn6TN0XF8rDBcePi1G9AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
KJeJz2NRM71cfpVOQ+7tM+mns1ui+VK5ZH5qcetWtb9q4mJ71zda9rZPTLdK6e2UszlxdJC
xy+lWopZMNLD3NSQwIuOijaz7EwMx1ecKND4bX86nVQvFGh8Nr+dTqoSeYajiV4AFZed7s8
rm5L0cSLqfWIq+pju0tVmUTMk9zK1OgwWtqKKKOljRMVV6sRVdhyJjj6cE8Zj3YqV0+SEU7
Ux7nq2Od5mqjm/iqGn3PrbV5VXCkvd0Z+5WeCOmool4nPY1EzvVx+lU5DnOep2iI0RMucyw
yVXJ3Ji0T1eLrlVyySVT3LiuKo1Ubj5vxVT3C3SuntlLM5cXSQscvpVqKeZ7tM+mns1ui+V
K5ZH5qcetWtb9q4np9LD3NSQwIuOijaz7EwLWMplLznWJlmABtyUaHw2v51OqheKND4bX86
nVQvEjhq3Ied7s8rm5L0cSLqfWIq+pju09EOB3YqV0+SEU7Ux7nq2Od5mqjm/iqEtwuH5Qy
VmUTMk9zK1OgwWtqKKKOljRMVV6sRVdhyJjj6cE8ZwGWGSq5O5MWierxdcquWSSqe5cVxVG
qjcfN+KqdHufW2ryquFJe7oz9ys8EdNRRLxOexqJnerj9KpyH3dpn009mt0XypXLI/NTj1q
1rftXExPeubrXtbJ6ZbpXT2ylmcuLpIWOX0q1FLJhpYe5qSGBFx0UbWfYmBmOrzhRofDa/n
U6qF4o0PhtfzqdVCTzDUcSvAArLzvdnlc3JejiRdT6xFX1Md2lqsyiZknuZWp0GC1tRRRR0
saJiqvViKrsORMcfTgnjMe7FSunyQinamPc9WxzvM1Uc38VQ0+59bavKq4Ul7ujP3KzwR01
FEvE57Gomd6uP0qnIc5z1O0RGiJlzmWGSq5O5MWierxdcquWSSqe5cVxVGqjcfN+Kqe4W6V
09spZnLi6SFjl9KtRTzPdpn009mt0XypXLI/NTj1q1rftXE9PpYe5qSGBFx0UbWfYmBaxlM
pec6xMswANuSjQ+G1/Op1ULxRofDa/nU6qF4kcNW5Dzvdnlc3JejiRdT6xFX1Md2nohwO7F
SunyQinamPc9WxzvM1Uc38VQluFw/KGSsyiZknuZWp0GC1tRRRR0saJiqvViKrsORMcfTgn
jOAywyVXJ3Ji0T1eLrlVyySVT3LiuKo1Ubj5vxVTo9z621eVVwpL3dGfuVngjpqKJeJz2NR
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
Vc4nVQsYt8p7s2+nwomOzYb53naLegaN87ztFvQNMIJu39tdNhembfO87Rb0DRvnedot6Bp
hA3b+zpsL0zb53naLegaN87ztFvQNMIG7f2dNhembfO87Rb0DRvnedot6BphA3b+zpsL0+x
Xm8ySzM7vamjciY6BuvViZd87ztFvQNNfS+E1XOJ1ULRZxbxPLNPp8KY7wzb53naLegaN87
ztFvQNMIJu39tdNhembfO87Rb0DRvnedot6BphA3b+zpsL0zb53naLegaN87ztFvQNMIG7f
2dNhembfO87Rb0DTFFebzJLMzu9qaNyJjoG69WJ8KtL4TVc4nVQsYt8p7s2+nwomOzYb53n
aLegaN87ztFvQNMIJu39tdNhembfO87Rb0DRvnedot6BphA3b+zpsL0zb53naLegaN87ztF
vQNMIG7f2dNhembfO87Rb0DRvnedot6BphA3b+zpsL0+xXm8ySzM7vamjciY6BuvViZd87z
tFvQNNfS+E1XOJ1ULRZxbxPLNPp8KY7wzb53naLegaN87ztFvQNMIJu39tdNhembfO87Rb0
DRvnedot6BphA3b+zpsL0zb53naLegaN87ztFvQNMIG7f2dNhembfO87Rb0DTFFebzJLMzu
9qaNyJjoG69WJ8KtL4TVc4nVQsYt8p7s2+nwomOzYb53naLegaN87ztFvQNMIJu39tdNhem
bfO87Rb0DRvnedot6BphA3b+zpsL0zb53naLegaN87ztFvQNMIG7f2dNhembfO87Rb0DRvn
edot6BphA3b+zpsL0+xXm8ySzM7vamjciY6BuvViZd87ztFvQNNfS+E1XOJ1ULRZxbxPLNP
p8KY7wzb53naLegaN87ztFvQNMIJu39tdNhembfO87Rb0DRvnedot6BphA3b+zpsL0zb53n
aLegaN87ztFvQNMIG7f2dNhembfO87Rb0DTFFebzJLMzu9qaNyJjoG69WJ8KtL4TVc4nVQs
Yt8p7s2+nwomOzYb53naLegaN87ztFvQNMIJu39tdNhembfO87Rb0DRvnedot6BphA3b+zp
sL0zb53naLegaN87ztFvQNMIG7f2dNhembfO87Rb0DRvnedot6BphA3b+zpsL03uTtdV1sd
UlXMkropUa1yMRurNRfF6TcnP5K/wCP59Ooh0B7KznWJfKvEReYgABpgAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcZW/z24863qNIE63+e3HnW9Rp
A8OL5y+z9P+FAAUbzPWU1pqJbfFpapETRszc7FVVE4jnHd2mcozW5JY4W50sjY28WLlwQ+x
yMlYj43te1eJzVxRTzS+5P3x9mnvF8r1dJFm5lOi44YuRPFqTj8R1mQnzQo/TJ13HS1Iiue
bjTFm19Mxl2zdCADm7hVpfCarnE6qFoq0vhNVzidVCxxLFvKP8AfZaABGwhLNFAzPmkZG3i
znuRE/3KV/qK+lslTNa4dNWNamiZm52KqqJxehTzLKLJjKF9hqb9lFcldNDm6OmRc7Nzno3
xfJbx+LE3SkW5lxxcWacRm9bjljmjSSKRsjF4nNXFF9ZI5jc4+Y9B6ZfzHHTmbRlMw6Utqr
E+wAEaVaXwmq5xOqhaKtL4TVc4nVQtFtyxh+P8/wBgBr7/AFFfS2SpmtcOmrGtTRMzc7FVV
E4vQpIjNqZyjNdlmigZnzSMjbxZz3Iif7n2OWOaNJIpGyMXic1cUX1nkmUWTGUL7DU37KK5
K6aHN0dMi52bnPRvi+S3j8WJ225x8x6D0y/mOOlqRFc4lxpiza+mYy7ZunABzdwq0vhNVzi
dVC0VaXwmq5xOqhY4li3lH++y0ACNhCWaKBmfNIyNvFnPciJ/uUr/AFFfS2SpmtcOmrGtTR
Mzc7FVVE4vQp5llFkxlC+w1N+yiuSumhzdHTIudm5z0b4vkt4/FibpSLcy44uLNOIzetxyx
zRpJFI2Ri8Tmrii+skcxucfMeg9Mv5jjpzNoymYdKW1VifYACNKtL4TVc4nVQtFWl8JqucT
qoWi25Yw/H+f7ADX3+or6WyVM1rh01Y1qaJmbnYqqonF6FJEZtTOUZrss0UDM+aRkbeLOe5
ET/c+xyxzRpJFI2Ri8Tmrii+s8kyiyYyhfYam/ZRXJXTQ5ujpkXOzc56N8XyW8fixO23OPm
PQemX8xx0tSIrnEuNMWbX0zGXbN04AObuFWl8JqucTqoWirS+E1XOJ1ULHEsW8o/32WgARs
ISzRQMz5pGRt4s57kRP9ylf6ivpbJUzWuHTVjWpomZudiqqicXoU8yyiyYyhfYam/ZRXJXT
Q5ujpkXOzc56N8XyW8fixN0pFuZccXFmnEZvW45Y5o0kikbIxeJzVxRfWSOY3OPmPQemX8x
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
</binary><binary id="_41.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGPA3wDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAQFAgMGBwEI/8QAWxAAAQMCAQcGBwwGCAEKBwEAAAECAwQFEQYSEzFVlNEHFRYh
dLIUMzQ2QWFzIjJRUldygZKVpLHBFyRTcZHhIzU3QlaTobPCJSdiZGZ1gtLT4iZDRFSDosP
w/8QAGgEBAQEBAQEBAAAAAAAAAAAAAAECAwQFBv/EACcRAQACAQQBBAMBAQEBAAAAAAABAh
MDERIxURQhMkEEM2GBcZFC/9oADAMBAAIRAxEAPwD2YAAAAAAAAAAAAAAAAAAAAAAAAAAAC
iqcpUp8taLJrwTOWqpX1HhGkwzc1VTDNw69WvEC9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
0FHJXR176WF1XExWMnViK9rV1oi60QyqqSmrqd9NV08VRA9MHxSsR7XfvRepTcAINtslqsy
SJa7dS0SS4LIlPE1mdhqxwTr1qQq/IzJm6Vq1lbY6KeocuLpHRJi5fhX4fpLsAa4IIaaBkF
PEyGKNM1kcbUa1qfAiJqNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJQ2q3WxHJQUF
NS564u0MTWZy/CuCdZLAAAAcJyyf2eVPt4e+h3ZX3qyW/KG2ut10gWeme5rlYj3N60XFOtF
RSwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRPO+N7WMajlVFXrXAw8Im/Zs+sKjyhnz
V/IxAy8Im/Zs+sPCJv2bPrGIAy8Im/Zs+sPCJv2bPrGIAy8Im/Zs+sPCJv2bPrGIAy8Im/Z
s+sZRTvfLmPY1MUVcUXE1n2LytvzF/ICWAABysVwu9TpHtuDY2pK9qN0DVwRHKmv6Dqjkbf
4mX28vfU66VYtbaW6REz7pHhF52o3dm8R4RedqN3ZvEyB6cVPDrwqx8IvO1G7s3iPCLztRu
7N4mQGKng4VY+EXnajd2bxHhF52o3dm8TIDFTwcKsfCLztRu7N4jwi87UbuzeJkBip4OFUe
jr7zVQukW5Mbg9zMPB2rqXA36a87UbuzeJGtHkj/byd5SccIpV82+paLTES1aa87UbuzeI0
152o3dm8TaC8Ks5L+WrTXnajd2bxGmvO1G7s3ibQOFTJfy1aa87UbuzeI0152o3dm8TaBwq
ZL+WrTXnajd2bxNFHX3mqic9bkxubI5mHg7V1LgTCDafJZPbyd5ScK7rktt2k6a87UbuzeI
0152o3dm8TaC8Kpkv5atNedqN3ZvEaa87UbuzeJtA4VMl/LVprztRu7N4jTXnajd2bxNoHC
pkv5atNedqN3ZvEaa87UbuzeJtA4VMl/KHR195qonPW5MbmyOZh4O1dS4G/TXnajd2bxI1p
8lk9vJ3lJxIpXZZ1Lb9tWmvO1G7s3iNNedqN3ZvE2gvCqZL+WrTXnajd2bxGmvO1G7s3ibQ
OFTJfy1aa87UbuzeI0152o3dm8TaBwqZL+WrTXnajd2bxNFJX3mpZI7nJjcyRzPJ2rjguGJ
MINq8RP2iTvKThXdcltu0nTXnajd2bxGmvO1G7s3ibQXhVMl/LVprztRu7N4jTXnajd2bxN
oHCpkv5atNedqN3ZvEaa87UbuzeJtA4VMl/LVprztRu7N4jTXnajd2bxNoHCpkv5Q6SvvNS
yR3OTG5kjmeTtXHBcMTfprztRu7N4ka1eIn7RJ3lJxIpXZZ1Lb9tWmvO1G7s3iNNedqN3Zv
E2gvCqZL+WrTXnajd2bxGmvO1G7s3ibQOFTJfy1aa87UbuzeI0152o3dm8TaBwqZL+WrTXn
ajd2bxNFJX3mpZI7nJjcyRzPJ2rjguGJMINq8RP2iTvKThXdcltu0nTXnajd2bxGmvO1G7s
3ibQXhVMl/LVprztRu7N4jTXnajd2bxNoHCpkv5atNedqN3ZvEaa87UbuzeJtA4VMl/LVpr
ztRu7N4jTXnajd2bxNoHCpkv5Q6SvvNS2VecmN0cro/J2rjguGJv0152o3dm8SNa/eVPapO
8TiRSuyzqW37atNedqN3ZvEaa87UbuzeJtBeFUyX8tWmvO1G7s3iNNedqN3ZvE2gcKmS/lq
0152o3dm8RprztRu7N4m0DhUyX8tWmvO1G7s3iWVhq6iropHVUiSSRzvjzkajcURcNRCJGT
XkNT2uXvHO9Yjp10rTafdcAA5u4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLUeUM+av5GJl
UeUM+av5GIAAAAQM+Wtmc1j1ZG34D5JpqF7VSVXtX0KBYA+Mcj2I5NSpih9AH2LytvzF/I+
H2LytvzF/ICWAAByNv8TL7eXvqdccjb/Ey+3l76nfQ+Tpp9pQAPW7BhJNFDhpZWMx1ZzkTE
qMq6q9UtsjSxQaWrmmSP3mdmNVrlV3X1J1onWvV1nmuVmTl2t1BDdL1cPCaqolzMzFXZiYK
uv6NSJgc7349QzNtnsiKjkRUVFRetFT0ggWHzetvZIu4hPOkNAAAi2jyR/t5O8pOINo8kf7
eTvKTjzx0+Rf5SAFBllWX2jszOjtNp66adsSe4zsxqo5Vd19Sak616usT7MxG87LuWeGBEW
aVkaLqz3ImP8AEza5r2o5qo5qpiiouKKh4RlpkrfLZaob1lBdFqqyonSLRZyvzEVqr77V6N
SJgex5LeaVn7BB/ttMxbedmrViI33WoANMBBtPksnt5O8pOINp8lk9vJ3lJ9tR0nAArIa5Z
4YERZpWRourPciY/wASkyyrL7R2ZnR2m09dNO2JPcZ2Y1Ucqu6+pNSda9XWeTZaZK3y2WqG
9ZQXRaqsqJ0i0Wcr8xFaq++1ejUiYGbW2dK05dy93a5r2o5qo5qpiiouKKh9KrJbzSs/YIP
9tpamnOQAAQbT5LJ7eTvKTiDafJZPbyd5ScSOmrdgBQZZVl9o7Mzo7TaeumnbEnuM7MaqOV
XdfUmpOterrLPskRvOy7lnhgRFmlZGi6s9yJj/ABM2ua9qOaqOaqYoqLiioeEZaZK3y2WqG
9ZQXRaqsqJ0i0Wcr8xFaq++1ejUiYHseS3mlZ+wQf7bTMW3nZq1YiN91qADTAQbV4iftEne
UnEG1eIn7RJ3lJ9rHScACoGuWeGBEWaVkaLqV7kTEpcsa2+UVlauT1Np66WZsbUzM7NRUXF
3wJqTrXqPJ8s8lb7brPFfMobmtTWT1DYkhzlfo0Vrna9Se91ImBm1tnStOXcvdGua9qOa5H
NVMUVFxRTIp8kfM6zdhh7iFwahifaQABEG1eIn7RJ3lJxBtXiJ+0Sd5ScSOlt2AFDljW3yi
srVyeptPXSzNjamZnZqKi4u+BNSda9RZIjedl1LPDAiLNKyNF1K9yJiZNc17Uc1yOaqYoqL
iinheWeSt9t1nivmUNzWprJ6hsSQ5yv0aK1ztepPe6kTA9eyR8zrN2GHuIZi287NWrERvuu
AAaYCDavET9ok7yk4g2rxE/aJO8pPtY6TgAVAh1N3tlHNoaq40kEnxJZ2td/BVOf5RspZcm
8mnPpH5lXVP0MTvSzqxV30In8VQ53Jnkst1wscVwvktTLWVrNKubJho0d1p+92C4riZmffa
G4rG28vTGPZIxHxuR7XJijmriioZHjeQl96O5bzZORV61drnndDE9dSP/uuT969S4dS44ns
hazulq8ZAAVlBtfvKntUneJxBtfvKntUneJxI6at2AHOZc36SwZPPlp3ZtTO5IonfFVUxV3
0In8cCzOyRG87LmoulvpJNHU19NA9f7skzWr/AAVSQx7JGI9jkc1yYo5q4op57k5yd0Nws8
dwvMlRLVVjdL1SYZiL1p+9fT1lbkld+j2WUtiirVqrbNMsLHLqR/oVPp6lw6l1mOU/bpwid
9p6erAA25BIya8hqe1y94jkjJryGp7XL3jnqdO+j3K4ABxekAOYy3yz6GUVLU82S1/hEisz
Y35qtwTHHUoHTg8l/Tr/ANk6z/P/APYP06/9k6z/AD//AGAetApck8oelGT8N28DfR6Vzm6
F7s5UzXKmvBPgLoAAAAAAAHKcomV6ZJZOOlg91catdDRx4Yqr11uw+BPxwT0gcPyo5f3eO5
zW7JqqkghtSI6vqYsPfuVGozH1Y/xx+Kd5yc3GsuuQVrrq+ofUVMrXq+R+t2EjkT/REOAyi
yUXJbkUqm1XurlWzwz1sjlxVXq9Pc4+rH+OK+k7fko/s0s/zJP914HXgAAAAAAAAAAAAItR
5Qz5q/kYmVR5Qz5q/kYgDXULm08ip8VTYa6hMaeRP+ioEe34Np3vXq911r9BplR1S2WoXFG
t6mJ9JhC58kSUzOrOdi5fUTKprYqFzG9SIiIn8QMqFcaVvqxQ3kehTClb61UkAD7F5W35i/
kfD7F5W35i/kBLAAA5G3+Jl9vL31OuORt/iZfby99TvofJ00+0oAHrdg4XlY/qOi7T/wAKn
dHC8rH9R0Xaf+FTGr8JS3Tq7D5vW3skXcQnkCw+b1t7JF3EJ5qOlgABRFtHkj/byd5ScQbR
5I/28neUnHnjp8i/ykAAYed8tHmxRdtTuPOvyW80rP2CD/bachy0ebFF21O486/JbzSs/YI
P9tpmPlLpPwhagA05hBtPksnt5O8pOINp8lk9vJ3lJ9tR0nAArIed8tHmxRdtTuPPRDzvlo
82KLtqdx5m3xb0/lDr8lvNKz9gg/22lqVWS3mlZ+wQf7bS1NR0zPYAAiDafJZPbyd5ScQbT
5LJ7eTvKTiR01bsABWXnfLR5sUXbU7jzr8lvNKz9gg/22nIctHmxRdtTuPOvyW80rP2CD/b
aZj5S6T8IWoANOYQbV4iftEneUnEG1eIn7RJ3lJ9rHScACoHnvLP5pUnb2f7ch6Eee8s/ml
SdvZ/tyGbdN6fyh1WSPmdZuww9xC4KfJHzOs3YYe4hcGo6ZnsAARBtXiJ+0Sd5ScQbV4ift
EneUnEjpbdgAKjz3ln80qTt7P9uQ6rJHzOs3YYe4hyvLP5pUnb2f7ch1WSPmdZuww9xDMfJ
0n4QuAAacwg2rxE/aJO8pOINq8RP2iTvKT7WOk4AFR5Py2SOdPZoEX3OErvpVWIdJl/fpLR
aoLFaUV1zuOEEDGe+YzUq+r4E+lfQc/y2Ur1itFY1PcsdJG5fWuaqfgpZZB26qv92qMtrwz
CSbGOhiXVGxOrFPwT/wAS+k5//Uw7+3CJlxuUWT0WR+UGTcEKo6drY5JpE/vyJLiq/knqRD
3Q8l5Qf+U+VCyW6L3SsSFr8PQqyKq//rgp60Wvcs3neI3AAbckG1+8qe1Sd4nEG1+8qe1Sd
4nEjpq3Yea8r0i/8lRej+lcv/6fzPSjzrldpnOpbZVInuWPkjVfW5EVO6pL/FrS+cLnLK9P
s1np7TbsXXCtRIIGs1tbqVfyT+Rw+UNiZktcbFHGqLOjWyTPT+89H4/wTUn7jqsi6Gpvtzl
ytujPdOTR0ca6mNTqVU/1T+KlZl9/yhl5aLfH7pyJG12HoVz1/LrMT7xu6U9p4/8Ar00AHV
5wkZNeQ1Pa5e8RyRk15DU9rl7xz1OnfR7lcAA4vSFPlFlVZslaeGe81S08c71YxUjc/FUTH
+6ilwV92sVqvsUcV1oIaxkTs5jZW4o1fhQDmP0w5DbXfusv/lH6Ychtrv3WX/yln+jzI/8A
w7Q/5Q/R5kf/AIdof8oC0sl7t+UNsjuVrnWalkVyNerFbiqLgvUqIutCwItutlDaKJtHbqW
Omp2KqtjjTBqKq4r/AKkoAaKyOWahnigk0cz43NjfjhmuVOpf4m8AeS9AOU3/ABz95l4DoB
ym/wCOfvMvA9aAHCZGZLZZWa9Oqr/lLzlSLC5iQ6aR2D1VMFwcmHoX+JwE2WVpruVaovGU7
5W0lpe6Khpo41emc1yojl+nF378PQh70VUmS+T0sjpJLDbHvequc51JGquVdaquAHlfKNym
5N5TZHVFrtstQ6okkjc1Hwq1MEcir1lzyS5b2WSx2jJVr5ucmslxbo/cdTnv99+428rdgst
Byf1dRRWihppmyxIkkNMxjkxemPWiYlhyT2m2JkLZ7ilupUrVZJ+spC3S+MenvsMdXV+4Du
wAAAAAAAAAAAAEWo8oZ81fyMTKo8oZ81fyMQAVMUwUACubnUE7lViujdqU+yyvrlbHExUai
4qqlgAPjGJGxrE1ImB9AAH2LytvzF/I+H2LytvzF/ICWAAByNv8TL7eXvqdccjb/Ey+3l76
nfQ+Tpp9pQAPW7IV5fcIrTUPtUbZKxGpomOwwVcU+FU9GJ51fbfl5lDTR09da48yN+e3Ruj
auOGHxvWepAxanL7SY3cFaJsv6Z9FSTW2FtHEscb3YsVUjTBFX32vA70Ata7fZEbAANKi2j
yR/t5O8pOINo8kf7eTvKTjzx0+Rf5SEC+SXKKzVT7RE2Wuaz+hY7DBXY+tUQngMPHcordyk
ZUUUdJcbNFo4pNI3RvjauOCp8f1qW1ln5TKJLfQSWmBtFBo4XOVY1ckbcEVff68EPTAZ4/1
0ye22wADTmEG0+Sye3k7yk4g2nyWT28neUn21HScACsoF8kuUVmqn2iJstc1n9Cx2GCux9a
oh5ZlFbuUjKiijpLjZotHFJpG6N8bVxwVPj+tT2IEmu7dbcfp5nZZ+UyiS30ElpgbRQaOFz
lWNXJG3BFX3+vBD0wARGyWtuAArKDafJZPbyd5ScQbT5LJ7eTvKTiR01bsIF8kuUVmqn2iJ
stc1n9Cx2GCux9aohPBWXjuUVu5SMqKKOkuNmi0cUmkbo3xtXHBU+P61Layz8plElvoJLTA
2ig0cLnKsauSNuCKvv8AXgh6YDPH+umT222AAacwg2rxE/aJO8pOINq8RP2iTvKT7WOk4AF
RBvUlwis9U+1RNlrmxqsDHYYK76VQ8syit/KTlPQR0Vxs0WijlSVujdG1c5EVPj/A5T2EEm
u7dbcfp5jZZeU23x0NvW0QNo6dI4lVVjVyRpgnx9eB6cAIjZLW3AAVlBtXiJ+0Sd5ScQbV4
iftEneUnEjpbdhBvUlwis9U+1RNlrmxqsDHYYK76VQnAqPHsorfyk5T0EdFcbNFoo5Ulbo3
RtXORFT4/wADlLOyy8ptvjobetogbR06RxKqrGrkjTBPj68D04GeP9dMnttsAA05hBtXiJ+
0Sd5ScQbV4iftEneUn2sdJwAKinyqyehynsM1tldo3OwfFJhjmPTUv4ovqVTgbVW8oWSNFz
MlhS4RRYpBKiK9Gp+9q9aepcFPVgSa7+7cW2jZ57kTkddUv82VOUyp4fJisUOKKrVVMM5cO
pME6kT0IehACI2S1ptO4ACsoNr95U9qk7xOINr95U9qk7xOJHTVuwrMorJDlBZprfK7MV/u
o34Y5j01L/8A70KpZgqRO3u81ttVlxktSra0syV8UaroZERXo1P3our1LgpYZJ5LXR99lyk
yhwSrfisUWKKrVVMMVw6kwTqRDugZ4tzqT4AAacwkZNeQ1Pa5e8RyRk15DU9rl7xz1OnfR7
lcAA4vSAAAAAAAAAAAAAAAA+Oa1yYORFT4FQIiNTBqIifAh9AAAAAAAAAAAAAABFqPKGfNX
8jE2TxSPka9iNXBFRcVwMNFUfFZ9b+QHwH3RVHxWfW/kNFUfFZ9b+QHwH3RVHxWfW/kNFUf
FZ9b+QHwH3RVHxWfW/kNFUfFZ9b+QHw+xeVt+Yv5DRVHxWfW/kZQwypOj3o1ERqp1LiBJAA
A5G3+Jl9vL31OuKBMm6qNz9DdMxjnuejVp0XDFcdePrOmnaKzvLVZ2lqBu6P12103ZOI6P1
2103ZOJ6M9XXJDSDd0frtrpuycR0frtrpuycRnqZIaQbuj9dtdN2TiOj9dtdN2TiM9TJDSD
d0frtrpuycR0frtrpuycRnqZIV9o8kf7eTvKTj5Bk1WU7FZHd8EVyuX9WTWq4r6TZzDX7YT
dk4nGNSHz7aVptMsAZ8w1+2E3ZOI5hr9sJuycS5ITDZgDPmGv2wm7JxHMNfthN2TiMkGGzA
GfMNfthN2TiOYa/bCbsnEZIMNmBBtPksnt5O8pY8w1+2E3ZOJrgyarKdisju+CK5XL+rJrV
cV9JOcbrits+gz5hr9sJuycRzDX7YTdk4lyQmGzAGfMNfthN2TiOYa/bCbsnEZIMNmAM+Ya
/bCbsnEcw1+2E3ZOIyQYbMAZ8w1+2E3ZOI5hr9sJuycRkgw2V1p8lk9vJ3lJx8gyarKdisj
u+CK5XL+rJrVcV9Js5hr9sJuycSReNlnStMsAZ8w1+2E3ZOI5hr9sJuycS5ITDZgDPmGv2w
m7JxHMNfthN2TiMkGGzAGfMNfthN2TiOYa/bCbsnEZIMNmBBtXiJ+0Sd5Sx5hr9sJuycTXD
k1WQNc2O74I5yvX9WTWq4r6Sc43XFbZ9BnzDX7YTdk4jmGv2wm7JxLkhMNmAM+Ya/bCbsnE
cw1+2E3ZOIyQYbMAZ8w1+2E3ZOI5hr9sJuycRkgw2YAz5hr9sJuycRzDX7YTdk4jJBhsrrV
4iftEneUnHyHJqsga5sd3wRzlev6smtVxX0mzmGv2wm7JxJF42WdK0ywBnzDX7YTdk4jmGv
2wm7JxLkhMNmAM+Ya/bCbsnEcw1+2E3ZOIyQYbMAZ8w1+2E3ZOI5hr9sJuycRkgw2YEG1eI
n7RJ3lLHmGv2wm7JxNcOTVZA1zY7vgjnK9f1ZNarivpJzjdcVtn0GfMNfthN2TiOYa/bCbs
nEuSEw2YAz5hr9sJuycRzDX7YTdk4jJBhswBnzDX7YTdk4jmGv2wm7JxGSDDZgDPmGv2wm7
JxHMNfthN2TiMkGGyutfvKntUneJx8hyarIEekd3wz3q9f1ZNa6/SbOYa/bCbsnEkXhZ0rT
LAGfMNfthN2TiOYa/bCbsnEuSEw2YAz5hr9sJuycRzDX7YTdk4jJBhswBnzDX7YTdk4jmGv
2wm7JxGSDDZgSMmvIantcveNXMNfthN2TiT7Vb1ttK6F0+mc+R0jn5ub1r6jF7RLpp0ms+6
cADm7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRPO+N7WMajlVFXrXAw8Im/Zs+s
KjyhnzV/IxAy8Im/Zs+sPCJv2bPrGIAy8Im/Zs+sPCJv2bPrGIAy8Im/Zs+sPCJv2bPrGIA
y8Im/Zs+sZRTvfLmPY1MUVcUXE1n2LytvzF/ICWAABysVwu9TpHtuDY2pK9qN0DVwRHKmv6
Dqjkbf4mX28vfU66VYtbaW6REz7pHhF52o3dm8R4RedqN3ZvEyB6cVPDrwqx8IvO1G7s3iP
CLztRu7N4mQGKng4VY+EXnajd2bxHhF52o3dm8TIDFTwcKsfCLztRu7N4jwi87UbuzeJkBi
p4OFUejr7zVQukW5Mbg9zMPB2rqXA36a87UbuzeJGtHkj/AG8neUnHCKVfNvqWi0xEtWmvO
1G7s3iNNedqN3ZvE2gvCrOS/lq0152o3dm8RprztRu7N4m0DhUyX8tWmvO1G7s3iNNedqN3
ZvE2gcKmS/lq0152o3dm8TRR195qonPW5MbmyOZh4O1dS4Ewg2nyWT28neUnCu65LbdpOmv
O1G7s3iNNedqN3ZvE2gvCqZL+WrTXnajd2bxGmvO1G7s3ibQOFTJfy1aa87UbuzeI0152o3
dm8TaBwqZL+WrTXnajd2bxGmvO1G7s3ibQOFTJfyh0dfeaqJz1uTG5sjmYeDtXUuBv0152o
3dm8SNafJZPbyd5ScSKV2WdS2/bVprztRu7N4jTXnajd2bxNoLwqmS/lq0152o3dm8Rprzt
Ru7N4m0DhUyX8tWmvO1G7s3iNNedqN3ZvE2gcKmS/lq0152o3dm8TRSV95qWSO5yY3Mkczy
dq44LhiTCDavET9ok7yk4V3XJbbtJ0152o3dm8RprztRu7N4m0F4VTJfy1aa87UbuzeI015
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAADRPO+N7WMajlVFXrXAw8Im/Zs+sKjyhnzV/IxAy8Im/Zs+
sPCJv2bPrGIAy8Im/Zs+sPCJv2bPrGIAy8Im/Zs+sPCJv2bPrGIAy8Im/Zs+sZRTvfLmPY1
MUVcUXE1n2LytvzF/ICWAABysVwu9TpHtuDY2pK9qN0DVwRHKmv6Dqjkbf4mX28vfU66VYt
baW6REz7pHhF52o3dm8R4RedqN3ZvEyB6cVPDrwqx8IvO1G7s3iPCLztRu7N4mQGKng4VY+
EXnajd2bxHhF52o3dm8TIDFTwcKsfCLztRu7N4jwi87UbuzeJkBip4OFVfDeb1K1y+HsTNe
5viG+hcDZzpedoM3dpBo/eS+2f3lJB8a+paLTES9un+PpTSJmG7nS87QZu7RzpedoM3dppB
jLfy36bS8N3Ol52gzd2jnS87QZu7TSBlv5PTaXhu50vO0Gbu0c6XnaDN3aaQMt/J6bS8N3O
l52gzd2mqnvV6njV3h7EwcrfEN9C4Hwi0HiH+1f3lLlvt2zP4+lyiNlhzpedoM3do50vO0G
bu00gmW/lr02l4budLztBm7tHOl52gzd2mkDLfyem0vDdzpedoM3do50vO0Gbu00gZb+T02
l4budLztBm7tHOl52gzd2mkDLfyem0vD7T3q9Txq7w9iYOVviG+hcDbzpedoM3dpX0HiH+1
f3lJRbat4ntmn4+lNYmYbudLztBm7tHOl52gzd2mkEy38tem0vDdzpedoM3do50vO0Gbu00
gZb+T02l4budLztBm7tHOl52gzd2mkDLfyem0vDdzpedoM3dpqp71epmud4exM17m+Ib6FP
hFoPFS+2f+JY1b7dsz+PpcojZYc6XnaDN3aOdLztBm7tNIJlv5a9NpeG7nS87QZu7Rzpedo
M3dppAy38nptLw3c6XnaDN3aOdLztBm7tNIGW/k9NpeG7nS87QZu7RzpedoM3dppAy38npt
Lw+096vUzXO8PYma9zfEN9Cm3nS87QZu7SvoPFS+2f8AiSi21bxPbNPx9KaxMw3c6XnaDN3
aOdLztBm7tNIJlv5a9NpeG7nS87QZu7RzpedoM3dppAy38nptLw3c6XnaDN3aOdLztBm7tN
IGW/k9NpeG7nS87QZu7TVT3q9TNc7w9iZr3N8Q30KfCLQeKl9s/wDEsat9u2Z/H0uURssOd
LztBm7tHOl52gzd2mkEy38tem0vDdzpedoM3do50vO0Gbu00gZb+T02l4budLztBm7tHOl5
2gzd2mkDLfyem0vDdzpedoM3do50vO0Gbu00gZb+T02l4fYL1epkevh7EzJHM8Q3rwU286X
naDN3aV9D72b27/xJRbat4ntmn4+lNYmYbudLztBm7tHOl52gzd2mkEy38tem0vDdzpedoM
3do50vO0Gbu00gZb+T02l4budLztBm7tHOl52gzd2mkDLfyem0vDdzpedoM3dpeZPVlRXW9
8lVIkkjZnszkajcURfgOdLvJT+rJu0yfidtG9rTO7y/laVKRE1hdgA9DwgAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAItR5Qz5q/kYmVR5Qz5q/kYgAAAB5bPlRlplk6SLJ+iW3UKKqOqVXB
VRP8Apr+DUxJXJDdbjc0u/h9fU1ej0OZp5nSZuOfjhivVqT+AHpAAAH2LytvzF/I+H2Lytv
zF/ICWAAByNv8AEy+3l76nXHI2/wATL7eXvqd9D5Omn2lAA9bsGEk0UOGllYzHVnORMSoyr
qr1S2yNLFBpauaZI/eZ2Y1WuVXdfUnWida9XWea5WZOXa3UEN0vVw8JqqiXMzMVdmJgq6/o
1ImBzvfj1DM22eyIqORFRUVF60VPSCBYfN629ki7iE86Q0AAClo/eS+2f3lJBHo/eS+2f3l
JB+e1PnL6Wl+uP+ABSZWVd6pLSzmGn01ZLMkae4zsxqoqq7r6k1J1r1dZiI3nZu08Y3XEk0
UKIssrI8dWc5ExMmuRzUc1UVFTFFTUp4xlbk1eLfbIrvfLitTVzzJHo8VdmJgq69Xo1ImB6
tk35r2rsUPcQ3akRG8S46erNrTWY2WQAMO4RaDxD/av7ykoi0HiH+1f3lLHUsT84/1KABGw
wkmihRFllZHjqznImJT5WVd6pLSzmGn01ZLMkae4zsxqoqq7r6k1J1r1dZ5llbk1eLfbIrv
fLitTVzzJHo8VdmJgq69Xo1ImB0pSLdy4autNOo3eztcjmo5qoqKmKKmpT6VuTfmvauxQ9x
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
AAP/9k=
</binary><binary id="_12.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGtA4ADASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAUGAwQHAQII/8QAVBAAAQMCAQYFEAcECQMEAwEAAAECAwQFEQYSFlWT0RUhMVHS
BxMUFyY2QVNUYXFzoqOx4iIyUoGRkrI1cnShIzM0QnWDwcLwN0VigrPh8SQnQ5T/xAAZAQE
AAwEBAAAAAAAAAAAAAAAAAQIDBAX/xAArEQEAAQMEAAYDAAMBAQEAAAAAAQIDURESExQhMT
JBYbEEgZEzcfDBIqH/2gAMAwEAAhEDEQA/AOzAHiqiJiq4InhA9BV7jl3bqOVYqaJ9W5q4K
5q5rPuXw/gaPbHbqpdv8pvH492Y1iGU3rce67ApPbHbqpdv8o7Y7dVLt/lJ613COe3ldgUn
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
ADouQdxkq7VLSyuVy0rkRqr9leRP5KWkpHU45Lj/lf7i7ni/kREXZiHp2Z1twFI6o//bv83
/YXcpHVH/7d/m/7Cfxf8sf97Iv/AOOVIAB7LzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAW6it97t1kp7hZLhJUsmwc+nZGioxcOPiVVx4+LiQluv1tw
yWr3ZQUbIetsVY3Obmqq4cS4LyLjh6Sj0N3uFtxSjq5IUdxq1FxRfuXiPa683G5NRtZVySt
RcUavE3H0JxHJVZqqnx0/37uiLtMR7/wCvZabjSVFxyDtbaOF87mOarmxpivEjkXi9J85SU
0tHkPbKeZubIyVqObzLmu4is0d6uVvhWGkrJYo1XHNReL/4Mc9yraqnbT1FVJLE12cjXux4
+Pj/AJqTFmqJjx8InVE3KZj500XDLi13GvqKOSlp5J42sVqoxMc12PKv8uPzEjPNHR3DJ2m
rHtWoYxzXKq44O63m/wA3EHlPlK5tfTy2e4Lh1nNkVnJjj4UUq1TV1FZOs9TM+WVeVzlxUz
t2aq6Iirwjx/2vXcppqmYXurbIzKNzo8l3Tz9cR7Krr7kavMqrhgnoM1tqp5rve5ZYW087I
I0c1kmfgqI7w4J5imNymvTIOstuM2Zhhyoq/jympTXGspOu9j1MkfXuKTBfren8VJ69UxpP
/qOaInWP/E9kHMxuUL+uu+nLA5Gqq8rsUX4Ip9U2T9+dfK18UklEqOeq1Llc1r0V2PEqcuP
L9xWI5HxSNkje5j2ri1zVwVFJCpyiu9XTrTz18ro1TBW8SYp51TlNardW6Zp92dNdO3SfZP
2tVXIW8q6Tri9ffi/7XE3jMz6CC32G3yOt1ReJZ2o5GrI9WR4oi4IiYp4cOTwFQiuFXDSSU
kdQ9sEq4vjReJy/8RDYp79daSl7FgrpY4eRGovJ6F5U+4rNmrXwn3Wi5T74XHKRtV2Vk+2n
bFDUo5c1jlwY1yI36Po8BnXrVwuqUt0sEkdSqYdlwYq3k5c9MFRPAUGe511TDFFPVSSMhw6
2jl+rhzG2mVF8SLrXCMubhhjxY/jhiU69W2Ihbmp1mVjtVPXWu9XeO3tjroI1akscsn03cS
qiIuC4rxqhlmoLfc7HXVMduqbTLCxXKiosbXKiKuGHIqeDkKVTXCro6laimqZI5V5Xo7jd6
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
JZal9OuEkUfXHIr2+dP9SXvNLk7WwUtAzKm9X2StmY2Okgr2SLy45zkzfoonLxl5pjVTdOi
zXXLCspMp35PUFlfX1S07Zo1SZGN41485VT6KJz8eKqiYGWw5VVVbdq2z3m2tttdRxJOqNm
SRj41/vIvmxQ1KRP/ANvV6+Hghn/uIaVfTSVvVJvFJCuEk+Tro2LzKr8E+JTSPL4W1nzZ2Z
a3y40s11suTaVVphV2bLLUpHJO1v1nMbh5l/5xG7U5c0y2m11Nso5a+su6L2JSI5Gqqp9bO
dyNRvhX/wCyJyTywslmyFhgr6uKmrLdG6KajkcjZVe1V4kavGuPm5yNv731d5yZv907LsNH
U074nyU82a6le7FW5zs3izkVMeLn5i22NdNEbp081qoMqrhHe6ez5Q2hLdPWNctLLFOkscq
pxq3HBMFLOc6hpbHVZX2mmpL9dr9UQPWoR3ZjJoadETlcqN8PJgi4nRTOuIhemZkABRcAAG
Kq/sk3q3fAkLL+w6D+Gj/ShH1X9km9W74EhZf2HQfw0f6UOv8AH8pc1/zhvAA6XOgLH3yX7
1kX6VJ8gLH3yX71kX6VJ81u+r9R9Qpb9P8AfsK9fu+Swetl+DSwlev3fJYPWy/Boter9T9I
uen+fawgAyaNO7/sat/h5P0qQlJ/Y4PVt+BN3f8AY1b/AA8n6VISk/scHq2/A0tsL3lDMAD
ZzAAAAADBNQ0lQ/PnpYZXYYZz40cuH3n1BS09MipTwRxIvL1tiNx/AyggY56eGqhdDUQxzR
P4nMkajmr6UUx0dvorfGsdFRwUrFXFWwxoxF+5ENgAaVXZbVXzJPWWyjqZU5HzQNe5PvVDZ
dTwOjZG6GNWRqisarUwaqcmCeAyAGqsXqHKKO7Pmgt9JfLZIxuZRzuZE6B6cqo5Wrii8vH/
ACPrJuy3CG6V96u8cEFTWNZFHSwOzmwRNTiTHwqv4FlA0W3eGj4jijhjSKKNsbE5GtaiIn3
Hw6jpXUq0rqaFadUwWJY0zF8PJyGYBVpstNsjpFpGW6lbTOXFYWwtRirz5uGBlkoqWZ8T5a
aF7oeONXRoqs9HN9xnANWrWWu3XBzXVtBTVSs+qs0LX5voxTiNhjGRsayNqMY1MGtamCIh9
ADTis9rglklittJHJKipI9kDUV6Ly4rhxm21rWNRrURrUTBEROJEPQAABIAAAAAMUPfDbvR
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
aQ2bWdNtEGyrBupykgRukNm1nTbRBpDZtZ020QbKsG6nKSBG6Q2bWdNtEGkNm1nTbRBsqwb
qcpIEbpDZtZ020QaQ2bWdNtEGyrBupykgRukNm1nTbRBpDZtZ020QbKsG6nKSBG6Q2bWdNt
EGkNm1nTbRBsqwbqcpIEbpDZtZ020QaQ2bWdNtEGyrBupykgRukNm1nTbRBpDZtZ020QbKs
G6nKSBG6Q2bWdNtEGkNm1nTbRBsqwbqcpIEbpDZtZ020QaQ2bWdNtEGyrBupykgRukNm1nT
bRBpDZtZ020QbKsG6nKSBG6Q2bWdNtENOtyqpETse1419Y/ijjiRVai86rzExbrmfJE10x7
vmxLnZR35ycaddiTHzoi4lgIuw2t9soFSd/XKqd6yzv53KSguTE1eBRExT4gAM12Kemp6lu
bUQRyongkYjvia/A1r1bSbBu43QTFUx5SjSJaXA1r1bSbBu4cDWvVtJsG7jdBO6rJtjDS4G
teraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3D
ga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3
cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtj
DS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraT
YN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16t
pNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6
rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4Gt
eraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dg
a16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3c
boG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjD
S4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTY
N3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tp
Ng3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6r
JtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4Gte
raTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga
16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cb
oG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS
4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN
3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpN
g3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJ
tjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4Gter
aTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga16tpNg3cboG6rJtjDS4GteraTYN3Dga1
6tpNg3cboG6rJtjDS4GteraTYN3GxBS09K1W08EUKLypGxG/Aygiapnzk0iAAEJf/2Q==
</binary><binary id="_2.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAJWBN8DASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAYHBAUIAwIB/8QAYRAAAQMCAgMFEwQPBgUDBAEFAQACAwQFBhEHEiETMUFRlBQV
Fxg2N1VWYXF0dYGSsbKz0dIiMlSRCBYjNUJSU3KEk6GkwePwMzRGYsLDJHN2guFDRPElOGW
iRaMmJ4Nj/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAIDBAEFBv/EADMRAQACAgEDAgMHAwQDAQ
AAAAABAgMRBBIhMRNBBSJRFDJSYYGhsRVxkSMz0eFCwfBi/9oADAMBAAIRAxEAPwC5kRQ3S
BpBbgTnfrWw13Nu6b0+56mpq/5Tnnr/ALEEyRU30wcfay7lo+BOmDj7WXctHwILkRU30wcf
ay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXc
tHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay
7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctH
wILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7l
o+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwI
LkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+
BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILk
RU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BO
mDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU
30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmD
j7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30
wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7
WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BOmDj7WXctHwILkRU30wc
fay7lo+BOmDj7WXctHwILkRU30wcfay7lo+BWlh67i/4forsINwFXEJNz1tbVz4M8hmg2SI
iAiIgIiICIiAi0GNMUjB+Hn3d1GasNkbHuQk1PncOeR9Crrpg4+1l3LR8CC5EVN9MHH2su5
aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8C
C5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aP
gTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5
EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgT
pg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EV
N9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg
4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9
MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+
1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MH
H2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l
3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2
su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3L
R8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EVN9MHH2su
5aPgTpg4+1l3LR8CC5EVN9MHH2su5aPgTpg4+1l3LR8CC5EUbwLjBuNrHJc20JoxHUOh3My
7pnk1pzzyH437FJEBUz9kJ/h/9J/2lcypn7IT/D/6T/tIPfR3o0wtiHA9vulyopJaqfdddz
Z3tBykc0bAct4BSXoNYI7Gzcqk969tEPWxtPfm9s9TRBBeg1gjsbNyqT3p0GsEdjZuVSe9T
pEEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcqk96dBrBHY2blUnvU6RBBeg1gjsbN
yqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcqk961mJdE+D
7bhe619LQSsnpqKaWJxqHnJzWEg5E7doVmrSY06h794tqPZuQULonwza8VYoqaG7wOmgjon
Sta2QsycHsAOY7jirb6DWCOxs3KpPeq50C9XFZ4tf7SJdAIIL0GsEdjZuVSe9Og1gjsbNyq
T3qdIggvQawR2Nm5VJ706DWCOxs3KpPep0iCC9BrBHY2blUnvToNYI7Gzcqk96nS82zxuZE
8PGUvzP82zP0BBCeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPenQawR2Nm5VJ71O
kQQXoNYI7Gzcqk96dBrBHY2blUnvU6RByvgGzUV+xzb7VcIzJSzukD2BxaTlG4jaNu+Aru6
DWCOxs3KpPeqf0U9dC0/ny+yeumkEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcqk9
6dBrBHY2blUnvU6RBBeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPenQawR2Nm5VJ
71OkQQXoNYI7Gzcqk96dBrBHY2blUnvU6RBBeg1gjsbNyqT3p0GsEdjZuVSe9TpEHK9ZZqK
HSW+yMjIohdhTBmsc9z3XVyz397hV3dBrBHY2blUnvVP3Dr0S+Ph7ZdNIIL0GsEdjZuVSe9
Og1gjsbNyqT3qdIggvQawR2Nm5VJ706DWCOxs3KpPep0iCC9BrBHY2blUnvToNYI7Gzcqk9
6nSIIL0GsEdjZuVSe9Og1gjsbNyqT3qdIggvQawR2Nm5VJ706DWCOxs3KpPevLSHNiuuu9q
sGHubKOmqznV3GnicRECcgC8fNyAJ3xnsWht9diDAuku3YbrL9UXuhuTGn/iCS+MuLgCMyS
Mi3jyIKCR9BrBHY2blUnvToNYI7Gzcqk96xNKWJ7jTwGwYfnfFX8zvraqeJxa6ngjBdvjeL
iMv/lbPRRX1lzwBR1VfVTVU7pJQ6WZ5e45PIG0oKKu1loaTSTLZYYyKJtxbAGFxJ1C8DLPf
3irt6DWCOxs3KpPeqhv/Xmn8cM9oF0wggvQawR2Nm5VJ706DWCOxs3KpPep0iCC9BrBHY2b
lUnvToNYI7Gzcqk96nSIIL0GsEdjZuVSe9Og1gjsbNyqT3qdIggvQawR2Nm5VJ706DWCOxs
3KpPep0iCC9BrBHY2blUnvToNYI7Gzcqk9699JlxxJSWSnpcMUtVJV1k2o+anic8wsy2nMA
6uZy299Qq8OxRowvVmqJcU1V6p6+Qsnp6kuIORbrZBzj+NsIy2hBLug1gjsbNyqT3p0GsEd
jZuVSe9R7GtxuNfpKfaIcXSYdoqW3tklm3XVZrZ572s0EnXaN/gUpwHZ62j3eulxq/EtNM0
MjOesyNwO0g67hmgqLS1hW0YUvNDTWeB0Mc1OXvDpHPzOsRwlXXo7631k8Eaqt0/dUdr8EP
rlWlo7631k8EagkiIiAiIgIiICIiCv9NnW8l8Ji9JUE0R4HsOLLZcZ7xSvmfBM1kZbK5mQI
z4Cp3ps63kvhMXpK0ugD7y3fwhnqlBIOg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3Kp
PenQawR2Nm5VJ71OkQQXoNYI7Gzcqk96dBrBHY2blUnvU6RBBeg1gjsbNyqT3p0GsEdjZuV
Se9TpEEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcqk96dBrBHY2blUnvU6RBBeg1g
jsbNyqT3qj8PWeiuGkKms9TGXUclcYXMDiCW5kZZ7/AuqlzHhLrt0XjN3rFBcXQawR2Nm5V
J706DWCOxs3KpPep0iCC9BrBHY2blUnvToNYI7Gzcqk96nSIIL0GsEdjZuVSe9Og1gjsbNy
qT3qdIggvQawR2Nm5VJ706DWCOxs3KpPep0iCC9BrBHY2blUnvToNYI7Gzcqk96nSIIL0Gs
EdjZuVSe9Og1gjsbNyqT3qdIggvQawR2Nm5VJ71SOJ7NRWzSDVWeljLKOOrbE1hcSQ05cJ2
8K6oXMuNuu3XeHs/0oLg6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcqk96dBrBHY2bl
UnvU6RBBeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNY
I7Gzcqk96dBrBHY2blUnvU6RBBeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPeqd0
o4etuGMXc77VC6Kn5mZJqueXHMk57T3l04udtOHV/wDocfpcgsOzaI8G1lkoKqa3yulmpo5
HkVMgzcWgnh7qzOg1gjsbNyqT3qUYc6mbV4FD6gWyQQXoNYI7Gzcqk96dBrBHY2blUnvU6R
BBeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcq
k96dBrBHY2blUnvU6RBBeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPeqg0p4ctmF
8WMt9phdDTmlZIWueXnWLnA7T3gumVzzp06vYvAY/Wegnth0S4OrsP22sqLfK6aopIpJCKl
4zc5gJ2Z8ZWf0GsEdjZuVSe9SXC3UlZ/AIPZtW1QQXoNYI7Gzcqk96dBrBHY2blUnvU6RBB
eg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPenQawR2Nm5VJ71OkQQXoNYI7Gzcqk9
6dBrBHY2blUnvU6RBBeg1gjsbNyqT3p0GsEdjZuVSe9TpEEF6DWCOxs3KpPeoNpZwFh7CmH
KSttFJJDNLViJznTOfm3Ucd4njAV5qr9PfUdQeMG+zeg9tBHULU+MJPUjVlKtdBHULU+MJP
UjVlICpn7IT/D/wCk/wC0rmVM/ZCf4f8A0n/aQTLRD1sbT35vbPU0UL0Q9bG09+b2z1NEBE
RAREQEREBERAREQFpMadQ9+8W1Hs3LdrSY06h794tqPZuQU1oF6uKzxa/2kS6AXP8AoF6uK
zxa/wBpEugEBERARF5VVTDR0stTUPDIomF73HgAQfNa2WShnZCcpXRODDxOy2ftUSwLca3E
NJBe62ndSxRU4paWEnfIyEsh77m6o4g0/jKOXTF94vEr3QVL6GkOYjiiyDy3jc7j7gWxwNe
pInR2CbVMcUX/AArgAMmjfacvrz76tthvWvVMdlcZKzbpiViB2a+l5xfNC9FUsEREBERBzL
op66Fp/Pl9k9dNLmXRT10LT+fL7J66aQEREBERAREQEREBERAREQcy3Dr0S+Ph7ZdNLmW4d
eiXx8PbLppAREQEREBERAREQQvSNj9mDKKGCmiZPc6zMQMecmMA2a7u5md7h28Sj+BLRaW3
5uIcQ4qtt0xFUnKKGOtjeIiRlk0A7XZbABsHBnvqaX/A2G8T1rKy827mqeOMRNdu8jMmgk5
ZNcBvkrEoNGGDbXXwV9HZ9yqKd4kifzTM7VcN45F+R8qCtpxjO10OKay4YUfNLdopRUV75m
jcYdUgBrduxo2+QcSlWhGsuEuEeZJ6DcqKBxNPVa+e7EvdrDLgyOSsOto6e40M9DVx7pT1M
bopWZkazXDIjMbRsPAsezWW3YftsdutdPzPSxklseu5+RJzO1xJ3yg52v8A15p/HDPaBdML
me/9eafxwz2gXTCAiIgIiICIiAiIgjmN8YU2C7C64TR7tNI7c6eEHLXflntPAABmT71XuGq
ahxHfKfFeN8U2p9S0h9JbW1sYbFtzbrDW2ZHbq7+e+d8KzcQYTseKmQMvVFzU2nLjEN2ezV
Jyz+aRnvDfWlZokwNG9r22PJzTmDzXPv8AnoNNVW7R9ftJNfFdWzvuzGASQ1b9SB2q1oGrv
ZnVyO/xlanRfHFRaUMR0FllL7KyN2Wq7WYHB7dXI8OWbwDwgKe4jwDhvFVQ2pulBrVDRq7t
E8scRxHLf8qzsP4Zs+F6J1JZ6NtOx51nnMuc88ZcdpQU/p+6o7X4IfXKtLR31vrJ4I1Vbp+
6o7X4IfXKtLR31vrJ4I1BJEREBERAREQEREFf6bOt5L4TF6StLoA+8t38IZ6pW602dbyXwm
L0laXQB95bv4Qz1SgtpERAREQEREBERAREQEREBcx4S67dF4zd6xXTi5jwl126Lxm71ig6c
REQEREBERAREQEREBERAXMuNuu3XeHs/wBK6aXMuNuu3XeHs/0oOmkREBERAREQEREBERAR
EQFztpw6v/0OP0uXRK5204dX/wChx+lyC98OdTNq8Ch9QLZLW4c6mbV4FD6gWyQEREBERAR
EQEREBERAXPOnTq9i8Bj9Z66GXPOnTq9i8Bj9Z6C8cLdSVn8Ag9m1bVarC3UlZ/AIPZtW1Q
EREBERAREQEREBERAVX6e+o6g8YN9m9Wgqv099R1B4wb7N6D20EdQtT4wk9SNWUq10EdQtT
4wk9SNWUgKmfshP8P8A6T/tK5lTP2Qn+H/0n/aQTLRD1sbT35vbPU0UL0Q9bG09+b2z1NEB
ERAREQEREBEWuuF/tNqdqV1wggfv6jnZu+obUGxRaKLGuG5narbtCD/nBaPrIC3FPVU9XEJ
aaeKeM/hRvDh9YQeq0mNOoe/eLaj2blu1pMadQ9+8W1Hs3IKa0C9XFZ4tf7SJdALn/QL1cV
ni1/tIl0AgIiICh2kisdHZ6agacubJwH91jRrEfXqrfXy/UVgo+aKtxLnHKOJm18h4gP4qs
bzeavEFxFZVMbEyNpbBA056gO+SeElXYcc3vHbsqy3ilWbhmytu1W504PM8IBcBs1jwBb2u
paSjxZY20sEcRa2dzwxoBI1QBn5VlYQpxDYY35bZnuefry/gsa6NNNjKjqZB9zqqUwMdxPa
7Wy8oP7F3Peb3lHFWKxEJhA/WYCvZYlF/ZhZaoXiIiAiIg5l0U9dC0/ny+yeumlzLop66Fp
/Pl9k9dNICIiAiIgIiICIiAiIgIiIOZbh16JfHw9sumlzLXjPTTIBvm/j2wXTSAiIgIiICL
Errpb7YwOrqyCnB3t0eAT3hwrFocT2O4zCGkucEkhOQYXapce4Dlmg2qIiAiIgIiIOZ7/15
p/HDPaBdMLme/j//ADNP44Z7QLphAREQEREBERAREQEREBERBROn7qjtfgh9cq0tHfW+sng
jVVun7qjtfgh9cq0tHfW+sngjUEkREQEREBERAREQV/ps63kvhMXpK0ugD7y3fwhnqlbrTZ
1vJfCYvSVpdAH3lu/hDPVKC2kREBERAREQEREBEX4SBtKD9ReLqumZ8+oib33hfHPGi+lRe
eFCclI8zCUUtPsyVzHhLrt0XjN3rFdOKrbZoqt1oxdFfDiQPfBVGcwGEN25k5Z63d4l21q1
8y5FZnxC0kWNzxovpUXnhesU8U7S6KRrwDkS05rkXpadRLs1tHmHoi8pqiGny3aVsetvaxy
zXnzxovpUXnhJyUidTJFLT3iGSi8I62lleGR1EbnHeAcCSvZzgxpc4gADMk8C7FqzG4lyaz
HaYfqLG540X0qLzwnPGi+lReeFH1cf4o/yl6d/oyUXy1zXtD2kOa4ZgjhXlJWU0LyySeNjh
vguAKlNqxG5lGKzM6iHuixueNF9Ki88L0hqYJ89xlZJlv6pzyXIyUmdRMOzS0d5h6rmXG3X
brvD2f6V0vLNHAzXlkaxueWbjkqwvWi62XjFc9+diVsTpp2zbiIQQMstmet3OJJvWs6mSK2
nxC0kWO2vpHODW1MRJOQAcNqyF2tq28TtyazHmBFjc8KMHLmqLzwnPGi+lReeFH1cf4o/yl
6d/oyUXxHLHMwPjeHtO8WnML4lqqeBwbLMxhIzAc7JSm1Yjcz2R6ZmdaeyLG540X0qLzwvu
Krp536kU7Huyzya7NcjJSZ1Ew7NLR5h7Ivl8jImF8jg1o3yTsC8OeNF9Ki88Ls3rXzJFbT4
hkosbnjRfSovPCyAQRmN4pW9beJ25NZjzD9XO2nDq/8A0OP0uXQL66kjeWPqI2uByILhsVe
420c23GV+56vxE2kO4ti3MRB+9ntz1hxqPq0/FCXRb6JxhzqZtXgUPqBbJYdpjhp7XTUkM7
Z200TItccOq0DPubyyJaiGAAzStjB3tY5ZqXVXW99kemd609EWNzxovpUXnhfTK2lleGMqI
3OO8A4ZlcjJSfeEui30e6L8JDWlzjkAMySsfnjRfSovPC7a9a+Z05FZnxDJRY3PGi+lReeF
7se2Rgexwc0jMEcKVvW3iSa2jzD6ReElZTQv1JJ42OHA52RXzzxovpUXnhcnJSO0zBFLT7M
lF5RVME5IhmZIRv6pzyX1LLHCzXle1jd7NxyXequt77OdM71p9rnnTp1exeAx+s9X7zxovp
UXnhQDG2jq3Y1vzLm7ELaRwhbCI2xB+eRJzz1hxqPq0/FCXRf6JnhbqSs/gEHs2rarFtdEL
baaOgEm6ClgZCH5Za2q0DPLg3l+m4UYJBqogR/mCla1a+Z0jFZnxDJRY3PGi+lReeF7RSxz
M14nte3jacwuRetu0S7NbR5h9rSz3V1FeJY5CXQO1cx+LsG0LazVMFPlu0rI9be1jlmovd5
GTXKV8bw9pyyIOY3gsPPzTjpE0nvE/wDqWriYovaYtHbSVse2Rgexwc1wzBHCvpRa1XV1E/
c5M3QOO9+L3QpOx7ZGB7HBzXDMEcKv43JrnruPPvCrPgtitqfD6REWpQIiICq/T31HUHjBv
s3q0FV+nvqOoPGDfZvQe2gjqFqfGEnqRqylWugjqFqfGEnqRqykBUz9kJ/h/wDSf9pXMqZ+
yE/w/wDpP+0gmWiHrY2nvze2epooXoh62Np783tnqaICIiAiIgLznnipYJJ55GxxRtLnvcc
gAOFeir/SJd3TVMVjhflG0Capy4fxW/x+pSpWbWisI2tFY3LX33GlwvEjorfLJRUOeQczZL
KOMn8EdwKPMhjYS4NzcdpcdpPlX2i9nHgpjjtHd518try/WxOmcGNjMjjvNAzJX7zLU26YT
RCooZeB8ecZU+wrahQW1s8jMp6gaxJG1reAfxW5mgiqInRTRtkY4ZFrhmCseTkxNtdMTC+u
KYjzqUKtWPrrQER3KMXCD8owBkrR3t537Fv77fbbfMAX6WgqWyFttqNeM7Hs+5u3xvhRHEN
o50XDUZmYJBrRk/tHkWlmp2TMe3NzDIwscWnIlpGRB4wRsSeNXJXrxuxnms9N2FoF6uKzxa
/2kS6AVH6N6SjwljOWsqqgRUtTSOga5281xexwzPAPknfV3tcHNDmkEEZgjhWK1ZrOpaomJ
jcP1EX4d5RdVFiOvkumJq2aQksp5HU8LeBrWnI5d85lR6gqqmvqZJi0x0jMxGCNsh4/641I
cSUTrbiasjcMo6l5qIncettcPIc1r16/HiJx11LzsszF52nslyNgwRHcWwGcU8Mb3Rg5EtJ
Gt5ciSsqsgpsT2COSlmyErWz00w32PG1p/gfKvq1xQ1+GYKedgkhlp9ze07xGWRC9rTbKax
2mG3073bhTtIa6Q5nLMnafKvLny2PTDFxdcrRFNK3UnaTHMz8V7Tkf67q3aiGDp9eCrqW5i
OrrZZo8/wAUnIehS5pzCgtfqIiAiIg5l0U9dC0/ny+yeumlzLop66Fp/Pl9k9dNICIiAiIg
IiICIiAiIgIiIOZ6zr2O/wCoB7cLphcz1nXsd/1APbhdMIC+XOaxpc9wa0DMknIBfShdVBz
+xJcqa5SSSU9C+NsVIHasZBaDrOA+cc899RtaKxuUq1m06htarGVpilMFI6a4zjfjo4zJl3
3b37ViSXnEtcC2kt9NbWH/ANSpk3R+XGGt2Z98rMhghpohFBEyKMbzWNAA8gXos1s8+y+MM
e7UwWmit+6V9xnbU1J2y1lVlmO9nsaO4F7TQWm/0jmF1PVx7wfE8OLDxhw3ivu62e33ulFL
cacTwh2sGlxbkePMEFedqw/abIHc7aGKnLhk5wzLiOLWOZyVXVvvM91utdtdnnBUYotULWN
fS3WCIZBsmcczmje+VvE99b6z3ykvVOXwF0crDqywSDKSJw3wR/FYy0d2stDUXSCrni1TL9
ydLG4se134Dsx5W+UK2mef/JXODf3U2RQiSqvFieGUt4bcBvikrGl8pHcc35X1jJbGhxvQy
PEN0gltc+tq/dtsZdxB42fXktFb1t4lRbHesbmEmRfLXNewPY4Oa4Zgg5ghfSmg5nv/AF5p
/HDPaBdMLme/9eafxwz2gXTCAiIgIiICIiAiIgIiICIiCidP3VHa/BD65VpaO+t9ZPBGqrd
P3VHa/BD65VpaO+t9ZPBGoJIiIgIiICIiAiIgr/TZ1vJfCYvSVpdAH3lu/hDPVK3WmzreS+
ExekrS6APvLd/CGeqUFtIiICIiAiIgLwqayCjZrTSBvEOE+RYl2ub6FrWRxkveNjj80f8Al
RqWWSaQySvL3HfJXm8rnRhnorG5bePxZyR1W8JTb7nHcDIGtLCw7ATtI4183tmva5T+KQf2
qPW+aWCtjfCxz3Z5FrRtI4VK6mEVNK+EnV125Z5by5x81uTx7Vt57wZscYMtZjwhaKRMw5T
j588h72QX39r1F+NL5w9y86Ph2efaP8ts83E2g3godX/fCo/5rvSpiBkMuJQSDF2Crrf+ds
NzndXTzmMR7i8AvzOYzLcl6vO4981YinswcXNXFaZs+lI8Of3GT/mH0BfX2vUf40vnD3LNo
6KKhidHEXEOdrHWOazcPh5cWXqt4X8jk48mPpq1eJfm03fd/BaFTCtt8NeGCYvGpnlqnLfW
J9r1H+NL5w9yjyuFly5pvXxP/DvH5WPHjistPZ/vrB3z6CpNW/3Go/5TvQsams1LSztmjdI
XN3syMvQs2SMSxPjdnk9pacu6tXE498WG1LeZ/wCGfkZq5MkWqhCKS/a9R/jS+cPcn2vUf4
0vnD3LzP6bn/Ju+24mZb/vdT/8tvoUevn31l7zfQFJ4YmwQsiZnqsaGjNYdVZ6arqHTSOkD
nZZ5EZehepyuPfLgrSvmNfww4M1aZZtPhFFu8NfPqO83+Kyvteo/wAaXzh7llUVugoC8wl5
18s9Y57yx8Xg5cWaL28Q0Z+VjvjmsMXEP3ub/wAwegqNKZVlHHWwiKUuDQc/knJQmvxRgi2
3mS0VVzqGVkcgjcwQvIDjlkMw3LhU+Zw8ubL1V8I8bk0x06bMqk/vkH/Mb6VNFrI7DSRyNk
a6XNpBGbhweRbNaODx74K2i/uq5WauWYmqDP8Anu76/FJjh+jJJ1pdv+Ye5fn2vUf40vnD3
LzP6bn/ACbftuJ6WP71x993pWtxH/fY/wDl/wASt7S0zKSAQxlxa3PLWO1eFZa6eukbJKXg
tGQ1TkvTy8e9+NGKPMaYceatc83nx3RJbTD/AN8T/wAs+kLY/a9R/jS+cPcvektNPRTbrE6
Quyy+URl6FiwcDNTLW061DVl5eO9JrD9u/wB6p+8PSFElNaiBlVA6GTMNfv5b61/2vUf40v
nD3K/ncTJmyRan0VcXkUxUmLI0pxH/AGTe8FrPteo/xpfOHuW0A1WgDgVnB42TBNuv30hys
9Muun2Q+5ffKo/5hWMpRNY6WeZ8r3S6zzmcnD3KMX7EGDcM3HnfdrjUQVGoJNQROf8AJOeW
0NI4FhyfD89rzMaaqczFFYiUhw5/dZfz/wCC+MSf2UH5x/gs20xUrKGOaje58NQ1srHO3yC
AR+xelbQQ14YJi8BmZGqcl6M8e/2T0vf/ALY4zV+0ep7Iesy0/fSD87+C3P2vUf40vnD3L0
p7LS007JmOk1mHMZkZehedi+H5q3raddpbL8zFasxDMqv7pN/y3ehQpTh7BJG5jt5wIOS1n
2vUf40vnD3LbzuLkzzWaezNxc9MUT1I0phbfvbT/mBYn2vUf40vnD3LYwQtghZEzPVYMhnv
qPB4uTDeZv8AR3lcimWsRVGr799H/mt9C1yldVaKasnM0jpA4gD5JGXoXj9r1H+NL5w9yzZ
uBmvktaNamV+Ll460is+zEw3/AG0/5oWbf/vb/wB4XvRW2Cgc50ReS8ZHWOa9aukjrYdylL
g3PP5J2rfj4968WcU+e7JfNWc/qR4QxelP/eYvzx6VIfteo/xpfOHuUdvmIcH4VubKO63Ce
Cp1Gyhgic8apJy2taeIrzK/Ds8TE9m2eZimE3UIl/tn/nFTGkqoa6jgq6d2tDPG2SN2RGbX
DMHI9wrBdh+jc4uLpcyc/nD3L0edx754r0ezHxc1cUz1IypRYfvY384r4+16j/Gl84e5Z1J
Sx0cAhiLi0En5R2qnhcPLhy9VvGlvJ5FMlOmrUYl+dT9538Fo1L623QV5YZi8ameWqct9Rq
5UzKSufDGSWtyyz395ZfiGC9ck5Z8T/wAL+HlrNIp7wxVucPz1O7GFrS6DfcT+Af64FgUFB
LXzajNjR8553gFK6amipIRFE3Jo+snjK78P497XjJvUR+7nMzVivR5l6oiL6B5AiIgKr9Pf
UdQeMG+zerQVX6e+o6g8YN9m9B7aCOoWp8YSepGrKVa6COoWp8YSepGrKQFTP2Qn+H/0n/a
VzKmfshP8P/pP+0gmWiHrY2nvze2epooXoh62Np783tnqaICIiAiIg/FVNBQzYrv1fWB+pF
JM5xkyzyYDk0Du5BWXd5zS2atqAcjFTyPB7zSVFMAwtjw41wHynvJJ8gVlLTT5oV3iJjUvr
7SLaG/3ipz4TrN9y0UENOKtz7RQGujidqioq5dWIkfitAzcO6pPi2qkp7E+KF2rNVyNpmHi
Ljkf2ZrHo6JkMEcELcmRtDWjuLtst5jUzLlaV86eAvGJGfKfS22Ufise9p+she8WL4onBl2
oZ7eTs3Q/dIvOb7lmCheRvLzkonapDm5g7CCN9V7WdMPq9UEN/tGdLIyRzflwyNcCCeLPuq
vJI3wyOjkYWPaci0jIgqVOtdTbJjVWWYU0hOb4HbYZe+OA90LYUNba8QSmC4UDIbhGPlwyj
5RHG134QWnDyJx9vZRlw9SBEBwIIBB3wVJMJYsNlcy23F5NA45QzHbuB/FP+X0KWNslra3V
Fvp8u7GCobiyzQW2qjfTsygnB+RvgEb/AJNoV05KciemY1PsrrWcXzRO1ntc17Q5rg5pGYI
Owhfp3lVNhxTcMPZQaprKD8i53yo/zDxdwqZw4/w5LDryVroHAZmOWJwcPqBB8ix5Mdsc6t
DTS9bxuGn0jCEUVK1zQZ3zjc3cLRlm4j9n1qGrYX+9OxDdzWBjo6aJupTsdv5cLj3T6FgAE
nIDM9xelxaTSm7e7Fnt1W1Ce4OqhLY9zJ2wPc3yHb/ErXVt1qcStNPRtfT2t2ySd2x844Q0
cDe6lqjmsuE7lXVDTGXxkxtdsO9kPrJWVZqJ0FupYCNrI2h3fy2/tXm5ddc6bMcdo22dqib
E1kcbQ1jAA1o4AFIY/mhYFFS6gBIWxAyCrWP1ERAREQcy6Keuhafz5fZPXTS5l0U9dC0/ny
+yeumkBERAREQEREBERAREQEREHM9Z17Hf9QD24XTC5nrOvY7/AKgHtwumEH4d5RLFFM+hq
XX6jqYqeaKLVnbOQIpWDb8o8BHAVLSQASTkFXs9vdpAr319YXDDtLIW0dODkK17TkZX8bM8
w0cO/wB/kxExqXYnXh4U+NLjfYtXDdiknfkA+pqpBHTxkjPfG1++N5byxUFzo4ZZLtczW1V
Q4OcGN1YotnzWDfy7p31r6rDtEZ3OjEsDXAB8cEhjY8DYMwOJY/2t2wbWQyRu/GbM8H0qic
P0XRl+qWIou2iudGc6G8VGX5OqG6tPlO0L05txKRql1sb/AJwyQn6s1XOCycZqtvc7tR2mK
OSskLRI7VaGtLidme8Nq+Ya613undHBUx1DHbS1r8nDI5g5b42rUU1ukFUa2tqX1dWRqh7g
AGDia0by+6qyUdW7dJIA2UbRLH8l4PfCn6Hbz3R9eYncN9T0sFKzUgibGDtOqN/unjWLHDG
+trqWaNkkcupKWPGYOY1d4/mLUR1F6tO8/npTDfZJ8mZo7jt53lWdTVNNfJBU0VdJA9jDHN
EGgSN255EEHLh/gVTbHanlopkrfe58vGWjmw7nU2a4MpYyczR1Li6F54m8LT3lurFiuku8h
pJo3UVwYPl00uwnZnm08Iy8q84KCmpnmSOLOQ78jyXPP/cdq19Ta6a41lZT1DSHfc545WHJ
8biNXNp4PmfsU6ZpjtKF8NbRM1Uzf+vNP44Z7QLphc74hwvcrTj+hr6mR1Q2pr4nmfL53y2
7feuh1riYmNwxzExOpfqIi64IiICIiAiIgIiICIiCidP3VHa/BD65VpaO+t9ZPBGqrdP3VH
a/BD65VpaO+t9ZPBGoJIiIgIiICIiAiIgr/TZ1vJfCYvSVpdAH3lu/hDPVK3WmzreS+Exek
rS6APvLd/CGeqUFtIiICIiAvMTxGcwCRu6AZlue1fFXUspKZ8z/AMEbBxngCh75pJJjM553
QnPWB4Vh5fMjBMREbn/01cfjTliZ3pL62kZW0zon7DvtdxFR+lslTNO5ko3JjDk5x4e9xrZ
WSuqatr2TNDmsH9pw58XdW2UZw4eX05XYy5OPvGx6Wigo2asLAONx3z5VkIi3VrFY1WNQyz
M2nciIik4LmPCXXbovGbvWK6cXMeEuu3ReM3esUHTiIiAiIgIiICIiAiIgIiIC5lxt1267w
9n+ldNLmXG3XbrvD2f6UHTSIiAiIgIiICIiAiIgIiIC5204dX/6HH6XLolc7acOr/8AQ4/S
5Be+HOpm1eBQ+oFslrcOdTNq8Ch9QLZICIiAiIgIiICIiAiIgLnnTp1exeAx+s9dDLnnTp1
exeAx+s9BeOFupKz+AQezatqtVhbqSs/gEHs2raoCIiAo9W0EtffJWM2NGrrP4AMgpCvwAA
kgAZ7T3Vnz4IzRFbeN7W4ss4pmYedNTRUkIiibk0fWTxleqIr4iKxqFczMzuRERdcEREBVf
p76jqDxg32b1aCq/T31HUHjBvs3oPbQR1C1PjCT1I1ZSrXQR1C1PjCT1I1ZSAqZ+yE/w/8A
pP8AtK5lTP2Qn+H/ANJ/2kEx0RuazRfa3vcGtbu5JJyAG7PWSzShgp9fzE2/QbrrausWPEe
f5+Wr5c8lpMC2iS/aEKa0xVho3Vcc8ZmDNfVBnfnszGeYzG/wqO48smFsH6PYsPbnTVV8eW
mKZkIbO46+Ze7fIGWbQCdvBvbAugEOAc0gg7QRwrWWfElov8tZFa6wVLqKTcp8mOAa7bszI
AO8dozCi1DguuveALFbrjdrlbJqamylZTSaheCNjXjhyGQy760OgWMRU1/jBJDKiNoJ7gcg
ttERBqMVuLcK3Mj6K8fsKhmCruylIt851WTZGNx4HZZZeXYppihmvhi5tH0WQ/U0qpYSdyj
cDkdUFa+PjjJFqs+a/TMSnuK/lVNnjO8azW8oaVubfTh20hRy7TPnteH62U5v5qjDjx6zSM
1Lre0BgWWV1fDKELQN5fL6ZjhvL2X6uJNXUW8HMgKKYsoW09mqrgGubUUML54ZGHVc1zWk7
/FsU+IBUexvTtOC727Let85/wD6bkEdwLj6mxPTNp6h7Y65oy4t09x7n1dzZYyo3VFobMwZ
mnfrH807D/BUxout7bliGrgc5zC2idIx7DkWPD2ZOHdGauux3d1YJLVdA0V0TcnAj5M7Pxx
/EKdLTWYlXau4V+mWZUwrMDh9QXUlUI43HPUe3PV7x4VsrThajtrxNITUTjec4ZBveC9KeX
Tp7eWOMFt92rsWEQ9jam5tO3a2De873KVQ0tPTNDYII4wOBjQF6rFuNwp7XQyVlU/VjjHlc
eADulefe9rzuzVWIrGoaXFMoq6iis7DnusgnnHFGw8Pfdl9S3FuiBcDko7a4Kieomuda3Kq
qyDqfkmD5rPf3VLrfFqsByVS2I1DPY0Bq+l+LwrqeSrt9TTRTbjJNE5jJcs9QkEB2XDlvo6
jtXpNwbQ3B1BPfIhOx2q7Vje5rTxFwaW/tW9qrxbaK1G61NdBHQhgfzQXjULTvEHhz4Mt9V
dfcL4U0faOq633R1LX3OrbJzPM6nDZnPIyaW7SWhuwk55b/Hkvuw4AuOKdFlltlwuMlvjjq
H1IjdDrlzCTqj5wy2Ekb/zggm9m0hYUv9cKG23iOWpd82N8b4y/vawGfkUkVH6Q6ayz4tsN
iwfRwR3WlmykdRxhojyLdUOI3y3Ikk73CrwQcy6Keuhafz5fZPXTS5l0U9dC0/ny+yeumkB
ERAREQEREBERBp7/iyxYXjjfebjHS7r8xha5znd0NaCcu6vqw4osmJoHzWa4R1TYzk8AFrm
8WbXAEfUtDdsCUFXjY4uvVfBNRU8GqKOpgG5xgN+cXF2WWZJ2jfKh2CY6a7aW7xcMMRGlsw
pnRukiZqM1iGgao3hm4FwHcQT24aSsH2u4vt9Xe4m1DHarw2N7w08Rc1pAPl2KR01TBWU0d
TTTMmhlaHMkjcHNcDwghU/imzYa0dYPrLTNbp7rWXRkjoq2SBh3F2QDc377cjtGW+c1MtEt
PzNo6tzea46kO135xuzEebidTvjh7uaCmqzr2O/6gHtwulJ5mwQvlc1zg0Z6rRmT3AOErmu
s69jv+oB7cLpc7yCDYssNbfbNKLpUS7vWObBSUEEpbFAXH5zy3LdHNbm45/J+SQBwmTw08N
HRQUVMwMhp42xxtHA0DIL2qAHPDtXNzc8jxZr8hjJdmUHgaHX25L5FsC2oaAF+5BBpX23iC
8DbnZ7ykOQXzuY4kGlhtxz2hZfO5urvLYBgC/ckGintxGeQWiuVmc6YVdJIaatj+ZM3h7jh
whTlzA5YdTRteDkEGhst255Qvjmj3Gspzqzw8R4x3DwL3np6gVfNVNJEHGMMcyRpycASRtB
2b54CtTeIjaLtR3ZnyWl4p6jL8KNx2E945KQrDlp027NuLJMw0t4gmuFvfBVUL2vb8uKane
H7m8bztuR+oLdYWvRvdliqZMhO3OOYDgeN/69h8q1wzu54W0IOWXDP3/wDL6e9v+eG5BBe7
1C3Y3mlrgB3WBWYLTuYc5FYiIn3S9F8tOYX0tTGIiICIiAiIgIiICIiCidP3VHa/BD65Vpa
O+t9ZPBGqrdP3VHa/BD65VpaO+t9ZPBGoJIiIgIiICIiAiIgr/TZ1vJfCYvSVpdAH3lu/hD
PVK3WmzreS+ExekrS6APvLd/CGeqUFtIiICIiCP4imkMkcOq4RtGeeWxx/8fxWmYx0j2saM
3OOQHGVN3sbI0te0Oad8EZhYcVopYaxtTG0tLc8m55jPjXkcngXy5euJ7T+z0cPLrTH0zHh
7UVK2jpWQt3wM3HjPCVkIi9WtYrEVjxDz5mbTuRRi56R8IWi4ut9beomVDHar2sje8MPES0
EAqSvDnRuDHariCA7LPI8eSqufCGF9HmD7o/EVRTXWprdfcpZqcNleS3Y1mZcc9bM6wI39u
8pOLQpKymr6SOro5454JW6zJI3azXDuFYEWJrPPiKbD8VaH3OCPdJIAx3yW5A/Oy1fwhszz
2qA6MsO3G4aLH0NTX1tsbV1Zmppqd5ZI2L5O8eAEh3fB7q1GALQyxabLpbGVEtSIKV43WY5
veTuZJJ49qC6lzHhLrt0XjN3rFdOLmPCXXbovGbvWKDpxERAREQEREBERAUXuWknCFpuL7f
W3qJlRG7Ve1kb3hh4iWtIB8uxSaRrnRuax2o4ggOyzyPGqsqMI4V0eYMuX2wzU11qqwvMUs
tOGzPJbkGszLiMjmdYHh27yCyTd7aLTz2NdBzBue6c0641NXjzWktekfCN5uDaChvUT6h7t
VjHxvj1zxAuABKgeDsEXPE+iKO1VVwktsU9wNTEXQ7prQ6oAGrrNyBfm7/5WBpPt+H6cWbD
GGqOF98hla0mkjAeBq5API33E5HacxkTwoLyXMuNuu3XeHs/0rpaBsjaeNsrg6QMAe4cJy2
lc04267dd4ez/AEoOmkREBERAREQEREBYN3vVtsFA6uutZHS07Tlrv4TxADaT3As5RPGWBW
4xuFpmqbhuVJb5TJJSmHWFQCWkgnWGWxuW8d8oM2w45w1iWpNNabrHPOBnuTmOjcRxgOAz8
i/L7jvDOGqoUt2uscE5AO5NY+RwB4SGg5eVVnd22m5aYrFT4OpoGOoZGGtlo2Bseq12bvm7
Dk3ME8OYCk96sOHsGVd1xbeaSovjrjNq7i6nZLuOescgDvNyAGfEAgnFpvFuvtC2utdZHVU
7jkHxnePERvg9wqg9OHV/+hx+lymmgmJhtl5q4p4xHUVLdWka/N0AAdkT388hx6qhenDq/w
D0OP0uQXvhzqZtXgUPqBbJa3DnUzavAofUC2SAiIgIiICIiAseur6S2UUtbXVEdPTwjWfJI
cg0LIUYx5hCTGtmitjbmaBjJxK9wh3TXyBAGWsOPPyIPq0aRMJXyvbQW+8xyVLzkxj43x65
4gXAAnuBSGeeKlp5KieRscUTC973HINaBmSVSWk2jsTrtZcO4SooG3mCbVcaNgBZvaoc4b7
s9u3aMiTvqZY4q58R3qjwHb5S01AE91mZ/wClTjI6vcLjl9Y4CglFgxVZMUMnfZq4VTacgS
ERvZqk55fOA4iqQ06dXsXgMfrPUu0HRMglxLFG3VZHVsa0cQGvkojp06vYvAY/WegvHC3Ul
Z/AIPZtW1Wqwt1JWfwCD2bVtUBERAREQEREBfEsscMT5ZXtjjY0uc9xyDQN8k8AX2tPiuxS
Ylw3V2eKtNEaoNaZhHr5AOBIyzG+Blv8KDWU+k/BdVXiiivsO6udqguY9rCfzy0N/attfMS
2bDcMU14rmUjJnFsZc1ztYjad4FVRpGtGF8M4KocM00FNU37Wj1JIYQJnH8J7sszk7eDSTv
jLeX1jdtdTR4Cobha5rnNSQB9TSNbrGZ+TAGHYc9rSDv8ACgsi1Y/wte7jFbrbd46iqmz1I
xG8F2QJO0gDeBUR099R1B4wb7N6/MH4ksBxfHaK3A9Phu8ZE07xC3M5tOY1tVpGbc+4doX7
p76jqDxg32b0HtoI6hanxhJ6kaspVroI6hanxhJ6kaspAVM/ZCf4f/Sf9pXMqZ+yE/w/+k/
7SDd4MuFfatBUFZa6WWqrY45hBFFGZHF5ne0HVG05Z5nuBQnCs94sVxlvF00f3q9XeSQvFX
UMkGp3Q0xnb3c+9kpbo1x5hey4Ct1vuN3ip6qLddeNzXEtzleRvDiIUp6KGCuz8HmP+FBu7
Dcai72Smr6q3y26aZpL6WbPXj2kZHMA8Ge9wqA6GLVcbYy+88KCqpN1qWOj3eF0euPlbRmN
qkfRQwV2fg8x/wAK/Oihgns/B5j/AIUEsRRPooYJ7PweY/4U6KGCez8HmP8AhQSG6Q80Wyq
gyz3SFzfrGSpekOtSxZfigKxX6T8FOaQL/B5j/hUDsfM9XcoGU8gkp3VWqx43nMLth+orXx
b9M2n8mfPXqiP7ptiOlMGDMmj5dG2KRvfaRn/FSS2vD4WuG8RmFrsQR7rh64s46aTLv6pWg
s+kXCtJRQQ1d5himZG1sjSx+bXAbRvcayyuqsBFE+ihgns/B5j/AIU6KGCez8HmP+FcSSxa
TGnUPfvFtR7Ny13RQwT2fg8x/wAK1eKdI2EK7Cd3o6W9wyTz0M0cbAx+bnFhAG9xlBXWg6P
dcZVrf/xr/aRq1rzZWVWq8OdDPEdaKaPY6M9z3KntD9+teHsV1VXd6xlLA+hfG17wSC4vjI
GwHgB+pW5PpHwTK0//AF+DzH/Cg86fEldbfuN7pHSMbvVlMzWae65u+PItlFiixTM1m3WmA
/zv1D9RyUcnx3hAk6l8gP8A2P8AcsGXGODZXaz7lSvPG6Jx/wBK7tHphKanGFpizZSyurp/
wYqZpdn5d4DyrWCCsutYyuu2qDGc4KVhzZF3T+M7urWR43wlGNVl2p2Diaxw/gsiHHeEdb5
d7hH/AGP9ybdiIhKKKnLng5Lfwx6jAFDqbSNgmIbb9Bn+Y/4VlDShgkf/AM/B5j/hXHUsWL
cqmSitdXVQwvnkggfIyJjSXPIaSGgDfJyyUd6KGCez8HmP+FOihgns/B5j/hQVLaJL9HiCe
/YkwJeb9XvdrR7rFIyOLvM3M55cA3hxKa4uxXiy6YDhda8N3S311bO+KWOOGR8kUTRtOxoL
dbMAHLeByUm6KGCuz8HmP+FOihgrs/B5j/hQV3gy8V+D6VsVLoxu8tXIAJ62QSa7+P8A9L5
Le4PLnvq71FOihgrs/B5j/hTooYK7PweY/wCFBSGinroWn8+X2T100uWtHd0orPj+3XC4VD
YKWJ0hfK4EhucbgN7ukK+uihgrs/B5j/hQStFFOihgrs/B5j/hTooYK7PweY/4UErRRTooY
K7PweY/4U6KGCuz8HmP+FBK0UU6KGCuz8HmP+FOihgrs/B5j/hQStFFOihgrs/B5j/hTooY
K7PweY/4UEE0rTYku+J47VFZLvV2Ok1HSMpIXhtS4gOJ1w0jZmBvHIgrfYOv1wmb9rtDgWt
w1Tugk3OrkDy2N+rsJ1oxmc8tpK3vRQwV2fg8x/wp0UMFdn4PMf8ACggrcZ4toLDc8O4kw3
cbncpxJFDM2DON7XDV/Bbk4A5nMb/cUx0U4cr8NYLZTXJhjqKid1QYidsQIADT3cm5+VZPR
QwT2fg8x/wp0UMFdn4PMf8ACgpKs69jv+oB7cLpcjNcu1V0oX6VnXZtQ00JvIqN2yOW57rr
a3HvbVe/RQwT2fg8x/woJQYweBfrWAKLdFDBPZ+DzH/CnRQwT2fg8x/woJYiifRQwT2fg8x
/wp0UME9n4PMf8KCWIon0UME9n4PMf8KdFDBPZ+DzH/CgliKJ9FDBPZ+DzH/CnRQwT2fg8x
/woJYvwjNRTooYJ7PweY/4U6KGCez8HmP+FB9Y+iH2r1WQ+U4xhvf125LYKN3fFthxTLbrb
Z7jHWPNbHJK1rXDJjcyd8DiCkiy8ie8Q04Y7SwYzzFXmE/2FS4ujPA2Tfc3y747ut3FgWE6
97vEo3jV6nmtAWxur6ZtE5tTIY89rC0Zv1htBaOEg7VDcO41w9b4pDcbrDDVTTvllYWO2En
uA8GS5x47zKfIndYlakPzAvRRCLSfgprADf4B/wBj/hX30UME9n4PMf8ACtbGliKJ9FDBPZ
+DzH/CnRQwT2fg8x/woJYiifRQwT2fg8x/wp0UME9n4PMf8KCWIon0UME9n4PMf8KdFDBPZ
+DzH/CgliKJ9FDBPZ+DzH/CnRQwT2fg8x/woJYiifRQwT2fg8x/wp0UME9n4PMf8KCtdP3V
Ha/BD65VpaO+t9ZPBGqm9MeIrRiK92+e0VrKuOKmLHuYCMjrE5bQFcmjvrfWTwRqCSIiICI
iAiIgIiIK/wBNnW8l8Ji9JWl0AfeW7+EM9UrdabOt5L4TF6SoZoaxbYcOWu5RXe5R0j5p2O
YHtcdYBvcBQXmiinRQwV2fg8x/wp0UMFdn4PMf8KCVrxqnmOkme05FsbiD5FGuihgrs/B5j
/hWdR4nsuJLbXOs9eyrEEeUhYCNXMHLfA4ioZJ1SZ/JKne0NeLxcG71SfK0H+C3llqp6ulf
JO/WIfqg5AcA4u+ostzRXWhsmH5rhcqhtPTRy5PkcCQM9UDe7pC8L4flyWzataZj+71eXjp
XHuIhIUUU6KGCuz8HmP8AhTooYK7PweY/4V9A8hJ5pNxgkl1HP1Gl2qwZl2Q3gONc+wzYhr
sUS37E+Brzen5509M6KWOGEZ7Bq7mcwOLe3yc81bfRQwV2fg8x/wAKdFDBXZ+DzH/CgzMIX
+uxDbJamusFTZHxS7m2Co1s3NDQdYZtbs25b3AodYrTcodOt5uMtvqmUUlO4MqXQuEbjlHs
DssjvH6lJeihgrs/B5j/AIU6KGCuz8HmP+FBK1zHhLrt0XjN3rFXj0UMFdn4PMf8KoTDdzo
qPSRS3OonbHRsrzK6Ug5BuZ28aDqZFFOihgrs/B5j/hTooYK7PweY/wCFBK0UU6KGCuz8Hm
P+FOihgrs/B5j/AIUErRRTooYK7PweY/4U6KGCuz8HmP8AhQStFFOihgrs/B5j/hTooYK7P
weY/wCFBJ55NxgklDHP1Gl2q0Zl2Q3gONc+08uIKzFE1/xPga83uUnOCndDLHDCM9g1dzOY
HAN7fJzzVt9FDBXZ+DzH/CnRQwV2fg8x/wAKCPXzGOKbho/nntmFrnbLjLVcyMhbC98kcep
rGQDUBA/BBy2HhUVwbcrjg+Eys0aXisuUme7V0ok13Z74aNyOqP2nhJVl9FDBXZ+DzH/CnR
QwV2fg8x/woJPTyOmp4pXxmNz2BxYd9pI3lzTjbrt13h7P9Ku/ooYK7PweY/4VQuK7pRV+k
irudLUNlpH1jJGygHItGrt4+BB1KiinRQwV2fg8x/wp0UMFdn4PMf8ACglaKKdFDBXZ+DzH
/CnRQwV2fg8x/wAKCVoop0UMFdn4PMf8KdFDBXZ+DzH/AAoJWiinRQwV2fg8x/wp0UMFdn4
PMf8ACglarbTFW4kdb6W0WCgr5o6oOdVy0kD3nVGQDM2g5Z7c+8ODNb7ooYK7PweY/wCFOi
hgrs/B5j/hQQvA98qsPOpbVQ6NLrSMqZWR1FbNuhccyAXvO5DYMyctgHcWdNi3FuDsU3SG9
2y4Xm2TvLqCSniBDG5kgZgcRAOe35PdUm6KGCuz8HmP+FOihgrs/B5j/hQR3RHYLpS1t6xB
caF1uZdJc4aRzS0tGs5xOR3gNYAeVQPTh1f/AKHH6XK3uihgrs/B5j/hVJ6Wb1bb/jLm21V
Taqn5mjZujQQMwTmNo7qDoXDnUzavAofUC2Sg1k0k4OprDb6ea+wMlipYmPaWP2ODQCN5Z3
RQwV2fg8x/woJWiinRQwV2fg8x/wAKdFDBXZ+DzH/CglaKKdFDBXZ+DzH/AAp0UMFdn4PMf
8KCVoop0UMFdn4PMf8ACnRQwV2fg8x/woJWoZpRuV+ocMCDDtJVz1dXJubpKWFz3RR5EkjV
ByJ2DPulZHRQwV2fg8x/wp0UMFdn4PMf8KCt8G3WvwdS/wDD6MbxUV7xlNWyCTXfxgfcvkj
uDykqbXTRdDdr9V3yO/XO3z12q6RlM8MAyaBlnvneWy6KGCuz8HmP+FOihgrs/B5j/hQQvR
FhG5W6+3Ovr+eVIKeUsjinY5jKkHWGucx8ojYc+6oxp06vYvAY/Werb6KGCuz8HmP+FUtpb
vlsxBjCOstVWyqpxSMYXtBA1g52Y2juhBf+FupKz+AQezatqoHh/SRg+kw3bKaovkEc0NHF
HIwsf8lwYARvca2PRQwV2fg8x/woJWiinRQwV2fg8x/wp0UMFdn4PMf8KCVoop0UMFdn4PM
f8KdFDBXZ+DzH/CglaKKdFDBXZ+DzH/CnRQwV2fg8x/woJWtFjS5XO1YUraqzUk1VcNUMgZ
DEZHBziBraoBzyBJ8iweihgrs/B5j/AIU6KGCuz8HmP+FBVeEam64bqpLnW6O71d7vI8uNb
O2XNuf4oMZyPdzJ7ynmIcU4yt3Oa+0dlmktc8LXV9vERdPA7bmCcgRsI4N8bcs1uOihgrs/
B5j/AIU6KGCez8HmP+FBDLdFdMf6UaDEhs1VbLZbImgPqWFrpC0uIA4zrO4N4BZ2nvqOoPG
DfZvUl6KGCuz8HmP+FQDTDjHD2IsM0dLaLnHVzR1okcxjXAhuo8Z7QOEhBINBHULU+MJPUj
VlKtdBHULU+MJPUjVlICpn7IT/AA/+k/7SuZUz9kJ/h/8ASf8AaQR7Cmh+rxVhulvUV4hp2
VOvlG6EuLdV5bv5/wCVbjpfq7tgp+Tu96neiHrY2nvze2epogpDpfq7tgp+Tu96dL/X9sFP
yd3vV3ogo/pf6/tgp+Tu96dL/X9sFPyd3vV4Igo8/Y/14H3/AKfk7vevS32ebBl2it9RO2p
NK6OXdGNyDhnnvHvZK6zvKsMdM1MWtI/Do2n/APZwV2DvkiPqqy9qTKaVb2VVnnfG4OZLA4
tI4QWlU7RaH6q/Ri4R3iGFtT90DHQklufBvqx8LzulwzURvOYiL2t72rn/ABKycFn/AOgUW
f5IKF69NphKk7javR9j/Xn/APn6fk7venS/1/bBT8nd71d7d5fqgmo/pf6/tgp+Tu96w7xo
PrbRZa65vvcEjaOnknLBAQXBrS7LPPuK/FpMadQ9+8W1Hs3IOcMD4PmxteZrbDWMpHRU7py
97C4EBzW5ZA/5v2KddL/X9sFPyd3vWv0C9XFZ4tf7SJdAIKP6X+v7P0/J3e9fh0AXDs9T/q
He9XivzfQUf0ALh2ep/wBQ73r96X+v7P0/J3e9XgiCj+l/r+2Cn5O73p0v9f2wU/J3e9Xgi
Cj+l/r+2Cn5O73r96X+v7YKfk7vervRBSHS/V3bBT8nd706X6u7YKfk7vervRBSHS/V3bBT
8nd706X6u7YKfk7vervX4g5Kwxh+TE2JKWyx1Dad9SXASubrBuq0u3v+1WP0v1d2wU/J3e9
RTRT10LT+fL7J66aQUh0v1d2wU/J3e9Ol+ru2Cn5O73q70QUh0v1d2wU/J3e9Ol+ru2Cn5O
73q70QUh0v1d2wU/J3e9Ol+ru2Cn5O73q70QUh0v1d2wU/J3e9Ol+ru2Cn5O73q70QUh0v1
d2wU/J3e9Ol+ru2Cn5O73qeY50kWzBwlontllub6fdII2x5s25hpceLMHPhWRo8xJW4lwbH
d7mYxMZJA7cmarcmniQV30v1d2wU/J3e9Ol+ru2Cn5O73rYwaQsdYho7lfcP263x2m3Odmy
fMyPDRrHhGZ1cjsy39masDBeJW4twxTXcQ7g+TWZJHnmGvacjkeLh8qDmmbDz4sZHDZqGl4
rhR7tq7M9fU1sv25KxOl/r+2Cn5O73qL1nXsd/1APbhdMIKP6X+v7YKfk7venS/wBf2wU/J
3e9XgiCj+l/r+2Cn5O73p0v9f2wU/J3e9XgiCj+l/r+2Cn5O73p0v8AX9sFPyd3vV4Igo/p
f6/tgp+Tu96dL/X9sFPyd3vV4Igo/pf6/tgp+Tu96dL/AF/bBT8nd71eCIKfwno/kwdjJkM
1dHWSGmM+bIy3VGZYN890/Up5caqSkpxJG1u1wa57/mxg/hEDfA/ogbVixO5pxld598U8cN
Ow+Qud+0rZv1dR2vlq5bc97JYc07u2YO0RMo/iHUtlknlMm61lXlTtmk383bMh+KMszkOJV
+3QvX1075DeoAXuLj9xPD5VsMc3NsddabZTTbpTc1xujO3eLxsB4QNUgEceXArTtsW8Vow1
1XarkTM31KpxoAryM+f9Pyd3vTpf6/tgp+Tu96u8bAv1XKFH9L/X9sFPyd3vTpf6/tgp+Tu
96vBEFH9L/X9sFPyd3vTpf6/tgp+Tu96ta8YiZb6htBRwGtuDxmIGHIMH4z3fgj9pWm3C4X
aeVlxvsjXxka9LQO3JrMxmAT85wyULXrXynWlreEC6X+v7YKfk7venS/1/bBT8nd71PvtXt
42tkrGv/HFVJn6V9Npb5bPl227Pq2Dfpq/5et3njaFCM1JSnFaFf9L/AF/bBT8nd706X+v7
YKfk7verYs2IoLpI6kmifR18QzkpZTty42n8Id0LcK5Uo/pf6/tgp+Tu96/el/r+2Cn5O73
q70QctY5wTNgi4U1JNWsqzURGQOYwty25ZbSugdHfW+sngjVVun7qjtfgh9cq0tHfW+sngj
UEkREQEREBERAREQV/ps63kvhMXpKqfAujeoxxR1dTDco6QU0gYQ+Iu1sxnwFWxps63kvhM
XpK0ugD7y3fwhnqlBqul+ru2Cn5O73p0v1d2wU/J3e9XeiCkOl+ru2Cn5O73qa4A0eT4Nor
pTT3GOq5vDAHMjLdTVDhwnb85TpFyYiY1LsTqdw0f2tD6Wf1f/lYeJMHvvmDquwRVjYnVD2
PEzo8w3Vc129n/l/atvVXqkpi5gJkeNha0bx7687beHV1U+J7GsGrmwA7e6vPx/ZMWWIp97
9Wu/2jJjmbeFS9L9XdsFPyd3vTpfq7tgp+Tu96u9F6LGpDpfq7tgp+Tu96dL9XdsFPyd3vV
3ogpDpfq7tgp+Tu96dL9XdsFPyd3vV3ogpDpfq7tgp+Tu96ri1WF90xVDYW1DY3y1JgEpbm
AQSM8vIutlzHhLrt0XjN3rFBLel+ru2Cn5O73p0v1d2wU/J3e9XeiCkOl+ru2Cn5O73p0v1
d2wU/J3e9XeiCkOl+ru2Cn5O73p0v1d2wU/J3e9XeiCkOl+ru2Cn5O73p0v1d2wU/J3e9Xe
iCkOl+ru2Cn5O73p0v1d2wU/J3e9XeiCkOl+ru2Cn5O73p0v1d2wU/J3e9XeiCkOl+ru2Cn
5O73qubzh99nxVNYX1DZXwzthMobkCTlty8q61XMuNuu3XeHs/0oJX0v1d2wU/J3e9Ol+ru
2Cn5O73q70QUh0v1d2wU/J3e9Ol+ru2Cn5O73q70QUh0v1d2wU/J3e9Ol+ru2Cn5O73q70Q
Uh0v1d2wU/J3e9Ol+ru2Cn5O73q70QUh0v1d2wU/J3e9Ol+ru2Cn5O73q70QUh0v1d2wU/J
3e9Ol+ru2Cn5O73q70QUh0v1d2wU/J3e9QHGeFJcHX3nVNVsqnbk2XdGMLRtz2ZeRdWrnbT
h1f/ocfpcg2Vv0E1tfbqatbfYGCohZKGmAnV1gDlv8AdWR0v1d2wU/J3e9W7hzqZtXgUPqB
bJBSHS/V3bBT8nd706X6u7YKfk7vervRBSHS/V3bBT8nd706X6u7YKfk7vervRBSHS/V3bB
T8nd706X6u7YKfk7vervRBSHS/V3bBT8nd706X6u7YKfk7vervRBSHS/V3bBT8nd706X6u7
YKfk7vervRBSHS/V3bBT8nd71Asa4SlwZfG2uarZVOdA2XXYwtG0kZZZ9xdWLnnTp1exeAx
+s9Bm2zQXW3K1Ule2+wRtqoGTBhgJLdZoOW/wB1ZXS/V3bBT8nd71bWFupKz+AQezatqgpD
pfq7tgp+Tu96dL9XdsFPyd3vV3ogpDpfq7tgp+Tu96dL9XdsFPyd3vV3ogpDpfq7tgp+Tu9
6dL9XdsFPyd3vV3ogpDpfq7tgp+Tu96dL9XdsFPyd3vV3ogpDpfq7tgp+Tu96dL9XdsFPyd
3vV3ogpDpfq7tgp+Tu96jWONGNTgm0wXCa5xVbZpxCGMiLSCWuOe0/5V0oqv099R1B4wb7N
6D20EdQtT4wk9SNWUq10EdQtT4wk9SNWUgKmfshP8P/AKT/ALSuZUz9kJ/h/wDSf9pBMtEP
WxtPfm9s9TRQvRD1sbT35vbPU0QEREBERB+KtNIHVTB4EPXKsxVjj52ti1gH4FE0Hvl7iru
P/uwqzfcls8M5R4UrZM+GQnuZMCzMHgtsdEP/APi0rQWWSeDDd7eQRBzM7VJ3tfVI2fs/Yp
PhqLcrZSR5fNhYP/1C5mjWS39zF9yElb81fS+W/NX0qlotJjTqHv3i2o9m5btaTGnUPfvFt
R7NyCmtAvVxWeLX+0iXQC5/0C9XFZ4tf7SJdAIC1F1mpIC6Xm4UFQ3eleMmO7jgdjh+3iIW
3XhNvLkxtKlumdtfYsRUl6gOrLE2ojcWSRNeDtHC3jaeArbrSVdtt9eNSrpIpOJ2rk5vecN
o8i1NVc6vB80RnqZLhbJ3ajGOIM8TstgB/DH9d+O5jytmuO+5rOvyn/lMUULGkGbX1jYJ9x
/GE7dfL83/AMqRWe/W++Qukops3s/tInjVfGe6P6Cntmi0T4lskRESEREBERBzJoq659p/P
l9k9dNrmTRV1z7T+fL7J66bQEREBERAREQEREGhx11CX3wCb1Coxomq2W/RRzbK0ujpjUSu
A3yGkk+hTa92wXqx11rMphFZA+EyBuerrDLPLh31rsJ4ThwvhkWJ1RzbFrPLnPj1dYOO0EZ
lBTmGcN33EeFcQXaz3Ztnt8ssutbYi4skybrFuefyRkQOHPvKydD10guWAKeOCkZTcxSup5
Gszye4ZOLtvCdcE93NaaTQ3W0rqqlsuLqugtdYSZaTULth2EEhwDtmze3t/NTzDGG6HClki
tVvDjGwlz3vPypHnfcf64Ag5+rOvY7/AKgHtwumFzPWdex3/UA9uF0wgIiICIiAiIgIiIC/
DvL9WHd6rmK0VlVnluMD3g90AlBEbTVujt1fdWwPn5rrpZGhvA3W1QTw5DV4Ae8thDSiuY2
oq521LHfKZHH/AGQ+Lvn6glgpuZLBQw5ZEQtLh3SMz+0r7ko5IJHT0Dmse45vhd/ZyfCe6P
KCvOvO7TL0seorEeJVPpDqDLpIt0H4MdRC0DzD/Eq8qGPVjGxUBjGR02kyikdG6MmriBY4g
kEOaCNmxdC0zcowt9Puw8+/3p290RFJEWpxFd3Wm3B1OwSVlQ8Q00Z/CeeE9wb57y2yidW/
njjWTM5xWqnDWjikk2k+aAPKo3t01mUqx1Tp6Wq2NttOQ55mqZTr1E7vnSv4Se5xBeMdLHU
S1s+vuUraglkzdhZkxoPfGzaDsWVW3KloGuMz83NaXajBm7IcPcHdOxRWnZU3/XmqS+G3SS
OkjpwcjLmd9+XB3FirSckt3X6Vdti/GNDC80sk8D6kHV3Rr/uJ/wAxdty723+KzYmAV1FV8
181On12bo13yMtXWyaBsA+T3+6vGOjhjh3GOBjY8stRrQB9S1UkXOC60lQx+5W2SfOWM/Ni
eWlocOIHW2q22DUbhCnI3OpjW0iutrbcI2SRSGCsgOtT1DfnRu/iDwhbHDt6ddqN7ahgirq
Z25VMQ/BdxjuHfC+Gua9oc1wc0jMEHMFaevebPf6K7x/JincKWrHAQfmOPePDxFcw31PTKG
Wm42maL5Y7Wbmvpa2VROn7qjtfgh9cq0tHfW+sngjVVun7qjtfgh9cq0tHfW+sngjUEkREQ
EREBERAREQV/ps63kvhMXpK0ugD7y3fwhnqlbrTZ1vJfCYvSVpdAH3lu/hDPVKC2kREBERB
F75TbhXl4GTZRrDv8P8AXdWFSzupamOZu+w55cYUnu9HzXRO1RnJH8pv8QtBR2qqrMnNZqR
n8N+weTjXzvK496cj/Tjz3h7ODNS2H558dkqjkbLG2Rhza4Zgr7WPRUoo6VsAeX6vCVkL6C
k2msTby8i2omdeBERSREREBcx4S67dF4zd6xXTi5jwl126Lxm71ig6cREQEREBERAREQERE
BERAXMuNuu3XeHs/wBK6aXMuNuu3XeHs/0oOmkREBERAREQEREBERAREQFztpw6v/0OP0uX
RK5204dX/wChx+lyC98OdTNq8Ch9QLZLW4c6mbV4FD6gWyQEREBERAREQEREBERAXPOnTq9
i8Bj9Z66GXPOnTq9i8Bj9Z6C8cLdSVn8Ag9m1bVarC3UlZ/AIPZtW1QEREBERAREQEREBER
AVX6e+o6g8YN9m9Wgqv099R1B4wb7N6D20EdQtT4wk9SNWUq10EdQtT4wk9SNWUgKmfshP8
P8A6T/tK5lTP2Qn+H/0n/aQTLRD1sbT35vbPU0UL0Q9bG09+b2z1NEBERAREQfiqvEThX47
qo8/kh8UGfkGf7SVaUkjYonSPcGsYC5xPAAqWFZJU1s1x2h89Q6YdzM5haOPWbX7fSVOa0R
XuneLGR02FZKOnaGCV0cEbR3XD+Ga2traGgADIAZBaPEE/NtfZaQDY55q3j8UNb8n9p/YpF
bWfJWdbDajeX6vwby/UdFpMadQ9+8W1Hs3LdrSY06h794tqPZuQU1oF6uKzxa/2kS6AXP+g
Xq4rPFr/aRLoBAXw5msvtEGM6mBUKxnG+O9Wx0n9mY5Ws4g7Z/BT1aTE9pju9tdAXakjTrw
yAbWPG8Vye6N69VZhCV55T01XHX0MghrIvmvO84cLXDhBXxDLK2aSkq49yqofnt4HDgcO4V
7qrvEvK+bHb80jpdIFKIQ242+rgnA2iKPdGO7xH8VkR6QLK54E7Kylafw5qchv7M1FCQBmT
kAvOOeGbNscscmW+GuByUutpjlW+i0oJ4aqBk9PKyWJ4za9hzBHfXoq6wtcHWa+x0WtlQ15
IDOCOXLMEcWe8rEBzU4nbZS0XruH6iIupOZNFXXPtP58vsnrptcyaKuufafz5fZPXTaAiIg
IiICIiAiIgIiICIiDmes69jv+oB7cLphcz1nXsd/1APbhdMICIiAiIgIiICIiAtHjME4RuQ
bv7ifSFvFhXim5ttNXS/loXsHlBCDXRvY2mbIXBrAwHMnIAZLE1prlsjL4KQ77xsfKP8AL+
K3u754Mt9Y1pEF5w1R80NLm7m0PbrFvym7Dvd0LM52hv8AZVdXH/8A7i/1s15sxqdPTpNdb
91YaQbS2jxtZaiGIMifUQ5BoyA+UB/pH1q8IfmBV9iqzTVopQyWWtqKZ/NDWPDAQ1pBORa0
bSQ3IKaWS60t2oW1FLIHN3nNOxzDwgjgK24rbqxZqTW2/q2SIitUvxRC0HXut8kPzjXubn3
A1uSl53lCKarjt1xv+677a0Oa3PIuL2jIDvqnN9xbhjd4iGHiCHO4xWuFzRFcZN2qWjY4NZ
v+R2zyg8a3FNTa2TWtyA2ABaYUzm4xaZnB8z6DdHuG9rF+WQ7gAAH/AJUwoKcAA5LuKNUh3
PO7yQW8au0LSYzo44sN1bnfitDePW1hl+3JSySSKmhdLNI2ONgzc95yAHGSoVcp5sXzg0jd
S10jteN0jchVyDe2fiDj/oTtaKxuVdK9U6ez3spHatuk1qkbZKWNuuxzuHPLYw93Md3Nfd/
jdVYWrd2j3J/M5kLNYHVc0a2+O6FnUD4H0bHU8QhZvbmGhuoRsIyHCDmFgYpqNxw/URt2y1
IEEbfxnP2ZfVn9SwV+9D0Mtu0xLfWWrNVbqeZx+VJE1x8ozWzWlszBDTxQg7I2ho8gyW5G8
vReaorT91R2vwQ+uVaWjvrfWTwRqq3T91R2vwQ+uVaWjvrfWTwRqCSIiICIiAiIgIiIK/02
dbyXwmL0laXQB95bv4Qz1St1ps63kvhMXpK0ugD7y3fwhnqlBbSIiAiIgIi/CAQQd4oNBer
qXuNLTuya0/LcDvniXpbL2HAQVjsjvNkPD3/esW52d9KTNAC+HhHC3/wtWvnMnI5GHPNref
p7aezTDhyYoiv/AGnIOYzG8v1amwR1DaQvledzd/ZsPB3Vlz3Klpp9xmk1XZZ7xIXuUz1nH
GS/y7+ry7Ypi80r30y0XgytpZPmVER7msF7AhwzBBHcVsWrbxKuYmPL9XMeEuu3ReM3esV0
05zW/OcB3yqjsmiS42vGtPfpLtQvhiqzOY262sQSTlvb+1d3BqVvIvkSMJyD2k99fu8u7cf
qL43WP8o3603WP8o361zcO6l9ovwEEZg5hfhexpyLgD3Su7cfSL43WP8AKN+tfoe13zXA94
rm4d1L6RfhIaMyQB3V87rH+Ub9abhzT7RfG6x/jt+tfab2C5lxt1267w9n+ldL7pGPw2/Wq
mxBoluN3xrUX2K7UMcMtS2YRu1tYAZbN7LgTcO6lbiL8Dg4ZggjuL8c9rfnOA75XduPpF8b
rH+Ub9a/Q9jjkHNJ7hXNw7qX0i/CQBmTkF87rH+Ub9abiHNPtF8brH+Ub9a+t9NxJp+ovky
MByL2g99fm6x/lG/Wm4d1L7RfjXNd81wPeKFzW/OIHfK7tx+rnbTh1f8A6HH6XLobdY/yjf
rVYaQNF9fjHE3PSkudHAzcGRakusXZjPiHdXNw7qVgYc6mbV4FD6gWyWJa6V1BaKOjkc1zq
eBkTnN3iWtAz/YsjdY/yjfrTcQ4+0Xxusf5Rv1r6BBGYOY7ibg0/UXyXsaci4A90r83WP8A
KN+tNw7qX2i+Q9rtjXA94r9JDRmSAO6u7cfqL43WP8o3603WP8o361zcO6l9oi+N0jByL2/
Wu704+1zzp06vYvAY/Weug91j/KN+tU5pswlU1MkmLGVUHM1PDFA6Lbrk65GfF+EFzcO6Wj
hbqSs/gEHs2rarU4Zc1mE7OHOA/wCBh3z/AJGrZ7rH+Ub9abg1L7RfIexxyDge8V9LrgiIg
IiICIiAiIgKr9PfUdQeMG+zerQVX6e+o6g8YN9m9B7aCOoWp8YSepGrKVa6COoWp8YSepGr
KQFTP2Qn+H/0n/aVzKmfshP8P/pP+0gmWiHrY2nvze2epooXoh62Np783tnqaICIiAiLCul
2orNRPq66YRxt3hwuPEBwlBo8f3fmCxGiidlUV53JoG+Gfhn6tnlWuwrh2lZQRVtTEJJHjO
NrtoaODZxqLVtbWYkvZq5WESSkRwQ7+5sz2Dv8JU1vda6z2aCgpDnWTtEFOBwbMi7vAbfqW
i1Zx0iJ8yo3F7dvZr6WTnniKuuA2xRkUsB7jdrj3i4/sUvoGarAo9ZqBlHTQ00fzY25Z8Z4
T5SpTTs1WBZ173REQFpMadQ9+8W1Hs3LdrSY06h794tqPZuQU1oF6uKzxa/2kS6AXP8AoF6
uKzxa/wBpEugEBERAXjPHrsIXsvxBXuL6UU9db6lrcpDK6InjaWk5fsWApJj+mPOeGsaP7p
Uskd+b80+lRvfGYVd/LByo+aJeUM0NXTtlic2SKQbDwFa9uG7bHXMrIInwSMdrARPLR9XF3
Ew9bqi10c1LO4Oa2dxiIOebCBl+3NbVR8eGeZ6ZmKz2YlxkMEMVS3Y6nnjkaeIhwVqUsu6M
BzzVZyxRzRmOVgex2+CvW23K52B4NDIamlHzqSZ2eQ/yO4PQpVmI7NPHy1rHTK0EWssl+or
7SmaleWvZslhfsfGeIj+K2asbnMmirrn2n8+X2T102uZNFXXPtP58vsnrptAXy97Y26z3Bo
4ycgvpVFi25m/4hqGmRzqKjduUTA75JcPnO+vh4slOlJvbphG1orG5W5v7Qv1QfRrVVJtdd
FK9z6WCcNgLjnls+U0dze+tTZrg4KMxqdOxO42+kRFx0REQEREBERBzPWdex3/UA9uF0wuZ
6zr2O/6gHtwumEBERAREQEREBERAXxKM2Fa+9YhtlgjjfcKjczKSGMa0uc7Lf2BZNDX0t0o
Y6yimE0Eg+S4f1sKCJ0R5z4hqrXJ8mCscamlJ3sz89n17VvFi4jtDbjT6oeYpY3a8MrfnRu
G8QtTTXSS408tnrntorkW6hJGbZW8Lmb2eYz2b48iyZsc76oasN4n5ZbO3fdzLXnbzQco+5
GPm/Xtd/wBywrlQUlPV830txFqrnb8jCMpe45h2OWa225tDZ6qeRoGQYx25tHcAbkcu+Sve
no6alz3CCOMnfLWgE988Koi01ncNN4pbz3a2mxjc6TJtztElRHrBramjY4a5O98h+R+rYtl
FjewPOpNWOpZOFlRE9hH1jL9qVdOKqlkhLtUuHyXDfa4bQR3jkfIsAVslxhbSxMaKjLKocR
m2Ag5Hf3zsOX172/fGefeFE8eLd6y3QxRYHtzF5ofLO0fxUbgraCpxlcW09RBVQ1dNHKTG4
PGbPkkbOHIhZMuH6ONrJKSlg3WMZZSsDmyjicct/wDzb/f3lo7k+CivNNdaWnEBpWgVMLWB
rmsz1X5gb/z2kHuLs5YvHTorgmvzRPh4vr6O24hguDmthinhkjNPFHk6MAgjWaNuZ2n/AOF
JIcTV1RC0WmxzvDhsmqyImd/LaSFg4iY+qfHLC58bqVgmppQwuY+TPPIkDYMhlt2fKXta52
19vbXWh7IXOzEtLJ8wP4Rs2tPdG/xKMZZrTsnfFF77ntt4Otlbfq+UXyuNRDAANwgzZE2Q7
chwuyHCfxu4ts22NY0NZV1TGtGQAk2AfUvejpxS0zYtbXdtL3n8Jx2k+UrXXDEdHRymmgDq
2r4IINpH5x3m+VVzNry7uuP7vaGZBTQ21k8z6h5a868jpXDIZDLPeHAAtCyd2ILqyu1XNoK
UkUzXDLdXcLyOLgC+X0lbd5BLeJRuQObaOI/cx+cfwj+xbqlp8y1rWgAbABwLTjxdPefLNl
yzdtbawgArajeWNSQ7mwbFlK9QonT91R2vwQ+uVaWjvrfWTwRqq3T91R2vwQ+uVaWjvrfWT
wRqCSIiICIiAiIgIiIK/wBNnW8l8Ji9JWl0AfeW7+EM9UrdabOt5L4TF6StLoA+8t38IZ6p
QW0iIgIiICIiD8WtqLFTTTtlZ9zGeb2AbD7ls0VeTFTJGrxtOmS1J3WX4AGtDWjIAZABRG6
S7tcp3Z7A7VHk2KXrCmtFDOSXQhrjwtJCy83j3z0itPZfxs1cVpmyJLf4bblFO/jcB9WfvX
2/DlOfmTSN7+RWbb6EUEDohJr6ztbPLLgCxcTh5cWaLXjtDTyOTjvjmtZ7sDEn9hB+cfQo+
pdcbe24MY10hZqHPYM1F6eswxVV7aCDElLJVPfubYWuBcXcWWe+nM4mbLmm1Y7O8bkY6Y4r
ae71tf3zg/PUrn/u8n5h9C1tNYWU1SyYVDnFhzy1d9bR7deNzM8tYELVwsGTFjtW8d5Z+Vl
pkvE1QdFv/tbj+ku8xPtbj+ku8xeV/T+R+H94b/teH6thavvZB+atFf8A75n8wKRUsApqZk
IdrBgyz41hV1mbXVJmMxYcgMg3NerycGS/HrSsd40wYctKZptM9u6MLc4b/vM35g9K9vtbj
+ku8xZdvtTbfI97ZS/WGWRGSxcXh5seatrR2hqz8nFfHNYnu+b997HfnBRdTGupBW0xhLyw
Eg5gZrW/a3H9Jd5it53Fy5cvVSO2lfFz48dNWlo4f7eP84elTdaVmHWMe13NLjqnP5q3Sv4
HHyYYt1x5VcvLTJMdMoTUf3iX88+leakMmHWPkc/mlw1iT81aSprMMUde6gqcR0sVUx4Y6F
7gHBx4Ms15luByJmfl/eG6OXh15SGwfewfnlYWJP7eD80+lbehoxQ024h5eMycyMl43G1tu
D2OdKWagy2DPNepkwZLcSMcR37MFMtI5E3nx3RRbGxffRn5p9Czvtbj+ku8xZFFZWUVSJxO
XkAjItyWDBwc9MtbTHaJ+sNeXlYrUmIlk3P721H5hUPU1qYRUU8kJdqh7cs+Jan7W4/pLvM
Wrn8bLmvE0j2UcTPTHWYtLQKa0v8AdIf+W30LU/a3H9Jd5n/lbiJm5xMjzz1WgZrvA42TDa
03jy5y81MkR0yil2++k/538FhqSVViZVVL5zO5pec8tXeXl9rcf0l3mLFl4Oe2S0xHmZ94a
sfKxRSImTDf9lP+cP4r7xH/AHWL8/8Agsu3W5tva9rZC/XIO0ZZL6uFA24RNY6Qs1XZ5gZr
0YwZPsfpa7/9sU5afaOv2/6RBZNt++VP/wAwLbfa3H9Jd5i1tVWYdw9c447lf6amnZlJuUz
g0kcB3+4vNx8DkVvEzHv9Ybb8vFNZiJSqX+yf+aVCFNo5I6qmbLE8PjlYHMe3aCCNhC1H2t
x/SXeYt/P4+TNNeiPG2TiZqY4nqloFLbR964PzT6SsH7W4/pLvMW1pKcUtMyAO1gwZZ5b6h
wOLlw5JtePZPl58eSkRWUexB98h/wAsfxWsUor7O2uqN2MxYdUDINzWN9rcf0l3mLNyOFnv
ltasdpn6wuw8rFXHETLHw5/fJf8Al/xC2V9+9cnfb6V+2+0tt8zpGzF+s3VyLclkVtKK2md
AXaoJBzAzW/DgyV4s45jv3ZMmWls8Xie3ZDV+s+e3vrffa3H9Jd5i/RhuMEHml2z/ACryo+
H8j8P7w3/a8P1bpQqr/vk3/Md6VNVp5cPMllfIalw13F2Wrxr1efgyZq1ikeGDiZaY5mbSj
q1mkPrS3HwiL12KZfa3H9Jd5ihelertltwJW2M3CI10r4pWQOcA9zdcbQOL5J+pZuFxM2LL
1Xjsu5PIx5Meqy3o6mbB4BH6jVjrcWq2NuOFrK4ylmpQxZZDPPNjV7/a3H9Jd5ihy+HmyZr
WrHaf+E+PycVMcVtPdr7H99Yu870FSiSRsUTpHnJrQSVrqKyto6ps4nL9UEZFq9bxHUTUJj
p2a2sflAHbktfFpk4/Ht1R38s+e1M2aNT2a6DEUgeRPEHMJ2FuwgfxW5pq2nrG60Mgdxt3i
PIoa9jo3Fr2lrhvgjIr6hMomZuJcJCcm6pyOa8/D8Qy0nV+/wDLXk4eO0br2TdF5wtkbCxs
r9d4aNZ3GV6L6GJ3G3kSIiLrgiIgKr9PfUdQeMG+zerQVX6e+o6g8YN9m9B7aCOoWp8YSep
GrKVa6COoWp8YSepGrKQFTP2Qn+H/ANJ/2lcypn7IT/D/AOk/7SCZaIetjae/N7Z6miheiH
rY2nvze2epogLHrq2C3UM1bUuLYoGF7yBmcgsheVTDFUU8kE7A+KRpa9p3nA74QVtcsd3m4
uLaEMt9OfmkAPlI7pOweRZdjwubiBcb5JUVLz/ZtnkcTlx9xfseH63DtfJLbDSVkJGTGVeY
fGOIEbD317y1WI6sar6qjoWHhp2GR/1u2D6lba9NarCqK23uZZtU6x4YaJmUzRUv2RRMzdJ
IeIZ7fKtdR01VU1r7nccjVyjVZGDm2Bn4o/iV9UdqgpZXTDXnqX/Onmdrvd5eDyLc0lIXOB
IVcztZEaZVup94kLcNGQXlTwiNoXuuOiIiAtJjTqHv3i2o9m5btaTGnUPfvFtR7NyCmtAvV
xWeLX+0iXQC5/0C9XFZ4tf7SJdAICIiAiIgw7jTR1dHLTzMD45WlrmnhBVZ1NLV2KQ09VHJ
NStP3KpY3WybwBwG8QrVe3WbktPXUZJJAXJjaF6VvGpV2LvQk5Nm1yd4NY4n0L6dVVTY+aO
dtQKZvz5HDIgcervkKXmmcCfkr9FM4jeXOiFMcakIxHIyWNskbg5rhmCOFfQBc9rG/Occgv
y6WuS0SOraOMupXHOaBv4H+Zv8R/Q+WPZNG18bs2uGYcFTkrbUxXyzTjjFkibxurMdQy0s0
dbbZtwrot6Q70g4WvHCD+xTDD2IIr3Tua+Pmesg+TPTuO1p4xxtPAVEYa5oYBNrBw2FwbmD
3dix6qoMVVFcbY8trod45ENe3hY7PfBXm8TPmx39PJEzH/37Pos8YL4/Ux2hWeirrn2n8+X
2T102ubNG9FNQaWLXBM0hwfLls3xuT10mvaee0uLLxzkw7U1THZTOG5w8eu7YPq2nyKosnU
1GGtBMh2ADaS4qVaQbnzff4bZG7OGhbryZcMjt76hl9ZUdimkpLnSVrYGVDaaQSbk52WsRv
LbgrauO14jv7MuW0TeKz4WLbaMWO1UVqblukTNecjhkdtP1ehSGlcXRjNRG34ssV1qM5pX2
6qcdsdT8wnuO3vryUxp2gRtLSHAjMEHMFYmp7LQ3zGNpsFS2mqnSyzkaxjgZrFo4ztAC3NT
UR0lNLUTO1YomF73cQAzKpWatfca2rutRsdUyF+R/BbwDyBW4sfqW0ryX6K7XHa7rR3mhZW
0Mu6RO2Z5ZFp4QRwFZiheAIH0GHDUTfJNfO6VjOJuwZ+XL0KYxv1m5qqVj7REQEREHM9Z17
Hf9QD24XTC5nrOvY7/qAe3C6YQEREBERARajEeIqbDlEyonjfM+V+pFEzfcf4BfOG8S0uJK
WWSGJ8EsDg2WJ++3PeOfCDt+pNDcoi/EEE0lW15ZSXmPNzaY7lMOJrjsP17PKFh6O7rzJca
izSO+5VI3an/OA+UPKBn5FOLlSxVtNLR1AzhqGGN/cz4fIqckjq7RXOjz1a22T5tPHkdh7x
Cup81Zp+sKrfLaLLqmYJY1G7xZqetZqVEQeAc2neLTxg8C3tsuENzoIK6A/cqhgeBxHhHkO
YXvNTtkG8qVqmINJFdZcRz2KeN1bHFUbhE6R3yztyGbveCpwzFtJHsuFJV0J4TJEXM8jm5q
mL/Hq6WaiPiurR/+4V6yUj28CqtirKyMloftPfLTVZbjcaZxPBugB+o7VmR7mQXR6pDjmS3
hK0c9oo5z92ooXnjdGM1hnDNq1sxRhp42Pc30FVzx49pWRnn6JWseopKWZxlniYTuboy53C
w74PcUb+1y372pNlxc0P8Aegw1as8zSa5/zyOd6SufZ/zd9f8AJkWi4xWqv5w1FVHJH/7OU
PBJb+I7iI4ONY9yiuVluNVd6GnL2ySASxF2bZgQA0gDbrA5r1dYba6B0IoomBwy1mMAcO8d
9fAr5rdGKO+CSpog4bnWsJDmZb2vlt/7gu3xzHeO7uPLXxZ5Qur7/TNnqrnlTSD+wo82N7z
nH5R7oWxo7fBRxblSwNibxNG/3zwrVT001qqpbpaoXTUEkjdeNsoeJQchrNOZOtrE99S2zu
pLpRsq6SQSRu3+Np4QRwFW45rMdlWStqz3eNPROedoW3paMRjMhZMUDWDeXqBkrFQBkF+oi
CidP3VHa/BD65VpaO+t9ZPBGqrdP3VHa/BD65VpaO+t9ZPBGoJIiIgIiICIiAiIgr/TZ1vJ
fCYvSVpdAH3lu/hDPVK3WmzreS+ExekrS6APvLd/CGeqUFtIiICIiAiIgIiICIiAiIgLmPC
XXbovGbvWK6cXMeEuu3ReM3esUHTiIiAiIgIiICIiAiIgIiIC5lxt1267w9n+ldNLmXG3Xb
rvD2f6UHTSIiAiIgIiICIiAiIgIiIC5204dX/6HH6XLolc7acOr/8AQ4/S5Be+HOpm1eBQ+
oFslrcOdTNq8Ch9QLZICIiAiIgIiICIiAiIgLnnTp1exeAx+s9dDLnnTp1exeAx+s9BeOFu
pKz+AQezatqtVhbqSs/gEHs2raoCIiDwqaOCrZqzRh3EeEeVYVFZWUdaZt012gfIBG0Hura
IqbYMdrReY7wsrlvWs1ie0sWuuENDHrSHNx+awb5WDbL0aqodDUBrS8/c8t7vLEvtA+KY1T
SXMeflZ7dU+5agEggg5EbxC8nkc3Njz6mNRHt9XoYeNjvi37z+ydIsG1VwraQFx+6s2PH8V
nL2cd65KxaviXm3rNLTWRERTRFV+nvqOoPGDfZvVoKr9PfUdQeMG+zeg9tBHULU+MJPUjVl
KtdBHULU+MJPUjVlICpn7IT/AA/+k/7SuZUz9kJ/h/8ASf8AaQTLRD1sbT35vbPU0UL0Q9b
G09+b2z1NEBfLhmF9Ig1FZRue7MLCFA/PeUiLQeBfm5N4gg1EFu27QtlDTtjG8vYNAX0g/F
51VTBRUstVUytighYXySOOQa0DMkr1Wvvtmp8QWWptNXJLHBUtDXuhcA7LMHYSDxcSCEs03
4WdV7m6nuLKYv1BVmAbn38tbWy8mfcUnxDjWyYaskN2rKgywVOXM4gAe6bMZjV25ZZbcycl
X2PK+y2zCcWjnD0T7lXvc1jY2APdEQ/XJcQPnnbsHATnlw6282mpt2JNHeH7lk/mZsZkZnm
3WMoLm93eA8iCwcL6TbJii6G1xw1dDWlpcyGrjDTIAM9hBO3LbkVtsadQ9+8W1Hs3KA6Rv+
F0tYOq4RqyySxxOI3y3dQMvqcVPsadQ9+8W1Hs3IKa0C9XFZ4tf7SJX8+RkTS+R7WNG+XHI
KgdAvVxWeLX+0iV2Ygw7bcT27nfdYXTU+6CTVa8sOsM8to76DX2XHNoxBiWvsdv3WWShZrP
qBqmJ+0A6pBzO08XAsfFmkWy4Sq4qGpZUVddK3WFNSsDnNHATmRlnxb6hWjG3U1p0r4lt9G
wsp6aJ8cbS4khokbltK87tcGYJ011V9vtNM6grYNWnqGs1g35DRs7o1S0jfyPdQWHhLG9nx
lBM+3OljmpyBNTztDZGZ7xyBII2HeKkSpXBN8ivGnCvuFvgkp6Svp3EMe3VLmhrPlEf5i3W
8qupAXm+MPG0L0RBiuo4yd5OY2AbyykQaesoQQcgoFcqE2KuzY08xVLtgH/AKUnF3irSewO
GS0V7tEVdRTU8jfkSNyz4jwHyFcmNxpG1YtGrIm6inazWBY85bQNh8nGvEHMZhZVpmlkotz
qP7ene6GXuubsz+rJeFQA2qlAyyzz2d4Lx+NnyerOLJ30t+IcTDXDGbFGv+2DBBS0OLLVe5
G5CCYtkcODXaWZnufK294K0bhcIrbbKivmP3OCMvI4+IeU7FWdXCKikliIz12kDv8AAvfEd
+dcMLWa3NfnJVxtmqTnwN2ftcCfIvYxxNu0MXHyfJO/ZHOaJJBPX1Jzmnc6V54ydq2jMMYi
FrguLKVtVFNGJNzjP3RgO98nh2cWaxrbb+fN8orXvMkfrS/mN2n0Kw62Sdte5zWvh1fksA2
ZNG9kt2bLOO0UpPh3HSLxNrR5Vg6SGVxhnYWSNORjlbk4FZtuuN1srs7XXyRszzMMh1oz5D
vKdVsdFdoxHd7fFVbMhKBqyN7zgtDVYGe7N9guIlA28y1exw7zuH+tq569L9stf1PStXvSW
Nesb195sbrVLQinmme0STRuzY5g2nIcG8OE7M1pYKJ9yrqS1U+x1TIGZj8Fo3z5AvOCV0od
rM1SxxacjmCRxFSfA1Jq83X54+aOZqY907XEfs/ap3imLFM0n7yNZtkvq3slLywVDKenGrB
TtEUbRvADYt3S57mM1prfDrOByW+jbqtAWBrfaIiAiIg5nrOvY7/qAe3C6YXM9Z17Hf8AUA
9uF0dcnVzLbUOtrIpK0RkwNmJDC/LYHZcCDKRUlTVGJpNONmZiZ1O2pEbiyKlJ3NjCyTIDy
57+anuLtHkWLbrFXyXmuojHAIdzp3ANOTnHPv8Ayv2IJgiorDGFHXDSS6mtF4r6i12WZj6m
qmkzEkjXZ6jQNmRIy7wJ4leqCNY6tBu1gkdCM6mjO7xZb5y+cPq/aAoHhS8i04gpqtztWmr
BuE+3YM94+Q/szVsVBcwh7eBVHiWzNtV7qaJgypaobvTHgAO+PIf2BXYvm3T6/wAq79tW+i
4WO2kHfCxLpe7bZYd1uFXHCMtjSc3O7zRtKrY43v8ALbIKOFsdI+OMMkqj8qR+WzMZ72z/A
OVoo2SV1dqwsnuVbIcydr3HukpGG2t27R+bk5I8V7ylt10iVtYTHZaQU0f0moAL++G7w8ua
iE1W01b6irqpKmplPy5HHMqUUWCJ35SX2tFMzf5lpiHPPcLt4ftW/htlodRTWiCgipqepjM
ZeBrP1vwXFx2nI5FSjJTHPyRufrLk0tf70tVo7uhhmqbHI7Z/b02fF+E3+P1qwmHWaqPhmr
LPXMnDdWttk2T2nhyORHeIVzUFZFW0sNVAc4Z4xIzvHgUMtYi248SnSZmNT5hzniAf/wCZZ
x/+Yb7QLpJ9Mx3Aubb/ANeWfxwz2gXTKqTYL6Bh4F4utrTwLaL8QannYOJBbBxLbZJkg1nO
0Zbywqq35AjVzB3xkpBkviSIPG0IIDNh9sbnmgndRl/z4tUPhf32HZ9Sw4aXEdjrebbZQwv
Lj93ZBKTHMO6x20Hugqdz0AdmQFiimkidsXNRvaXVOtb7NrQ1L6uihnlgdTySMDnRP32HiK
yFHL3PiOO2M+1uCjmrDIA4VhIYGZHMjIjbnq/tUC0STXKbH+J+e8okrm5tnLT8nXEhBy7mz
YuorgRUpjO60OJNI9XZ8Q3mS3YftUWbmsfkZpMm7wyObs3cR2NO8pTout0NCa82fE7LvZHO
+407s90p3Z7MwcssxnwDPLNBC9P3VHa/BD65VpaO+t9ZPBGqrdP3VHa/BD65VpaO+t9ZPBG
oJIiIgIiICIiAiIgr/TZ1vJfCYvSVpdAH3lu/hDPVK3WmzreS+ExekrS6APvLd/CGeqUFtI
iICIiAiIgIiICr+6aZsM225TUbIK+tFO7VlnpommNpzyORLhnt4d7izU+kZukbmaxbrAjNu
+O8qzupwroowtX2mmfLWVdzDiymmc18jy5uqNbIDJg7vGcs0EzbjCxPwscStrWm2tZrGTI5
g55auW/rZ7MlG7Tpkw5c7nBRPpq+iFU7VhnqYmiNxzyG0OOW3ZxceSri9Wa54b0K0lPXsfB
JX3cTmF2wsZuRABHASW55d5S7TFRU9Po0s+5Ma001RCyIgbWt3J2wfUPqQWwuY8Jddui8Zu
9YrpK2TPqLVRzy/PkgY93fLQSubcJddui8Zu9YoOnEREBERAREQEREBRjFePrLhAU4rXvqJ
qh+q2CmLXPaPxiCRkOBSdURpbwbY8Mc66m1Ur4ZauofupdK5+tlqnhOzfKC6L3e6DD1qmud
znENPCNpyzJJ3gBwkqIWfTDh27XOChfT11DzS7Vgmqo2hjyTkNocctvk7q8NNtrr7lguJ9F
E+ZtJVNmmYwZkM1XDWy7hP7c1A9IeOrLifCFqobVRzRzUkjHPcY9VtOAwt1Ae6fVQdArmXG
3XbrvD2f6V0hbJn1FqpJpf7SSBjnd8tBK5vxt1267w9n+lB00iIgIiICIiAiIgIi0OKpMVM
pYRhaCgkmcXCV1YT8gZbC3Ijb30G+RVPoOmqp5sSyVsplqHVMZlcTnm8mTWP1rU3mCjxFpP
u9BjW9z2yipWZ0MZmETC3ZkQXAjaNvGT3skF3LnbTh1f/ocfpcp9oXrLjUWy6081TNV22lq
QygqJc83N+VrAZ8GQacuDMqA6cOr/APQ4/S5Be+HOpm1eBQ+oFslrcOdTNq8Ch9QLZICIiA
iIgIiICIqv0tVOM4rNc+Z20MNga2MPla480PBLQQduWWsctgGxBaCKE4VtQv2iK322Splpx
U0YaZoz8tvys8x9Sr/HWB6TCNBTinxBdqy51soipKXXHyzmMyctuW0DvkIL2XPOnTq9i8Bj
9Z6ubA9gqcN4VpbdW1LqiqGckzi7PJztpaDwgbypnTp1exeAx+s9BeOFupKz+AQezatqtVh
bqSs/gEHs2raoCIiAiIg+JYmTROikGbXDIhRjnNVGsfAxnyWn+0OwZKVLxqamKkh3WYkNzy
2DNZOTxseXVrzrTRgzXx7ivu8LfbIqBpLXF8jhk5x9yzVqJMR0zf7OKR/fyAXvV1VfNY5Km
0xQvrXR5wxzk6hdxEjLYpYMmCf9PFPhzLTL9/JHlsEVKWyoxJLp4tTMSvgFW2GTVjpj9zYz
cZCAPKSdua22lq9SS360YVNyNtoapu7104dq/c8yMs+LJrtnCclpULVVX6e+o6g8YN9m9Y+
AbRZqTF27YOxdzTbhGeabdUa2u/fGsAQ0HI6pzy4xwrI099R1B4wb7N6D20EdQtT4wk9SNW
Uq10EdQtT4wk9SNWUgKmfshP8AD/6T/tK5lTP2Qn+H/wBJ/wBpBMtEPWxtPfm9s9TRQLRNc
qCn0bWqKatp4pGmbNr5Wgj7s/gJUx58WvslSfr2+9BmIsPnxa+yVJ+vb7058WvslSfr2+9B
mIsPnxa+yVJ+vb7058WvslSfr2+9BmIsPnxa+yVJ+vb7058WvslSfr2+9BmLUYr58HDFcyw
R69yfHqQAPawgkgEguIAIBJ8iy+fFr7JUn69vvTnxa+yVJ+vb70FOYVw9pJwiJX0GE7XNUz
El9VUzMfKQeDMSjId4beFSLF2GMVYgtdgxDHSU8WI7W/dJaRjwGO+UHAAlxGzVGzW25lWDz
4tfZKk/Xt96c+LX2SpP17fegri3WDFeLsf2/EWJbXHaqS1sG5QiQOL3gkjLaT84g5ngACnG
NOoe/eLaj2bln8+LX2SpP17fetNjG626TBV8YyvpXvdbpw1rZmkk7m7YNqCpNAvVxWeLX+0
iXQC570GVMFLjSsfUTxwsNueA6R4aCd0j2bVfHPi19kqT9e33oIThLC15tek7EN6rKQR0Na
H7hLurDr5vaRsBzGwHfC9sXHHdvxAyts1NDerM9gD7c9kYMbsss8yNY7dueZ4dmSmHPi1j/
wDkqT9e33r8582vslSfr2+9BCsBYWvTcTXLGGJYI6avrm7nFSscDuTNm/kTlsa0DbnsOasJ
YXPm19kqT9e33pz5tfZKk/Xt96DNRYXPm19kqT9e33pz5tfZKk/Xt96DNRYXPm19kqT9e33
pz5tfZKk/Xt96DNXlNGHtIWPz5tfZKk/Xt96jWIcYOe+S22NzZJR8mWszzZF3G/jO/YEcmY
rG5aJ1TuV4u4gaC11Tk12ewOAAd+1ee9vnuknhXnTwMpoWxMzIG+Tvk8JKzqOnbIN2kAcN5
oPpXm5rY8Ezl13lXj9XnWjFE6rDEMjQ0uz2AZqM0DXGPdpHE7NVmfA3/wCVJcT1DYrc2BoB
lndqM7g4T9WzyrQimkndT2+mGctQ9sTB39ma9H4XknJSc9o1EOcnjRx7+lSd70+dSCpIkY7
5Y2h7Dk4Ld2/Ft9trRFK9lzph/wCnUfPHedv/AF5rcXGx4OLhRGdtHUUzRFzTDMAS4DI6ze
PPf4VpKnDF0gY6a3T096pm776VwMje+3j72a3eriyf7kan6wh6eSn3J3CT2/FOH7sRE+R1t
qT/AOnU7Gk9x299eS9sR1P2v4eqqljxzRVAQU5ac/nb5HkzKroyQTOMMzNV7TkY5Bk4Ffog
cNzZu8roYiXMic4lrSeEDgXPssz3pO4PX196NS+TG6KmZTwtLpZCI2Ab7nFWXFRMtdBR2iI
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
ciDnHoK4z+i0vKWp0FcZ/RaXlLV0ciDnHoK4z+i0vKWp0FcZ/RaXlLV0ciDk3E2ErthGrhp
rtHGySdm6MEcgeMs8uBdHaO+t9ZPBGqrdP3VHa/BD65VpaO+t9ZPBGoJIiIgIiICIiAiIgr
/TZ1vJfCYvSVSuGMCX3F1PPPaYoXsp3hj90lDMiRnwq6tNnW8l8Ji9JWl0AfeW7+EM9UoIX
0FcZ/RaXlLU6CuM/otLylq6ORBzj0FcZ/RaXlLU6CuM/otLylq6ORBzj0FcZ/RaXlLU6CuM
/otLylq6ORBzj0FcZ/RaXlLU6CuM/otLylq6ORBzj0FcZ/RaXlLU6CuM/otLylq6ORBzj0F
cZ/RaXlLU6CuM/otLylq6ORBzj0FcZ/RaXlLVD6GzVlwvkdmp2tNXJMYWtLshrZ5b/kXXy5
jwl126Lxm71igzugrjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8panQVxn9FpeUtXRyIOce
grjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8panQVxn
9FpeUtXRyIOcegrjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8paohcLLW2u+SWaqawVcUoi
c1rsxrHLh8q69XMuNuu3XeHs/0oMzoK4z+i0vKWp0FcZ/RaXlLV0ciDnHoK4z+i0vKWp0Fc
Z/RaXlLV0ciDnHoK4z+i0vKWp0FcZ/RaXlLV0ciDnHoK4z+i0vKWp0FcZ/RaXlLV0ciDnHo
K4z+i0vKWp0FcZ/RaXlLV0ciDnHoK4z+i0vKWp0FcZ/RaXlLV0ciDnHoK4z+i0vKWqK4iw5
ccLXPnddGMZUbmJMmPDhkc8to7y64XO2nDq/8A0OP0uQYlJoexfW0cNVDTUxinjbIwmoaDk
RmPSvboK4z+i0vKWq/MOdTNq8Ch9QLZIOcegrjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8
panQVxn9FpeUtXRyIOcegrjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8panQVxn9FpeUtXR
yIOcegrjP6LS8panQVxn9FpeUtXRyIOcegrjP6LS8paotiPDVywrchb7oyNk7oxKAx4cNUk
gbR3iut1zzp06vYvAY/WegwKPRBi6voYKyCmpjFURtljJqGglrhmP2Fe/QVxn9FpeUtV84W
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
kNNTSTRUzdadzG5iNu8ve30M95usVpo3sie8Zukccgxo38hwnLgH/xYNGylsNO23W2EbjGf
urpB8qZ28S5W2yRgjox+feUK0nL81/CuY5JY5oq6hmMVREdaORvoPcU+sl3psUQE6rYLlCP
+Ig4H/5m9z+u/HsSYcFuDrvaGF9vec56cb9OeMf5fQtFHJLFPFXUMxiqIjrRyN9B7i7ateR
Xqr95yJnDPTbws8MNMHskjEsEg1ZYnDMPHeUGxFh02F/N1DrTWqZ3fdTuPAe53f6MysGJKP
EVC81BZS1lO3OojccgAN94z4PR+0xHEuJefbjbraXRWuN3y37xqXe7+u9mxdcXjo8rsnTNf
m8NFLTx1Gq/MjutO+OJe9FR1Nzro7ZbYw6Z2+fwYm8JJSioqq6VrLZbIw6U/Od+DE3jJU8o
aKksNAbfbjrvf/eKk/Old7v67p2Z80UmYp595Z8WKbd7ePYoKGksFCbfbzryP/vNSfnSu93
9d05lG2OnZJWVB1YaZhlee4BmvilpjI4HJarH9dzHaKezwuylrn60uXBG33nL6ivPiJmdQ1
zOo2hjqqWvqam5VGe61UhkIG3IcAHkUowJLb3WqrhZWwsudZL8uKQ6rtQbzRnv8O9xqKOkL
HshihfK4gnVjbmQBw5L4/4WsH4Lj9RC9HJii1Yx1t3hjpkmszeY7Ss11HU07/lMcxw3iPev
yofHWw8z3SkirYuASt+U3vHfChNtxHfbOAynq+a6cf8At6r5Qy7h3x6FJaDGdkuLhFcI32u
oP4/yoz/3cHlyWG+K9PvQ1VyVt4lE7jSW0WK23uzPq6VlyeRHRVQDiACQXA572eXfzBWNuE
tbUQUFPtmqpBG3uZ75WbfKqnrb1uVDq877bE2lpQ05tyaMiRx9/iyW0wPSB9dWXyQZso27j
T58Mjt8+Qelaa2mmCZmfPhTMRfLr6JRJDFA6GgpxlBSRiJg72+e+tJdpBW4hgpG7YrczdJO
LdHfNHkG3yrOr7nHaKF9XINeVx1Yo+GR53go1SMmga+aWY80TOMkzwd9x315XJi1sU1r5lq
rmx4r1m7bVsoZAWD50nyR3uFaevleyn3OEZzTERxt4yV7yzNax00suxo2ucd4L1sdFJVVIu
lQwtGWrTRu3w077j3T6Fn4fH9KvfzKvk5vteaNRqtUlsNI2jpYKZm1sTA3Pj7qk8fzQtRbY
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
Si1sxNfrNkyCr5sp2/+hU/Ky7zt8ehap08sjqiuqznNO90knfJ3ln36zyYfudPSMrm1kdQz
dG6zC17G8Gf7fqXnbrc69Xujtgz1JH68xHBGNpV9fSrWctIU29SZjHZjYiqqqyYOoLTRvlj
ud+l5qndESHsp2bRtG0Dh7wcpTZoBTWemYd8xh7id/M7T6VXFbfDirSnNUwbacRzwUrRvCN
kLw3Lv7T5VYEFdFJaIRGSXOhaN7e2ca+a+JVvetax9Xt8O1KTa1p12aLEk9WbaYKCCSepqA
SGRt1iR3h3woPHacekAR018yG8G7psVoUjXQ4io3zN1GTQvZHn+NsPoU+t9OAASFvwzWaR0
z2YIrau+qNTPf8Ay54bZdJA+bS4hHeMq++dOkz6PiPzpveumQMgv1WuuZedOk38hiPzpven
OnSb+QxH503vXTSIOZedOk38hiPzpvenOnSb+QxH503vXTSIOZedOkz8hiPzpvenOnSb+Qx
H503vXTSIOZedOk38hiPzpvenOnSb+QxH503vXTSIOP5IrmLyYZW1PPPd9UhxO67rrfXrZ+
XNTm1Ul2fTE3iep3WJxbI6skc4xn8Xbtz7gWruPXnl8fD2yktRVRVNZU80tI3SokeJG/OaS
4744Qqc06o9D4dTqzxP07vN1SyFro6RpaHDJ0jvnuHF3B3B9aU9QWUs8ObmAtLw5g27OA5c
B9OS85IBDOI5JAWHI67Bnm07c8tn7V71LqZ9O6GmnMceXzXMObz/AJj/AEFgnUzES+jybik
9PlFam3Yxkq5X0dFdooXH5Iia9oI49nGvkWfSAd6lvp726q8MN3CkukbY2va2pjGrJA45Oa
Rv7OEd1SuKnY0by9WPyfGzvfdzSyzaRxtZS4hHeMq9OdOk36PiPzpveumQAF+o45l506Tfy
GI/Om96c6dJv5DEfnTe9dNIg5l506TfyGI/Om96c6dJv5DEfnTe9dNIg5l506TfyGI/Om96
c6dJv5DEfnTe9dNIg5Ipqm82nFMVQWzi7U9S06suZkMgO87Pac97yq08RUIguTZxTyU9Ndo
hUMikbkYnn57COMH+ChWIRnpjqB/+Xb64V2YutBulimijbnU0p5op8t85fOb5R+3JTpbott
G9eqNIFcLZdcW2Chkt92FBWWp3MtY6WqMUZh2ljzlxZEcZX5bed+H3AxXG44jr2/8AqTTvj
pWHuNzzf5dhWveKZ8YqpM8nAZtG8St/bcJ3e4Rtkmay1Uh3nzD5ZH+Vm/8AXkrrYqUndp7f
uqjJa0fLDX3a7191dr3evc9m+2nZ8mMd5o3++su14Zu90ja+KBtvoz/69QNXP81u+f62qVW
6zWaykPpabmmpH/uan5Ts+MDeHpWZLJNUv1pHFx7qjObXaka/lKMe+9p2rieOstFwkjc7Ku
ts+s1342RzB7xCxsZ27FlbeGXfDUt4nt9ziE4ZSzSOEEm89mQOzJwP19xS7G9CdWkvrG7Rl
TVeX/6uPo+pe+ju6bhU1Njkd8l2c9Nn/wDs0enyFL/PSL+8dp/9FfltNVV86dJv5DEfnTe9
OdOk38hiPzpveumGO1mgr6VC1zLzp0m/kMR+dN70506TfyGI/Om966aRBzLzp0m/kMR+dN7
0506TfyGI/Om966aRByRf6bEFLURNxCyvZMWZx82lxdq58GtwZrpPR31vrJ4I1Vbp+6o7X4
IfXKtLR31vrJ4I1BJEREBERAREQEREFf6bOt5L4TF6SqPsFHiuqhmdh6O6Pia4CXmIvAzy2
Z6vCrw02dbyXwmL0laXQB95bv4Qz1Sgr/nTpN/IYj86b3pzp0m/kMR+dN7100iDmXnTpN/I
Yj86b3qzNFEeJbfar0+/xV7ZWljoObtc5jJ2eWtwb28rOXhWt16Gdo3zG70KF99E6Srrqjb
QnENYfwIR/wBp961eNpL1ddHtYbU2oNeJmBgo9YPI1m55Zbd4lfikeHHZ0UjeKTP9g9y8Xg
8jLfN03tt6fKw0rj3WHPnOnSb+QxH503vTnTpN/IYj86b3rppF7rynMvOnSb+QxH503vTnT
pN/IYj86b3rppEHMvOnSb+QxH503vTnTpN/IYj86b3rppEHMvOnSb+QxH503vUZpIrk+7Mi
o21BuBlyYIs911+5ltzXYC5jwl126Lxm71ig+udOk38hiPzpvenOnSb+QxH503vXTSIOZed
Ok38hiPzpvenOnSb+QxH503vXTSIOZedOk38hiPzpvenOnSb+QxH503vXTSIOZedOk38hiP
zpvenOnSb+QxH503vXTSIOZedOk38hiPzpvenOnSb+QxH503vXTSIOZedOk38hiPzpvenOn
Sb+QxH503vXTSIOZedOk38hiPzpveozWxXOO7Pirm1IuAkAeJs911+DPPbnvLsBcy4267dd
4ez/AEoHOnSb+QxH503vTnTpN/IYj86b3rppEHMvOnSb+QxH503vTnTpN/IYj86b3rppEHM
vOnSb+QxH503vTnTpN/IYj86b3rppEHMvOnSb+QxH503vTnTpN/IYj86b3rppEHMvOnSb+Q
xH503vTnTpN/IYj86b3rppEHMvOnSb+QxH503vTnTpN/IYj86b3rppEHMvOnSb+QxH503vU
dvkF5p7hud9bWNq9QHKsLtfV4Pnbct9deLnbTh1f/ocfpcg1VPa9Iz6aJ1NBiAwFgMZjdLq
6uWzLI72S9OdOk38hiPzpveuiMOdTNq8Ch9QLZIOZedOk38hiPzpvenOnSb+QxH503vXTSI
OZedOk38hiPzpvenOnSb+QxH503vXTSIOZedOk38hiPzpvenOnSb+QxH503vXTSIOZedOk3
8hiPzpvenOnSb+QxH503vXTSIOZedOk38hiPzpvenOnSb+QxH503vXTSIOZedOk38hiPzpv
eo9fKe901eI78ysbV6gIFYXF+rmcvnbct9ddrnnTp1exeAx+s9BpqW16RX0kL6SDEBp3RtM
RjdLq6mWzLI72WS9edOk38hiPzpveuhcLdSVn8Ag9m1bVBzLzp0m/kMR+dN70506TfyGI/O
m966aRBzLzp0m/kMR+dN70506TfyGI/Om966aRBzLzp0m/kMR+dN70506TfyGI/Om966aRB
zLzp0m/kMR+dN70506TfyGI/Om966aRBzLzp0m/kMR+dN70506TfyGI/Om966aRBzLzp0m/
kMR+dN71q79RYvpqON+IIrsymMmTDWmQs18jva2zPLP9q6uVX6e+o6g8YN9m9B7aCOoWp8Y
SepGrKVa6COoWp8YSepGrKQFTP2Qn+H/ANJ/2lcypn7IT/D/AOk/7SCZaIetjae/N7Z6mih
eiHrY2nvze2epogIiICIiAvCsq6ehpJKqqlbFDE3We9x2AJWVlPb6SSqqpWxQxDNz3cCqjE
WIqnFFWMw6G2xOzhhO+8/jO/rYp46WvbVUb3ikbl5Ykvs+KarMNdDboj9yiO/Ifxnf1sXzh
iuuMFbPT0dFzfb3NyrIHfMcOIZ7Nbi/orDjibVXCmoZKhtHDO4NdUP3mhWBPQRWinjtlBCY
IYduf4Uh/GJ4VoyzXHHp1/VTjibz1z+iGXa1MtTWV9A909nqXfc3n50DuFjxwEHYsIMjYXS
taM3DMkcKmgzjdNKynE8c7cq2iPzahv4zeJ4/bvcREYu1qFo3Oro5HVFnqT9xmI2xHhY/iI
27/F31Lj59arf9Ec2LfzVZuFrNT3CnlvtwAnpqR2UdI05lzuN/EP67/wCYmt9fiKdtzo90l
njAY+lBzGrwag4O9/R11uuVXY6/m+hye1wyngPzZm+/+u/JbhjO3U1uYMOszrKtufyhspRw
593i/rOrLXJXJ38rKWpanbw1p5nwbC2KFsdTiGZm12xzaJpHrf1vb+hJEAfPPI6SV51pJHH
NzyUJbTtfNNI58jzrPkcc3PcVI7NZI6CKO932LWld8qjoXfse8LRMxh+a3e0/spiJy/LXtW
GmqLZd6CghudbSGOjqDk0/hR8RcODNLfcauy17bjb3AkjKWI/NmbxFTCguFbW10jaqPmuKr
+RLA4fJI7g4MlE73b6eyYglt1FUCogA1ss83QE/gkqvHl9T/Tyd9p3x9Hz09lm2G42+80La
6gPyTsfGfnRO4QVuBvKmLbc6ywXEXCg257JoD82Vvv7qtezXmjvlvZW0Umsx2xzD86N3CCO
NUZcVsdtSupeLxuGxVd6SLpzRW0tkjd8iP/iKjLj3mj0nyhT+pqIqWmlqZnasUTC97uIAZl
UrNWyXCsq7rUbH1Ly/I/gt4B5ApYKdd434Ry26avKSqhil3N5yOW/lsX7C0wyipoaiSmlG9
JA/L0KY4Qoo6LDslfV00c0l0k2Ryt1huTdg2fX+xKzCNkryZKCaS01B/B+fET3uD0dxXTyo
tMxeu4VRgmI3WdSwaHHVzpgI7tSR3GIbN1jGpKP4H9nfUltt3w/enNdTVzY3Da+Cf5Dxx7+
/5M1CLjYL3ZwX1VHzTTj/ANxS/Lblxkb48uS1eVLWDP5Lj9RC56OPJ/t2/SXfVvT78M65XH
nze6y6Enc5H6kOfBG3YPQpDgml3C11t6eMpKt3M9P3GD5x8p9CiYppJjBb6UZy1DxEwd/hV
lvp4qRtPbab+xo4xG3unhPfzXM/yVjFHt5dxfNM3lQ2jRgfpFtjSMwXS+zerI5ldba2ptT9
m4u1os/woycx7lXeiwa2ky1D/PL7J6uzFdkfWtZVUuTaynzMZO88cLT3CsVq9UaW3rNo7eY
8NFUmO4024yncJmkOikB+a8bxBUqwpfG3GJ1JUgRXCnGU0X43+ZvGD+xQmCqbO50MjDFOzZ
JC/wCc33hfUlOd1jnglfBUxHOOZh+U0/xHcWTBi9CZiJ+X6fRy/O64iMtdWj3WwihVsx26n
DYL9AWZbOa4GlzHd1zRtapXRXKhuMe6UVXDUN443g5d/iW1OLRaNwykREdEXnLPFAM5ZWRg
8L3AL7a4OaHNIIO0EcKD9REQEREHMly680vj7/eUiuFK+C81dJl8plS9g7vytijty680vj7
/AHlaWM7LzLeG3yFp3IkGoDRnqOG8/Li3s+8q8teqvZt4OaMObc+J7IZWuElbIGbWh2ozug
bB+wBeLmuY4se0tc05EEZELINUyEatGC0nfmd88978Xybe6v0/8bT6+/UQt+VxvYOHvj0d4
rA+pidRH0fdVFTitlnkqMy6QuaIdrt/Mbd4ftWVSYhukbzHFd62BhGUevOXtae7mN7vLTrI
hpHSNEkkjIYycmvk3nHue/gSs2rGolRk42G/e8bbc4nxWJ+Z+ec+6fihjfr3t7ur2ixTiCI
vbHfJJZmsLyDGxzNm0jaNuzPeWikmqoWOpJCWhuwtI25cWfF3N5ecEkkU7HxDN4OwZZ59zJ
d9TL9VX2DjzH3f5S+36QsRb80NJURN+dI9pjy8oOX7FvKTSZQF7Y7lRT0hcAQ9hErMjw5jI
/sVbVL6h0upUawczZqEZBvcA4F6sDaqlEZkYySE/JL3ZAsPB5D6SpxyL172UZPhmGe9Z1+6
7bfdrfdYt1oKyKoaN/UdtHfG+PKsxUNCIaOZs8dbK2ZhzDqYFpH/AHHL0FTOyaQ56N0NPfP
u0MjQW1TG/KaN75QG/tB2ji3itFM9b9nlZ+Dlw9/MLGRecE8VTAyeCRskUg1mvYcwQvRXsL
mfEHXln8cM9oF0ZUNLHCVu+05rnO/9eafxwz2gXSkrdZpCCn8T2htrvtRSMblS1g3en2bBn
vjyFSuw3B96w9BK92dVRnmeoHCcvmu8o/avbGlpdcLE+SJudTbyZ4uMs/DH1bfIoXY79NYq
19XBTc1Q1cWrJDrZDWG0HPue9X666dvMfwq+5f8AKViU9vfJty2DfJ3gtbcsVWOzkwxuNxq
hs3KnObQe67e+rNQ674gut3aRcawQUx3qaD5LPLwny5r5tNiud2bnbqMQ03DVT/IZ3+75M0
9Hp75J1/J6m+1I29bziK6XqF0VXLHR0ROZpoRkDwjWPCtbTVxpZ4K+icd1opA4Z8I4R3iFN
KHClntxEtY511qh+UGrE09xvD5di12M6COKelvVPE1kU4FPUMYMmteB8k5d0ehTrkpvoiNR
P+UbUt96Z7wsa31sNdSQ1dOc4Z2CRnl4O+FmKv8AR1dC1lRY5XbYSZqfPhYT8oeQ7fKVPmH
MLNaJrOpXRMTG4fSIi46IiIKJ0/dUdr8EPrlWlo7631k8Eaqt0/dUdr8EPrlWlo7631k8Ea
gkiIiAiIgIiICIiCv9NnW8l8Ji9JWl0AfeW7+EM9UrdabOt5L4TF6StLoA+8t38IZ6pQW0i
IgL8c0OaWneIyX6iCNMw9WO+c+Jo7pPuW2tdudb2yB0ofr5bAMsslmSyxwsL5XtY0cJK0tT
iLKUCmjzYD8pzvwh3OJeZ6XF4kxeZ7tvXn5EdMeG9RfEUjZomyMObXDMFfa9KJ3G4Yp7CIi
6CIiAuY8Jddui8Zu9Yrpxcx4S67dF4zd6xQdOIiICIiAiIgIiICIiAiIgLmXG3XbrvD2f6V
00uZcbdduu8PZ/pQdNIiICIiAiIgIiICIiAiIgLnbTh1f/AKHH6XLolc7acOr/APQ4/S5Be
+HOpm1eBQ+oFslrcOdTNq8Ch9QLZICIiAiIgIiICIiAiIgLnnTp1exeAx+s9dDLnnTp1exe
Ax+s9BeOFupKz+AQezatqtVhbqSs/gEHs2raoCIiAiIgIiICIiAiIgKr9PfUdQeMG+zerQV
X6e+o6g8YN9m9B7aCOoWp8YSepGrKVa6COoWp8YSepGrKQFTP2Qn+H/0n/aVzKmfshP8AD/
6T/tIJloh62Np783tnqaKF6Ietjae/N7Z6miAiIgLwrKynoKSSqqpWxQxDNz3HYEra2nt1H
JV1crYoYm6znO4FU2IMQVOKasPeHQ2+J2cMBPzv8zu76PTPHjtktqqN7xSNy/cQ4hqcUVYc
4Oht0RzhgO+8/jO7vo9OLbrXcr9PJBaYmkQt1pJXnJoPA3PjKxsmS1lPTTz8y00rw2Soyz1
ArJfTx2ilht1vj3GlYA5rmnMyn8Ynh/ruLVkv6MenTz7yopX1J67K1c0yGSmqYjHNGdWSJw
yLSpPhnErWCOy3yT7lvUtW78D/ACuPF3f6GyvtiZiSEVNPqw3eFvyXbwqAPwT3e7/Qgzm7r
ulNUxGOWM6skbhkWkLsTXkV1P3ocmJwzuPCzqy1ui+U3Y5u0ELUTFtJDVVEsDZaORv/AB9M
7Y2QfjtPA8ZeXLvEYWFcXto2NtF8m+4AZU9W78Efiu/gVp8TXx2I5zBSh0Nrid8lu8Zj+Me
53P6GWMV5t0a7r5vWK9Xs8rpbBZzFU0s/Ndoq9tNUj8H/ACO4iP64QMPVZE18jWbTtOqNpW
xwpXT81yWV1KKy1TD/AIpjjk2IfjA8B2fs7mY+LzZpcPVDMpOaLbUbaapG3L/K7u/13tuLL
FLenaf7SzZMfVHXWP0bHDFrp+dxxNWtbVmN+rT0zdrY3fjP/ri7mWwjjq7xXGWXWllkP1dz
uBRu13Wpw/WmrpWiWCUZVNMfmyt963t1xdRxUYpcM6wmqW60tQ4ZGBp/BH+b+u9ly47xfU9
5lfS9ZpuPD1vl9jsTH2mzvbJcXDKoqRvQDiH+b0eiH/c6SMkkuc47SdrnlPudJFwuc499zy
plh7DgtIZdrvGH3Bwzp6Y7RAPxnd30d/ev+Xj1+tv4Vd80/wD5RmttN3s9PBV3Om3Onqvmk
bTEeBruI5bf6K+rVdavD1w5voflsdsngz+TK3391WDC59e6Slq4uaoKrZLG7e7/AHMlXVxp
ILXfKi3UdUKumiPyXjfj/wApO8SO5/8AEcWT1f8ATyd9u3p0fPRYd3qBivA9U+yyGR0zBkz
ecCCC5h4jkMvL3VXdBaq68VcNsho54iXBsznRkCJo3yc17Wi71eHLhzbRjXifsqKfPZI3jH
ERxqwnXJ10t7K631TpaKXYQMg5h4WuVdovhma/VOJrliLfR8ztjfMyCnAEFOwRRAbwaBkvo
0DtXPJetBT5kEhbpsTdXLJZ1zQUzauGdrIHuYXHLLg+pQPE89NW4uqpKWGJkdN9xLmNA3R4
+c45b5zzHkCsXEVeyw2SquIA3VjNWIH8c7B6c1UebqajLnEukdtPCS4rTxqxNuqfEd1Ga3y
9MeZSbBFGJbpVXmVucVAzc4c94yu9w9IUtoojJJrHaScyVg263mz2GitZGU2ru1R+e7gPe3
vIFvbdBkMyFRe03tNpW1r0xEOedFXXPtP58vsnrpCqg3Rq5v0Vdc+0/ny+yeumiM1FJC7zY
aeuyMzC2RnzJWHJ7e8VH5qC7UBPyG18Q/CZ8mQDujePkVlVFI2Qby1VRbyN4LkxEoWpW/3o
QIXOlDtSZzqeThZM0sI+tfDqe2zP3RpiD98Pifqn6wVMp6IPbqyxNe3ic3MLBdY7W45utlN
n3IwPQo9P0UfZoid1nTQiqmpxkzEFdC0fg82HIfWvMXKsq37lT3i81r/ycErj6BkpRDaLVC
c22ulzHCYgfStlFM6NgZEwMaN4NGQXdfmsjFb3tKJUeBq65ybrXhlDG75xkeZp3DynIKwrT
Q01qtsNvpS4xQjJpe7MnM5nM98rAY+Z54VsaVjxkSpLYjTMX6vwby/UdEREHMlx688vj4e2
XRVwphIwgjMEbRxrna49eiXx8PbLpd7A4ZIKwu+DI3yult7xTuJzMThmzycS0JsV6o5g9lK
XOYcw+N4P7FbdVQa2ZAWukoXtO8oWx1t5hqxcvNijVbdlcNtNY6Z0rbTMSci2NxDWA8PDnl
3F8y2O+1D90koiTvD7qwADiAz2BWJzI/iTmR/Eo+jRb/UOR+L9oV7JaLq+BjJ7fKXsOTZGP
a46vERnty4Pq73jNHW0bS2G31NO0jJ0jmEucPzhvd4ftVkcyP4l+GleOBc9GjsfEc8eZ3+i
sDI2rpcy4bvAMjmdr2e8ejvL4jpKmYZx08rxxtYSFY1ZaKWsBFTSxyd0t2/XvqO3XCcpaZK
Goe7IbIZnZjvA8HlVdsH4ZbMPxX2yRr+3/COS0c8Me6SMAbnq/OBIPdGeY3l6Fjqihj1BrP
hLg5o3w3fBy4sy5fga9lBURSMLJGTxhzXDIjY9Y7XOY4OY4tcDmCDkQstqy9iloyV6qztI8
G4qksFa2lqZCbdO7JwP/ouP4Q7nGrea4OAIOYKohm53BwikZqTO2CRjdh/OA9I+oq18GXB1
dhqjdI7Wexhjcc889Uluf7FswZJtGp8w+d+I8euLJFq9olRF/wCvNP44Z7QLpcrme/8AXln
8cM9oF0ytDzWFUN1HiQDPLfHGOFVLfLW6y3uqt8XyYpBu1K7g1HcHkOzyK45mazCFC8c2p1
XZhWwtzqba7X7roj84eTf72asxX6LRKGSvVXTW4StVnkssd2kpubK0SGOUVB1mxOG9k3e3s
jtUglqJ6kjWcSBvAbAPIofg+4spL3zJI7KkurQzM7zZR80/w8qsOmoADk4bRvrmSs1tMS7S
Ymu4a6Kje/gX3WWhlfbam2TZBlSzJrj+A8bWn61vo6drBvBfFVCHRnIKCSp8P0V3hxXb420
c8VVTTATlzCGiPecSeLLNW1BK12eqdmexaWolqv7MyvLOLNZ9u1tUZqVrTady5WsVjUNmi/
BvL9UXRERBROn7qjtfgh9cq0tHfW+sngjVVun7qjtfgh9cq0tHfW+sngjUEkREQEREBERAR
EQV/ps63kvhMXpK0ugD7y3fwhnqlbrTZ1vJfCYvSVpdAH3lu/hDPVKC2kREBERBg3Wi5tpC
1v8AaM+Uz3KJkZHIqdKP3u2FsvNMDCQ8/LaBvHj8q8j4jxptHq18+70eHn6Z9O36PyxXHcn
cySn5Lj8gngPEpCtHbbGG6s1WMzviPi762tRWU9K5jZpAwvOzNaOH6mPD/rdo9lPJ6L5P9P
u90X4CCAQcwd4hfq3sgiIgLmPCXXbovGbvWK6cXMeEuu3ReM3esUHTiIiAiIgIiICIiAiIg
IiIC5lxt1267w9n+ldNLmXG3XbrvD2f6UHTSIiAiIgIiICIiAiIgIiIC5204dX/AOhx+ly6
JXO2nDq//Q4/S5Be+HOpm1eBQ+oFslrcOdTNq8Ch9QLZICIiAiIgIiICIiAiIgLnnTp1exe
Ax+s9dDLnnTp1exeAx+s9BeOFupKz+AQezatqtVhbqSs/gEHs2raoCIiAiIgIiICIiAiIgK
r9PfUdQeMG+zerQVX6e+o6g8YN9m9B7aCOoWp8YSepGrKVa6COoWp8YSepGrKQFTP2Qn+H/
wBJ/wBpXMqZ+yE/w/8ApP8AtIJloh62Np783tnqaKF6Ietjae/N7Z6miAseurqa20clXVyt
ihiGbnH+t9ZCi2kC2Vl0sDG0UbpnQTtlfC3fe0AjYOHf3kEIv+IKnFFYHyB0NvidnBAfwv8
AM7u+j0+FqtFwxFUvp7bqsjiGclQ/Yxp4G98r1teH7lfKkQ8zzUVIzbPUTMLdUcIGe+VNQK
ejo47dbY9xpIt4cLz+MTwla75K469GP9ZZ60m89V/8K7kjlimloa6ExVER1ZI3ekdxb7DOJ
RbdS0Xd5fb3HKCc79OeI/5fQt9eLNDiala17hBc4R/w9Qfw/wDK7uf134HJHLHNLQ10JiqI
jqyRu9I7inW1eRXpt95GYnDPVXwtSaiMYD43Z8LXNO/3QtFiexRXiglujHMpa+jZm+Z3yWT
NHA48fd/oanC2LDZtW13aRz7edkM52mHuHuej0YeIsRS4km3CAOgtUTvkR7xmP4zvcs1cV+
vpjyunJXp6p8NNG5lZTgvZsO+Csu22yrvtdzvoAGNaM5pyPkwt9/c/oftstlXfa7mCgAYxg
znnI+TC339z+hOqeCktVA212xpbA3bJIfnTO4SStefP0x018+8qMWLfzT4+jG530dtoBbbY
0iIbZJT86Z3GSvDdoKC1VkV1iM1r3N0k7MsywAZ6ze6MluaWkMh2heOL6BrMFXp+W1tvnP8
A/TcvPa0CuNuNnfC+OcVdsqxr0dYw5te08B7v9d7GdqQRPeyPukNG+sDRFc5K6euwxcc6i0
yU7pxG7aYnhzRrMPB87+tue8vFnqcOVraed260ku2mqRvPHEeIrfx8/wD4W/SWTNi/8qt/h
CzU8NvZiOoLKupecoGN2sp+6f8AN6FvYopq6ozOb3uOZJUDs15qMOVjp4WbtRzbKmm4HDjH
EVub/i+Kop+duHXvbHK0GeqIIcAfwG/xWa+K8X6Z7yupenRuPD1xLicQCSzWOT7p82qrG/g
8bWnj7qiQDaZjIomOfI85MY0Zue5AG07WQQxufI86rI2jNz3FTew2BuHmiurwya7SN+S3fb
TA/wCr+u/oma8euo72/hVqc07n7qKXG0XawiB91ia2OpGbXsOYY78Q8RX3Z7vU4crjVU7TL
SybKmmz2PHGO6FPoIuebJaCti5ppqgfdGuPzf8AMDwFVvPFFSXSpoqSp5spYX5Rzjh7ndy3
sxxLmK/qx6d/0l29PT+ei3rTVUVxoo62gkEkEgzB4WniPEQtgqdsl7qsM1xqKcGSjkP/ABF
Pxj8ZvEVbNvuFNc6KOso5RLBKM2uHoPEVmyY7Y7aldS8XjcMHElrhvlomt80u46+TmSZZ6j
gdhUPteC5qK5Q1l5r6SSCmfujIoCXOlcN7PMDIKe1kRezYtFLSv195Qi0xExCUxEzt9xl1X
Vumdvvdn3lvqaPUYFrqClLTmQts0ZBcdczaKuufafz5fZPXTa5k0Vdc+0/ny+yeum0H4vl0
bXb4X2iDFfSMdwLxdb2ngWwX4g13O5vEvRtA0cCzV+oPBlMxvAvUNAX0iAiIgIiIOZbj16J
fHw9sumlzLcevRL4+Htl00g/CAV5uha7gXqiDw5mZxJzMziXuiDw5mZxL8NKw8CyEQYT6Fj
uBYU9u2ZgLdL5LQQgrXGNmjbS88dT5cBG6AHLdGZ5ZZ8Yz2KIupBI0yUjjK0bSwjJ7e+OEd
0fsU+0i1scNHHbY268k5EkzQctWJp4eLM5D61BYKiZz8qKnjic3brtbm4d0udvd8ZLJyJiJ
h73wrr6LT7f/AG3yHZW47gMiDlOfwiM9n/b/AB3+BWHgHWiw9Tg/hl7vrcVXrW/dtwhkNRV
1B3PNp+QNbYdvD6O+rRslM2lp4adnzYmBo8icavaZU/FckTatI9u/+VGX7bpkm8cM9oF0yu
Zb7145vHDPaBdNLW8d+HaFhVMbQ7N7Q5jgWvad5zTvhZy8pma7CEFU1WB71HcDSUUIfR7rr
w1m6ACNmeeZ4cwrPgnbJK7VdrDez4+6tTVUzg85Z5LKt7HNyzXZtM+XIiI8NujhmEG8v1cd
YklG17s8l6xQiMbAvZEBERAREQUTp+6o7X4IfXKtLR31vrJ4I1Vbp+6o7X4IfXKtLR31vrJ
4I1BJEREBERAREQEREFf6bOt5L4TF6StLoA+8t38IZ6pW602dbyXwmL0laXQB95bv4Qz1Sg
tpERAREQEREHy97Y2Oe45NaMyeIKIV9W6tq3SnPV3mjiCmC1ldY4Kkl8JEMh4h8k+RefzsG
XNSIp7ezXxctMdt2aSjuVTRbI35s/EdtCkVtuIuEbjuTmFmWfCPIo3U2+qpHZSxHLgc3aCp
NbaQUdEyPLJ5+U/vlZPh/rxkmlvEe0tHL9KadUeZe76iCJ2rJNGx2WeTnAFfnNVP+Xi88KO
4gOdy70Y/itYp5viNseSadPhHHwovSLb8puyaKQ5RyMeR+K4FUlgDAclwv/22G5RQxUd0lB
gcza7Vd+Nns31Z2HP73L/y/wCKi+A+oa5eN5/WC2Y+TN+POXXjf7M98EVzRj2sXmqn/Lxee
E5qp/y8fnhQpfUf9qz84Lz4+KW391r+wR+JOF5GpgBIM8YI4NcL1UKqv71N+e70rfy+VPHi
JiN7ZOPgjNMxM60mHNVP+Xi88L7Y9kjdZjmuHG05qDqTYf8Avb//ALD/AAVPF5058nRNdLc
/FjFTq22L5Y48t0kazPe1nAL55qp/y8XnhaXEn9rT9538FpFDkfELYsk0ivhLDw4yUi202b
PC92qyVjjxBwK+3ODWlziABvkqLWP76x953oUhuP3uqP8Aln0LVx+TOXFOSY8KMuCMeSKb8
vTmqn/LxeeE5qp/y8XnhQpF5/8AVbfha/sFfxJyCCAQcwd4hVTf9Er7rjOovnP6mgbLUNm3
F0ebhllszz7itGj/ALlB/wAtvoUYvH31n749AXocnkzhxxeI3tkwYIyXmu/CUc1U/wCXi88
L6ZLHJnub2vy39U5qELfYa+ZUd9v8Vm4/PtmyxSa62uzcSMdJttunyMjGb3taONxyXxzVT/
l4vPC1mI/7nF/zP4FR1d5PPnDk6IrtzBxIy06tpqKiBxDWzRkneAcF6KHW/wC+NP8A8xvpU
wf8x3eWjicmc9ZtMa0q5GCMVoiJfHNVP+Xi88JzVT/l4vPChSLz/wCq2/C1/YI/EnDXNe0O
a4OB3iDmvl80UZ1XysaeJzgFi2f71Qd4+krT4h++Lf8Alj0lehm5M48EZdedfuyY8EXyzj2
kPNVP+Xi88L6ZNFIcmSMeRwNcCoQtthz+/Sf8o+kLJg+I2yZIp0+V+XhxSk234SJz2sbrPc
GgcJOQVZY90Z/bliLnrFfaalbuDYtzczWOzPbnmONT+9/eqXvt9IUVVvL5s4LxWI32Q4/Fj
LXqmUrtggoLXSURqonmngZEXBwGtqtAz/Ys9QYfOCnKs4fKnkdW41pDkYIw61O9vI1MDSQZ
4wRvguCc1U/5eLzwohWf36f/AJjvSvFYrfFLRMx0tMcGJjfUnDHskGsx7XDjac1+Pljjy3S
RrM97WOWa1uHfve//AJp9AWNiX51P3nfwW+3JmvH9bTLXBE5vT23PNVP+Xi88L9bPC9wayZ
jnHeAcCVCVn2T77Q/93qlYsXxK17xXp8y034UVrNt+EqJDQSSABtJPAvPmqn/LxeeF8V/3v
qP+U70KGrTy+ZPHtERG9qePxozRMzOk15qp/wAvF54XoCHAEEEHaCOFQZTOh/uFP/ym+gJx
OZPItMTGtOcjjxhiJidvt1RCxxa+ZjSN8FwBVbY/0a/bniFl0ivtNStbTth3N7NY7C4555j
jUhvX32n/AO31QsFZsnxK1LzXp8SvpwotWLb8pZZqdlDZ6OgbOyY0lPHC57Dv6rQM+5nksx
8jIm60j2sHG45BaTDX/uf+z+K98ROyt7BxyD0Fba8mZ43raZpwRGb09tk2aJ/zZWO7zgV6K
CrJo5qjmiKKOeRus4DIOPGsVPim51NP3abcHUbiyYoi8mVMMkz4WyNMjPnNz2r2JmI8vOiJ
nw9URF1wREQEREBVfp76jqDxg32b1aCq/T31HUHjBvs3oPbQR1C1PjCT1I1ZSrXQR1C1PjC
T1I1ZSAqZ+yE/w/8ApP8AtK5lTP2Qn+H/ANJ/2kEy0Q9bG09+b2z1NFC9EPWxtPfm9s9TRA
WDWue0azCQRwhZy85Yw8ZFBG6ieqnOpJK5zeLgXrS0RfvhbQ0DdbPJZMUDYxvINXNQarcwN
q0uJLLBerVLV1EjaWroWZsrHbGkfiu4/wCu8ZZWTU9JSyVFVI2KGNus97jsAVVYixFNiWoE
cYdBa4nfc4t4yn8Z3uU8dLXtqqN7RWNy08DxVU2ckew7CDvFZlrtlXfq7mGgyYxm2eoI+TE
339z+h+2u11d/ruYqHKOKMZz1BHyYm+/uKdQw0ltoW2y1sLKdvz3n50zuFxK2Z8/THRWe/v
LNixbnqnx9H5BBSWygbbLYzVgbtfIfnTO4SSsqkpC8g5JSUhkIJC3dNTiNo2LA1lPTiNo2L
XY0H/8AY9+8W1Hs3LdDYtLjTqHv3i2o9m5BSWhKLdcYVrf/AMc8/wD9SNXHVUtPVUkluuMW
60kv1xn8ZvEVUmgYZ43rfFr/AGkSvKqpQ8E5IKnu1pqsPVwpKo7pBJtpqkfNkbxd/uLCkLa
aBzmR7BtyarNrKKmraOS23KPXpZN534UTuBzSq9ulrq8P1/MVYdeN+2nqB82Vvv7i34M+/k
tPf2lky4tfNCUYVtFPbbVFfddlZW1Q+RI3aynHEP8ANwH6u/t6amlq5iScydrnHg7pUGsd8
mw3VOcGGe3Tn/iKfi/zN7v9d7YYjxUy5xm12Rz46E/29Rlk6X/KOIenvb+a2K/X0z5X1yV6
OqPD7xLidtU2SzWSQtph8mpq278v+Vvc9Pe3421pa6KlpYTLNIdWOJozLiv1jH7pFR0cJln
kOrHE0ZklTqy2SHDMJkkc2ou8rfuku+IQfwW+9aJtXjx0172UxE5p3PhD7nablh+eKG6Mbq
zjNkrDm3PhaTxhe1hv1ThetMsQMtDKfu9Pxf5m8R/rvTqOnjulHPQXCMS0b2lz3OOW5H8YE
7xVagMjq6ingn5qponlsU+WWuO8uYr+tHp3/SXb19Oeuq6KOsprlRx1dLK2WCUZtcP6319m
mYTnkqmw/iCowvWF7Q6W3yn7vAPwf8ze76fRbFHWU9dSR1VLK2WGVusx7eELLkx2pbUr6Xi
8bh6sjDRsC+0RQScyaKuufafz5fZPXTa5k0Vdc+0/ny+yeum0BERAREQEREBERAREQEREHM
tx69Evj4e2XTS5luPXol8fD2y6aQEREBERAREQFqMRYjo8O0BnnIfM4ZQwA/KkP8BxlarFG
OqSyl9JRBtVXjYW5/IiP+Y8fcH7FXFbX1tRJHcKipkdWT6xdKHEHVzyDRlvDMHYq75Ip/ds
43Evnn6R9X7PXVVydcbjWP15pw1pPAM3AgDuANXgx+7UJpw8MdFm8DeEg3znxkcHlX7DUTV
Mh5olkmYxjn6sjyRmAcv25LY2S3VF5frzARUDTtaxoaJSODZvjurD02y3e7lyY+Hi1Ef2j/
792ZhC0HPnnO3IuGrADwDhd5VYdthIAOS1tHTglrWtAaNgAG8pDSw7mwL0YiIjUPmb3tktN
reZc337ryT+OGe0C6ZXM9/680/jhntAumF1AX4Rmv1EHi+na85kL9jhazeC9UQEREBERARE
QEREFE6fuqO1+CH1yrS0d9b6yeCNVW6fuqO1+CH1yrS0d9b6yeCNQSRERAREQEREBERBX+m
zreS+ExekrS6APvLd/CGeqVutNnW8l8Ji9JWl0AfeW7+EM9UoLaREQEREBERAREQfi/URBr
6yzwVs5mfJI1xAGTcsvQsf7XKf8vJ+xbhFmtxMNp6pr3XV5GWsaiWBQWqKgkdIyR7i5uXys
lXOju+WM2yrw/V3FkNfUXWYxwZHWdm4ZcGXAVaq5jwl126Lxm71irK4aVp0RHZCclpt1TPd
0J9rlP8Al5P2I3DsDXB27ybDnwLcIqfsXH/Ct+05fxC1MmH4JJHPM0gLiTwLbIrsmHHl+/G
1dMl6fdnTT/a5T/l5P2LPoqNlDBuLHFw1icyslFHHxsWOeqldS7fNkvGrSwq+2R3BzHPkc3
UBA1Vifa5T/l5P2LcIuX4uG9uq1e7tc+SsaiezW0dmho6ls7JXuLQRkclnTwiogfC45B7SC
QvRFOmGlK9NY7IWyWtbqme7T/a5T/l5P2J9rlP+Xk/Ytwip+xcf8K37Tm/E+IoxFEyMHMMa
GjPuKH3XEGEY73NR1l9ZDWiQMfDqnMO2ZDe7yma5lxt1267w9n+lXXw0yVito3CqmS1J3WX
QX2uU/wCXk/Ysygt0dvDwx7na+Wet3FmIoU4uHHbqrXUp2z5Lxq09mLX0LK+Jsb3uaGu1s2
rB+1yn/LyfsW4RMnGxZLdVq7lymbJSNVlqoLDBBOyVs0hLHBwByW0IzBHGv1FPHhpijVI0j
fJa87tLT/a5T/l5P2J9rlP+Xk/Ytwip+xcf8K37Tm/E8aWnbS0zIGuLgzeJ76xa60RV04lf
I9pDdXIZLYIrrYaWp0THZVXJatuqJ7tP9rlP+Xk/YsmhtMVBM6Vkj3FzdXJ2Sz0VdOLhpbq
rXunbPltGpl4VdM2spnQPcWh2W0dw5qI3e44UsNbzFdL4KWo1Q/c3tJOR3jsHcU1XO2nDq/
8A0OP0uUsnHxZJ3eNy5TNkpGqyu2nsdHU08VRBUyPilaHscAPlAjMFbxa3DnUzavAofUC2S
ljw48W+iNbcvlvk+9O2plw/BLM+QzSAvcXEDLhXz9rlP+Xk/Ytwiqnh4Jnc1Tjk5Y/8mNQ0
TKCAxMc5wLtbM/13F519tjuBjMj3N1M8tXu//CzUVs4aTT05jsrjJaLde+7T/a5T/l5P2L2
pLLDR1LZ2SvcW57DlwjJbJFVXiYKzExXvCyeRlmNTLzmiE0D4iSA9paSO6tX9rlP+Xk/Ytw
isyYMeWd3jaFMt6dqzpp/tcp/y8n7FtYYxDCyIEkMaGgnuBfaJjwY8U7pGi+W9/vTtrKuyQ
1dS+d0r2l+WYGXFko9eLhhWwVoo7rexS1BYHhj2knVOeR2DuFTRc86dOr2LwGP1nqu3EwWm
ZmveU45GWI1Er1s9NTRUoqaSd00NUxr2PI325Zgjvgr3rqCOvjayRzmhpzGqsTC3UlZ/AIP
ZtW1VsYccU9PXZD1L9XXvu0j8Nxn5lS4d9uaUdjmpq6OV0jHxsJOzPPe2LdoqPsOCLRaI8L
ftWWYmJlh3OuFDSl4/tHbGDu8aiYkeJN0D3B+eesDtzUznp4qmMxzMD2nj4FHblZpKTOWHO
SHh4299YviOLNaYvHeI/Zp4eTHEdM+ZZltvgeRDVkB28JOA99bpRC30L6+oEbdjBte7iCls
cbYo2xsGTWjIBaPh+XLkp8/j2lTy8eOlvl8vtEReixiIiAqv099R1B4wb7N6tBVfp76jqDx
g32b0HtoI6hanxhJ6kaspVroI6hanxhJ6kaspAVM/ZCf4f/Sf9pXMqZ+yE/w/+k/7SCZaIe
tjae/N7Z6migejGrFv0QUVYYJZxTx1Em5Qt1nvylkOTRwk8Cj8Gke93nSfaLbHSVdpt0mx9
LVRBr5tjjrHMZgbMth4EFuIoHpMxddLIbXZbCWMul2m3OOVwB3MZho2HZmS4bdu8Vp7ViDF
uEse0GHcU3KG5010aNymYwAseSQMjkD84ZEHjBQWoiIgi2kKgrLhhsNo43ymGdsksTNpewA
57OHaQfIoDarPX3+qFNSxPp4G/wBtUSMIbG339xW3WPewazCQRxLS1VXVz5xySuLeIDL0Ky
uS1ImI90LUraYmfZjxQ0luoWWy2M1KZnznH50ruFzismkpC8gkJS0he4bFu6enEbRsVaZT0
4jaNiyQMkAyX6gLSY06h794tqPZuW7Wkxp1D37xbUezcgprQL1cVni1/tIlf5GYVAaBeris
8Wv9pEra0gYqfg/Ck1yhjbJUue2GBr/m67s9p7gAJ8iDcVdKHtJAWnrqGluFE+2XJhdTv2s
ePnRO4HAqvqu86RcJWu34pu90p7hQ1TmbvRajQWNeMwNjRkcuI7DlvhWmWw19FFVwHWinjb
Iw8YIzCCqrlbauw3DmCu+UHbYJx82Vvv7n9HEnfzNTkxx55bwG8O6rMuFvpbpQvtdxH3InO
KUfOhdwEKva+31llrzbrg0a2WcUo+bM3jC9DBn6o6LT39pY8uLU9UePomOHbTTWS0RXKCRt
ZWVrPlVbdrWD8VvF/wCPItjTUpmLpJHBkbRrPkecg0cJJUHw/fX4cqXRytdNa5z92h39zP4
zf6/gsnEmJufedtthdFa2H5cm86oPuWWcV+vo92iMlenq9n7iTExu+tbLU50VsYcpJRsdUH
4f67i0sUU09RFQUEBlqJNjI2je7p4gkUU1RUxUFBCZamU6rI28HdPEFO7TaoMMUjoYXia4z
D/iani/yt7n9d7Ra1cFemn3veVNazlnqt4Qy52uvsFY2juYa4SDOKdnzH8Yz4wsvDuIp8L1
ZBDpbbM77rEN+M/jN93Cpm6jp7raqiiubRzE1pfuzjluBH4QJ3lWsJBdLE2Td4WPLY5tXLd
G57DkVzFb1o9O/n2kvHpT11XbS1UFZTR1NNK2WGVusx7d4he6qTDOJJcMVZim1pLXM75bBt
MJ/GH8QrWp54qmBk8EjZIpBrMe05hwWW9JpbploraLRuHNOirrn2n8+X2T102uZNFXXPtP5
8vsnrptQSEREBERAREQEREBERARVHHfMdY4xDe4sP3WntFJaJDG2J7ATIc3AZktO06pz4Ap
TovxdW4vwy+puLG81U0xgkkY3JsuwEOy3gdu0D+KCmLj16JfHw9sumlzLcevRL4+Htl00gI
qpraLS9Q0s9ZU4qtUNPC0yPe6OPJrRtz/ALFbTRLeMV4gt9Zc8QVfNFI9zWUbjCyMuIz1yN
VozG8NvCCgsJEX4SAMzsCATkMyoBirHG6iahs0xbFH8moq2bTt2asfv+pYONcaG4OfabTKe
Zh8madh/tf8rf8AL3eHvb8UMT4LYQ+NzN1laW5jLMNB+JUZcvT2jy9Th8Gcur5PH8vkRUR+
bVSgnf14f4hxXs58Di52Qmip4GhutmATmM+EHfJXwzcYaSF5pWzyyyOABLs9mWQABHGVv7V
hwyubU18LIWHIilYSQct4uzJ+pZaUtl/t9XqcjlY+PXpjz7QwrPZpLqRNJAKWkOwhpdnMM8
8tpOQ2b6m9JSNaxsUTAxjRk1oGQAX1BTlxAA2cC3VHRhoBIW+lIpGofOZct8tuq8vqipAwZ
kLYAZBfjWgBfSkqcz3/AK80/jhntAumFzPf+vNP44Z7QLphAREQEREBERAREQEREBFV12xB
irFuNq/D+FrjFa6S0jKoqXtBL3g5Ebxy25gAcRJ4ApNgSpxc6lqqPFtKBNTvAgq2lmVQ3bw
N4st/IZghBWmn7qjtfgh9cq0tHfW+sngjVVun7qjtfgh9cq0tHfW+sngjUEkREQEREBERAR
EQV/ps63kvhMXpK0ugD7y3fwhnqlbrTZ1vJfCYvSVpdAH3lu/hDPVKC2kREBERAREQEREBE
VOY70pXpk1LSWi3XGzt5oykqaqANMwGzVaCCMtuee/vILjRRfSHiqTCGE5rjA1rqp72w04f
tbruzOZ7wBPkUBqr/pBwXT2nEN9ukNwt1c9onpRG0GPWGtlsaMjkDvHLMcKC5lzHhLrt0Xj
N3rFdNMe2RjXsIc1wBBHCFzLhLrt0XjN3rFB04iIgIiICIiAiIgIiICKN49xQ7CGFKi6RRt
kqC5sUDXfN13cJ7gAJ8iryovmkbDFmoMXXK609fQVTmOmoixoLWPGbd5oy2cR2HLfQXOuZc
bdduu8PZ/pXSdHVxV9DBWQHOKojbKw8bXDMfsK5sxt1267w9n+lB00iIgIiICIiAiIgIiIC
IqyxRiLFN30hfadhuuhtYghEstRIwOL82h2zMHZtAyHDntQWaudtOHV/+hx+lysfR5ii/Ve
ILvhfEM0VXVWza2riaAHDPIg5ADhBGwHfzVcacOr/APQ4/S5Be+HOpm1eBQ+oFslrcOdTNq
8Ch9QLZICIiAiIgIiICIiAi8ats7qOZtK4MnMbhE528HZbCfKqouzNLdktdRcq/Fdripqdm
s9xjj+ofcdpJ2Ad1Bbq5506dXsXgMfrPVoaLLjie8YdkueJKjdhUSZ0hMTGHcwNpyaBsJ3s
+JVfp06vYvAY/WegvHC3UlZ/AIPZtW1Wqwt1JWfwCD2bVtUBERAX5vr9RB4sip6OJ7mtbEz
Mucd4LVVuIGtzZSN1j+UcNnkC3L2NkY5jxm1wyIUOrKZ1JVPhd+Cdh4xwLzOflyYaR6faG7
iUpktPX3lJLRXGtpM3nOVhyf3eIrPUTtFVzLXszOTJPkO8u9+1SxXcHP62Lv5jsq5WL08nb
xIiKvMdYovjsUW/BuF5o6evrGbrNVPAO5M2nIZg5bGknZnvZLazLDVX6e+o6g8YN9m9bbB5
x3br/PbMRFlztpZrQ3FmoMnZZ5ZDIkb42jfG/ktTp76jqDxg32b0HtoI6hanxhJ6kaspVro
I6hanxhJ6kaspAVM/ZCf4f/Sf9pXMqZ+yE/w/+k/7SCZaIetjae/N7Z6jeKf/ALgMO+Ct9M
qkmiHrY2nvze2etnX4LttxxfRYomlqRW0UYjjYx7RGQNbfGWf4Z4eJBCNJf/C6UsHVk3yYD
Mxusd4ESjP6tYL80kf8TpYwdSw7ZY5o5HAb4buoOf1Ncp5ivCFrxjbG0VzbINzdrxTREB8b
u4SDsPCPcFqcMaMrRhu789zV1lxr2tLY5at4duYyy2ZDfy2beBBM0REHlLGHjIrCdb2l2eS
2S/EHhDTNjG8vcDJfqICIiAtJjTqHv3i2o9m5btaTGnUPfvFtR7NyCmtAvVxWeLX+0iVr6R
rJbr9hKajuNygtrRI18NTUPDWMkGeWZJG+CR5VVGgXq4rPFr/aRK8rzZ6G/wBqntlxh3Wmn
bk5ueRG3MEHgIIBQUbjejxjS4Eoo75eLdPa4nxspBSu13VPyTqu1shmA3M58Ozvq7MN00lL
hW00swIlhoYY3g74IYAVEbZobsdDcKeoqa+vuENI7Wp6WokBjZtz2gDb3tgPCrCQa+spA8E
gLS3K20t4oTbbj8kA5wTj50Lvd/XelDhmFgVlIHgkBBUtbRVdor3224sylHzH/gyt4wsWok
NPB9zaBwZ8De6rKulrpr1Q87q86hbtp6gD5UTvd/Xer2rpKq11z7bco9WZu878GVvGONejh
z9cdEzqfaWPLi6Z6ojt9E5s1qpsP2mOSje2pqK1gdJXN2hw/FbxD+u9mU9M1zHzzyNigiGt
JI85BoULw9iF+H5DSVYdNaZnfKbvmAn8Jvc7n9FiHEUmIpOZaUOgtMTvks3jOR+E7udz+hk
9G/X0a7tHqV6er2fuIsRPv7+YqIOgtMTtg3nVBHCe53P6Gspqapr6yO3W2LdKh/APmxjjPE
F+0tLVXKtZbrbFuk7/ADY28ZPAFO7fb6XD1C6ioXbpUSf3mq/CkPEOIK+964K9FPPvKmtZy
z1W8IPcLdWWWvdbrk0FxGcco+bK3jC2WF8TSYZqBTVJdJa5XbRvmBx4R3OMf0ZVXUVJc7DU
RXhwipIGl7Kp2/C7ucfe8nEq3pnOlhcJPlszIa4jLXHHkmOfXr0W8x4kvHpT1V8fR54ZwhV
4U0vWZr3ipoal0slJVs+ZMzcn/URwj+CvpVNhnEQsNTFS3Bu7W3dNaJzhrOpXkEaze5kTn3
z3c7WjkZLG2SN7XseA5rmnMOB4Qsl6TSemWitotG4faIiikIiICIiAiIgIiIKHwrh6TSXec
RXl1zksxdIG7jRjV1g7P5+0ZjZt4znvKU6Drq+osNws7oogLbONWaJoAlD9bf4yNXf4iOJb
C7aH7JcLpUV9JXV9sdVEmeKlkAY/PadhGzPi3u4pPhnC9rwlaxb7XE5sZdrve86z5Hcbj/Q
Qc+3Hr0S+Ph7ZdNLmW49eiXx8PbLppBVul241FzuVmwRRSFjrnMx9SR+JrZN8mYc4/mhWVQ
0VPbaGChpIxFBTxiONg4GgZBaaowVbKnGlPiuWWpNbTs1GR67dyy1S3e1c/wAInf31IUBV3
jPFZramWxW6Ytia1/NU7D87JpJYO5s2/V39njnE5t8POuilLKmVuc0rRmYIz/qPB9fEq2ZL
S0zXbg2V7yxzQ95DQMxkdgz4+NU5cnTGo8vR4PE9aeq3iP3fIrqljQ2OUxNAyyjAZ6Mlk0M
M9a5sVPGyeokcS98nyhE0cJ8ua9qeknqrk6ioYIYw3LXlLNfUHHm7Pb3slMrZa4LfAIKdu/
tc8/OeeMrPixepHVbw28znRj/08Xn+GLarDTW47qAJag/OlLQMu8N4Bb2npHSEbFkUtCXEE
hbeGlbGN5bojTwpmZncvClogwAkLOa0NC/QMl+o4IiIOZ7/ANeafxwz2gXTC5nv/Xmn8cM9
oF0wgIiICIiAiIgIiICIiCicN4Mo8U6Q8V0F4qqiKOGqkl3CGTUMpMjsnHfzAB//AGCkGiG
pq6K/4iwzzW+rt9ulIp3vOerk9zdnFmBnlvZhSTE+jO04ju3PdlXWW2vc3VkmpHhu6DLLbs
38tmYW0wng61YNt76S2Nkc6ZwdNNK4F8hG9mQBsHAO6gqfT91R2vwQ+uVaWjvrfWTwRqq3T
91R2vwQ+uVaWjvrfWTwRqCSIiICIiAiIgIiIK/02dbyXwmL0laXQB95bv4Qz1St1ps63kvh
MXpK0ugD7y3fwhnqlBbSIiAiIgIiICIiAqn07/3WweFP9DVbCj2LMF23GMdIy4y1MYpJDJH
uD2tzJy38weJBE9PMMj8FUkjQS2OvYX9wFjxn9fpWLpjrIJ9GloMb2u5pqIXxAH5zdyccx9
Y+tWTebPQ3+0z2y4xbrTTtyc3PIjbmCDwEEAqGWvQ3YrfcqarnrrhXx0jtanp6iRpjYc8xs
A27duWwcaCb2uF9PaaOGTY+OBjXZ8YaAVzbhLrt0XjN3rFdOLmPCXXbovGbvWKDpxERAREQ
EREBERAREQRjSHZrffcI1FHcbjDbma7Xx1M7w1jJAdmZJG/mR5VU2MqLF9Ho+pIbxerbUWe
F0cdJzI7XdU7DqHWyGbQ0E/Vv76vO72mivtqntlwhE1NUN1Xtzy7oIPAQQD5FCbdoZsVHXw
TVNfcK+npXa0FJUSAxtOee0AbR3NmfCgluFKeSkwhZqaYESRUEDHg8BDACFz3jbrt13h7P9
K6aXMuNuu3XeHs/0oOmkREBERAREQEREBERAVMXiifjvTRU2zms2oWunIbPTjVmky1c/lce
bzlxAK51DsUaM7Ria6tu/NNXb7gAA6ekeGl+QyGeY38tmYy2IIlo0D8NaSb9hQyMrWFpm5s
LBuhcNU5OP/ec+6O6VFNOHV/+hx+lyuPCOArRg7d5aIzVFXUbJaqocHPcM88hkBkM9vd4VT
mnDq//AEOP0uQXvhzqZtXgUPqBbJa3DnUzavAofUC2SAiIgIiICIiAiIgKqtItRJinHtkwN
E9wpdcVFbqnLMZE5eRgJ77grVUegwVbIMaT4sE1U6vmZqFjntMbRqhuwaue83j4Sg30UUcE
LIYmNZHG0NYxoyDQNgAXPmnTq9i8Bj9Z66GXPOnTq9i8Bj9Z6C8cLdSVn8Ag9m1bVarC3Ul
Z/AIPZtW1QEREBERAWnvtBJUblNDGXvB1SANuXB/XdW4XxJI2KN0jzk1ozJ7ipz4q5cc1t4
WYrzjvFqtDS4emfk6okEY/FbtKkDRqtAzJyG+eFYHPy3/lj5h9yyqaqhq4zJC7WaDlnkRtV
PGrx8fy4piZ/utz2zX75I/Z7KlsV2Fl806Q22tqZqWmraVpLon6rpGCM5tB7paR9aulRvF2
BbVjBkD6x01PVUxzhqqdwa9vDltG0Z7fRktjMgGG6N2CdMzcM2msmltlZCXywyP1tzO5lwz
4MwWjbxOWz099R1B4wb7N6kuE9HlpwnWTXCKapra+duq6pqnhzgOEDIcOQ27So1p76jqDxg
32b0HtoI6hanxhJ6kaspVroI6hanxhJ6kaspAVM/ZCf4f/AEn/AGlcypn7IT/D/wCk/wC0g
r60aRcWWG2RW22XYwUkOtucfM8TssyXHa5pO+Ss3ouY67OnksPwK5tEPWxtPfm9s9TRBzL0
XMddnTyWH4E6LmOuzp5LD8C6aRBzKNLmOh//ADp5LD8CdFzHXZ08lh+BdM5Zby/UHMvRcx1
2dPJYfgTouY67OnksPwLppEHMvRcx12dPJYfgTouY67OnksPwLppEHMvRcx12dPJYfgTouY
67OnksPwLppEHMvRcx12dPJYfgXhW6UMZ3Chnoqq8mSnqY3RSs5mhGs1wyIzDMxsPAuoVpM
adQ9+8W1Hs3IOYLDiO7YYrn1tnq+ZaiSMxOfubX5tJBIycCN9o+pSDouY67OnksPwLdaBer
is8Wv9pEugEHMvRcx12dPJYfgTouY67OnksPwLppEHMvRcx12dPJYfgX4dLeOTv3w8lh+Bd
Nog5ek0n4yl+fec/0aH4FJcM45jxVG2wYtqGtnc7/AIG56rWmJ/Ax2QA1Tx/+CL6c0ELW1t
HrAkBBUtVS1VurZLbcYtSoZ5sjeMcYXhUyOiYxrMmBxDS8jYwcexWPdrTTX+jFFWHc6mP+6
1XCw8R4wq/qKepoauW3XGLc6iPYQd544xxgr0cOecleiZ1P1Y8mLonqiOz6xvfK/AFBR2zD
sZjbWxiaa7lrX80n8VmeYAH17fKcLBNwxhiF0lyuN7NDY6Q51FSaeLN5/EZ8na4/s7+QO/w
5iQ2E8w3AOmtUhzGW11O7jHc7n9HHvl8qMSVLS5pgt0J/4em4/wDM7jP9d/JGG836Nd2ict
Yr1P2+32bEc7WhroLZCfuEHC//ADO7v9d/FoaGrvFcKC3tGsBnLKdjIW8JJX1brdWXyvFBb
wARtmmPzYW8Z7qnNLTUdmoOdtsB3PfmmPzpncZ7ivvkrir6ePz7yqrSck9d/wDCBVtFVWut
fbLkwCUD5Lh82VvA4FbbDeJprI11rqqmSO3z5tiqGgOdSOPCAQQRnwEH056PR7cqnGFsnw5
d4pJIbfGZKW6fRMt5ryd9py2DucQzHzC7dWyRSFsoY4s3RvzZO6EpaM9ei3n2ly0Tinqr4Y
2LMYaScJXXmSqvu6wSDXpqllLDqTs4CDqb/GOD6itH0XMddnTyWH4FZWEsVvsMrLbcXl9ue
7KKU7TATwH/AC+hWc1wc0OaQQRmCDsIWS1ZpOpaK2i0bhzP0XMddnTyWH4E6LmOuzp5LD8C
6aRRScy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumV+oOZei5
jrs6eSw/AnRcx12dPJYfgXTSIOZei5jrs6eSw/AnRcx12dPJYfgXTSIOP5LvXS3o3l8+dcZ
+aDLqN/tNbW1ssst/gyyUm6LmOuzp5LD8CXHr0S+Ph7ZdNIOZei5jrs6eSw/Asih0oY9rqt
kDL6RntceZIdg8xdJKrMeXrm69mARiWkoSYmguOqZtmsSBv5b31qNrdMbW4cU5ckUj3Rzda
mqp62sq5HyyzOaXyu/Cdn9XkCwLhU0trtwqJy58kjCWtGwDaQO+dm8st5kqWbvUy6sTdjRl
vn8VrR/8ACmWG7OaCjD5WnmmYAvz2lo4G+T0rHjr6lty9zl5442OMWPtP8QpunxziGiD2UV
aII3OLtUQxu/aWklZDNJWL2HNt3y/R4vhXQ9DR55EhbmOMMGQC3PnnMzdK+N2DJt7y/RYfg
X30XMddnTyWH4F00iDmXouY67OnksPwJ0XMddnTyWH4F00iDmXouY67OnksPwJ0XMddnTyW
H4F00iDj+ou9fVXl14mn1q50wnMuo0fLBzzyAy3+4pN0XMddnTyWH4F9X/rzT+OGe0C6YQc
y9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh
+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eS
w/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQckX/E95xRUxVF5rOapYWajHbmxmTc88vkg
LpPR31vrJ4I1Vbp+6o7X4IfXKtLR31vrJ4I1BJEREBERAREQEREFf6bOt5L4TF6SqPsGM8Q
4Xhmhstw5ljncHSDcY36xAyHzmlXhps63kvhMXpK0ugD7y3fwhnqlBX/Rcx12dPJYfgTouY
67OnksPwLppEHMvRcx12dPJYfgTouY67OnksPwLppEHMvRcx12dPJYfgTouY67OnksPwLpp
EHMvRcx12dPJYfgTouY67OnksPwLppEHMvRcx12dPJYfgTouY67OnksPwLppEHMvRcx12dP
JYfgTouY67OnksPwLppEHMvRcx12dPJYfgUZpLtXUN2Zdqafc62OXdWy6rTk/fzyIy/YuwF
zHhLrt0XjN3rFB9dFzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/Aum
kQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ0
8lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BRmtu9d
cbs+7Vc+6VskgkdLqNGbhvHIDLg4l2AuZcbdduu8PZ/pQOi5jrs6eSw/AnRcx12dPJYfgXT
SIOZei5jrs6eSw/AnRcx12dPJYfgXTSIOZei5jrs6eSw/AnRcx12dPJYfgXTSIOZei5jrs6
eSw/AnRcx12dPJYfgXTSIOZei5jrs6eSw/AnRcx12dPJYfgXTSIOZei5jrs6eSw/AnRcx12
dPJYfgXTSIOZei5jrs6eSw/Ao7fL/c8R3Dm+7VXNNTqBmvqNZ8kbwyaAOFdeLnbTh1f/ocf
pcg1NNpUxrSU0VNBeiyKFgYxvM0JyaBkBtZxL16LmOuzp5LD8C6Iw51M2rwKH1Atkg5l6Lm
Ouzp5LD8CdFzHXZ08lh+BdNIg5l6LmOuzp5LD8CdFzHXZ08lh+BdNIg5l6LmOuzp5LD8CdF
zHXZ08lh+BdNIg5l6LmOuzp5LD8CdFzHXZ08lh+BdNIg5l6LmOuzp5LD8CdFzHXZ08lh+Bd
NIg5l6LmOuzp5LD8Cj18xBdMS14rrvVc01AjEYfubWfJBJAyaAOErrtc86dOr2LwGP1noNN
S6U8aUVJDSU96LIYI2xxt5mhOq0DIDMsz3gvXouY67OnksPwLoXC3UlZ/AIPZtW1Qcy9FzH
XZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BOi5jrs6eSw/AumkQcy9FzHXZ08lh+BWPo
txZfMU2i/OvVcao07YxF9yYzVzD8/mgcQVprGuA/8Ap9Rs27m70KvL9y39k6fehDl54ovFf
YNG1wuVsqOZ6qKZgZJqNdlm9gOxwI3iV66ruI/UpJh4ZW92f5Q+gLwPhv8Av/o9bm/7Tnro
uY67OnksPwJ0XMddnTyWH4F00i+jeM5l6LmOuzp5LD8C1d+xxiTE9HHR3m5c1QRybo1m4xs
ydkRnm1oO8SurlV+nvqOoPGDfZvQe2gjqFqfGEnqRqylWugjqFqfGEnqRqykBUz9kJ/h/9J
/2lcypn7IT/D/6T/tIJloh62Np783tnqaKF6Ietjae/N7Z6miAiIgIiICIiAiIgIiIC0mNO
oe/eLaj2blu1pMadQ9+8W1Hs3IKa0C9XFZ4tf7SJdALn/QL1cVni1/tIl0AgIiICIiAvlzQ
4L6RBq6yjDgSAtJeLNT4hpG0tU7cayL+7VXCD+K7jClrmhwWtrKMOBICCpJoaikqpbfXw7l
UxHJ7DvOHGOMLzlOc0MLpRTxSvDXzkEiMceQVh3qyQYipW08zhDXwj/hqnj/yu7n9d+v5Yp
oKiWgr4TFUxHVkjdw90cYXo4s05azSZ1P1YsmPot1RG4WJHQ09lt0VutzMqd7Q90+YJqCfw
iQvampAWOlme2KGMaz5HnINHGohhnErbQW2u6uL7a8/cZTtNO74V5YjxI/ED+Y6LWgtUZ3t
51QRwnudz+hj9K/X0a7tPqV6er2YdVV0bLe2wYeiNNZoXZySb0lW/hc48X9cQGNT09RWVcd
ut0O61EmxrRvMHGeIL9paWquFbHbbbFuk7/NjbxniCndut1LhyjdSUTt1qpP7zVnfeeIcQW
i164I6KefeVNazlnqt4QOppaijq5bbcodzqI9hB3njgcOMKQ4RxY6yyMtdzkLqB5ygnd/6J
4j/AJfR3t7eXS0wYitT21bhBPSML4a12wMHE48SruF/NULmyNDgDqkjed3QlJjkV6bfej3L
ROGeqPC9GuBAIIIO8Rwr6VaYQxa60yR2m6yk0bjlT1Dj/Zf5Xdzu8He3rKBzWS1ZrOpaa2i
0bh+oiKLoiIgIiICIiDmW49eiXx8PbLppcy3Hr0S+Ph7ZdNIMK8V7bXaKuudl9wic8A8Jy2
DynJUo9ruZTE+UTVM0wfqsOscyDnmd7MkjeVl6Sqgw4UMYOW71DIz+13+lVtKySfmepjBbU
Suy1RsLnD8If1vgrLyJ7RD2fhVI3a8/2Z+H7c6pujI5S18VId1cBtAedgGfkz8isOipi9wJ
CjWD6bO3OqC0B1TM55y3ss8gO9sU6oYA1gOSux16axDzeRlnLlm8smCIMaAvZfi/VYoEREB
ERAREQcz3/rzT+OGe0C6YXM9/680/jhntAumEBERAREQEREBERAREQEREFE6fuqO1+CH1yr
S0d9b6yeCNVW6fuqO1+CH1yrS0d9b6yeCNQSRERAREQEREBERBX+mzreS+ExekrS6APvLd/
CGeqVutNnW8l8Ji9JWl0AfeW7+EM9UoLaREQEREBERAREQEREBERAXMeEuu3ReM3esV04uY
8Jddui8Zu9YoOnEREBERAREQEREBERAREQFzLjbrt13h7P8ASumlzLjbrt13h7P9KDppERA
REQEREBERAREQEREBc7acOr/9Dj9Ll0SudtOHV/8AocfpcgvfDnUzavAofUC2S1uHOpm1eB
Q+oFskBERAREQEREBERAREQFzzp06vYvAY/Weuhlzzp06vYvAY/WegvHC3UlZ/AIPZtW1Wq
wt1JWfwCD2bVtUBERAREQF8SSxwgGV7WAnIFxy2r7UbxBVbrVNp2n5MQ298rNyc8YMfUuwY
vVv0pGCCMxvL9UQoayshlZFTyH5TgAw7QpcM8tu+o8XkxyKzMRrSWfBOGdTO36iItbOKr9P
fUdQeMG+zerQVX6e+o6g8YN9m9B7aCOoWp8YSepGrKVa6COoWp8YSepGrKQFTP2Qn+H/0n/
aVzKmfshP8P/pP+0gmWiHrY2nvze2epooXoh62Np783tnqaICIiAiIgIiICIiAiIgLSY06h
794tqPZuW7Wkxp1D37xbUezcgprQL1cVni1/tIl0Auf9AvVxWeLX+0iXQCAiIgIiICIiAvl
zQ4L6RBqq2kzzIC0V8skWI6Zsb3CC5QD/h6g/hf5Hdz+u/L3sDhkVrKyjz+U3fQVJJHLHNL
Q10JiqIjqyRu9I7i+ZCd0hp2OZDurwzdZDkyPPhKsC+2KPEcDRrCG6QD7hOdgkH4rv6/ioA
9jxJLR1sJiniOrJE4bQeNelizTkrNd6t9WLJj6LdXmG9kuRwriy3YQt1K9nNTTLWXCVu2q+
Q4gMP4oPu4yZdT0zNzfPUSNhgiGtJI45BoUOsN6oopaWgxC0SQ0ri6hrXDN1OSCC0niIOX1
dzLyxDiKXEUgpqcOgtUR+RHvGYj8J3uWKMV5v0a7tM5KxXq9n1iHEb787mKhDoLTG7e3nVB
HCe53P6GspaWquFZHbrbDulQ/g/BjHGTwBfVHR1d1rmW62xh8zvnO/Bibxk8CnVBQ0mH6E0
NvOvK/+8VR+dIeIcQ/rurRe9cMdFPPvKmtZyz1W8fRAJoZY5paCvhMVREdWSN3pHcUpwdi5
1ukjs92lzpz8mmqXH5n+Vx4uI8He3tleLPFiaka1zhDc4B/w9Qfwx+K7+v45wOSJ4kloq2E
xVER1ZI3b4PGErMcivTb7xMThnceF4gr9UH0e3uqqY6m01bzKKNjXQynf1D+Ce9syU2acws
cxMTqWmJiY3D6REXHRERAREQcy3Hr0S+Ph7ZdNLmW49eiXx8PbLppBENJMQkw/TueM446yN
z9uWzJw3/Kq8zldNOxwDKpzQ2Jo+bq5bze+MsuMZ8at3EVubdbLVUTsvurCGk8DhtafrAVN
VLZJNV25vziY1knyfmOaMiD9Sycmu4iXs/Crxu1JWDgtgfYqTZ80EEcRDjmprC3VYFWeBbi
aO7G1zyFwqWCZmfA8jMjyjI98KzmfNWmlotWJh5WXHOO80n2fSIikrEREBERAREQcz3/AK8
0/jhntAumFzPf+vNP44Z7QLphAREQEREBERAREQEREBERBROn7qjtfgh9cq0tHfW+sngjVV
un7qjtfgh9cq0tHfW+sngjUEkREQEREBERAREQV/ps63kvhMXpK0ugD7y3fwhnqlbrTZ1vJ
fCYvSVpdAH3lu/hDPVKC2kREBERAREQEREBERAREQFzHhLrt0XjN3rFdOLmPCXXbovGbvWK
DpxERAREQEREBERAREQEREBcy4267dd4ez/SumlzLjbrt13h7P8ASg6aREQEREBERAREQER
EBERAXO2nDq//AEOP0uXRK5204dX/AOhx+lyC98OdTNq8Ch9QLZLW4c6mbV4FD6gWyQEREB
ERAREQEREBERAXPOnTq9i8Bj9Z66GXPOnTq9i8Bj9Z6C8cLdSVn8Ag9m1bVarC3UlZ/AIPZ
tW1QEREBEWPV1sNFFrzO395o33KNrRWN2ns7ETadQ+6mR8VNI+JhkeB8lo4SoY8uc9xfnrE
7c9/NSq23Nlwa4FoZI3fbnwca+qy2U1aCZGar/x27D/5XncnB9rpF8dm3Bl+z2mt4anD9Hu
k7qpw+THsb3T/AF6VIl5U1Oylp2Qs3mjLPj7q9Vq4uH0cUV9/dnz5fVvNhERaVIqv099R1B
4wb7N6tBVfp76jqDxg32b0HtoI6hanxhJ6kaspVroI6hanxhJ6kaspAVM/ZCf4f/Sf9pXMq
Z+yE/w/+k/7SCZaIetjae/N7Z6miheiHrY2nvze2epogIiICIiAiIgIiICIiAtJjTqHv3i2
o9m5btaTGnUPfvFtR7NyCmtAvVxWeLX+0iXQC5/0C9XFZ4tf7SJdAICIiAiIgIiICIiAvh7
A4ZFfaINTWUe3WbsPGFoL/YWYihD2FsN2gH3KU7BMPxXKZPYHDIrWVlIQdduwjaCEidd4FR
lrnPkpaqExzRHVkieNrSF+hrpqunoo5I4DO8MEshyYxfdhvsOkKmbSVD2U+KKVh3KTY1tcw
cB/zAf1lnl5Obuu6U1TE6OWM6skbhkWkL0seactZrvVmK+OMdurzCxae3U+HKPnZQscHOAM
9Q4fKmPu7n/nP2pqV0hGxR7C+JGv3KyXqTaNlJVu9Rx9H/wp9TUoi2EbQvPtWazqWyJiY3D
XSUBazMb61N5s9tvu5uuBmgqohqtqoMtZw4ncal7ow5uWS1lXQ6xJAUXWmtFFbrFTvpraJX
vmcDNUTH5T8t4d5SWkkL4xmtRFQOEm8tzTRbmwBBkIiICIiAiIg5luPXol8fD2y6aXMtx69
Evj4e2XTSDymbrMKr3E+HJhWyXC3N1nStc2aDW1Q8lpGsO77lYxGYWvraXXBIC5MRMalKl7
Ut1Vnuqm1UV0Nxoc6GoZJTTsc2VzcgGZ/KBJ4OLvlW/TSa7BtWh5leyTYCtxQhzWAFRpSKR
qE82a2a3VbyzkRFNUIiICIiAiIg5nv/Xmn8cM9oF0wuZ7/wBeafxwz2gXTCAiIgIiICIiAi
IgIiICIiCidP3VHa/BD65VpaO+t9ZPBGqrdP3VHa/BD65VpaO+t9ZPBGoJIiIgIiICIiAiI
gr/AE2dbyXwmL0laXQB95bv4Qz1St1ps63kvhMXpK0ugD7y3fwhnqlBbSIiAiLwrXujoZ3s
JDmxuII4Dko2npiZdiNzp7oohz0rvpMn1rMtNfVT3KOOWd72HPME9wrz6fEsd7xWInu2X4V
61m0zHZI0XhWvdHQzvYcnNjcQRwHJRfnpXfSZPrV3I5lMExFo8q8PHtliZiUvRRDnpXfSZP
rUppHOfRwvcc3OjaSeM5Jx+XXPMxWNaM3HtiiJmXsijd0r6uG4yxxzva0EZAHe2BYnPSu+k
yfWqL/EsdLTWYnssrwr2rFtx3S9c9YOwpfpdIFHe47ZM63C4vfzQANXIPcCfrBV22GqnqRP
u0rn6urlnwb60GGqiWnwDROhkLHGqqASOLdpVqjk1nB62uymcMxl9PfdN0UQ56V30mT617U
dxrJK2Bj6h5a6RoIJ3xmslfieO0xHTK+eDeI3uEpRfh3lEeeld9Jk+taeTyq8fXVG9qcOC2
bep8Jeih/PSu+kyfWpJapXzW2KSRxc855k8O0qPH5tM9umsJZuNbFXqmWYi0N8ramnrWMhm
cxpjByHHmVreeld9Jk+tV5fiGPHeaTE9k6cO96xaJ8pgi0NjrKmorXsmmc9ojJyPHmFsrtL
JDbZZInFrxlkR3wtGPk1vinLEdo3+ym+Ga5IxzLMRQ/npXfSZPrX7z0rvpMn1rH/AFTH+GW
j7Bf6wl6oLFmCMTV2kqruNNZqiWkfWMe2VoGRaNXbv9xX5wKLVlxrGVs7G1Dw1sjgADvDNb
ORya4IibR5Z8OGcszESlSKIc9K76TJ9a3tjqJaije+aQvcJCATxZBU4OdTNfoiJWZeLbFXq
mWyRae/VU9NuG4yuZra2eXDvLUc9K76TJ9a5m59MN5pMT2MfEtkpFolL0UbtVfVzXKKOSd7
mHPME7+wrfVbnMo53tOTmxuIPEclfg5Nc2ObxHhXlwzjvFZny9kUQ56V30mT61+c9K76TJ9
ax/1TH+GWj7Bf6wmCLwonukooHvObnRgknhOS0d2r6qC5SRxTva0ZZAd4LZm5NcWOMkx5Z8
eGcl5pE+EjRQ/npXfSZPrW3sNVPUun3aVz9XVyz4N9UYefTLeKRE91uTiWx1m0y3KpDS3g7
EV8xnzZa7TPVU/MsbN0jAyzBOY31b17nlp6Jr4XljjIBmO8VoOeld9Jk+tSz86mG/RMSji4
tsteqJSGxwyU1gt0EzCyWKliY9p32kNAIWeorS3KtfVwtdUPLXSNBGe/tUqVvH5Nc8TNY8I
ZsM4piJkRRA3SuzP/ABL/AK056V30mT61j/qmP8MtH2C/1hL0WFaJZJ7dHJK8vcScye+Vr7
7WVFPVxthmcxpZmQO+Vsvya0wxlmO06/dnrhm2Sce29RRDnpXfSZPrWwslbU1FcWTTOe3UJ
yPkWbH8Rx5LxSInuuvw70rNpnw36LEukr4bdNJG4tcAMiODaFG+eld9Jk+tW8jmUwWitoV4
eNbLXqiUvRQ/npXfSZPrUubtYD3FLjcqvI30xrTmbj2w63Pl9Kk9L2D8Q33GMdXa7VPVQCj
YwyRgZawc7Mb/AHQrErbjWR107GVD2tbIQADvbVj89K76TJ9azW+J46zMdMro4N5je4b/AA
9BLS4atdPOwxyxUcTHsO+1wYAR9a2K1liqJqilkdNIXkPyBPeC879VVFKIDBKWa2tnlw7y1
zyaxh9bXZRGCZy+nvu26/O4oc+4Vj9jqmXyOIWTZZnNuses4nXBaST3Fkp8Sre8Vivlotwr
VrNpnw3N2uElBE0xxaxfsDjvBRmaeWokMkzy9x4SphV0zKumfC/ecNh4jxqOU1kqppnMeNy
Y05Fx4e9xqn4hiz3yRFe8Ss4mTFWkzPaWNQ80c1sNKCZQdmX8e4pi3PVGsADltyXhSUUFFH
qQt2nfcd8rIW3h8acFNWnvLNyc0Zbdo8CIi2soiIgKr9PfUdQeMG+zerQVX6e+o6g8YN9m9
B7aCOoWp8YSepGrKVa6COoWp8YSepGrKQFTP2Qn+H/0n/aVzKmfshP8P/pP+0gmWiHrY2nv
ze2epooXoh62Np783tnqaICIiAiIgIiICIiAiIgLSY06h794tqPZuW7Wkxp1D37xbUezcgp
rQL1cVni1/tIl0Auf9AvVxWeLX+0iXQCAiIgIiICIiAiIgIiIC+JGB7civtEHLmjgOOkO26
pIOvIQR/y3q68Q4fGII+aqUNhu8LdnAKho4D3e7/QpvRa3X0m2pp4Xy+yeuhKukcx2uzMEb
QRwLsTMTuCY2qMgTtfBPG6OVh1XxuGTmOCsLAF8q7hQ1VFWv3V9AWNbMd9zXZ5A90ZL4vNh
tV7nbU1bp6OsA1XzU4GUg/zDjWTaqagstJzFbGSarna8s0pzfIe6rsuWMlY3HdVTH0TOp7J
WDmF+FoK8aV+swLIVC18CNo4F9AZL9RAREQEREBERBzLcevRL4+Htl00uZbh16JfHw9sumk
BfJaCvpEHiadpOeS+2MDRsX2iAiIgIiICIiAiIg5nv/Xmn8cM9oF0wuZ8Qdeafxwz2gXTCA
iIgIiICIiAiIgIiICIiCidP3VHa/BD65VpaO+t9ZPBGqrdP3VHa/BD65VpaO+t9ZPBGoJIi
IgIiICIiAiIgr/TZ1vJfCYvSVpdAH3lu/hDPVK3WmzreS+ExekrS6APvLd/CGeqUFtIiIC8
auN01JNEz5z2EDPjyXsi5aOqJiXYnU7RfnDXfis85ZVstNVS18c0obqNzzydnwFb5Fgp8Pw
0tFo32arczJas1nXd41cbpqSaJnznsIGfHko7zhrvxWecpQiuz8THnmJv7K8XIvijVUX5w1
34rPOUjpmOipYo3fOYwNOXGAvVEwcXHgmZp7mXPfLERZoLjaKupr5ZowzUdllm7uBY3OGu/
FZ5ylCKm/wAPw3tNp33WV5mSsREa7NXZaCehE27Bo19XLI572fvUewrRzVuA6KOEAuFVUk5
nLZu8qmq5qwhXVjdKVFTCrnEHPJw3ISHVy1jwby0Rx6Rh9H2VTmtOT1PddvOGu/FZ5y9aWy
1kNXDI9rNVjw4/K4AVI0Wavw7DExMbXTzcsxrs/DvKMc4a78VnnKUItGfjUz66/ZViz2xb6
fdF+cNd+KzzlvrbBJS0EcMmWu3PPI58JKykUcHDx4LdVdu5eRfLGrNNd7ZU1tW2SENLQwN2
uy25lYHOGu/FZ5ylCKvJwMWS83ne5Tpy8lKxWGms9sqaKrdJMGhpjLdhz25j3LPuVPJVUEk
MWWu7LLM5cIKykV9OPSmKcUeJ/wDaq2a1rxefKL84a78VnnJzhrvxWecpQiy/0zB+a/7bl/
J+KO1VkrJauaRrWar5HOHyuAlSNc3YzudfFpVrYY66pZEK5gDGyuDQPk8Ga1Z+PTPERf2UY
s1sUzNV084a78VnnLc2ejloqV8cwAcXlwyOezILPRV4eFiw36672nk5N8lemzV3qgnrtx3E
NOprZ5nLfy9y1fOGu/FZ5ylCLmXg4st5vbe5dx8rJjr0w0NttFXTV8U0gbqNzzyd3CFuamN
0tLLG35z2OaO+QvVFbh49MVJpXxKvJmtktFpRfnDXfis85OcNd+KzzlKEWX+mYPzX/bcv5P
GkjdDSQxP+cxgBy48lp7naaqqr5Jog0sdllm7LgC3yLVl49MtIpbxCjHmtjtNo8ovzhrvxW
ectnZrfPQmYzBo18ssjnvZraoqcXBxYrxeu9wsycrJkrNZYF3pJaykbFCAXB4O05bMitNzh
rvxWecpQuf8ATTca6lx5udPWVELOZIzqxyuaM83cAKlm4WLNbqtvbmPk3x16arcprJWxVMU
jms1WvBPyuAFSRa7DznPw3bHOJc40cRJJ2k6gWxVmDj0wRMU90Mua2WYmyMGw1xJ+Szzl+c
4a78VnnKUIsv8ATMH5r/tuX8mJbKeSloGQy5a7Sc8j3VhXi21NbUskhDS1rMjmcuErcItV+
PS+KMU+I/8ASiua1b9ceUX5w134rPOWdaLXU0dYZZg0N1CNjs+JbpFRj4GHHaLRvcLb8vJe
s1ljXGB9TQywx5azgMsz3VoOcNd+KzzlKEVmfiY89uq20MXIvijVUX5w134rPOUnaMmgHgC
/UUsHFpg30e7mXPbLrq9kdq7LWTVk0rGs1XvJGbl484a78VnnKUKgtNlwraXHMcdPWTws5i
jOrHK5oz1n7cgVnt8Ow2mZna2OZkiNdl22ejmoqd7JgAXPzGRz4Avi80U1bHEIWglrjnmcl
+YYc5+FLQ97i5zqGEkk5knUC2i0zx6Ti9L2U+tb1PU90Zbh+tdvmJvfd/4WZSWB8E8cz6gZ
scDk1u/5VukVNPh+Cs71+6y3Ly2jWxERbmUREQEREBERAVX6e+o6g8YN9m9Wgqv099R1B4w
b7N6D20EdQtT4wk9SNWUq10EdQtT4wk9SNWUgKmfshP8AD/6T/tK5lTP2Qn+H/wBJ/wBpBM
tEPWxtPfm9s9TRQvRD1sbT35vbPU0QEREBERAREQEREBEWBd73bLDSCrutbFSQOdqB8h2F2
ROQ4zkD9SDPWkxp1D37xbUezctNgvSHFjO+3SjpaUMpKIAwzlx1pQSRmWkbN7NbnGnUPfvF
tR7NyCmtAvVxWeLX+0iXQC5/0C9XFZ4tf7SJdAICIiAiIgIiICIiAiKvb7pLr4sS1Nhwzh6
W8VFGM6l4eQGnhAAHBnlmeHYgsJFFsD45psZ0tSOZJKGuo3hlTSyHMsJzyIOQ2bCN4EEKUo
OZNFXXPtP58vsnrpeSMPbkQuaNFXXPtP58vsnrptBp6ugzOYCx4aFwftC3xaDvhfgjaOAIP
Onj1GAL3X5lkv1AREQEREBERARVvcNKVymutwpsM4Zlu1NbHFtTUboWjMZ55AA8Ry4TlvKU
YMxdR4zsYuVLE6BzXmOaF5zMbwAcs+EZEbUFC3Dr0S+Ph7ZdNLmW4deiXx8PbLppAREQERE
BERAREQEREBFXePNK8WELuy2UlvbXzNYHVBMuoIifmt3jtI2/UrCY7XY12WWYzQc03/rzT+
OGe0C6YXM9/wCvNP44Z7QLphAREQEREBERAREQEREBFX9/0k3O24tq8P2jC013lpI2PkdDM
QQHNB+aGH8YLe4QxFeMQR1TrthyosphLRGJnE7rnnnlm0b2Q+tBVmn7qjtfgh9cq0tHfW+s
ngjVVun7qjtfgh9cq0tHfW+sngjUEkREQEREBERAREQV/ps63kvhMXpK0ugD7y3fwhnqlbr
TZ1vJfCYvSVpdAH3lu/hDPVKC2kREBERAREQEREBERAReFbW01uo5aysnZBTwt1pJHnINHG
VCqDSjQ3nH9Nhy0xsqqSWNxdWaxHy2tc4hoI2jYBn30E8XMeEuu3ReM3esV04uY8Jddui8Z
u9YoOnEREBERAREQEREBERARazEV+pMM2Kpu9brGGnaDqt+c9xOQaO+SFXsemG6UsVLcrvh
Gels1W8COqbIXHI7x2tAOwE8GfAgtVcy4267dd4ez/SuloJo6mCOeF4fFK0PY4bzgRmCuac
bdduu8PZ/pQdNIiICIiAiIgIiICIiAiKDYn0hVVtxGMN4fskl4ubYxJM0P1WxAjMcHEQeAb
QgnK5204dX/wChx+lytrA+PWYtmrKCqt8ltudCcpqd7tbZnkSDkDsOwgjhG+ql04dX/wChx
+lyC98OdTNq8Ch9QLZLW4c6mbV4FD6gWyQEREBERAREQEREBEUP0gY/gwRSU+rTCsrKlx1I
NfVyYN9xOR2bw/8AhBMFzzp06vYvAY/WerxwzeHYgw5Q3Z0AgNXFuhjDtYN272fCqO06dXs
XgMfrPQXjhbqSs/gEHs2rarVYW6krP4BB7Nq2qAiIgIiICIiAiIgIihuNcd1WFrrbrZQWR9
2qq9r3NijlLXDVy3gGnPh+pBMlV+nvqOoPGDfZvW/wti/EN8u/MlzwdV2iDc3P5ole4jMZZ
N2sG/nx8C0GnvqOoPGDfZvQe2gjqFqfGEnqRqylWugjqFqfGEnqRqykBUz9kJ/h/wDSf9pX
MqZ+yE/w/wDpP+0gmWiHrY2nvze2epooXoh62Np783tnqaICIiAiIgIiICIiAsWvtlvusLY
LlQ01bE12u1lRC2RodllmA4HbkT9aykQVHoohip9ImMYII2RRR1D2sjY0Na1oleAABvABWD
jTqHv3i2o9m5aXB+Ca3DmLL/eKiqgliukzpI2R56zAZHO25jiK3WNOoe/eLaj2bkFNaBeri
s8Wv9pEugFz/oF6uKzxa/2kS6AQEREBERAREQEREBQPEd+wto5qKqpo6Fsl7uh1zTwuJfM4
kkOdv6ozJ7/AFPFUtw0Y4vmxlWYkor7QQ1E0z3QvewudGw7GgZtIBDchsQbfRZhi7W590xF
fY9wrrzLunM+WRjBcXEkcBJdvcACsJRXB9nxfbKmpfiW/Q3OJ7AIWxty1HZ7T80KVoOZdFP
XQtP58vsnrppcy6Keuhafz5fZPXTSAiIgIiICIiAiIgIiIIXfqOvhs0w0dwWiOWZzuazEGA
u2bCMtmt+ctNoMqbe7CtXRU8MkdZT1OtV65z1i4ZNI4hk3LLjB414t0eYxw1cLgMG3yjp6C
veXGOpadaLfyy+S7ezyz2cGxSjR/giPBNnlgfUCprKp4kqJgMgSN5o7gzO07+ZQUhcOvRL4
+Htl00uZbh16JfHw9sumkBERAREQEREBERAWoxVfo8MYZrrzKwyCmjzawfhPJDWjvaxC268
K2hpLjSvpK6mhqqeTLXimYHtdkcxmDsO0AoOcMTVNpkwRSOZdIq++V9cay4ubnrNJa7Ju9v
Nzy2cJK6KtNxo7ta4K6gnbPTSt+RI3edkcj+0FQnHOiyiv9upoLBR2u1zRza8kjYBHrtyIy
zaM99Tqhoaa20UVHR08VPBEMmxwsDWt4TkB3SSg5vv8A15p/HDPaBdMLme/9eafxwz2gXTC
AiIgIiICIiAiIgIiIKuqcC41mxrertbrzT2mGucNWVo3R72tyDW5ZfJ3tu361naL8W3m71V
2sN/e2autUmpu7QAX5OLXA5ZDYRv8ADmsetwHiyzYlr7tg280sEVycXTQVYJ1HEk7PkuBGZ
JG9lnltW70f4HfhGnrKiuqxW3S4Sa9TM3PV4TkM9p2kknZnn3EFc6fuqO1+CH1yrS0d9b6y
eCNVW6fuqO1+CH1yrS0d9b6yeCNQSRERAREQEREBERBX+mzreS+ExekrS6APvLd/CGeqVut
NnW8l8Ji9JWl0AfeW7+EM9UoLaREQEREBERAREQEREHlU0tPW076aqgjqIJBk+KVgc1w4iD
sKqOOgorb9kRRU1BSQUkApnERQRhjQTA/M5AZK4VCpsE1smlaDF4qoBSxQmMw7d0J3NzOLL
fPGgmq5jwl126Lxm71iunFzHhLrt0XjN3rFB04iIgIiICIiAiIgIiINfe7Xa7vbJKa8QxzU
bfujxI4taNXbmSCN5VRia6v0hmmwVgui1rZRvZu1a4ERMa0ZNAJ/BA8py2d2xcdWG44lwvP
aLbVxUslQ5okfJnkWA5kbBw5D9qg9p0d6Q7FQtobXiqhpadpJDGRb5O+SdTMnvoLQttEy2W
ukoI3FzKWBkLXHfIa0AH9i5vxt1267w9n+ldI22KqgtdJDXTCeqjhY2eUbz3hoDneU5lc3Y
267dd4ez/Sg6aREQEREBERAREQEREBR67UrG88KvDEFp+2R7GtMkobrFus3WDyPlZao2Z8I
CkKrvEGA8QQ4xmxThC6U1JVVUepUQ1TTqu2AHLYc89UHLLfGeaDS6KppKbH+IaO+wvbiCbO
SSQOG5lusC4ADezLmnvcWW2KacOr/APQ4/S5WfgbAdfY7zXYiv9wjrrxWgtc6IHUY0kE5Zg
Zk5DgGQGSrDTh1f/ocfpcgvfDnUzavAofUC2S1uHOpm1eBQ+oFskBERAREQEREBERB51E8d
LTS1EpIjiYXuIGewDMqgbpiG04gsWJb/ca+LnvXhtPQURzLoIGyNOW9lmcsz3jxroCSNksb
o5Gh7Hgtc1wzBB3wVEMT6OrLdcO1dDarRaqGtla0RVApWtLCHAna0ZjYCPKg/dFlyo67Adu
gpahsslJEIp2jP5DtpyPkVU6dOr2LwGP1nq6cG4biwthymt25U4qGsHNEsDNUSv8AxicgSc
uNUtp06vYvAY/WegvHC3UlZ/AIPZtW1Wqwt1JWfwCD2bVtUBERAREQEREBERAVd4ywfii9Y
8t94slbT0MVLSmEVL/lOjcdfWIblt2OAViKBYuwNeqvFEGKML3SKjuUbNSSOoz3OQZEZ7x4
DlkRwDeQavCmI8TWbSM/BeIq9tzbLGXwVGqA4ZM1x5CAQQc9u8eP9099R1B4wb7N62WEcB3
WjxRUYqxRcYa26yM1I2wA6kYyyz3hty2ZZce/mtbp76jqDxg32b0HtoI6hanxhJ6kaspVro
I6hanxhJ6kaspAVM/ZCf4f/Sf9pXMtLiHCFixVzPz7oeauZtbcvur2autln81wz+aN/iQUx
hDTEcKYYpLLzhFVzNr/AHbmvU1tZ7nb2ocvnZb/AALddMIe1ccv/lqadCLAnYL97n+NOhFg
TsF+9z/GghfTCHtXHL/5adMIe1ccv/lqadCLAnYL97n+NOhFgTsF+9z/ABoIX0wh7Vxy/wD
lp0wh7Vxy/wDlqadCLAnYL97n+NOhFgTsF+9z/GghfTCHtXHL/wCWnTCHtXHL/wCWpp0IsC
dgv3uf406EWBOwX73P8aCF9MIe1ccv/lp0wh7Vxy/+Wpp0IsCdgv3uf406EWBOwX73P8aCF
9MIe1ccv/lp0wh7Vxy/+Wpp0IsCdgv3uf406EWBOwX73P8AGghfTCHtXHL/AOWsK9aczd7H
X2z7XBDzZTSQbpzbrams0tzy1BnlnvZqwehFgTsF+9z/ABp0IsCdgv3uf40FGYCxj9pF8mu
YoObd1pnQbnu255Zua7PPVP4u93VP+mEPauOX/wAtTToRYE7Bfvc/xp0IsCdgv3uf40EL6Y
Q9q45f/LTphD2rjl/8tTToRYE7Bfvc/wAadCLAnYL97n+NBC+mEPauOX/y06YQ9q45f/LU0
6EWBOwX73P8adCLAnYL97n+NBC+mEPauOX/AMtOmEPauOX/AMtTToRYE7Bfvc/xp0IsCdgv
3uf40EL6YQ9q45f/AC06YQ9q45f/AC1NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/8tOm
EPauOX/y1NOhFgTsF+9z/ABp0IsCdgv3uf40EL6YQ9q45f/LTphD2rjl/8tTToRYE7Bfvc/
xp0IsCdgv3uf40HP2FMQfaxiikvfMvNPMxedx3TU1tZrm7+Ry+dnvKzemEPauOX/y1NOhFg
TsF+9z/ABp0IsCdgv3uf40EL6YQ9q45f/LTphD2rjl/8tTToRYE7Bfvc/xp0IsCdgv3uf40
EL6YQ9q45f8Ay06YQ9q45f8Ay1NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/8ALTphD2r
jl/8ALU06EWBOwX73P8adCLAnYL97n+NBC+mEPauOX/y06YQ9q45f/LU06EWBOwX73P8AGn
QiwJ2C/e5/jQQvphD2rjl/8tOmEPauOX/y1NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/
wDLTphD2rjl/wDLU06EWBOwX73P8adCLAnYL97n+NBz/UYg3fGjsR8y6utX82cz7pn+Hrau
tl5M8vIrM6YQ9q45f/LU06EWBOwX73P8adCLAnYL97n+NBC+mEPauOX/AMtOmEPauOX/AMt
TToRYE7Bfvc/xp0IsCdgv3uf40EL6YQ9q45f/AC06YQ9q45f/AC1NOhFgTsF+9z/GnQiwJ2
C/e5/jQQvphD2rjl/8tOmEPauOX/y1NOhFgTsF+9z/ABp0IsCdgv3uf40EL6YQ9q45f/LTp
hD2rjl/8tTToRYE7Bfvc/xp0IsCdgv3uf40EL6YQ9q45f8Ay06YQ9q45f8Ay1NOhFgTsF+9
z/GnQiwJ2C/e5/jQQvphD2rjl/8ALTphD2rjl/8ALU06EWBOwX73P8adCLAnYL97n+NBz/c
MRc3YykxFzLqa9YKrcN0zyycDq62Xc38lZnTCHtXHL/5amnQiwJ2C/e5/jToRYE7Bfvc/xo
IX0wh7Vxy/+WnTCHtXHL/5amnQiwJ2C/e5/jToRYE7Bfvc/wAaCF9MIe1ccv8A5adMIe1cc
v8A5amnQiwJ2C/e5/jToRYE7Bfvc/xoIX0wh7Vxy/8Alp0wh7Vxy/8AlqadCLAnYL97n+NO
hFgTsF+9z/GghfTCHtXHL/5adMIe1ccv/lqadCLAnYL97n+NOhFgTsF+9z/GghfTCHtXHL/
5adMIe1ccv/lqadCLAnYL97n+NOhFgTsF+9z/ABoIX0wh7Vxy/wDlp0wh7Vxy/wDlqadCLA
nYL97n+NOhFgTsF+9z/GgpDH2ODjm40tYbdzDzPCY9Tdt01tpOeeqMt9X9o7631k8EasDoR
YE7Bfvc/wAalVut9LabfBb6GLcqanYGRs1i7VA4MySSgyUREBERAREQEREFf6bOt5L4TF6S
qrwBpKOBaKrphaebuaZGv1uaNz1chll805roS92K24jtxt92puaKZzg8s13M2je2tIKjnQi
wJ2C/e5/jQQvphD2rjl/8tOmEPauOX/y1NOhFgTsF+9z/ABp0IsCdgv3uf40EL6YQ9q45f/
LTphD2rjl/8tTToRYE7Bfvc/xp0IsCdgv3uf40EL6YQ9q45f8Ay06YQ9q45f8Ay1NOhFgTs
F+9z/GnQiwJ2C/e5/jQQvphD2rjl/8ALTphD2rjl/8ALU06EWBOwX73P8adCLAnYL97n+NB
C+mEPauOX/y06YQ9q45f/LU06EWBOwX73P8AGnQiwJ2C/e5/jQQvphD2rjl/8tOmEPauOX/
y1NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/wDLVZWi/wDOrFsN/wCZt13KpM+4bpq55k
nLWy7u/kugehFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/8tOmEPauOX/y1NOhFgTsF+9z/A
Bp0IsCdgv3uf40EL6YQ9q45f/LTphD2rjl/8tTToRYE7Bfvc/xp0IsCdgv3uf40EL6YQ9q4
5f8Ay06YQ9q45f8Ay1NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/8ALTphD2rjl/8ALU0
6EWBOwX73P8adCLAnYL97n+NBC+mEPauOX/y06YQ9q45f/LU06EWBOwX73P8AGnQiwJ2C/e
5/jQQvphD2rjl/8tOmEPauOX/y1NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/wDLVZXvE
HPjFs9/5l3Hdqhs24bprZZZbNbIcXEugehFgTsF+9z/ABp0IsCdgv3uf40EL6YQ9q45f/LT
phD2rjl/8tTToRYE7Bfvc/xp0IsCdgv3uf40EL6YQ9q45f8Ay06YQ9q45f8Ay1NOhFgTsF+
9z/GnQiwJ2C/e5/jQQvphD2rjl/8ALTphD2rjl/8ALU06EWBOwX73P8adCLAnYL97n+NBC+
mEPauOX/y06YQ9q45f/LU06EWBOwX73P8AGnQiwJ2C/e5/jQQvphD2rjl/8tOmEPauOX/y1
NOhFgTsF+9z/GnQiwJ2C/e5/jQQvphD2rjl/wDLTphD2rjl/wDLU06EWBOwX73P8adCLAnY
L97n+NBC+mEPauOX/wAtV3jjFn253/nsaLmP7i2Lct13Tez255Dj4lfHQiwJ2C/e5/jToRY
E7Bfvc/xoIFbtPBt9spaL7WxJzPCyLX5uy1tVoGeW57N5ZPTCHtXHL/5amnQiwJ2C/e5/jT
oRYE7Bfvc/xoIX0wh7Vxy/+WnTCHtXHL/5amnQiwJ2C/e5/jToRYE7Bfvc/wAaCF9MIe1cc
v8A5adMIe1ccv8A5amnQiwJ2C/e5/jToRYE7Bfvc/xoIX0wh7Vxy/8Alp0wh7Vxy/8Alqad
CLAnYL97n+NOhFgTsF+9z/GghfTCHtXHL/5adMIe1ccv/lqadCLAnYL97n+NOhFgTsF+9z/
GghfTCHtXHL/5adMIe1ccv/lqadCLAnYL97n+NOhFgTsF+9z/ABoIX0wh7Vxy/wDlqvcc4u
+3S/NuvMPMWrA2Hc913TeJOeeQ4+JXt0IsCdgv3uf406EWBOwX73P8aCA2vTsbZaaOg+1sS
cywMh1+bctbVaBnluezeWV0wh7Vxy/+Wpp0IsCdgv3uf406EWBOwX73P8aCF9MIe1ccv/lp
0wh7Vxy/+Wpp0IsCdgv3uf406EWBOwX73P8AGghfTCHtXHL/AOWnTCHtXHL/AOWpp0IsCdg
v3uf406EWBOwX73P8aCF9MIe1ccv/AJadMIe1ccv/AJamnQiwJ2C/e5/jToRYE7Bfvc/xoI
X0wh7Vxy/+WnTCHtXHL/5amnQiwJ2C/e5/jToRYE7Bfvc/xoIX0wh7Vxy/+WnTCHtXHL/5a
mnQiwJ2C/e5/jToRYE7Bfvc/wAaCF9MIe1ccv8A5ai+PdKBxxZ4LebPzFuNQJt05p3TPJrm
5Zao/G/Yrc6EWBOwX73P8adCLAnYL97n+NBqNBHULU+MJPUjVlLWWHDtqwzQuobPS8zU75D
KWbo5+biACc3EneAWzQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQER
EBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQERE
BERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREB
ERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQf/2Q=
=
</binary><binary id="_8.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAMGAwgDASIAAhEBAxEB/8QAHAABAQEAAwEBAQAAA
AAAAAAAAAMCBAYHAQUI/8QAVhAAAQMAAgsJCQ0IAAYDAQEAAAECAwQRBRITITEzUnFykrEG
FDJBU2FigZEiNFFUdKGissEHFRcjNjdCVVZjlMLRFiQlRYKDk+I1Q3Ph8PEmZHUnRP/EABs
BAQEBAQEBAQEAAAAAAAAAAAAEAwIBBQYH/8QAIhEBAAIBBQADAQEBAAAAAAAAAAECAxETMT
JRBBIhYUEF/9oADAMBAAIRAxEAPwD2YAAADLnWrFdhqSsDQPiLWiL4T6AAMvdaNtqqwNAAA
AddbusR27p25feV9tHu2+LrzItVrVz+EDsQAAAGUdW9zauCBoAAADLXW1teqqWoDQAAAGWO
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//Z
</binary><binary id="_32.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGeAysDASIAAhEBAxEB/8QAGwABAQADAQEBAAAAA
AAAAAAAAAQDBQYCAQf/xABSEAABAwICAQ0LCwQBAgUEAwAAAQIDBAURFAYSFSExUVRVcYGS
k6HREzIzNEFSYXKUldIiNTZCRFNzgrGywQcWkbNjI4MXJGKi4SVD8PE3dIT/xAAaAQEAAwE
BAQAAAAAAAAAAAAAAAgMEAQUG/8QAJhEBAAEEAgEFAQEBAQEAAAAAAAECEhNRAxExBCEyQW
FSInGBI//aAAwDAQACEQMRAD8A/ZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAABFU3WmpalkD3Yqq/KVPqcZYio5EVFxRdpUIU8lNUzET7wlN
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
5nWplAGLLReZ1qfUp4mqio3ZT0qZAAAAH/2Q==
</binary><binary id="_43.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAFKA8wDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAQGAgMFAQcI/8QAUhAAAQMBAggICQkGBAYDAAMAAAECAwQFEQYSExRTVJKTFSEx
UlVzkdEHMjRBUWFxcrIWIiMzV4GVscEXNTdCs9I2goOhQ0RFdKLCVnWUJGLT/8QAGQEBAQE
BAQEAAAAAAAAAAAAAAAIBAwQF/8QAKREBAQABAwMEAgIDAQEAAAAAAAECERMxAzJREhQhQQ
TwkbFCcYEzIv/aAAwDAQACEQMRAD8A+zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5WE1tf
J3ByttfN84zSPHyWPiY3GiXX3Ldy+gmWdV8IWZS1uJk84hZLiX34uM1Fuv8/KBJAAAAAAAA
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
hwnoLHo3pKkS4r3MW9EVypjdiJ+Z2nxnp9R5cvnpeq834i92eipZ1Mi8uRZf2ISDxqI1qNR
LkRLkQ9PM90CLS+U1XWJ8KEoi0vlNV1ifChs4qcu6fv0lAAxaheFxF+T9Gvmzrj2HEO1LSn
tWxbCwRsl301XRwOqXpyRx4iLcv5r6kT0li8IlmSWngjUJE1XSUzkna1PPi3ov/AIqpw/BP
T2fmdVVJMkloudiPa7xo40uuu9S+n1InmO+Nno18PFnLet6fMQvCXZ1LZFgWLZ9K3Fjhc9r
fSvEl6r61XjPo1mIqWVSI7lyDL9lD5xh1UMwowvs2wqB6SpCqtkcxb0a5ypjdjW3r959Qa1
GtRrUuREuRCc+2SunS03MrOPiPQAcnpRaXymq6xPhQlEWl8pqusT4UJRuXKOn2/wA/2FC8L
iL8n6NfNnXHsOL6VjwiWZJaeCNQkTVdJTOSdrU8+Lei/wDiqldO6ZRPWmvTsiu2paU9q2LY
WCNku+mq6OB1S9OSOPERbl/NfUiek0eEuzqWyLAsWz6VuLHC57W+leJL1X1qvGTfBPT2fmd
VVJMkloudiPa7xo40uuu9S+n1InmIOHVQzCjC+zbCoHpKkKq2RzFvRrnKmN2Nbev3nafGen
1Hky+el6rzdJH0ezEVLKpEdy5Bl+yhKPGtRrUa1LkRLkQ9PM98+IEWl8pqusT4UJRFpfKar
rE+FDZxU5d0/fpKABi1C8LiL8n6NfNnXHsOIdqWlPati2FgjZLvpqujgdUvTkjjxEW5fzX1
InpLF4RLMktPBGoSJqukpnJO1qefFvRf/FVOH4J6ez8zqqpJkktFzsR7XeNHGl113qX0+pE
8x3xs9Gvh4s5b1vT5iF4S7OpbIsCxbPpW4scLntb6V4kvVfWq8Z9GsxFSyqRHcuQZfsofOM
OqhmFGF9m2FQPSVIVVsjmLejXOVMbsa29fvPqDWo1qNalyIlyITn2yV06Wm5lZx8R6ADk9K
LS+U1XWJ8KEoi0vlNV1ifChKNy5R0+3+f7CheFxF+T9Gvmzrj2HF9Kx4RLMktPBGoSJqukp
nJO1qefFvRf/ABVSundMonrTXp2RXbUtKe1bFsLBGyXfTVdHA6penJHHiIty/mvqRPSaPCX
Z1LZFgWLZ9K3Fjhc9rfSvEl6r61XjJvgnp7PzOqqkmSS0XOxHtd40caXXXepfT6kTzEHDqo
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
XtVrkRzV4lRUvRQKpFaNCkLEWsp0VGp/xW95nwjQ67T71veWLMqTVYd2gzKk1WHdodNyuGz
PKu8I0Ou0+9b3jhGh12n3re8sWZUmqw7tBmVJqsO7Q3cpszyrvCNDrtPvW944Roddp963vL
FmVJqsO7QZlSarDu0G5TZnlXeEaHXafet7xwjQ67T71veWLMqTVYd2gzKk1WHdoNymzPKqW
lX0clm1LGVcDnOjciIkiKq8RbabyWL3E/IxzKk1WHdobkS5LkIyy9Tphh6XoAJWpFozwxW9
aCSSsYqyNuRzkT+Rpqzyl1mHbQuz6Wmkcr308TnLyq5iKqnmZUmqw7tDjl0ZlddXrw/Kywx
mOilZ5S6zDtoM8pdZh20LrmVJqsO7QZlSarDu0J2J5X73LwpWeUusw7aDPKXWYdtC65lSar
Du0GZUmqw7tBsTye9y8KVnlLrMO2gzyl1mHbQuuZUmqw7tBmVJqsO7QbE8nvcvClZ5S6zDt
oR6aqp21FSqzxojnoqKr04+JC+5lSarDu0GY0mqw7tDZ0J5Zfy8rZdFKzyl1mHbQZ5S6zDt
oXXMqTVYd2gzKk1WHdoZsTy33uXhSs8pdZh20GeUusw7aF1zKk1WHdoMypNVh3aDYnk97l4
UrPKXWYdtBnlLrMO2hdcypNVh3aDMqTVYd2g2J5Pe5eFKzyl1mHbQZ5S6zDtoXXMqTVYd2g
zKk1WHdoNieT3uXhQqaqp21FSqzxojnoqKr04+JCRnlLrMO2hdcxpNVh3aDMqTVYd2ht6Ev
2zH8vKTTRSs8pdZh20GeUusw7aF1zKk1WHdoMypNVh3aGbE8t97l4UrPKXWYdtBnlLrMO2h
dcypNVh3aDMqTVYd2g2J5Pe5eFKzyl1mHbQZ5S6zDtoXXMqTVYd2gzKk1WHdoNieT3uXhSs
8pdZh20I9NVU7aipVZ40Rz0VFV6cfEhfcypNVh3aDMaTVYd2hs6E8sv5eVsuilZ5S6zDtoM
8pdZh20LrmVJqsO7QZlSarDu0M2J5b73LwpWeUusw7aDPKXWYdtC65lSarDu0GZUmqw7tBs
Tye9y8KVnlLrMO2gzyl1mHbQuuZUmqw7tBmVJqsO7QbE8nvcvClZ5S6zDtoM8pdZh20LrmV
JqsO7QZlSarDu0GxPJ73LwoVNVU7aipVZ40Rz0VFV6cfEhIzyl1mHbQuuY0mqw7tBmVJqsO
7Q29CX7Zj+XlJpopWeUusw7aDPKXWYdtC65lSarDu0GZUmqw7tDNieW+9y8KVnlLrMO2gzy
l1mHbQuuZUmqw7tBmVJqsO7QbE8nvcvClZ5S6zDtoM8pdZh20LrmVJqsO7QZlSarDu0GxPJ
73LwpWeUusw7aEemqqdtRUqs8aI56Kiq9OPiQvuZUmqw7tBmNJqsO7Q2dCeWX8vK2XRSs8p
dZh20GeUusw7aF1zKk1WHdoMypNVh3aGbE8t97l4UrPKXWYdtBnlLrMO2hdcypNVh3aDMqT
VYd2g2J5Pe5eFKzyl1mHbQZ5S6zDtoXXMqTVYd2gzKk1WHdoNieT3uXhSs8pdZh20GeUusw
7aF1zKk1WHdoMypNVh3aDYnk97l4UKmqqdtRUqs8aI56Kiq9OPiQkZ5S6zDtoXXMaTVYd2g
zKk1WHdobehL9sx/Lyk00UrPKXWYdtBnlLrMO2hdcypNVh3aDMqTVYd2hmxPLfe5eFKzyl1
mHbQZ5S6zDtoXXMqTVYd2gzKk1WHdoNieT3uXhSs8pdZh20GeUusw7aF1zKk1WHdoMypNVh
3aDYnk97l4UrPKXWYdtCPTVVO2oqVWeNEc9FRVenHxIX3MqTVYd2gzGk1WHdobOhPLL+Xlb
LopWeUusw7aDPKXWYdtC65lSarDu0GZUmqw7tDNieW+9y8KVnlLrMO2gzyl1mHbQuuZUmqw
7tBmVJqsO7QbE8nvcvClZ5S6zDtoM8pdZh20LrmVJqsO7QZlSarDu0GxPJ73LwpWeUusw7a
DPKXWYdtC65lSarDu0GZUmqw7tBsTye9y8OLgk9sjK9zHI5qzpcqLei/NQsJhHDFCipFGxi
Lyo1qIZneTSaPHlfVbQAGpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Af/Z
</binary><binary id="_4.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAJAAkADASIAAhEBAxEB/8QAGwAAAwEBAQEBAAAAA
AAAAAAAAAIDBAEFBgf/xABGEAABAwECBwsMAwEAAQQCAwAAAQIDBBFyBRITITIzkQYUMTRR
UlNxkrHBFRYiIzVBVWFiY6GiQlTRB4EkN3OzsvAXJXT/xAAXAQEBAQEAAAAAAAAAAAAAAAA
AAwEC/8QAJBEBAAECBwEBAAMBAAAAAAAAAAECAxITMjNRUnGRESIxQSH/2gAMAwEAAhEDEQ
A/AP2YAAAAVXIj0b71S0YAABXvSONz3cDUtUBgFjekkbXt4HJagwAAC4yI9G+9UtAYAAAAB
WuRyuTmrYAwAAAACscj2o5OBQGAAAAFe9I43PdwNS1QjekkbXt4HJagDAAAACucjURV962D
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
</binary><binary id="_1.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCACFAloDASIAAhEBAxEB/8QAGwABAQEBAQEBAQAAA
AAAAAAAAAUGBAMHAgH/xABFEAABAwICBgYHBgQEBgMAAAAAAQIDBAUGERITIVWU0hYxNVFy
0QcUQWFxgbIVMoKhsbMiJDaRQlJicxcjU4PB4ZKT8P/EABkBAQEAAwEAAAAAAAAAAAAAAAA
BAgMEBf/EACERAQEAAgICAgMBAAAAAAAAAAABERICUTEyAyEEE0Ei/9oADAMBAAIRAxEAPw
D7MAS7vd5bbPTQw0nrL6hHqiLLoZaOXuXvAqAgdILjuZvFpyjpBcdzN4tOUmYx2na+CB0gu
O5m8WnKOkFx3M3i05RmG07XwQOkFx3M3i05R0guO5m8WnKMw2na+CB0guO5m8WnKOkFx3M3
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
</binary><binary id="_29.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAG1BOUDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAgEI/8QAVBAAAQMCAgUEDggCBwgBAwUAAAECAwQFBhESFiExVBMVQZMH
FCI1UVNVYZKUobHR4Rc2cXN0gbLSMpEjMzdCUnLBJDRidbPC8PFDCCaCJ2ODoqP/xAAaAQE
BAQEBAQEAAAAAAAAAAAAAAwIBBAUG/8QAMREBAAECBQIFAwQDAQEBAQAAAAECAxESFFGhUm
EEITEygRNBsTNDcZEVQtHwIgXx/9oADAMBAAIRAxEAPwDswAAAAAAAAAAAAAAAAAAAAAAU9
TiGJszoaKnfWPYuT3NVGsavg0l6fszB6LgFDz9cfJDPWk/aOfrj5IZ60n7TmMM5o3XwKHn6
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
0lbsa9rkTfkmW3z789gQsK06YZ7JV0wtQvelqloW10EDnq5IHaSNcjc9yLmq/wAjoJksLYc
usF/uGJsQyU/ONbG2GOCmVVZTxJ/dzXeqqiKv2ecz/ZDq7tWdkHDVhstfVU8r85qhsMzmNW
PSTa5EXaiIx+//AFA6aAAMTjhOb8T4TvqbEir1o5V/4Zm6O3zIqe0jXLshMlocWU6Uy062u
nelNNp5pULm6NXJs2ZSIidO80GNrDUYjwtU2+jeyOrVzJKd71yRr2uRyLnt8Cp+Zlbt2NK6
tsmH6GCphbJTpyd0crlRJ43yNlky2be7aqpnlvAr57U98WBcCzSSRUVVTvqK+NjlbyqtZpq
xVTblpaWf2ovQT7rZqLAuNMOVWH41o4LnUrRVlMx7ljlRctF2SrvRV93nz0OMMNV90q7Xeb
JNDDdbTI50KT58nKxyZOY5U2pmie1fDmQILBiTEOKLbd8Sx0VFS2lXPp6SmkWRZJVTLSc5U
yyTJFT7AI3ZWgnqpcL09NUOp5prvGxkzN8aqmWknnTeXlq7H2GrLcqe5UFE+Otp9L+nWd7n
SaTVa7SzXJc88/tGLcP1l8rrBPSOiRttuUdVNyjlRVY3fls2qaUDD9lXvRZf+d03/caXEtx
ktGGLncYURZaWlkljzTZpI1VT2kLGuHJsT2JKSlqG09XBOypppHpm1JGLsz821T8oKW/3a2
XC34qp7dHFUQ8i3tCR7tJHI5H56SbOjL8wMZRYDtdV2NVvcvKvvdTQOrVuCzO5TlHMV2S7c
ssl0VTpTMvcH2ahxB2JbXa7lEstLPTt02I9WquT9JNqbd6IV8OH8eU2GpMIxvtbqJIXU8dy
WRySciqKiN0Mv4slyz3J595rcH2ipsOE7daqtY1npotB6xqqtzzVdiqieED6rMLWiufan1F
O5y2dyPo8pHJoKmWWe3b/AApvLgAAAAAAAAAAAAAAAAACtxF9X637pT3tPeei/Dx/pQ8MRf
V+t+6U97T3novw8f6UJfu/Cv7XylgAqkAAAAAAAAAAAAAAAAAAAAAAAAAAAAABn8Q9+LH+K
X3IaAz+Ie/Fj/FL7kK2vf8A3+GLntaAAEmwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFbiL6vV/3Dvcelk7w2/8ACx/pQ88
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
AAAAAAAAAAAAAAAAAAAAD/2Q==
</binary><binary id="_30.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAIjBTADASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAMEBQYBAgf/xABNEAEAAAQBBAwMBAYBBAEDBQAAAQIDBAURExRVEhUhMTM0UnGB
kZTSBjI1QVFydJKTsbLRQlNhcwcWIlShwTYjYoLhojdFhGNks8Lw/8QAGgEBAAMBAQEAAAA
AAAAAAAAAAAEDBAIFBv/EACYRAQACAgMAAgMBAAMBAQAAAAABAhITAxExITIEIkFRYXGRse
H/2gAMAwEAAhEDEQA/AP2YAAAAAAAAAAAAAAAAHzNPLJDLPNCWHpjEH0IKF1LXqTyyy7ku9
HLvpwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTmv/wCqbN0Zp5Zd+aCxRqy1qcJ5N75AkAAA
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
J/uaLm6qURbXY3+dYe5P9za7G/zrD3J/uaLm6qURbXY3+dYe5P9za7G/wA6w9yf7mi5uqlE
W12N/nWHuT/c2uxv86w9yf7mi5uqlEW12N/nWHuT/c2uxv8AOsPcn+5oubqpRFtdjf51h7k
/3Nrsb/OsPcn+5oubqpRFtdjf51h7k/3Nrsb/ADrD3J/uaLm6qURbXY3+dYe5P9za7G/zrD
3J/uaLm6qURbXY3+dYe5P9za7G/wA6w9yf7mi5uqlEW12N/nWHuT/d7DC8Zqf0z3lpSl881
OlNNN/mOQ0XRuqgrw0rEbKyp7s0Kstep/2ySxy7vPHJB0inh+GUMOkmzcZqlWpHLUq1I5Zp
4/r+n6LjXSmFeme9sp7FCTjMPWX1CTjMPWduF8AAAAAAAAAAAAAAAAAAAAAAAAAAAAABFcc
BMlRXHATAis/x9C0q2f4+haAVbzek6VpVvN6TpBJbcBL0pkNtwEvSmAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABQrcYjzr6hW4xHnXwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV7zxJed7acD
0vLzxJed7acD0gr475BvvZ5/lFk2/F6fqQ+TYxmSapgt7JLDLNGhPkh6f6YsW0nhUtKM8sc
sJqcsYdSzjZ+b+JgFzOAAAAAAAAAAAAAAAAAAAAAAKmKeS7r9qb5Lani00JcKucvnpxlhzx
3IInxNfYdRa8Vo+pL8kqOhLGShTkm35ZYQj1JGZvUrrhuhbk8SXmVLrhuhbk8SXmB9AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAKEnGYesvqEnGYesC+AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AiuOAmSorjgJgRWf4+haVbP8fQtAKt5vSdK0q3m9J0gktuAl6UyG24CXpTAD4qVJKNKarUm
hLJJCM000d6EIOdqYniGJx2dtU0K1j4kYSwjUqQ9O7uSw/ymImfHNrRWO5dKOWzF3ra++JL
3TMXWtr74kvddYS421dSOWzF1ra++JL3TMXWtr74kvdMJNtXUjlsxda2vviS90zF1ra++JL
3TCTbV1I5bMXWtr74kvdMxda2vviS90wk21dSOWzF1ra++JL3TMXWtr74kvdMJNtXUjlsxd
a2vviS90zF1ra++JL3TCTbV1I5bMXWtr74kvdMxda2vviS90wk21dSOWzF1ra++JL3TMXWt
r74kvdMJNtXUjlsxda2vviS90zF1ra++JL3TCTbV1I5bMXWtr74kvdMxda2vviS90wk21dS
OWzF1ra++JL3TMXWtr74kvdMJNtXUjlsxda2vviS90zF1ra++JL3TCTbV1I5eEuI0o7Khi1
xGaHmrQlnlj0ZINTCcWmvZ57W6pwpXdKGWaWWP9M8vKl/T5Imsw6retvGoA5dqFbjEedfUK
3GI86+ADHxTGKtO5jY4fLJNcQhCNSpP4tKEd7nj+h6iZiPmWwOWjTvp47Kri93GaO/m9jJD
qyGYutbX3xJe67wlXtq6kctmLrW198SXumYutbX3xJe6YSbaupHLZi61tffEl7pmLrW198S
XumEm2rqRy2YutbX3xJe6Zi61tffEl7phJtq6kctmLrW198SXumYutbX3xJe6YSbaupHLZi
61tffEl7pmLrW198SXumEm2rqRy2YutbX3xJe6Zi61tffEl7phJtq6kctmLrW198SXumYut
bX3xJe6YSbaupHLZi61tffEl7pmLrW198SXumEm2rqRy2YutbX3xJe6Zi61tffEl7phJtq6
kctmLrW198SXumYutbX3xJe6YSbaupHLZi61tffEl7pmLrW198SXumEm2rqRy2Zu4b2LX2X
9Z5Y//wBU9vjF5h9SWXEaktxbTRhLpEJdjNTj5tlCG5GH6omswmOSsz06IePXKxXvPEl53t
pwPS8vPEl53tpwPSCbfczcWNxg1SaFKhPXsJoxmkzcNlNRy+aMPPD9XTsC8xi6uripb4ZNL
Sp0ptjPczS7LLN54Sw3o5PTF1Xvv4cXivX7M/bnD4b9zCEfRGWMI/I26w7+6k6opszeR3Zs
XvcvnyTSwh1ZDMXWtr74kvdW/sz9cf8AqHbrDv7qTqibdYd/dSdUU2YutbX3xJe6Zi61tff
El7p+yOuP/UO3WHf3UnVE26w7+6k6opsxda2vviS90zF1ra++JL3T9jrj/wBQ7dYd/dSdUT
brDv7qTqimzF1ra++JL3TMXWtr74kvdP2OuP8A1Dt1h391J1RNusO/upOqKbMXWtr74kvdM
xda2vviS90/Y64/9Q7dYd/dSdUTbrDv7qTqimzF1ra++JL3TMXWtr74kvdP2OuP/UO3WHf3
UnVE26w7+6k6opsxda2vviS90zF1ra++JL3T9jrj/wBQ7dYd/dSdUTbrDv7qTqimzF1ra++
JL3TMXWtr74kvdP2OuP8A1Dt1h391J1RNusO/upOqKbMXWtr74kvdMxda2vviS90/Y64/9Q
7dYd/dSdUTbrDv7qTqimzF1ra++JL3TMXWtr74kvdP2OuP/UO3WHf3UnVE26w7+6k6opsxd
a2vviS90zF1ra++JL3T9jrj/wBQ7dYd/dSdUTbrDv7qTqimzF1ra++JL3TMXWtr74kvdP2O
uP8A1DDGLCO5LX2cfNLLLGMY9GRcscPuMSuqVxdUZqFpRmhPJTqQyT1Zob0Yw80IehDmr2X
dkxe8hNDe2UZZodWRew7GLiW6kssS2EZ6m5RryQySzx9EYeaPzc2m3Szjinfw2wFTQpXXDd
C3J4kvMqXXDdC3J4kvMD6B8zTSySRnmjCWWWGWMY70IA+hzdXFr7E5ozWVTRLTL/TU2EI1K
kPTDLuSw/yizF3ra+9+XuuopMq55KxPTqRy2YutbX3xJe6Zi61tffEl7qcJRtq6kctmLrW1
98SXumYutbX3xJe6YSbaupHLZi61tffEl7pmLrW198SXumEm2rqRy2YutbX3xJe6Zi61tff
El7phJtq6kctmLrW198SXumYutbX3xJe6YSbaupHLZi61tffEl7pmLrW198SXumEm2rqRy2
YutbX3xJe6Zi61tffEl7phJtq6kctmLrW198SXumYutbX3xJe6YSbaupHLZi61tffEl7pmL
rW198SXumEm2rqRy2YutbX3xJe6Zi61tffEl7phJtq6kctmLrW198SXumYutbX3xJe6YSba
upHLZi61tffEl7r2EmIUo7Kji1zsv/1YSzy9WQwk21dQMrCsXnuqs1neU5aV3JLsobHxasv
pl/3BquFkT2KEnGYesvqEnGYesJXwABiYjjFxNdT2WG7CE1PcrV54ZZZI+iEPPH5KOavZt2
fF7yM0d/Yxllh1ZHUVmXFuStfiXUjlsxda2vviS90zF1ra++JL3U4S521dSOWzF1ra++JL3
TMXWtr74kvdMJNtXUjlsxda2vviS90zF1ra++JL3TCTbV1I5bMXWtr74kvdMxda2vviS90w
k21dSOWzF1ra++JL3TMXWtr74kvdMJNtXUjlsxda2vviS90zF1ra++JL3TCTbV1I5bMXWtr
74kvdMxda2vviS90wk21dSOWzF1ra++JL3TMXWtr74kvdMJNtXUjlsxda2vviS90zF1ra++
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
8OaMMrm1I6+HdOWe+pdaPmSaE8ks8u9NDLB9KmlSuuG6FuTxJeZUuuG6FuTxJeYH0DNx66q
WmEVpqM2xqzxlpyR9EZowhl/yChi+IWd7Ums6eHyYhPSjkmnmjCWSnH0bLfy8zJ2tm1bZw/
/AC67St6FO2oSUaUMkskMkP1SLopDLPLPfwydrZtW2fa65tbNq2z7XXawnCHO2zJ2tm1bZ9
rrm1s2rbPtddrBhBtsydrZtW2fa65tbNq2z7XXawYQbbMna2bVtn2uubWzats+112sGEG2z
J2tm1bZ9rrm1s2rbPtddrBhBtsydrZtW2fa65tbNq2z7XXawYQbbMna2bVtn2uubWzats+1
12sGEG2zJ2tm1bZ9rrm1s2rbPtddrBhBtsydrZtW2fa65tbNq2z7XXawYQbbMna2bVtn2uu
bWzats+112sGEG2zJ2tm1bZ9rrm1s2rbPtddrBhBtsydrZtW2fa677p2ktvPCpUwS0uIQ/D
C5nmj1T7jTDCE7bNTDMRtcQoR0eEacaf8ATPRml2M1OPojBdctGeNnitneU9yM9SFCrDlSz
bkMvNHJF1Km0dT000tlHYoScZh6y+oScZh6yHS+D5nmhJJNPNvSwyxBm4viVpby6JUt9MrV
YZYW8IQjlh6Zsu5CH6xc7NYbOMZpcIs6UI/h0qrudW4s4dsq1Ga+q7ta7jnJo+iHmhzQhkX
FtaR18s1+We+oZO1s2rbPtdc2tm1bZ9rrtYdYQ422ZO1s2rbPtdc2tm1bZ9rrtYMINtmTtb
Nq2z7XXNrZtW2fa67WDCDbZk7Wzats+11za2bVtn2uu1gwg22ZO1s2rbPtdc2tm1bZ9rrtY
MINtmTtbNq2z7XXNrZtW2fa67WDCDbZk7Wzats+11za2bVtn2uu1gwg22ZO1s2rbPtdc2tm
1bZ9rrtYMINtmTtbNq2z7XXNrZtW2fa67WDCDbZk7Wzats+11za2bVtn2uu1gwg22ZO1s2r
bPtdc2tm1bZ9rrtYMINtmTtbNq2z7XXeww6MscscKs54cnSq2717jVDCE7bLOD4lZxjCwha
QsK0IZYUckNjP6Yyxhv/NsOUxCjGpazTyR2Naj/wBSlPDflmhuwdJZXGl2NC5yZM9Tlnyej
LDKqtXqV/HfKE6K44CZKiuOAmcrEVn+PoWlWz/H0LQCreb0nStKt5vSdIJLbgJelMhtuAl6
UwMXwm4rZ+2U/wDaBP4TcVs/bKf+0C7j8Zub2ABYoAAAAAAAAAAAAAAAAAAAAAAFa541h/t
lP/ayrXPGsP8AbKf+3NvHdPtDqgGdtUK3GI86+oVuMR518ByOEeTaXPN9UXXORwjybS55vq
is4/VPN9V0BcygAAAAAAAAAAAAAAAAAAAAAAALfgx/x615pvqi1mT4Mf8AHrXmm+qLWZXoK
954kvO9tOB6Xl54kvO9tOB6QV8d8g33s8/yiybfi9P1IfJrY75BvvZ5/lFk2/F6fqQ+SzjZ
+b+JAFzOAAAAAAAAAAAAAAAAAAAAAAKmKeS7r9qb5Lapinku6/am+SJ8TX2HT2vFaPqS/JK
iteK0fUl+SVmb1K64boW5PEl5lS64boW5PEl5gfTH8J/JlP2ml9UGwx/CfyZT9ppfVAhE+K
wDUwAAAAAAAAAAAAAAAAAAAAAAAAKt9v2ntdL64Orcpfb9p7XS+uDq1F/Wrh+ooScZh6y+o
ScZh6zhcvobrilb9ub5JkN1xSt+3N8gczhfku1/al+S2qYX5Ltf2pfkttMeME+gCUAAAAAA
AAAAAAAAAAAAAAAAI7ji9T1I/JrYH5CsPZ5Ppgybji9T1I/JrYH5CsPZ5Ppgq5Gjh/q+iuO
AmSorjgJlTQis/wAfQtKtn+PoWgFW83pOlaVbzek6QSW3AS9KZDbcBL0pgYvhNxWz9sp/7Q
J/Cbitn7ZT/wBoF3H4zc3sACxQAAAAAAAAAAAAAAAAAAAAAAK1zxrD/bKf+1lWueNYf7ZT/
wBubeO6faHVAM7aoVuMR519QrcYjzr4DkcI8m0ueb6ouucjhHk2lzzfVFZx+qeb6roC5lAA
AAAAAAAAAAAAAAAAAAAAAAW/Bj/j1rzTfVFrMnwY/wCPWvNN9UWsyvQV7zxJed7acD0vLzx
Jed7acD0gr475BvvZ5/lFk2/F6fqQ+TWx3yDfezz/ACiybfi9P1IfJZxs/N/EgC5nAAAAAA
AAAAAAAAAAAAAAAAFTFPJd1+1N8ltUxTyXdftTfJE+Jr7Dp7XitH1JfklRWvFaPqS/JKzN6
ldcN0LcniS8ypdcN0LcniS8wPpj+E/kyn7TS+qDYY/hP5Mp+00vqgQifFYBqYAAAAAAAAAA
AAAAAAAAAAAAAAFW+37T2ul9cHVuUvt+09rpfXB1ai/rVw/UUJOMw9ZfUJOMw9ZwuX0N1xS
t+3N8kyG64pW/bm+QOZwvyXa/tS/JbVML8l2v7UvyW2mPGCfQBKAAAAAAAAAAAAAAAAAAAA
AAEdxxep6kfk1sD8hWHs8n0wZNxxep6kfk1sD8hWHs8n0wVcjRw/1fRXHATJUVxwEypoRWf
4+haVbP8fQtAKt5vSdK0q3m9J0gktuAl6UyG24CXpTAxfCbitn7ZT/2gWPCeEYYdRrfhoXN
OpPH0Qy5Mv8AlXW8fjNzewALVAAAAAAAAAAAAAAAAAAAAAAArXPGsP8AbKf+1lXqwjVxLDq
Mu7PG5hUyf9ssIxjFzbx3x/aHUgM7aoVuMR519QrcYjzr4DkcI8m0ueb6ouuclhcI07WahN
uT0Ks9OeHojCaP3gs4/VPN9VwBcygAAAAAAAAAAAAAAAAAAAAAAPmpPLSpzVJ45JZYRjGP6
Au+DH/HrXmm+qLWZng7Smo4BZyzwyRjJssnPGMf9tNlegr3niS87204HpeXniS87204HpBX
x3yDfezz/KLJt+L0/Uh8mzi1Ga4wi8oyQyzz0J4Sw9MckcjDsqstayo1JY5YTSQ+SzjUc3k
JwFzMAAAAAAAAAAAAAAAAAAAAAAKmKeS7r9qb5Lani02TDK8sIZZqkuwlhDzxjuQh/lE+Jr
7DqLXitH1JfklfFGSNOjJJHfllhB9szepXXDdC3J4kvMqXXDdC3J4kvMD6Y/hP5Mp+00vqg
2GR4TSxjg01SEMsKNSnUmhD0QmhlIRPiqPIRhGEIwjlhHzvWpgAAAAAAAAAAAAAAAAAAAAA
AAAVb7ftPa6X1wdW5S6hGpc2NCXdnnupIwh+ksdlGPVB1ai/rVw/UUJOMw9ZfUJOMw9ZwuX
0N1xSt+3N8kz4rSRqUKlOG/NLGH+Acthfku1/al+S2p4TNlwyhLGGSaSXYTQ9EYbkYf4XGm
PGC3sgCUAAAAAAAAAAAAAAAAAAAAAAI7ji9T1I/JrYH5CsPZ5Ppgxr2rLRsq1SaOSEskfk3
cKozW+EWdGeGSeShJLND0RyQU8jTw+StorjgJkqK44CZWvRWf4+haVbP8fQtAKt5vSdK0q3
m9J0gktuAl6UyjTuZqckJYSwjkfWmT8mALFajTuKM9GrLCenUljLNLHzwi5ypY4hhcc3LRn
vbWHiT08mclh6Iw8/PBt6ZPyYGmT8mCYmY8c2rFo6lgaZV1biHZpjTKurcQ7NM39Mn5MDTJ
+TB1nKvVVgaZV1biHZpjTKurcQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+T
A0yfkwM5NVWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpjTKurcQ7NM39Mn
5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5NVWBplXVuIdmmNMq6txDs0zf0
yfkwNMn5MDOTVVgaZV1biHZpjTKurcQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN
/TJ+TA0yfkwM5NVWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpjTKurcQ7N
M39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5NVWDC4u6sdjQwq8mnjvZ
ynm5emMWrhOE1LWrPeXk8s91Ul2MIS+LSl5MP9xWdMn5MDTJ+TBE2mXdaVr4uCnpk/JgaZP
yYOXb4rcYjzr7NmnjPUjPGG7FNpk/JgC4xcTwmvpU1/h2xjVnhCFahNHJCrk3owj5pl7TJ+
TA0yfkwInpExEx1LBjdXEkdjUwu/lmhvwloxmh1weaZV1biHZpm/pk/JgaZPyYO85VaqsDT
KurcQ7NMaZV1biHZpm/pk/JgaZPyYGcmqrA0yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mBnJqqw
NMq6txDs0xplXVuIdmmb+mT8mBpk/JgZyaqsDTKurcQ7NMaZV1biHZpm/pk/JgaZPyYGcmq
rA0yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mBnJqqwNMq6txDs0xplXVuIdmmb+mT8mBpk/JgZy
aqsDTKurcQ7NMaZV1biHZpm/pk/JgaZPyYGcmqrA0yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mB
nJqqwNMq6txDs0xplXVuIdmmb+mT8mBpk/JgZyaqsDTKurcQ7NMaZV1biHZpm/pk/JgaZPy
YGcmqrA0yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mBnJqqwNMqx3sMxDs0yehhd5ik8um0Y2tnC
OWNKaMIz1f0jk3of5bGmT8mBpk/JgibzLqOOsT2twhCEMkIZIQeqemT8mBpk/Jg5WJLzxJe
d7acD0q9WvNVhCEYQhk9D2ncTUpdjCWEQXnPXeE3dhXnrYfThXt6k0ZprfLkmkjHfjLl3Mn
6NXTJ+TA0yfkwTE9ImImOpYGl1obkcMxCEfZox+RplXVuIdmmb+mT8mBpk/Jg6zlVqqwNMq
6txDs0xplXVuIdmmb+mT8mBpk/JgZyaqsDTKurcQ7NMaZV1biHZpm/pk/JgaZPyYGcmqrA0
yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mBnJqqwNMq6txDs0xplXVuIdmmb+mT8mBpk/JgZyaqs
DTKurcQ7NMaZV1biHZpm/pk/JgaZPyYGcmqrA0yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mBnJq
qwNMq6txDs0xplXVuIdmmb+mT8mBpk/JgZyaqsDTKurcQ7NMaZV1biHZpm/pk/JgaZPyYGc
mqrA0yrq3EOzTGmVdW4h2aZv6ZPyYGmT8mBnJqqwNMq6txDs0xplXVuIdmmb+mT8mBpk/Jg
ZyaqsDTKurcQ7NMaZV1biHZpm/pk/JgaZPyYGcmqrBhd15tyXC7+MfNCNvGX/ADFcw/Cbmv
dU7zEZZacKUdlRt4R2WSblTR88fR6Glpk/JgaZPyYIm0y6rx1rPa4KemT8mBpk/Jg5WPLrh
uhbk8SXmUKlSNSfZRhkSwu5oQhDYw3AXHzUkkq05qdSWE0k8IwmljvRhFV0yfkwNMn5MAYt
TDr/AAqMZKNGa9s4eJsIwzlOHojCPjQRaZV1ZiHZpm/pk/JgaZPyYO4vMKp46zPbA0yrq3E
OzTGmVdW4h2aZv6ZPyYGmT8mBnKNVWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1
biHZpjTKurcQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5NVWBpl
XVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpjTKurcQ7NM39Mn5MDTJ+TAzk1VYG
mVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5NVWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVV
gaZV1biHZpjTKurcQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5N
VWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpnsLi6qR2NHCr2aeO9CelsId
MYt7TJ+TA0yfkwM5NVVTCcJq0a8b6+mlmuYy7GSSTdlpS+iHpjHzxa6npk/JgaZPyYOFsdR
8QuKEnGYes+9Mn5MEMJ4y1Nnk3cuUS0hT0yfkwNMn5MAZuIYTc0LqpeYdLLUhVjsq1vGOxy
zcqWPmj6VKN3Xl3JsLxCEfPCFvGP+YN/TJ+TA0yfkwdRaYV2462ntgaZV1biHZpjTKurcQ7
NM39Mn5MDTJ+TBOcudVWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpjTKur
cQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5NVWBplXVuIdmmNMq
6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpjTKurcQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0
yrq3EOzTN/TJ+TA0yfkwM5NVWBplXVuIdmmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZp
jTKurcQ7NM39Mn5MDTJ+TAzk1VYGmVdW4h2aY0yrq3EOzTN/TJ+TA0yfkwM5NVWBplXVuId
mmNMq6txDs0zf0yfkwNMn5MDOTVVgaZV1biHZpjS60dyGGYhGPs8YfNv6ZPyYGmT8mBnJqq
yrTCbu/ryVsQpwoW9OaE0tvlyzTxhvRmybmT9HQqemT8mBpk/Jg5me1sRER1C4iuOAmQaZP
yYPJ7mapJGWMsIZUJfdn+PoWlWz/H0LQD5mkln8aWEcnpfQCPM0+RDqMzT5EOpIAjzNPkQ6
jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ
6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjz
NPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOo
zNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EO
pIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8z
T5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqM
zT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDq
SAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0
+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM
0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6k
gCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNP
kQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozN
PkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpI
AjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5
EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT
5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSA
I8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+R
DqMzT5EOpIAjzNPkQ6jM0+RDqSAI8zT5EOozNPkQ6kgCPM0+RDqMzT5EOpIAjzNPkQ6jM0+
RDqSAI8zT5EOozNPkQ6kgD5lklky7GWEMvofQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAKGOY1Z+D2EV8VxCaaW2t9js4yS7KMMs0JYbnPGC+43+Lf/ANMsX5qX/wDNID
6m/if4O07iSE8L6SzqT5uXEZrWaFrGbeyQqc/n3m7Xx+wt8ds8Fnnnjd3tKerR2MuWWMsu7
HdYXhZUwqX+E99GWaloMcMyW+9sYx2MM3k/8tjkc9hsK1Hww/h/LeRjLWjgk8s2z39lmt7n
B39bHbKh4QW+BzzT6Zc0Zq1OEJf6djLv7rGvv4i4PZ3tzbUrTE7+WznjJc17Kzmq0qM0N+E
03ph52df3NKr/ABuwq3knhNUo4XVzkIR8XLGMYQj0bvTBSwbCsbtZLy/8Asfsb3DLm7qVZr
LEKE8uwqZf65YTQyTdeTzc4LXhz4S20+C+C+M4ficZLCvjVvNUr054yQmpf17KE36bm7CPo
alh/EbA77FbbD40cQtZryOxta11azUqdxHzbGMfT+uRxWI4hZ4/4H+CsJcJoYfTh4TUbeta
0YQzWyhGeE2xybkYRy/PfdP/ABQhCFv4Mzwh/VDwhtckfPDcn+wO5clRvauP/wARK9tTqzS
2Hg/Shs5ZZowhVuakNzL6YSy5emLrXDfw9ywx3wxlqcLtzPGOXkx8X/AO0uKEl1bVberljT
qyRkmyRyRyRhkju+ZzngNilxcWd7guIVY1b7BLiNrUqTb9WTfp1I/rGX/MIuocN4NZY/xY8
Mo0+DhTs4T5N7ZZvc/2DuQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAHJ3H8SMCo3N1aUKV/fXdpXnoVba0tZqlSWMkck02SH4cvn87rHA/w1ja7deGUJYy6Xt
5WzkPxbDZR2PRl2YOmwjwpwbGsFqYvaXksLWjss/NVhsI0YywyzQnhHeyQYtP+KOATTSVal
vidCwqT7CTEatlNLbTRy5If1+jng4PwljUntv4kVcMyxsprmzlnjT3ozQj/wBXJ0779G8La
uFyfwyxKeWNLQI4bNChk8WMIyZKeTp2OToBbxzwywTwduLWhiVzNJNdyTT0YyU4zwnhLk3I
ZPPHLCEIefKgwXw6wnGsU2qhSvbC+jJs5Le/t40Z6kvply7/AP8A70OKtZJaPhB/DOTFckJ
5cPqQhCp5p81LsIR/XLk6cjd8PM3U8MfAylQyRvoYhGeEJfGhRhCGc6MkP8RB3jkvBq9reE
XhRi+MxqTaDY1I4dZU4TR2M0ZckatSMPPGMckIR9EHWuG/hBCMPAWWWfhpbuvCr6dls45cv
+AdXjWHRxbBrqwlrz0J61OMKdaSaMJqc+/LNCMPRGEIs7wLx6p4ReDVG7uZYSXlKaa3u5If
hqyRyTde5Hpb7hv4aZdJ8LJpOAjj9xsPRl3MuT/AO5AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcp/E+zusQ/
h5ilrZW1W5uKkKWwpUZIzzzZKskY5IQ3Y7kIxdWA5Ch/DTwYz1C5qWVWaWSMKktpPXnjQln
88YU4xyQ3fNvfo1/CDwVwjwnpUZMTt5p5rebZUatOpGSenGO/kmhzQ6mwA5/CfAfwewS+o3
1jZRku6Us0sK81WeaebZeNGaMY/1R3PPveZVvv4ceD97fXF3LC8tJrqaM1xTtLqelJWjHfj
NLCOTd/R1QDGj4JYHtdh2Hy2EslthlxJcWtOSeaWElSXLkm3I7u/Hfy5cu6tYrguH43JayY
hQjVhaXMl1RyTzS7GpLl2MdyMMu/HcjuL4A5aTDbnBv4g1MRtqFSpY43RlkuoySxjma9OH9
E8fRLNLlhl9OTLvupAR16sKFvUrRknnhTkjNsacsZppskMuSEIb8f0c74EYPdWNhd4niVPN
4ljFxNd3FOO/ShHxKf8A4y/5jF0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA/NPB/wDtMWv8AwjucXsr20rzY1cTUK9OeehPUozRhHcjDJspI9MPQ/SwGZh
ng5hGD4NHB7KxpSWU8IwqUpobKFTLDJHZZfGyw9LEofwv8F6NenNo1xVoUp9nTtKt1PPQkm
/SSMcnXldcA4Tww8HZce8PfBynd4dVusNloXUtxPCSbYU4xk/pyzQ8WOWEMm7DdhuNvA/Aj
A8Avp8QtaNareTy7DSLmtNVnll9EIzR3IOgAHLYBhtz4P+FOLWUlCebDMSnjf29WWWMZaVW
OSFWnGPmyxyTQ/TL6HUgKOM3tfD8Huru1tal3cU6cY0qFOWM0ak+9LDJDzZcmWPmhlUfA7A
I+Dng3b2NWeFS6mjGtdVOXVnjlmj17nNCDcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/2Q==
</binary><binary id="_3.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAJAAkADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAA
AAAAAAAAAMCBAUBBgf/xABJEAABAgEHBA0MAgICAgIDAQAAAQIDBAUGERITciExM5EWMjRR
UlNVcZKiscHRFSIjNTZBYWJjc6GyFHRCVgeBN7MkVIPh8EP/xAAZAQEAAwEBAAAAAAAAAAA
AAAAAAgMEAQX/xAAsEQEAAQIDBwMFAQEBAAAAAAAAAQIDM3GRBBMUMlFSsRESgTFBYZLRIS
JC/9oADAMBAAIRAxEAPwD7MAAAARV1T0bVnRVrJAAAQiPSFCfEVK0a1VqAmBCFESLCbERKk
cldRMAACKuqiI2rOldYEgAAAAItdac5KtqtQEgAAAAIsdbYjqqqwJAAAAEIj0hQnxFStGtV
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
</binary><binary id="_31.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAG1BTADASIAAhEBAxEB/8QAGwABAQADAQEBAAAAA
AAAAAAAAAQDBQYCAQf/xABREAABAwECBg0JBgUEAgECBwAAAQIDBAURBhITFVSRFCExMjNR
UlWBkpTR0jRBQmFxcnSxshYiNVNzkwclNqHBI2KCs+HwgxckN0SEoqPi8f/EABoBAQADAQE
BAAAAAAAAAAAAAAABAgQDBQb/xAAwEQEAAgEEAQQBAwEIAwAAAAAAAQIRAxITUTEEITJhQR
RxoSIFM0SCscHh8BWR0f/aAAwDAQACEQMRAD8A/ZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
YjM4dEDj3YO4RWRNR1lnW9XWnIkzUq6eskbk3sXfKxF3qp5v8A2+rBu0KuqwqwlpZ6h8kNL
NC2Fjl2o0VqqtxGU7enTA5WwrRtGqtbCmLLZZ1JOjaWOVbmtXEVUT1JfccvaNoZvseWtmw/
mfbkbFfsanmY+DHTbxMRE6LxuTFPfD9Gr7VorLdStrJsktXO2nh+6q40jtxNpNr2rtFh+b4
WR1NsUeB9pPr54H1tTSoscSojY3vTGyjb03yX7XmLrXz7JhnQ4PWfbM0EL7KRZ53Ijn7T1R
Xom5jrciX+a9Rk2u6BxEyWpaeELMFae2KunprNpGSVlZGqJPO9d6mNt3bW3f7TNZs9o4P4Z
QYP1VpT2lRV9O6WnkqVR0sb27qK5N1Lk/8AfOyja7EAFlQAAAAAAAAqwZ/CV/Xl+tSUqwZ/
CV/Xl+tTlqO+j5ltzFU8A7o+ZlMVTwDuj5nJpYqP0+gqJaP0+gqAEtZ6HSVEtZ6HSBlpuAb
0/MymKm4BvT8zKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBL5SvvF5BL5SvvF4
AAAAAAAAAAAAAAAAAxzPWOCSRERVa1VS/2GQw1Xkk36bvkVtOKymvmGh+0dX+VDqXvNrZNd
JXwPfK1rVa65MU5Q6LBzySX9T/B4fovUauprRW1sw9T1Wjp00pmsNwAD3nlAAAAAAAAAAAA
AAAAJqzeN9p6peB6TzWbxvtPVLwPSBnAJ62shoKV9RO5UY3zIl6uXzIiedVAoBz61lsVn30
ljoGLvWIxJH3etV2tSHn+b88O7OzuOU61I/LpGlefw6IHO/zfnh3Z2dw/m/PDuzs7hzU7OK
/Togc7/N+eHdnZ3D+b88O7OzuHNTs4r9OiBzv8354d2dncP5vzw7s7O4c1Oziv06IHO/zfn
h3Z2dw/m/PDuzs7hzU7OK/Togc7/N+eHdnZ3D+b88O7OzuHNTs4r9OiPm4c9/N+eHdnZ3D+
b88O7OzuI5qdp4r9OiBzv8354d2dncP5vzw7s7O4nmp2jiv06IHO/wA354d2dncP5vzw7s7
O4c1Oziv06IHO/wA354d2dncP5vzw7s7O4c1Oziv06IHO/wA354d2dncP5vzw7s7O4c1Ozi
v06IHO/wA354d2dncP5vzw7s7O4c1Oziv06IHO/wA354d2dncfUqbaplx0qYq1qbsckaRqv
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
at9Nsp81XIrY2svuS5G7ar7P/8AK7AtW1qqpq6G2rNSlqabFVJocZ0E7V87XKm6nnQ5zCCP
B1tr0dlYR07qRYKRuxLVbM5mMqbSsvRNq7d21Xd9ZlwJq5nYQ2hRUNr1Vr2LDC1WVFSuOrJ
VXeI+77yXX/26Zz7q4ja7kAF3MAAAAAAAAAAEtZwlF8ZD9SHVnKVnCUXxkP1IdWcL+WrR+I
QR+Up7xeQR+Up7xR2XgADk7P3lR8TL9alZJZ+8qPiZfrUrNFfDDf5SAAsqAAAAAAAAHPYQ4
RVVBaFJY9kUbKy06xqva2R+LHFGm69y8XcvT0JxNu1LMHv4iUdu197LOqaFaN0+KqthfjYy
X3biLtf3KytWMykfW2vP/EnBymtmhhp6iFlS5slPIropWuj81+2iorVvRfUbNMI8ILbraxu
DVFQLR0UqwuqK6R6ZZ6b5GI3zJxqa+ot6itz+JeDubn5enp2VSbIa1cR71j22ovnuREv94+
YJW5Z2ClLW2FblS2hqaWqke1ZUVEmjct6PavnvKukx7eGziw6jZgxaVp1tC+Crsp+RqaRHX
3SXoiXO5Kqqbft3Tyy3MLaRKWstCyKKpoahzUc2z3vkmha7ccqXXORPPcaaz5XZkwnwkmsd
9dQ2lUI5lK77qyQN2se65fMt/Qa6umsWy6WGowHwgrNnSSMSCzI5XSxyXql6Kx22m1fu8Qz
Jth+sA+Jfcl+75z6dHEAAAAAAAAAAAqwZ/CV/Xl+tSUqwZ/CV/Xl+tTlqO+j5ltzFU8A7o+
ZlMVTwDuj5nJpYqP0+gqJaP0+gqAEtZ6HSVEtZ6HSBlpuAb0/MymKm4BvT8zKAB8VURL1W5
EOekr6u1nuWmndS0SKqNexP9Sb1oq71OLzlbWisZlatZtOIdEDms2p562uVeNap/eM2ppld
2p/ecuejpw2dKDms2ppld2p/eM2ppld2p/eOehw2dKDms2ppld2p/eM2ppld2p/eOehw2dK
Dms2ppld2p/eM2ppld2p/eOehw2dKDms2ppld2p/eM2ppld2p/eOehw2dKDms2ppld2p/eM
2ppld2p/eOehw2dJcl9922vnPpzWbU0yu7U/vGbU0yu7U/vHPQ4bOlBzWbU0yu7U/vGbU0y
u7U/vHPQ4bOlBzWbU0yu7U/vGbU0yu7U/vHPQ4bOlBzWbU0yu7U/vGbU0yu7U/vHPQ4bOlB
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
</binary><binary id="_40.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCACrAxIDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAQII/8QATxAAAQMCAgQKBgUJBQgCAwAAAAECBAMFBhEHEiHRFRYxMlNU
dJKisRMiQWFxgRQ2UZGyFzM0YnOhpMLSI0JVVsEINThDUnKT0yS0gpTh/8QAGAEBAQEBAQA
AAAAAAAAAAAAAAAIBAwT/xAAiEQEBAAICAgIDAQEAAAAAAAAAAQIxERMDEiEyQVFhInH/2g
AMAwEAAhEDEQA/AOzAAAAAAAAAAAAAAAAAFdWv9rj130astralNcnN1XLkv3AWIKvjLZ+ut
7jtw4y2frre47cBaAq+Mtn663uO3DjLZ+ut7jtwFoCr4y2frre47cOMtn663uO3AWgKvjLZ
+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
</binary><binary id="_9.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCALKAecDASIAAhEBAxEB/8QAHAABAQADAQEBAQAAA
AAAAAAAAAYEBQcDAgEI/8QATBAAAQMCAQMQBwcDAwQBBQEAAAECAwQFEQZU0RITFBUWFyEx
NlNxkZKiseEHQVFhc4GjIjI1UmRykzOh4mKy8CNCY8EkJVVWdHWV/8QAGQEBAAMBAQAAAAA
AAAAAAAAAAAECAwQF/8QAKREBAAEEAgICAgEFAQEAAAAAAAECERJRAxMUMQQhM2FBMlKRod
Ejcf/aAAwDAQACEQMRAD8A7MAfirgmKgfoJ27Zb2a0TLDLPrkqcbWcKp1Gt30LNzcvUugC0
BF76Fm5uXqXQN9Czc3L1LoAtARe+hZubl6l0DfQs3Ny9S6ALQEXvoWbm5epdA30LNzcvUug
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
AAAAAAAAAAAAAAAAAAAAAAA//9k=
</binary><binary id="_13.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAN4A4ADASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAUGAwQHAQII/8QAWRAAAQIDAgcJCgsFBQcFAQEBAAECAwQFBhESFRYhVZPRFBcx
QVFUkZLSBxM2UlNWYXOUsSIyNXF0gaOksuHiNEJyocIjYnXB8CQzRYKDovE3Q0Z2sydlJf/
EABkBAQADAQEAAAAAAAAAAAAAAAABAgMEBf/EACwRAQABAgUDAwUBAQEBAQAAAAABAlEDER
ITFDJSsTFh0QQhQYGRoTPwcSL/2gAMAwEAAhEDEQA/AOzAHiqiIqqtyJwqoHoKtUbeU+Uir
ClYL5tWrcrkdgs+pc9/QaO+OmivvH6TePp8WYziGU42HH5XcFI3x00V94/SN8dNFfeP0k8b
Ft4Rv4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3X
cFI3x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX
3j9I3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTR
X3j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYt
vBv4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcF
I3x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j
9I3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3
j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvB
v4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3
x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I
3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3j9
I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvBv4
d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3x0
0V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I3x
00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvBv4d13BSN8dNFfeP0jfHTRX3j9I4
2Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3x00V94/SN8dNFfeP0jjYtvBv4d1
3BSN8dNFfeP0jfHTRX3j9I42Lbwb+HddwUjfHTRX3j9I3x00V94/SONi28G/h3XcFI3x00V
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
lytXjRU4lNgrlOcsraBrGZmTkJ2E3++25UXoVULGYzGU5OmmrVGYACFgAADXnZ6BT5dY8w+
5t9yIiXq5eJETjU2Cvza7rtDER+dklDajG/3nZ1XouQrXVppzWpp1Tk+1q1WjfCgSUvAZxJ
HiKrl+pqZuk8xhXPJyHS8yg49+t07NLFjCueTkOl4xhXPJyHS8ygb9admlixhXPJyHS8Ywr
nk5DpeZQN+s2aWLGFc8nIdLxjCueTkOl5lA36zZpYsYVzych0vGMK55OQ6XmUDfrNmlixhX
PJyHS8Ywrnk5DpeZQN+s2aWLGFc8nIdLxjCueTkOl5lA36zZpYsYVzych0vGMK55OQ6XmUD
frNmlixhXPJyHS8Ywrnk5DpeZQN+s2aWLGFc8nIdLxjCueTkOl5lA36zZpYsYVzych0vGMK
55OQ6XmUDfrNmlixhXPJyHS8Ywrnk5DpeZQN+s2aWLGFc8nIdLxjCueTkOl5lA36zZpYsYV
zych0vGMK2mfvMgvoRz0v8A5GUDfrNmlmkKy2Zj7lmYDpWaVL2sct7Xp/ddx/NwkmVqqQlf
IviMXBiwE77CenC1zc6FglY26ZSDHRLu+w2vu+dLzpw69cOfEo0yygA1ZgAAGvOzsCQlljz
D8FiZkREvVy8SInGpsFfnV3XaFzX54clCarW8WG++9ehLitVWmM1qadU5PtatVY/woElAgM
4kmIiq5fqambpPMYVzych0vMoOPfrdOzSxYwrnk5DpeMYVzych0vMoG/WnZpYsYVzych0vG
MK55OQ6XmUDfrNmlixhXPJyHS8Ywrnk5DpeZQN+s2aWLGFc8nIdLxjCueTkOl5lA36zZpYs
YVzych0vGMK55OQ6XmUDfrNmlixhXPJyHS8Ywrnk5DpeZQN+s2aWLGFc8nIdLxjCueTkOl5
lA36zZpYsYVzych0vGMK55OQ6XmUDfrNmlixhXPJyHS8Ywrnk5DpeZQN+s2aWLGFc8nIdLx
jCueTkOl5lA36zZpYsYVzych0vGMK55OQ6XmUDfrNmlixhXPJyHS8Ywrnk5DpeZQN+s2aWL
GFc8nIdLxjCtpn71IL6MJ6f5GUDfrNmlmkKy2YmElJqAsrMql7Wq7CbET+67j+bhJMrdTg9
9kXuauDFhJ3yE9OFrkzopOycfdUjAmLru/Q2vu5L0vOnCr1w58SjTLOADVmr9C8I6962F7l
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
UsLRtQ1Te0YANuDelnylhaNqGqb2hlLC0bUNU3tGADbg3pZ8pYWjahqm9oZSwtG1DVN7RgA
24N6WfKWFo2oapvaGUsLRtQ1Te0YANuDelnylhaNqGqb2hlLC0bUNU3tGADbg3pZ8pYWjah
qm9oZSwtG1DVN7RgA24N6WfKWFo2oapvaGUsLRtQ1Te0YANuDelnylhaNqGqb2hlLC0bUNU
3tGADbg3pZ8pYWjahqm9oZSwtG1DVN7RgA24N6WfKWFo2oapvaGUsLjp1QT/pN7RgA24N6U
rI1WTqOEkvE/tGfGhvarXt+dFNwqk5BerUmZdcCagfChPT3LyovAWSSmmzslAmmJckZiPu5
L04DOqnJtRXqhnABVcAAA8VURFVVuROFVPSDrkR01OQaWjlbCcxY0e5bsJqLcjfmVeH5iJm
IjOUxGc5QzRLRyeGrZeFMTeCtyugQ723/OtyL9R85Rs0ZUNU3tHwxjYbEYxqNa1LkREuRD6
OWfqJs6NiLvco2aMqGqb2hlGzRlQ1Te0eAjkVWTsRd7lGzRlQ1Te0Mo2aMqGqb2jwDkVWNi
Lvco2aMqGqb2hlGzRlQ1Te0eAciqxsRd7lGzRlQ1Te0Mo2aMqGqb2jwDkVWNiLvco2aMqGq
b2hlGzRlQ1Te0eAciqxsRd7lGzRlQ1Te0Mo2aMqGqb2jwDkVWNiLvco2aMqGqb2hlGzRlQ1
Te0eAciqxsRd7lGzRlQ1Te0Mo2aMqGqb2jwDkVWNiLvco2aMqGqb2hlGzRlQ1Te0eAciqxs
Rd7lGzRlQ1Te0Mo2aMqGqb2jwDkVWNiLvco2aMqGqb2hlGzRlQ1Te0eAciqxsRd7lGzRlQ1
Te0Mo2aMqGqb2jwDkVWNiLvco2aMqGqb2hlGzRlQ1Te0eAciqxsRduSNVk6grmQIipFZ8aF
EarXt+pTdK3PSzorEjwFwJqB8KDEThReT5l4LickJts9IQJpqXJFYjruReNDow8TXDCujTL
YABoor9C8I6962F7lLAV+heEde9bC9ylgNcXq/UeFMPp/vkK9XvCWgesi+5pYSvV7wloHrI
vuaMHq/U+JRidP88rCADJoxzH7NF/gX3FepHyRKeqb7iwzH7NF/gX3FepHyRKeqb7jn+o9I
b4HrLcABxuoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGrMfKdM+k/0OLGVyY+UqZ9J/oc
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
IslLLHgzcFuG6XmYKw34PKiLxZ06SCiS6O7qVESYujRINHc7DVP3r1TCz/OplqiOb3WKa6E
id8dSoqX8tyrd/MrphbVLeqNvqLT52PKI2bm3SuaYfKS6xGQF/vOTMhIxrT0aBQWVx88zcE
REVkVEVcNVzXInDfffmuvzKQHcsWA2w0N7lRI/f4yzau4cPCX43pwcErtYdIxo9kclkgQac
+djrBWZY9YPfr0uVUVb+HCuu4ydEZ5I1Tlmu1KtrSKtPtkG7plZqI1XQoU3AdCWKnK2/hLA
c/r8hXZio0Na3VaNAfDqEN8t3iBFSJEci52pnXMvHxcB0ApVER6L0zM+oACiwAABls14PSf
8AAvvUxGWzXg9J/wAC+9Tq+n/Lmx/wlAAdTnV+heEde9bC9ylgK/QvCOvethe5SwGuL1fqP
CmH0/3yFer3hLQPWRfc0sJXq94S0D1kX3NGD1fqfEoxOn+eVhABk0Y5j9mi/wAC+4r1I+SJ
T1TfcWGY/Zov8C+4r1I+SJT1Tfcc/wBR6Q3wPWW4ADjdQAABGVyz1LtHKNlqpKtjNYuExyK
rXMXlRyZ0JMExOXoiYzVmm9z+g06ehzqw5icjwVvhOm4yxUh/Mi5iSrlnabaGBDh1CC5XQX
YcGLDerIkJeVrk4CUBOqc880aYyyQtGsnS6HNRJyAkePNxG4DpmajOixMHkvXgT5jcp1Hkq
VEm4knDVjp2O6YjKrlXCevCufg+Y3gRMzKcoho0+jyVLjTkaUhqx87GWPHVXKuE9eFc/AYq
fZylUuqTtSk5ZIc1POwo78JVwlvvzJxXqt+YkwM5MoQ1asrS67HhTUy2NBm4KYLJmWirCiI
3kvThT5zJRrNUyhS8aFJQXYUyt8eNFer4kVf7zlzkqBqnLIyjPNpUqkSdGpUKmSMNYcrCRy
MarlcqXqqrnXPwqpossjRYdHk6S2WduSSjpMQWd9de16Krr7771zuUmwM5MoQ1bsrS67HhT
Uy2NBm4KYMOZloqwojW8l6cKfOZKNZumUGBGhSUF2FMLfHjRXq+JFX+85c5KgapyyMozzaV
KpEnRaXCpkjDWHLQUcjGq5XKl6qq51z8KqakOylFZZ1LP7jR9OS+6E96qqKrldei3333rwk
wBnJlCv0mxVGpE8yehtmJiZhtVsKJNR3RVhIvE2/MgqliqRVKg+oKs1KTUVEbFiScd0JYqJ
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
88rCADJoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAeAegp/c9talq4VYesTC3NUIjYWf8A9lc8P3L0FwAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK/QvCOvethe5SwFfoXhHXvWwvcpY
DXF6v1HhTD6f75CvV/NaOgOXg77ES/0qjbiwkXX6W+qSCNgP73NQHpFgP5HIRhTEVfcriZp
+yUBAyNqpRU3PVP8AYJxmaJDipc1V5UXguN3KCj6TldahE4dcT6EV0z+UiCOygo+k5XWoMo
KPpOV1qEaKrJ1U3SII7KCj6Tldagygo+k5XWoNFVjVTdIgjsoKPpOV1qDKCj6Tldag0VWNV
N0iCOygo+k5XWoMoKPpOV1qDRVY1U3SII7KCj6Tldagygo+k5XWoNFVjVTdIgjsoKPpOV1q
DKCj6Tldag0VWNVN0iCOygo+k5XWoMoKPpOV1qDRVY1U3SII7KCj6Tldagygo+k5XWoNFVj
VTdIgjsoKPpOV1qDKCj6Tldag0VWNVN0iCOygo+k5XWoMoKPpOV1qDRVY1U3SII7KCj6Tld
agygo+k5XWoNFVjVTdIgjsoKPpOV1qDKCj6Tldag0VWNVN0iCOygo+k5XWoMoKPpOV1qDRV
Y1U3SII7KCj6Tldagygo+k5XWoNFVjVTdIgjsoKPpOV1qDKCj6Tldag0VWNVN0iCOygo+k5
XWoMoKPpOV1qDRVY1U3SII7KCj6Tldagygo+k5XWoNFVjVTdIgjsoKPpOV1qDKCj6Tldag0
VWNVN0iCOygo+k5XWoMoKPpOV1qDRVY1U3SII7KCj6Tldagygo+k5XWoNFVjVTdIgjsoKPp
OV1qDKCj6Tldag0VWNVN0iCOygo+k5XWoMoKPpOV1qDRVY1U3SII7KCj6Tldagygo+k5XWo
NFVjVTdIgjsoKPpOV1qDKCj6Tldag0VWNVN0iCOygo+k5XWoMoKPpOV1qDRVY1U3SJX7d1b
EliKtPI7Be2XVkNeR7/gt/m5FN/KCj6Tldahzbu6V2E6zdNp8rGbEbOx1jK5jr0VrEu/E5O
qJpmPWExMT6Kz3CqtuO18xTXOuZPy64Kcr2fCT/twz9AH5JsrVlodqabU8K5svMMc/wDgvu
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
l3ReWPq/zOagcPDORW6Vl3ReWPq/zGXdF5Y+r/M5qBw8M5FbpWXdF5Y+r/MZd0Xlj6v8AM5
qBw8M5FbpWXdF5Y+r/ADGXdF5Y+r/M5qBw8M5FbpWXdF5Y+r/MZd0Xlj6v8zmoHDwzkVulZ
d0Xlj6v8xl3ReWPq/zOagcPDORW6Vl3ReWPq/zGXdF5Y+r/ADOagcPDORW6Vl3ReWPq/wAx
l3ReWPq/zOagcPDORW6Vl3ReWPq/zGXdF5Y+r/M5qBw8M5FbpWXdF5Y+r/MZd0Xlj6v8zmo
HDwzkVulZd0Xlj6v8zJLW0pE1MwpeGsbDivRjb4ea9VuTjOYm7Rfl2n/Sof4kK1fSYcRMpj
6iuZTVi6rLUeathMzWH3ta/GZ8BL1vW/YWPLui8sfV/mUOV/Y7X/8A2SJ/UaJl9P8AT0YlG
ctMXGqoqyh0rLui8sfV/mMu6Lyx9X+ZzUG/Dw2XIrdKy7ovLH1f5jLui8sfV/mc1A4eGcit
0rLui8sfV/mMu6Lyx9X+ZzUDh4ZyK3Ssu6Lyx9X+Yy7ovLH1f5nNQOHhnIrdKy7ovLH1f5j
Lui8sfV/mc1A4eGcit0rLui8sfV/mMu6Lyx9X+ZzUDh4ZyK3Ssu6Lyx9X+Yy7ovLH1f5nNQ
OHhnIrdKy7ovLH1f5jLui8sfV/mc1A4eGcit0rLui8sfV/mMu6Lyx9X+ZzUDh4ZyK3Ssu6L
yx9X+Yy7ovLH1f5nNQOHhnIrdKy7ovLH1f5jLui8sfV/mc1A4eGcit0rLui8sfV/mMu6Lyx
9X+ZzUDh4ZyK3Ssu6Lyx9X+Yy7ovLH1f5nNQOHhnIrdKy7ovLH1f5jLui8sfV/mc1A4eGci
t0rLui8sfV/mMu6Lyx9X+ZzUDh4ZyK3Ssu6Lyx9X+Yy7ovLH1f5nNQOHhnIrdKy7ovLH1f5
jLui8sfV/mc1A4eGcit0rLui8sfV/mMu6Lyx9X+ZzUDh4ZyK3Ssu6Lyx9X+Yy7ovLH1f5nN
QOHhnIrdKy7ovLH1f5jLui8sfV/mc1A4eGcit0rLui8sfV/mMu6Lyx9X+ZzUDh4ZyK3Ssu6
Lyx9X+Yy7ovLH1f5nNQOHhnIrdKy7ovLH1f5jLui8sfV/mc1A4eGcit0rLui8sfV/mMu6Ly
x9X+ZzUDh4ZyK3Ssu6Lyx9X+Yy7ovLH1f5nNQOHhnIrdKy7ovLH1f5m9T7T0ipxUhQJpGxV
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
MfZ5ieQXO6XRy8rnKqr9d4xPT+at6VN0G2UObVN2lien81b0qMT0/mrelTdAyg1TdpYnp/N
W9KjE9P5q3pU3QMoNU3aWJ6fzVvSoxPT+at6VN0DKDVN2lien81b0qMT0/mrelTdAyg1Tdp
Ynp/NW9KjE9P5q3pU3QMoNU3aWJ6fzVvSoxPT+at6VN0DKDVN2lien81b0qMT0/mrelTdAy
g1TdpYnp/NW9KjE9P5q3pU3QMoNU3aWJ6fzVvSoxPT+at6VN0DKDVN2lien81b0qeYlpt9+
5GX8uc3gMoNU3aWJ6fzVvSoxPT+at6VN0DKDVN2lien81b0qMT0/mrelTdAyg1TdpYnp/NW
9KnqUqVhrhQEfLvTgfCiK1U/mbgGUGqq7Yo9SjvmHU+ecj4zW4cOKiXd9bx3pyoTJWFXBrF
NenD35zfqVi3lnMKoyl10Vaqc5AAVXAAAIys1KJJMhwJZrXTUwqpDwuBqJwuX0ISZXKguFa
V9/7kqxE+tzr/chNMZzkrXOVObVdTocdcOdiRJuIvC6I9bvqRMyHmJ6fzVvSpug3yhx6qrt
LE9P5q3pUYnp/NW9Km6CcoNU3aWJ6fzVvSoxPT+at6VN0DKDVN2lien81b0qMT0/mrelTdA
yg1TdpYnp/NW9KjE9P5q3pU3QMoNU3aWJ6fzVvSoxPT+at6VN0DKDVN2lien81b0qMT0/mr
elTdAyg1TdopRqcnBKsz/Oe4np/NW9Km6BlBqm7SxPT+at6VGJ6fzVvSpugZQapu0sT0/mr
elRien81b0qboGUGqbtLE9P5q3pUYnp/NW9Km6BlBqm7SxPT+at6VGJ6fzVvSpugZQapu0s
T0/mrelRien81b0qboGUGqbtLE9P5q3pUYnp/Nmp8yrtN0DKDVN2vCmpiiqkVkWJHkkX+1h
RHK5YaeM1Vz5uQs7XNe1HtVFa5L0VONCvPaj4bmuS9FRUUkbPPc+z8irlvXvKJ0ZjGuIh0Y
VUzH3SQAKNgAACOq9RiSTIcGWa181MKrYaO4GonC5fQhIkBPfCtPn/ck23ei963+5CldWmm
ZWojOqIa60qFH+HPRIk5FXhdEet31NTMiHmJKbzRnSpvg4Jrqn8u3RTZoYkpvNGdKjElN5o
zpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoYkpv
NGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNd
VzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjEl
N5ozpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjElN5ozpU3wNdVzTTZoY
kpvNGdKjElN5ozpU3wNdVzTTZoYkpvNGdKjElN5o3pXab4Guq5pps0mxZiif28GLEjybf97
AiOVysb4zFXPm5CyMe2Ixr2ORzXIioqcaEO5qOarXJeipcqGezjldZ6SVy3qkO76kW5Drwa
5qiYlzYtMUz9kmADdir9C8I6962F7lLAV+heEde9bC9ylgNcXq/UeFMPp/vkK9XvCWgesi+
5pYSvV7wloHrIvuaMHq/U+JRidP88rCADJoxzH7NF/gX3FXpXyVK+qb7i0TH7NF/gX3FXpX
yVK+qb7jTD9WGN6Q2wAbOYAAAAAAV21NppqgzVNlJKlpUJiovexjFjpCuVt3GqKnH6DQmLZ
1uksSZrlkY8pJIqJEmIE2yP3tOVWtTgK5wtFMyuIMUtMQZuWhTMvEbEgxWo9j28DkXOimUs
qAGrU5mZk6bHmJOTWcjw23sgI/BWIvJfxEDaBjl4kSLLQokWEsKI9iOdDVb8BVTOl/oMhIA
AAAR1QrcrTajT5GO2KsWoxHQ4SsRFRFRL1vz5uH0kCRABIAERZauLaSz0tVll9zrHV/9mj8
LBwXK3huTk5CE5flLgAlAAAAAAwP+VKb9I/ocWgq7/lSm/SP6HFoMK/V14XSAAo1AAAK5P+
Esb6LD/E4sZXJ/wljfRYf4nFqOpnidEvoAHQ4wAAAAABrz81uGnTM3gYfeIL4mDfdhYKKt1
/1FSp9sbUVSnwqhJ2MSNLRUwmPSpQ0VUvu4FS/iImckxTMrqCEs5aeWtCyPDSBFk52UdgTE
pHS58NeL509JNgmMgAEoAaMjOTsxPT0GZp7paDLva2BGWJhJHRUzqiXZrjeIAAEgAY48Zsv
LxI70VWw2K9buG5EvAyA0qPVZet0qXqUq2I2DMNwmJEREdwqme5V5DdIAAiItcWFayXoW57
0jSjpjv2HwXOuuuu/neExGaXABKAAAAAB4vApv2c8HpL1SGgvApv2c8HpL1SGWJ+HRgflJg
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
AAAAAAH/2Q==
</binary><binary id="_18.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCANoA8QDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAUGAwQHAgEI/8QAWxAAAQMCAQUKBw0FBQYHAAAHAAECAwQFEQYSIVTRExQVFjFR
VZGSkxdBUlNxcrEHIjI0NlZhc4GUoaTiMzVjssEjQmLC0kV0dYKE8CQ3Q0SDs+Gi8RglZHb
D/8QAGQEBAAMBAQAAAAAAAAAAAAAAAAECAwQF/8QAMhEBAAECBAMGBwEBAQADAQAAAAECUQ
MREhMUIVIxMkFhsdEEM3GBkaHBQiLwI0Px4f/aAAwDAQACEQMRAD8A7MAfFVGoqqqIiaVVQ
PoKtccvLfSSuipYX1atXBXI7NZ9i6ceo0fCOnRX5j9JvHw+LMZxDKcbDjxXcFI8I6dFfmP0
jwjp0V+Y/STw2Lb0Rv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnR
X5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jh
sW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4
d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8
I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y
/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6d
FfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SO
Gxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/
h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUj
wjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5
j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp
0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I
4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob
+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BS
PCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFf
mP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCO
nRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0
jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbeh
v4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcF
I8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V
+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I
6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/
SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/SPCOnRX5j9I4bFt6
G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnRX5j9I8I6dFfmP0jhsW3ob+Hddw
Ujwjp0V+Y/SPCOnRX5j9I4bFt6G/h3XcFI8I6dFfmP0jwjp0V+Y/SOGxbehv4d13BSPCOnR
X5j9I8I6dFfmP0jhsW3ob+HddwUjwjp0V+Y/Sem+6MxXJn2tyN8apPiv8o4bFsb+HddQR1o
vtDeolfSyLnt+HG9MHNJEwmmaZylrExMZwAAhIVfLy4yUlpjpYnK1apyo5U8lOVPxQtBSfd
G+Bb/TJ/lN/h4icWM2WNOWHKjgA9p5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAG3bbZVXarSmpI896piqquCNTnVSJmIjOUxGfKGoCfuOR9fbaK
SqfPTSthRFkbG9cW9aE5kPeqqslW3SpHuNPT4swbp0KiaV+0xqxoijVTzaU4czVpq5KIDJU
/GZfXX2k3SZH1tTSw1DqujgbO1HRtlkVHKi8niNKq6aYzlSKZq7EADeuVnrLVWpSVMaLI9E
VisXFH46NBKpkRcEaxJaqihlemKQvlXO9hE4lEREzPamKKpnLJXAbcNsqp7mtuiYj6hJFZg
i6MU5dPNoJafIyugildvyie+JivfE2Vc5ERMV0YEziUU8plEUVT2QrwALqgLtk8lNTZHT17
7dDWSxSrg1zEVXaWpy4LzkVeb5HW290CWGKiVzkwla3BUw8XwUMIxZmqYiGs4cRGcyrwJ62
5H3K40japHQ08UnwN2cqK70IiKRtytNZaqzetVHg9dLVbpR6c6GkYlMzpieak0VRGcw0wWS
LIW7SQNe59NFI5MUhe9c78EwIiK01s104MbAqVOdmqxdGH0qvNgRGJROeUpmiqO2GkC/ZM5
M1tlvSzVDoZI3QOaronKua7Fq4LiiFKuP7zqvrn+1StGLFdUxCasOaYiZawANmYAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3LTcJLZc4KuNypmOTO
Tym+NOo7EcRO3Hm/GxGdMu34WeUwAA4HWFJ90b4Fv9Mn+UuxSfdG+Bb/TJ/lOj4b5sMcf5c
qOAD2XmgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXH
IJcYboyJUSpWNu59Tv64FONiirqm3VLamklWKVujFPGnMqeNDPFomuiaYXw6tNUS+upq5rp
ldFO1Wou7KrVTDTpzvtLF7nqol6qEx0rTrh2mkdcMrbtcqN1LPJGkT0wejI0RXEZR1tTb6l
tTSyrFKzkcn/ekpVTVXRNM8pWiqmmuJh6raWeGrlSWJ8eEipi5qomOJb7rRWXJ1lJTyWqS4
1EyYI90ipiqYJgnXyIhW7llHc7tTJTVkrXxo5HYIxE0pjzek2IssLzFSNpmzsVGpg2RzEV6
J6StVGJVEe6aaqIzTWXLpIa60yRM/tWYq1vLpRW4J9Ok9JV2TKivjprhb6mmuDkzM5qrow8
X/wDNCr198uFykgkqZUc+n/ZqjUTDk6+RCR48Xvc83dYc7DDP3JMdn4FNmuKIiO2PNfcpmq
ZnsY4VqMncrHpAx1Y6nc5FaiaXtVNPJ48FJuGksOVk1Q6lhqKKuwV73eLFfHyqnKv0KVKnu
lZTXHhGOZd84q5XuRFxVeXl9JJ1GWl6qIHQ7tHGj0wV0bMHdZavDrmYmO2//wDFaa6Yziex
BKmCqi+I+AHUwXiw101tyDqaynzd0imVW5yYppVqf1K9dspbheqZtPVpFmMfnpmNwXHBU5/
pNaO8VkVqktjHtSmkXOc3NTHHFF5fsQ0TCjCiKpqmOebWrEmYiIXTLaOaaktTqVj302Z73M
TFMVRMOT6OQ3L05jK7Jptaqbu17d0zvEvveX/mKvbsqrta6ZKaCZrom/BbI3OzfQaFdcKq5
VS1NXMski6MeTBOZE8RnTg1consjP8Aa84tPOY7ZyWq9wV7svqZ8bJFTPiWJyIuCNTDO+z4
WJLROg8IcyJhn7yRF9bFP8pVIctL3DTJClQx2CYI97EVyfb4/tIqK4VcNeleyd6VKOzt0Vc
VVfHiRsVzGU+EZJ3aYnOL5rhkpDXsyrubp2yI3B+6K5FwV2cmH4Y4fQU+4/vOq+uf/MpLPy
1vb5WyJOxuaipmtjTBfpX6SClkdNK+V64ue5XOX6VNMOiqKpqqZ11UzTEQ8gA6GQAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHbjiJ248747/P3/js
+F8QAHnuwKT7o3wLf6ZP8pdik+6P8G3emT/KdHw3zYY4/wAuVHAB7LzQAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcukACTvlsittTCtM98lNUQtlic/DFUX
xLgerva6e11NJTOlfuromvqccFSNV8SJ9CFIricvNaaZjNFAn6emyZq6mOjiluLZJXIxkz0
Zm5y6ExTlwIqeidS3R9DKuLo5dzcrfHpwxQRXEzkTTMNUFluNpyfstdJTVtRWzOXBWtgzcW
Nw/vKvKvo8RXp0ibUSNgc58SPVGOcmCq3HQq/YKK4q5wVUzT2sYBO0lptqWCO7V087UWdY1
jiRFV+jQiY8npXmJqqintKaZnsQQJi72yiht9LcrbJM6mqFcxWTYZzHJ6DzAmTrKePfLrhL
M5qLIsWY1rV5kx0qV1xMZxCdM55IkE8/J+FmUNFQpO+SlrWtkjkRMHZjkXD7dBsOtFhbQTV
m7VyspJ9xlb7zGRfEreZPTzETi08k7cqyCdmycz8o0ttLMu4PYkqSycrWKmKqpkgt2T9xqV
oKGorGVLsUilmRu5yOTxYJpTEbtPajblXgbFNTI+5RUtQqxosyRyLjhm6cFN3KG20lruLae
iqFniWNHK5XI7TiujR6C+qM8kaZyzRQALKtyjtFxuDFkpKOWViaM5rdHWYKmlqKOZYamCSG
RExzXtVFwLZcKK4XS12+SxyrJSw07WvhikRqskTlVUx0qVqpfUuro2XdahViwY9H/tEZjjg
mPpXDExoxJqn+eLSqiKWqsb0jSRWORirgjsNCr6TyW+fgPilS52/wDe2+XZmGZn52GnHxYF
VqNw3w/eu6bjj7zdcM7D6cNBaivVnyRVTpYgWa5Waw2Wq3OtqKyXPajmRw5uc1MOVyro5cc
E+ghM23Nuao59Q6hxXBzUTdMMNHLoxxFOJFUZwTRNPKWOooqiliglmjzGVDc+NcUXOTnMBM
3+jgpqa3y01RUywzwq5jahyKrEx5Ew0IerdabfNYZbpW1E0bYqjc1bGiKrkwRcEx8eKkRiR
p1SaJzyhCAmrnbKBLRDdbZJPuLpVhkjnwzmuwx8X0GTgu1W630s12kqnT1bN0ZHT5qZjF5F
XHlJ3IyNE5oEExf7RTWptG6mnfOypi3TPcmGKeLBPFoIctTVFUZwrVE0zlIACyAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO3HETtx53x3+fv8Ax2fC+IADz3
YFJ90f4Nu9Mn+UuxSfdH+DbvTJ/lOj4b5sMcf5cqOAD2XmgAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALhYaaK+WqjZO5qLaqjOervHCqZ3tTAhmVUF2yrbU
VqpuE9Smcjl0I3HBEX6MMEIpr3sRUa5W46FwXlPJjGHlMzn2/ppNecQvjHZSNygSFf8Awlu
jnT4LGtj3PHQiLhpVU0faVu9/K2p/3n+qEY6pnexrHTyOa34LVeqonoMaucrs5VVV51UijC
0zn5JqxM4yTGV/yorfS3+RCGPrnOe5XOVVVfGqnw1op00xFmdU5zMhPT/IWl/3138qkCfc5
2bm5y5uOOGOgiqnPLyTE5Zp2q+Q9D/vb/YpMVbbzTMo4snYs2ifA1UkhY1c53jVzl5F9JSs
5ytRucuamlEx0HttROyJYmTSNjdysRyoi/YZzhZ/teMRdq7PXK+w7pKkz97szpE5Hr77T9p
Du+TV3/35v9Sv7o/Fq57sWpgi48h8z3YK3OXBVxVMeUU4OWXP/wBmTiZ+C7srY6PK+FJJUi
3e3sibIvI1yoiovWhq52XG+Vgzp8UXDPzWZnpzsMCpOc5y4ucqryaVMi1VQsW5LPKsfkZ64
dRGzlb7wndZIYn190ZFLJhJUTo1z8MdLnaVw+02r/ZuA7g2k3xu+MaPzszN5VVMMMV5iMRV
RUVFwVORUPTnueuL3K5edVxNspz7eTPOMvN5ABZVMRWC+wJFUUkEypKxHskgf4lTHlTkNzK
57sy2w1T2vr4oMKhUVFVOTBFXn5SAiqqiFqtinljavKjXqiGNVVyqqqqqvKqmWiZqiZ8Gmq
MsoWSGjnumRkMFDHu0tPVuWSNq++RFTQuBXp4JaWd8E8axyMXBzXcqHhr3MXFjlavOi4Bzl
cqucqqq8qqWppmmZsrVMSnctPlC/wCqj/lIikoqmvmWGkgfNIjc5WsTFcOcwuc564ucrl51
XE+se9i4scrV50XAU0zTTFMFU51ZrVe7Lc57ZaWRUUr3Q06tkRG/BXHkU0YvkHN/xBP5EIX
fE/npO0p4znZubnLm444Y6CkYc5ZTPitNcZ5xCdT5Au/4j/kNu62+qv8AR22utse+EZTNgl
Y1Uxjc3Hl6yr5zs3MzlzcccMdGJKUKWZaRu+Kutp59KSJGxHNemOjDTzc5FVE0/wDUXTFWf
KW/lZDvamtEGe16x0uarmriiqnLgpWySvdziuM8LKaN0dNTRJDC16++VE8a/SpGl8KJiiIl
WuYmrkAA0UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7ccRO3H
nfHf5+/8AHZ8L4gAPPdgUv3QopJ3W2KGN0j3LIiNY3FV+D4i6FfvvyjsP1svsQ2wJ04kT9f
RlixnRk59wLdejKzuHbBwLdejKzuHbDsIOjjarMeFi7j3At16MrO4dsHAt16MrO4dsOwgcb
VY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOF
i7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49
wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3X
oys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO
4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbB
wLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3X
oys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO
4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbD
sIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBx
tVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4
WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j
3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLd
ejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys
7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4ds
HAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLd
ejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys
7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4ds
OwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIH
G1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVj
hYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLu
PcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At
16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejK
zuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2
wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7j3At16MrO4dsHAt
16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2w7CBxtVjhYu49wLdejKzuHbBwLdejK
zuHbDsIHG1WOFi7j3At16MrO4dsHAt16MrO4dsOwgcbVY4WLuPcC3Xoys7h2wcC3Xoys7h2
w7CBxtVjhYu49wLdejKzuHbBwLdejKzuHbDsIHG1WOFi7jU1sr6aJZZ6GpijTle+JzUT7VQ
7KQOWvyXqfWZ/MhPGePizi001T5/xphUaKpj6f0ABytwr99+Udh+tl9iFgK/fflHYfrZfYh
rhd77T6KYnd/HqsAAMlwHlz2sarnLgiGo+4afeM0c6qUqrpp7VqaJq7G6DQ4Qf5DRwg/wAh
pXeoX2qm+DQ4Qf5DRwg/yGjeoNqpvg0OEH+Q0cIP8ho3qDaqb4NDhB/kNHCD/IaN6g2qm+D
Q4Qf5DRwg/wAho3qDaqb4NDhB/kNHCD/IaN6g2qm+DQ4Qf5DRwg/yGjeoNqpvg0OEH+Q0cI
P8ho3qDaqb4NDhB/kNHCD/ACGjeoNqpvg0OEH+Q0cIP8ho3qDaqb4NDhB/kNHCD/IaN6g2q
m+DQ4Qf5DRwg/yGjeoNqpvg0OEH+Q0cIP8AIaN6g2qm+DQ4Qf5DRwg/yGjeoNqpvg0OEH+Q
0cIP8ho3qDaqb4NDhB/kJ1mxBVMm0fBdzKTTiU1TlEqzh1RGcs4ANFAAAADy97WNVzlwROV
QPQI+S6YLhHHinOqnjhSTzbesvoqZ7tKTBGcKSebb1jhSTzbesaKkbtKTBGcKSebb1jhSTz
besaKjdpSYIzhSTzbescKSebb1jRUbtKTBGcKSebb1jhSTzbesaKjdpSYIzhSTzbescKSeb
b1jRUbtKTBGcKSebb1jhSTzbesaKjdpSYIzhSTzbescKSebb1jRUbtKTBGcKSebb1jhSTzb
esaKjdpSYIzhSTzbescKSebb1jRUbtKTBGcKSebb1jhSTzbesaKjdpSYIzhSTzbescKSebb
1jRUbtKTBGcKSebb1jhSTzbesaKjdpSYIzhSTzbescKSebb1jRUbtKTBGcKSebb1jhSTzbe
saKjdpSYIzhSTzbes+8KP823rGio3aUkDWp62Odc3DNfzL4zZKzEx2tImJjOAAEJAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA5a/Jep9Zn8yE8QOWvyXqfWZ/Mh
PGk/Lj6z/FI78/b+gAM1wr99+Udh+tl9iFgK/fflHYfrZfYhrhd77T6KYnd/HqsAAMl2hXv
XPazxImJqGzX/ABhPVQ1jgxZ/7l24fdgABmuAAAAAMVRVU9JHulTPFAzHDOkejU61FNV01Z
HulLURTs5M6J6OTrQ5ja6Dwh5X3Gquc0i0NEubFCx2GhVVGp9GhqquHjJhmQ1bYcpqW4ZNz
Iyk0JUwTSrpbjpRNGlMOTHkU1miI5TPNSKpnnEcl7BU7/ltJQXlLLaLY+5V6Ji9rXYIzRjh
oTTo9GGJ7ycy0W7XWWz3K3vt1xjTFI3OxR6JpXDQmnDT6CmirLNOqM8lpBRm+6JWVVZW0Nv
ydmqqmlkVqJHLnIrUVUVy+90ciaPHj9Gnbs2XS3ey3KqZbHNrbazPkpVkwzk08i4cuhdGBM
4dUGuFuBW6DLOnrcjp8oXU+57gj0fBumPvk5G52Hjxb4vGasmX8VNktT3mrt7o5ax7m01Ky
XOV+C4YquCYJ9i8qc5Gio1QtwKRF7oFbR1tPFlBYJrbBUrhHOrlVG+lFRPt8acxnumXklvy
lqLFBZpayeNrdyWKXTI5Wo7DDN0Jgq6cV5Cduo1wuBiiqqaoe9kNRFI+NcHtY9FVvpw5CsZ
OZbSXa9S2a42x9vrY2q5Gq7HHDBcORMFwXE0ckLhaobvlJNHRvo0ppFdUzPqN0R6I5+K4Zq
ZvIq+PlGiYzzNUL0CheEW5VEMtfQZMzz2yJVzp1fgqonKuhFww+03rn7oNLSZN0l7o6NaqO
pl3JY3Sbm6NyIqqi6F5vxG3Ua6VvBRKr3SKmhqIZqzJ6ogttQ7+yqHuwc5vlYYYcmnDEl8p
8sYcn1pqenpX11bV6YYI1wxRdCKuhV0ryaNOCjRV2GqFkBUbJlxLW3xtlu9pkttZI3GNHOx
R2jHDkTDQi9Rr1GX9ZVV9RTZPWKa5x0q4STI5URV+hET6Fw5+YbdWeRrhdgQmS+VFNlPRyS
xROp54HZs0D1xVi+LT400L1KTZWYmJylMTnzgABCQAAD61ytcjk0Kh8AEw12cxHc6Yno8Q/
sWeqh7PSjscE9oACUBHXSRcWRJyYZykiRdz+MN9T+ql6O8yxe60wAbuQAAAAAAABhmq6anc
jZqiKJVTFEe9Ex6xFV007s2GoikcmnBj0VfwOe5eUcVwy7stHPisU7GMfmrguCvXE+ZV5D0
NgszrxZ5qmCopHNdpkxxRVRMU8aKmKFdU82sURy59rpIKeuXcVFkpbLhPC6prq1mayCPQr3
NXNcv0Jj7TzS5dVcFzp6K/WSW2pVLhFKrsW4/To+lPRiTqhXRUuR5e9sbHPe5GtamKuVcER
OcqlwyzrFvc9psdndcJqVMZnLIjERfGidZ9o8qYMoMnLxvmgkglpKeRKimc/DFM12hHYaOR
U5NA1QaJ7VohnhqY90glZKzkzmORydaGQpWTt/tdnyDW5spJKenZK5rYFl3RznKvIi4Jy/g
ay+6RXU9AtdWZNzxQSom95N0VGSKq8iuVujRiqL48PtI1QnbnPkvwKndsuW2qy2q5ut+6Nu
DUcrN2w3NMEXlzdPL9Bpye6HVUdfTtuVgno6KpdhHNI732HPhh9KYpiTqhEUVSvAKzlFlc+
03OC00FufcK+duekbXZqNTT9C8y/YYLTlrUV1XWW2rs0tNcqaB0rafPx3VUTFG44aFXFMOU
aoRonLNbQc1yFvFykyoukctHO+OeZVlV82KUml64Ljy83i5CUfl9W1tRPwDYJrhS064Pnzl
TO9CIn/79BEVRktOHMTkux4kljhYskr2sYnK5y4IhWqfLy2T5MzXpzHxrA7c306ri7PXkRF
8ePP6eYquUuWFdd8lZ4quxT0dPV5i09RirmuwcjsFxROVEXSJqiCMOqZdQY9kjEexyOa5MU
c1cUU9ENkh8kbX/ALu0mS0KTGU5AACAAAAAARVa5HIuCppRSdifukTH+UiKQRN03xaL1UM8
Rvg9ssoAMXSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBy1+S9T6z
P5kJ4gctfkvU+sz+ZCeNJ+XH1n+KR35+39AAZrhX778o7D9bL7ELAV++/KOw/Wy+xDXC732
n0UxO7+PVYAAZLo6v+MJ6qGsbNf8YT1UNY8/E78u2juwAAouAAAAAOWWC5RZBZW3S33dr4q
Wqcjo5s1XJgiqrV0eJUcuOHjQm+PVRecqaS15Nxx1FKuC1M8sTtDcffKmlMME5+VVLfW22h
uUaR11HBUtbpRJY0dh6MeQ+UNsoLZGsdDRwUzXaXJFGjcfThyms10zzmObOKZjlnyc+pq6D
JX3T7nNd3LDDWxuWKZWqqYOVrk5PFoVPSh9pquLKb3WIK+1YyUtHF/aTI1URcGuTHTzq5E+
w6DW22huUaR11HBUtb8FJY0dh6MeQ+0dBR26JYqKlhpo1XFWxMRqKv2Dcjt8TRP2Ub3OETj
FlMuGnfCfzyHzIBqOyuyoa5MUWdyKi/WPL5BR0tK+R9PTQwulXF7o2I1Xr9OHLyqIaKlppZ
JYKaGKSVcXuZGjVev0qnKRNeefmmKMsnGq6KsttXcciqdrs2suESxc2YulMeuNf+VSwe6Ra
1oILDJCkrKGh/sXSRfCiT3uCp9ODV086HRHUNG+qbVPpYXVDeSVY0V6fbymWSKOaN0crGyM
cmDmuTFFT6ULbvOJRo5TDkt0bk/Xb1pX5T3u8umem5wRokitcuhND8MF04c5MW+NI/dlqY8
VXMpWoiry6ImF2o7HabfMs1HbKWnlX+/HC1q9aIbCUdK2qWrSmhSocmCzIxM9U5seXxETie
BFChx/8AnZL9R/8A8kImzUc9e3Limpmq6Z6rmtTldg964J6cMDqW8qVKvfe9od8KmG7bmmf
hhhy8ogoqWmkkkp6aGJ8q4vdGxGq9fpVOXlG5/DQ5DZKi0sybzazKu6UMkSPa+hicuC6V0N
TkXHHrVcTzfKSjpfc8o3UG/N7z3FZGLVsa1y/2eGKI1V0aDq09gs9VU75ntVHLMq4rI+Bqq
q/SuGk2aiipKuJsVTSwzRsXFrZI0ciehFLbsZ5o2+WSj+6uiJkrQYIiIlU3+Rxo5Ryts2X1
ivFa128t7sbumGKNVEci9WcinR6ijpayNI6qminY1cUbKxHIi8+CnypoaStp971VLDPD5uR
iOb1KVpryiIWmjOc1Xhyst18ynZbbXQsrP7JVdcE0bjoXkxbjzePlUo2TUdLb1rqG65RXCx
1EMumKF6ta/BMMdCcv9MMDr1DbKC2McyhooKZrvhJFGjc704cp4rbLa7lIkldbqape3QjpY
muVPtVBFcRyhE0zPNU/c6pras9yr7bNcZ2yORsktYxqJI7FVxRUXFV06cecvJjhghpoWwwR
MijYmDWMajWp6EQyFKp1TmvTGUZAAKpAAAAAEvD+xZ6qHs8Q/sWeqh7PSjscE9oACUBF3P4
w31P6qShF3P4w31P6qXo7WWL3WmADdyAAAAAAAAOcZdVcNBl7ZKuocrYYWse9UTHBEeuOg+
ZYZbUF8s62ezJNVT1b2tXCNUwRFRcEx0qqqiF/qbdQ1j0fVUVPO5qYI6WJrlRObSh8p7bQU
j90pqKngfyZ0cTWr+CFdM82sVxy5djmGU1lmscGTbqiSaGCnjRk00HwoX52cqovPpXD0Hqv
hsVxq6OjXKS9XiWV/wDZMjwfmKvPnYYf/mk6pNDFUROiniZLG5MHMe1FRfSimrR2a126RZK
K301O92hXRRNavWhGhMYnJzm8Q2Ksyqr/AP8AuFXYK+N650kmlki48rcFRUx0Ly+M2cnbxd
K6w5SUVXVur6alpJUiqnIulc1ycq6VxRMdOkvtbZ7ZcnI+tt9NUORMEdJEjlRPSZYaGjpqV
aWClhigVFRYmRojVReXRyDTzRuRlk5S6inq/ckhfA1XpTVzpZETycFTH7M5DeyjyxtN0yGZ
bqVHuqnMiR8e5qiQ5qpiuPJhowTDnL3daCsZZnwZPup6GoRc5ibk3MdzoqYYJjz4FMq7Jlb
drfwVJZLbQNlc3fFXGrGrLguOKo1edMeTqImJhemqJ5zdpZToi5IZJovIrW/ytJX3WPiNs+
vd7ELhS2ajgtlHQzQRVLaSNrGOljR2lERMdPJyGzU0dLWI1KqmhnRq4tSWNHYejEnTyU15T
HkoeU14qpMt22ie7vs9AyJHbvH71z1VuPwvTo5tBoZJrS+EuXedXPWQbi7NqKh2c+Vc1MVx
VNOnHD6Do9barfcVYtdQ09SrPgrLEjsOs9Nt1Cydk7aOnbKxMGyJE1HNTDDBFw0aNA0znma
4yyc8yVqIW5RZUW58yRVNbJJHA12OLnYyY+0iMmlo6SkqaW45R3Gy1EMq51PE5zWu0ImOCJ
8LRh9iHWeDaDfm/d40++U/9fcm5/N8LDEx1dltVwlSast1LUSJ/fkha5etUGlO5DlNXaqab
I2sr7Qtxmg35G+Z1UxqZyNR6K5uaq46XpiTOUuVtmuOQbKCkkV9TIyJFiRi/wBjmq1VxXDD
xYfadHZBFHCkEcTGRImajGtRGonNgakNitECSJDa6NiS6Ho2BqI5MccF0c40z4G5E9rVyQ+
SNr/3dpMniKKOGNsUTGxsamDWtTBET6EPZeGUznOYAAgAAAAACbpvi0XqoQhN03xaL1UM8T
sb4PbLKADF0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgctfkvU+s
z+ZCeIHLX5L1PrM/mQnjSflx9Z/ikd+ft/QAGa4V++/KOw/Wy+xCwFfvvyjsP1svsQ1wu99
p9FMTu/j1WAAGS7RqonS1WazDHNxMe8ZuZOs2v8A3/8A8f8AU2DDapqmZltuTTERCN3jNzJ
1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3
MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQ
GxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1
SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jN
zJ1jeM3MnWSQGxSb1SN3jNzJ1jeM3MnWSQGxSb1SN3jNzJ1nx9JKxiuVEwT6STMVR8Xf6CJ
waYjMjFqmXqH9iz1UPZ4h/Ys9VD2bx2Mp7QAEoCOroXzVbWMwxzMdPpUkTWd+8m/V/1LUzl
KlcZxk0uDqjmb1jg6o5m9ZLAtuSps0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSw
G5Js0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5
Js0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js
0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js0o
ng6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js0ong6o5m9Y4OqOZvWSwG5Js0ong
6o5m9Y4OqOZvWSwG5Js0od9DOxivcjcGpiukk6b4tF6qCp+LS+qopvi0XqoRNUzHNNNMU1c
mUAFGoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHLX5L1PrM/mQni
By1+S9T6zP5kJ40n5cfWf4pHfn7f0ABmuFfvvyjsP1svsQsBX778o7D9bL7ENcLvfafRTE7
v49VgABku1//f8A/wAf9TYNf/3/AP8AH/U2ClPitV4AALqgAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAYqj4u/0GUxVHxd/oK1dkpp7Yeof2LPVQ9niH9iz1UPZMdhPaAAlAazv3k3
6v+psms795N+r/qTCtXg2QAQsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxVPxaX
1VFN8Wi9VBU/FpfVUU3xaL1ULeCv8AplABVYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAEDlr8l6n1mfzITxA5a/Jep9Zn8yE8aT8uPrP8Ujvz9v6AAzXCv335R2H
62X2IWAr99+Udh+tl9iGuF3vtPopid38eqwAAyXa/wD7/wD+P+psGv8A+/8A/j/qbBSnxWq
8AAF1QAAAAAAAAAAVnKi9QIjLbQZU221XJk8ayMqJ489WcqtzV04qiphoLFNNFTQSTzyNii
iar3veuDWtRMVVV8SIhRPdXoaNtjpaxtLClS65U6OmSNM9Uxw0u5fEhZ8sPkXfP+HVH/1uA
+S5YZNQTQwy363tfO1HRotQ33yLyLy8i+IlZ54aankqKiVkUMTVe+R7ka1rU0qqqvIhzOmy
bs7fcMfKtvgdM61OqlmdGiv3TMVyLncujBE9CYF0ySdv7IazrVIk27W6FJEemcj8WJjjjy4
gYbNc0ueUtfNSZR2+429YWbjSU0rHugd/ecqt04KvOp6yuysosmbRVyuraNlwZTulp6aeVE
dKqcmDcUVUxTxEFk7S09H7reUcNLBHBElFTKjI2I1qaOZCV90ShpJ8ibxUy0sMk0dFJmSPj
RXM0eJeVANnJzK+0X6ioEZdKB9xqKdkklLDO1XNfmorkzccdGnqMeXl+myeyTqaqk01sytp
6VE5d1euCdWlfsPWRtst8WS1kqoqGmZULQQKsrYmo/FY0xXHDHSQvup4tp8m5n/F4r7TOl5
kT32lfx6wLZYratnslHb3TPnfBEjXyyOVznu5XOVV06VxUrmV9ZPk7lJY78yZ6Uc8yW+uiV
y5ma/Sx+HIitci6eXDQXIovuxe+yBkib+2lqoWQonKr87xfYigXoHxOTSfQAAAAAAAAAAAG
Ko+Lv8AQZTFUfF3+grV2Smnth6h/Ys9VD2Qa5Y5MU67hPlDbI5YvePY+rYitcmhUVMdC4nP
fdS90WWgqLRLknlDTvX+23wlNIyZv9zNzk0p5WH2kx2E9rrwOE2j3e7vT5rLta6asamhXwO
WJ/p8aL1IXe0+7Rkhcc1tRPPbpF8VTEqpj6zcU68CUL+azv3k36v+p5t91t92g3e3V1PVx+
N0EqPRPThyHp37yb9X/UmFavBsgAhYAAAAADXrrhRWymWpr6uCkgRURZZ5EY1FXkTFdBsGG
ppaeshWGqp4p41XFWSsRzcfQoERkrVTVkNwnffaO8RPrpFp30rmubBEuCtjVW+NE9pu1l+s
9vkmjrLpSU74I0klZJM1rmNVcEVUVeRV0FV9y+NkTMqIomNYxmUFS1rWpgjUTNwRENVbVRX
T3b6ta6nZUNprSySNkjUc1H5yJjgvjRFXD0gXe13m2XunWotddBWRNdmudC9HZq8y8xDZYX
qCG3TW+jyptlluq5jmPqpo0ViYoq4tdzpj4iIyepYLZ7ruUFJRRMp6eaghnfFG3Nbn44Y4J
o8a9ann3Y6GkXIC4Vi0sO+UdCiTbmmeibo1MM7lAvVRUwUlPJU1MzIYYmq58kjka1qJyqqr
yIU6i90q0zZW3G3T3W1x22nhjfT1W+GpurlT3yZyuwXD6C5yxRzxOiljbJG9MHMemKKnMqH
PrNaLY/3Wso6d1upXQx0dOrI1harWqqJiqJhggF/pqmCspo6mmmZNDK1HMkjcjmuRfGipyl
SybrJ8ostr3dVmk3hbH8HUsSOXMV6aZXqnIq44Ii8xb4oo4ImxQxtjjYmDWMTBET6EKP7ki
KzJ25Qv/bxXaobNz53vQLlVXGhoZIY6usgp3zuVsTZZEar1TSqJjympbcpbHeamSmtt2pKu
aNMXRwyo5UTkxwTlT6Sp+6VQwXK/5IUdU3PgmuDmyM8Tm4Jii/QvIvpPmVFuorV7oORtTb6
SGkklnmhkWGNGZ7MxNC4cuGK9YFvuuUVlsatS6XSlo3PTFrJZUa5yc6JyqZrbdrdeKbfNsr
oKyHHBXwyI5EXmXDkUql+usNRlg+22nJWnvV3pqZqz1FQ9kbKeNVVWtznIq4rnKuCc/VE5I
pW0vuuXKmqbZS2pai0pNJTUkufG5ySNRH8iacFXxe0C6tyuybfUx0zb7b3SyIqtalQ1ccMc
fH9C9RtWu9Wu9wvmtdfT1kcbs17oZEdmrzLgcbjtNBL7mtnmkpInSzZRo2R6sTOciyOaqKv
NgiaC0OmWw5VZeS22JkKw2qKoYyNqI1HtidguCAXKsyuyct9dvGsvdDBUouCxyTtRWr9OnR
9pLtcjmo5qoqKmKKnjOSZIWm7SZG07Y8jrRcIq6JZJamprP7WdXaVV3vFVF+3QXfIC1XayZ
KQWy8K3dqd7mx5smfhHji1Mfoxw+xANLJOsnt2Vd8yUqZpJmQOStoXSOVztxk+E3FfE1y4J
6S5FEf8A2vu6x7jp3Kw4TKnixlXBF60L2AAAAAAAABiqfi0vqqKb4tF6qCp+LS+qopvi0Xq
oW8Ff9MoAKrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgctfkvU+s
z+ZCeIHLX5L1PrM/mQnjSflx9Z/ikd+ft/QAGa4V++/KOw/Wy+xCwFfvvyjsP1svsQ1wu99
p9FMTu/j1WAAGS7X/8Af/8Ax/1Ng1//AH//AMf9TYKU+K1XgAAuqAAAAAAAAAACk5TZF5Q5
S58EuVEMVGlSk8MKW5FWPNXFqK7PTHD8SVZY73U2O6W28X2KtWup3QRSR0SRbjnNc1VVEcu
dyp405CwgCAZkwrMglyX33iu8Fo98bnzszc7Nx+3DEy01mrrdkjS2a3XJkFXS08ULKt9Pnp
73BFXMVfGiKnLoxJoAUOnyIyppr7V3qLK+nSsrI2RyuW1IqK1vJoz9Bbqy2Nudiltdxk3ZK
inWGeRjczOxbgrkTThz/QbwAq+TeTd/sL6ammynSutlLHubKZ9C1j81Ewam6I7HRo8XiN7K
6wMynyZrLUrkZJKzGGRf7kjVxavWifZiTQAj7FNcJ7HRyXamWmr1iRKiNXNdg9NCqitVUwX
DH7SGygs1bf8AKuyxSwZtotr1rZZFcmEs6aI2ImOOjSqrhhpwLSAAAAAAAAAAAAAAAYqj4u
/0GUxVHxd/oK1dkpp7YQy5F5L1KrPPk/bpJZffve6naquculVVcOXEofuk+5hLdKi1R5J2S
jpmt3XfT40ZE1MczNzvGv8Ae5EXxnV4f2LPVQ9kx2E9rilo9wGd2a+9XpjE8cVJGrl7TsP5
S72n3JcjbTg7gzfsif36x6yY/wDLob+BdAShhpqSmooUhpaeKCJvIyJiNan2IeHfvJv1f9T
ZNZ37yb9X/UmFavBsgAhYAAAAACNvVJd6yCNtnusdula7F75KVJ0cmHJgqph6SSAFHsORWU
lhqKl8GVcDo6ysdV1LFtiYve5UzsFz9GOH2E3Bk2sOW9TlJvvOSoom0u99z+Dg5Fzs7H6OT
AnQBBU2Ta0+WtblHvvOSqpWU+4bnhm5q4452On0YERlbkbfsqqeqoJMpoYLbO9rm0/B6Ocx
EVFRM/PRV0oXQARFkob9RvmW8XuG5NcibmkdGkGYvj5HLj4iLu2R9fNlK/KCxX1bVVzwNhq
GvpWzslRORcFVMF5OotYA16GKphoYYqypSpqGMRJJmx5iPd41zU5PQV60WWusmXF1mp4M+0
3dralz0c1NxqE0OTDHFUcmnFMdJaQBBX7Jtb3drLXpV7jwVUrPmbnnbrimGGOKYfiL5k2t5
vlkuW+9x4JmfLue55265yImGOKYcn0k6AKldckromU8uUOTt4joKmqhbFVRT0+6xyo34LuV
FRUQ85P5D1Noyunykrb2+4VVVRrBOj4UZi5XtXObguDWojURG4faW8AUuP3PljyWoLJwmi7
zuSV27bh8PB7n5uGdo+Fhjj9hL0+TLIsqLreZZ2zR3KnjgdTLHoajUVFxXHTjjzE6AKPSZG
5TWGF1Bk7lRHBbM5Vhhq6RJn06KuKo12KYp6S1Wejq7fa4aauuD7jUszlkqXsRiyKrlX4Ka
ERMcETmQ3gBVslLLXRXm85Q3aDcKy5TIyKFXI5YadmhiKqKqYryrh9BaQAAAAAAAAAMVT8W
l9VRTfFovVQVPxaX1VFN8Wi9VC3gr/plABVYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAEDlr8l6n1mfzITxA5a/Jep9Zn8yE8aT8uPrP8AFI78/b+gAM1wr99+Ud
h+tl9iFgK/fflHYfrZfYhrhd77T6KYnd/HqsAAMl2v/wC//wDj/qbBr/8Av/8A4/6mwUp8V
qvAABdUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADFUfF3+gymKo+Lv9BWruymnth6h
/Ys9VD2eIv2LPVQ9kx2E9oACUBrO/eTfq/6myazv3k36v+pMK1eDZABCwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAADFU/FpfVUU3xaL1UFT8Wl9VRTfFovVQt4K/6ZQAVWAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA5a/Jep9Zn8yE8QOWvyXqfWZ/
MhPGk/Lj6z/ABSO/P2/oADNcK/fflHYfrZfYhYCv335R2H62X2Ia4Xe+0+imJ3fx6rAADJd
rzo5j2ztTHN0OT6DKyRkiYscinswvpYXrirNP0aCmUxOcLZxMZSzA195QeSvWN5QeSvWM6r
GVN2wDX3lB5K9Y3lB5K9YzqsZU3bANfeUHkr1jeUHkr1jOqxlTdsA195QeSvWN5QeSvWM6r
GVN2wDX3lB5K9Y3lB5K9YzqsZU3bANfeUHkr1jeUHkr1jOqxlTdsA195QeSvWN5QeSvWM6r
GVN2wDX3lB5K9Y3lB5K9YzqsZU3bANfeUHkr1jeUHkr1jOqxlTdsA195QeSvWN5QeSvWM6r
GVN2wDX3lB5K9Y3lB5K9YzqsZU3bANfeUHkr1jeUHkr1jOqxlTdsA195QeSvWN5QeSvWM6r
GVN2wDX3lB5K9Y3lB5K9YzqsZU3bANfeUHkr1jeUHkr1jOqxlTdn5DXmfu67hGuOPwnJyIh
93lB5K9amZjGxpgxqIn0CYqq5SmJiOcPqIiIiJyIfQC6gAABrVTHNeyoYmKx8qc6GyCYnJE
xnDHFNHM3FjkX6PGhkMElHBIuLo0x500Hjg+n8he0pPJH/TaBq8H0/kL2lHB9P5C9pSORnV
ZtA1eD6fyF7Sjg+n8he0o5GdVm0DV4Pp/IXtKOD6fyF7SjkZ1WbQNXg+n8he0o4Pp/IXtKO
RnVZtA1eD6fyF7Sjg+n8he0o5GdVm0DV4Pp/IXtKOD6fyF7SjkZ1WbQNXg+n8he0o4Pp/IX
tKORnVZtA1eD6fyF7Sjg+n8he0o5GdVm0DV4Pp/IXtKOD6fyF7SjkZ1WbQNXg+n8he0o4Pp
/IXtKORnVZtA1eD6fyF7Sjg+n8he0o5GdVm0DV4Pp/IXtKOD6fyF7SjkZ1WbQNXg+n8he0o
4Pp/IXtKORnVZtA1eD6fyF7Sjg+n8he0o5GdVm0fOQ1uD6fyF7Sn3g+m8he0o5GdVnmol3d
d7QrnK74Tk5GobTWo1qNTkRMEPMcTIm5rGo1PoPYmSI8ZAAQsAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAACBy1+S9T6zP5kJ4gctfkvU+sz+ZCeNJ+XH1n+KR35+3
9AAZrhX778o7D9bL7ELAV/KnOpZbbdc1XR0dR/a4JyNdgir+H4muF3/AM+imJ3VgB5jkZLG
2SNyOY5MWuRcUVD0ZLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAABBZb3bgPIy63BHZr46dzY15nu9638VQDQyByrTKqlusmejt63GW
OP6YlXFi9WKfYWw4H7g923rlRWWt7sGV1PnNTnexcU/wD4XO6jvgAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQOWvyXqfWZ/MhPF
eytlSopqezx++nrZmpmpytYi4q70aPaWE1q5YdP3/ikd+fsAAyXDxLFHPE6KViPY9MHNcmK
Kh7AFdbYbpbHK2y3JradVxSnqW5zW+heU9bjldrNr7L9hYAa7sz2xE/Zntx4K/uOV2s2vsv
2DccrtZtfZfsLABueUfhOjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wb
jldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjld
rNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr
7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9
hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYA
Nzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzy
j8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8G
jzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8Gjzl
X9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9x
yu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1
m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19
l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+w
bjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+w5/7
s90uNJkpRWm4TQOqayqWRdwRUbubETRp/xORfsOwEXdsmrJfZY5brbKesfG3NY6VmcrU5kK
1V5xllCYpy8X5hyNu3AeWFruSuzWQ1Dd0XmY73rv/wCFVP0rLFlXur9yqbbuecubnNdjh4s
dBScgMkMnbjVZTtrbNSTpTXqeGFHx47mxF0NT6EOpNajWo1qYIiYIhFNWnwJjNAbjldrNr7
L9g3HK7WbX2X7CwAvueUfhGjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+
wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbj
ldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldr
Nr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7
L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9h
YANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYAN
zyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj
8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8Gj
zlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX
9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xy
u1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m
19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l
+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wbjldrNr7L9hYANzyj8GjzlX9xyu1m19l+wL
T5WvTNWtt0aL/eYxyqn2KmBYANzyj8GjzlE2qwx2+Z9XPO+srZEwfPJy4cyJ4kJYApVVNU5
ytEREZQAAqkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAABRPcz+OZXf8fqPaXsonuZ/HMrv+P1HtL2AAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
yrI7LHJ/Jy65V013uTKSWS+VD2Ncxy4tzsMdCL40UtHhTyI6fh7qT/SWF9otkkjpJLdSPe5
VVznQNVVVfGq4HngS09F0f3dmwCA8KeRHT8PdSf6R4U8iOn4e6k/0k/wJaei6P7uzYOBLT0
XR/d2bAIDwp5EdPw91J/pHhTyI6fh7qT/ST/Alp6Lo/u7Ng4EtPRdH93ZsAgPCnkR0/D3Un
+keFPIjp+HupP8AST/Alp6Lo/u7Ng4EtPRdH93ZsAgPCnkR0/D3Un+keFPIjp+HupP9JP8A
Alp6Lo/u7Ng4EtPRdH93ZsAgPCnkR0/D3Un+keFPIjp+HupP9JP8CWnouj+7s2DgS09F0f3
dmwCA8KeRHT8PdSf6R4U8iOn4e6k/0k/wJaei6P7uzYOBLT0XR/d2bAIDwp5EdPw91J/pHh
TyI6fh7qT/AEk/wJaei6P7uzYOBLT0XR/d2bAIDwp5EdPw91J/pHhTyI6fh7qT/ST/AAJae
i6P7uzYOBLT0XR/d2bAIDwp5EdPw91J/pHhTyI6fh7qT/ST/Alp6Lo/u7Ng4EtPRdH93ZsA
gPCnkR0/D3Un+keFPIjp+HupP9JP8CWnouj+7s2DgS09F0f3dmwCA8KeRHT8PdSf6R4U8iO
n4e6k/wBJP8CWnouj+7s2DgS09F0f3dmwCA8KeRHT8PdSf6R4U8iOn4e6k/0k/wACWnouj+
7s2DgS09F0f3dmwCA8KeRHT8PdSf6R4U8iOn4e6k/0k/wJaei6P7uzYOBLT0XR/d2bAIDwp
5EdPw91J/pHhTyI6fh7qT/ST/Alp6Lo/u7Ng4EtPRdH93ZsAgPCnkR0/D3Un+keFPIjp+Hu
pP8AST/Alp6Lo/u7Ng4EtPRdH93ZsAgPCnkR0/D3Un+keFPIjp+HupP9JP8AAlp6Lo/u7Ng
4EtPRdH93ZsAgPCnkR0/D3Un+keFPIjp+HupP9JP8CWnouj+7s2DgS09F0f3dmwCA8KeRHT
8PdSf6R4U8iOn4e6k/0k/wJaei6P7uzYOBLT0XR/d2bAIDwp5EdPw91J/pN205d5MX24MoL
Zdo6mpeiq2NrHoqoiYryoniJLgS09F0f3dmwptxpKaj92XJ5tLTRQNdQTqqRsRqLodzAdAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAACLyhvDbJa3VKIjpXLmRNXkVy8/0IWppmqcoRMxEZyk
JZ4YG500rI2873IifiYOFLdr9N3zdpyOsramvqHT1UzpZHeNy8no5jAd8fBRlzlyT8VaHY+
FLdr9N3zdo4Ut2v03fN2nHATwUXRxU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/
Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2j
hS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v0
3fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpx
wDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLn
FTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4
Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N
3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOF
Ldr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td
83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHA
OCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucV
NnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS
3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03f
N2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut
2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3z
dpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4
KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2
dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLd
r9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83
aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a
/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2
nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aU27Sxye7Fk5KyRro
1t9QqPRcUwwd4ynEzH8uMlf+D1PseYY3w8YcRObXCxprmYydK4Ut2v03fN2jhS3a/Td83ac
cBvwUXZcVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2jhS3a/Td83accA4K
LnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr9N3zdo4Ut2v03fN2nHAOCi5xU2d
j4Ut2v03fN2jhS3a/Td83accA4KLnFTZ2PhS3a/Td83aOFLdr9N3zdpxwDgoucVNnY+FLdr
9N3zdo4Ut2v03fN2nHAOCi5xU2dj4Ut2v03fN2nptyoXuRrK2nc5eRElaq+040BwUXOKmzt
wOcZJ5S1FDWxUNTK6SllcjEzlx3NV5FT6PoOjnFi4U4VWUunDxIrjOAAGTQKV7oyruVvbjo
V0i4dkupSfdG+Bb/TJ/lOj4b5sMcf5cqOAD2XmgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAABc7Pvew5I8NpTsmq5nqjFemOb75URPRoVTPEr0R2dq9FOqVPiRjpmJK5Wxq5M5U
8SeMs9Rk5Zn2GpulurqidINHv24Jjo0aURfGRd4yglvcUSVFNAyWNyrukTcFcnMuOJNWj/y
6uf1rvYwyxJqiIns5r0RTnMdvJTwbNuilmuVPHDAk8iyIqRryOwXHBfoOj0qXbfkcFe+0sg
foWmZjnYYeJF5S2Li7aMPD1uXgttJR22jy/mpqhsbYGqqxNf8ABRyoiomn0rh9hI3/AIwx0
lW2Wjo6micxyI6Jvvo2+JdPN9pE4/OIiO1MYXKZUEFsyGbSudWfsN/5qb33ZMUTQvJ9uGOG
k+5UOvqW/c7pR0zo90RW1MCci6dC/R9iE7v/AMmjJG3/AMalSABuyXCbIWmgeyOa/QxySfA
Y+JGq70e+K/ebPUWSu3rOrXYtzmPbyOQv17s1DdrnQpU1u4ysaqsiTDGRMcVwIK7Kl/y4p7
fPA6KOFcxzXLpciIrlXRzocOFjVTzmc+WcurEw6Y7IU4HVHQXOO4NpoLfQpaUwarV+EqeNc
OT7CtJk9SLl26hzP/Co3dtz8WGGOb6MfwNKfiYnPO2alWDMdioH1mGe3O+DjpLhc8sX01wn
oIrfSuooXrEsbmaXYLgv0J1EBZbvLaahzooIJd1waqTNV2GnxaUNaa65pz0/tSaaYnLNlyi
4F33FwJ+x3P3/AMP4WK+Vp5MCILX7oEbI7pTJGxrEWDkamH95TeoqmG3ZAU9ctLDNMx65m6
NxTOz3Iir6DOnF04dMxGea80Z1zHZkowLpfFjvmSFPeHQMjqmvRrlYmGPvlaqejkUmn26vt
FJT0tipKRyI3+2km5Xr/wB4kT8RERzjn7EYOc9vJzWnjbNUxRPkSNr3o1XryNRV5S2NyGo3
UzqluUECwNXB0qRpmp9ufgY8ubZDSyUlZHCyGSoaqSsZyZyYafx/AyUH/lrXfW/5mkV4lVV
NNVM5ZzkmmiIqmmqM8lYuFNHR18tPDUNqWRrgkrOR2j0qaxP5FMbJlJE17UcmY/QqY+ItNr
r4rjebpZX0VO2liV+hrdLlzsFVfSq4lq8aaJyyzyhWnDirnnk5uC4ZJU9PRW+53eSJJpKXF
saO8WCY/jo0m/Q3Jt7yZu9VPSQR1LIpEc6NmGd7xVRdPjJqx8pnKOUFOFnEc1ABcchGQOpb
q6oibIxrGKqKmOjB+JG3HKyW4W+WgWgpoYHYbmkbVRY8FRfR4sORC25M1zTEdiuiIpiqZ7U
ADpqWyvtFvpqex0lI5+bjPLNyuX/vEjcoLFTz3W0SugZA+qkRlSyPkVdCrh+KY+gzp+JpmV
5wJiFOtdIyuulNSSOc1s0iMVW8qIpsX+2xWm8TUUL3vZGjVRz8MdKIv9S5VN6igyqp7GlDB
vaNzEaqNwcx6oiorfEiaUK/lRVOoctJapjGPdFmORr0xavvE5RRi1VVxy8Myqimmnt8WnPw
Jxag3H96Z/8AafD5MV/5eTAhy7X2oS4ZDU1c+CGOWWVMdyZgmhXJ/Q18h7XFUMq698DJ5Yf
ewsfyZ2GOzSTTi6aJqm5OHnVFMWVEHTVt1fdrfVU98pKRrs3GCSHlaun/APCHsEkNLkPWVj
6aKd0Uyq1JG4oq+9wx+jEiPiM47PH1Jwcp7VKJS0WKa701XPFMyNKVqOcjkX32hV0dRYMoJ
W3bIujussMbKjdMMWJhoxcip6NCKb2S98nrrZXufT07N6RNzdzYqZ3vXfC06eQivGq29UR4
5Jpw6deUy56CSu97mvLolmp6eHcscNxYrcccOXFV5jbtlws8GT1ZTVdK2Stkz9ykWFHK3Fq
InvuVNOJvNVUU5zDKKYmcs0EADRRLZO2Lh6rlg3zuG5x5+dmZ2OlEw5U5ySmyTtkUT3JlNS
Oc1qrm4NxVU8XwzL7nn71qvqP8yGCvpskW09Q6nrqp1SjXKxrmrgr/ABJ8HnOSquvcmmJnL
l2Q6KaadETl+1ZBcbMkNjyRfe208c1XK/NjV6Yo332b/RVPVydFlDke+8SU8cVZTPzXOjTD
O0oip6MFRS+9/wBZZcs8lNrl288s1MBeaqrbkhY7e2ipYX1NU3OkkkbjjgiKvJ62gxX62Ul
yfZrhDEkHCD2Mma3R8LBcfTyiMfOeccpTOFy7eapUFO2quFNTPVUbNK1iqnKiKqIb2Udqis
11Wkhke9iMa7F+GOn0FuuF4hocoaOxsoIFpUdGnwdLXKvvVbzYaCv5dfKR31TCtGLVXXHLK
JhNVEU0zfNXAAdTAAAAAAAAAAAAAACZj+XGSv8Awep9jyGJmP5cZK/8HqfY84vjO7H1dPw3
elDAA7XMAAAAAAAAAAAAAAAAAAAAAPqKrXIqLgqaUO2nETtx53xv+fu7PhfEAB57sCk+6N8
C3+mT/KXYpPujfAt/pk/ynR8N82GOP8uVHAB7LzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAs1lvtuWyvst4Y/e6qqxyMTHN04+3T9pWQUroiuMpWpqmmc4S15bYo4oo7Q+eV+
cqySS6NHiRNCew3cnr5QUtqqrVc2SLT1Cq5HRpiqYoiL7EK4CJw4mnTMpiuYqzhPRV9ps9/
pK22b4mgjRd0SXDO0oqLhyeJSWddsmo7+l6SoqpZnrjueZ71i4YY6fo8RSwVnBie2ZsmMSY
8E9WVtouWU9TVVazbymRM1zEwci5qJjh9ikpSXixWOgqWUNbV1j5mZrYpGqjWrp+hOfSU0C
cGJiImeRGJMTmk7Q2yyMmZdpJ4XKqLFJEmOHLjjy/R4iYud7tkOTb7PQVNTWLK5FWSZF94i
Ki4Jj6OT0lUBNWHFVWcyiK5iMoAAaqLLlPlBT19woqq3PejqZMcXNwwXFFQyXfKKhmuVBeK
FHJVw4JNG5uCKmHJj9qp1FWBjGDTERFmk4tU5+a31tTkldqla+oqKynmkwV8TW8q9S+0iYL
vS2vKRK62xP3o3BqRvX3zm5uC8/jxUhgKcKIjLOZgnEmZzW6sqMjqypfcZH1e6yLnOp2tVE
c76dH9SGsyWPMe66yVLJEcix7iiYYfToIoExhZRlnJNec55QuV8uuTN7ek801WkscatYjG4
J41THRzmzRPoWe57TNuLHuppJFa5Y/hN/tHYKnoUohvuvNY6zstKqzezHZyJm6ccVXl9Kmc
4H/MU0z4rxi85mYTF9vdt4Egs1n3R0LHZzpHoqY8q+Px4ribE14sOUFJAt4kqKWqhbmq+JM
Ud+C+wqALbFOXL8q7s5pe5OsSVdJHQb4dTsd/4iSTlemKcn2Y+JCxRXrJSK0yWti1O9pVzn
Jmrjjii8v2IUYE1YMVRETM8kRiTEzMRCftNxtlrypWriWRKFqORmKYu0ptNqy3+gocpbjXz
OekNQr8xUbiul+KaPQVYCrBpqzztkRiTHYsuTN4bSLXU09JNU0VQirIkTc5WY6MVTmVFJ+k
WgjySuqUFLNT0+5SIj59DpHK3Dq5EKRbLvWWid01FIjHPbmuxaioqfabFyymut1g3CpqE3J
dKsY1GovpMq8GaquXZy/9k0oxYinm3MmbzR2ujuUVU56OqY0bHmtx0ojtqFeAOiKIiZm7Ga
pmIiy3PvNjv1BTR3l9RTVNO3N3SJMUd+C83MRtXWWi311DNZd3kWnfnyPm/wDU0pgn4L4k5
SDBSMKI7J5WWnEmV3mvmTEl1hvK74dVJgix5uCN8WcvOqJzL4kIe411ouuVEtVUvnSie1NL
G4OxRqJyekgARTg0084mbJnFme2F1lu2S01litLpqze8Ts5qoz32OKry4fSR9ovlutNZW0m
ZLNa6pM3FfhomGH0c6laAjApiJjOeZOLOcSsszMkYIZZIamtqZFYu5xuRURHYaPEnj+kxUV
5o4Mjqu1vc/fEsiuaiN0Ye98f2KV8FtqMspmZRuT4QsFReaOTIuntTXP3zHJnOTN0YZzl5f
tQ+ZLXyktO+4K1j3QVTEaqsTFUwx2kABtU6ZpujcnOJskrw2zNdFwRJUPRcd03bxcmGGj0m
3bK2zQ5PVlPWU7X1z8/cXrFiqYtRE0+LTiQQJmjOnKZIqynPIABoon8kbxSWavnmrFejHxZ
qZrcdOKKQUjkdI5yciqqnkFIoiKpqutNUzEQstkvdvWyy2W8JIlO52cyWNMVbpx9uk+3e92
yGxJZbMkj4XOzpJZEwV2nHrxRPF4isgps06tX3+625OWS2R3myXi0U1He3TQzUiYNliTHOT
DDmXlREx0eI1r5lJFUVNDHbY1ZTW9Wuiz9GcqYYfZoK4BGDTE5k4tUxku1TfcmauvprxIlR
vuPN/skTQmC8q8+H0L4iByouVNdry6qpVcsaxtb75MFxQhwKMGmic4KsSaoykABszAAAAAA
AAAAAAAAmY/lxkr/wep9jyGJmP5cZK/8AB6n2POL4zux9XT8N3pQwAO1zAAAAAAAAAAAAAA
AAAAAAAAduOInbjzvjv8/f+Oz4XxAAee7ApPujfBt3pk/yl2KT7o/wbd6ZP8p0fDfNhjj/A
C5UcAHsvNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzVNHUUax
pURLHujEkZj/AHmryKhhLDLG+8ZLUb40z6iim3u5PGrHfB/HBClVWmYstTGeaEko6iKliqp
IlbDMqpG9f72HLgSDMlr3JCkrbfJmqmKYuai9SribOUvv7pTWimXOZRxtgbzK9eVevDqMtT
TWq23JIquvuNTXxuTOkgRuCO5kVy4qZ7lUxEx4r6IznNXXsfG90cjVY9q4Oa5MFRSRhycvF
RKscVDIrkajlxVETBeTSq4G1lm1rcqKrNTDFGKvpzUNjLKrnWspaZJHJEymY5GIuhVVOX2D
XVVpy8TREZ5+Cv1NNNR1D6eojWOWNcHNXxGI9PkfI9XyPc9y+Ny4qeTaPNk2qG21lzlWKip
3TORMVw5E9KroQyVdmuNDG+SqpJImMcjXOXDDFeT0knG51PkFI+FVR09ajJVTlVqNxRPRyd
Z6jmll9z+dkjlc2Osa1mPiTBFw/H8TGcSrPyzya6Iy+2aClpKiCnhqJYlbFPjubl5HYaFE1
JUQQQzyxK2OdFWNy/3kTlJi8/Jew+rP/Mh6vLHPsFgY1PfOjkRE58XITGJM5ecz+s0TRHP6
R/GrFkve5oUmZQPVjkxTFzUVU9CriR7KSofVpSJC7d1dmbmqYLnc2knayktVsrUhuFfcKiu
jzc51OjcGLhiiIrlxN25tRPdFpVRMFc+JVx5ccEKxiz+s1pw4Qbcmry+B8zbfKrGKqLyY6O
XBMcV+w1qC2Vlykcykp3TKzBXI3DQhN0tXO/3Qs90rlXfb4+X+7iqYejAhLgiR3iqa33qJU
PRET1lLU1VTym2as00xzS1+yWqqKtqHUVJK6iiajkkc5F0I3Fy+0hqKgqrjMsNHC6aRG5yt
bzc/4oSuWarxoqkxXkZ/IhBoqpyKqegYWqcOJmSvTFcxCQvrHR17WOt+8HJE1FixRcf8Wjn
JCzZL1NdS1M89LLmLSufTOa5Ez3/3UPGWP73i/wB1j9h9yYVdxvGn/ZspWaqtqJhaIjcylG
Vtprrc6NtZTOhWXHMzlTTh/wDzQw1VJUUNQ6nqYnRStwxa7xYpiYVVV5VLVNROykp7PVsxW
R7t6VKpyordKO7OKl6qpoy1KRTFWeSt1FHUUrInzxLG2ZmfHj/ebzmR9srY6Ble+nclM9cG
yaMF/wC8Dayjrm196mdFhuEWEMSJyI1ujR+K/aep7ldJLBDQywKlCxUVkm5KmK4r/e5Ocaq
sokypzlEgA1USNont8cyx11t35urmtYu7ujzOfk5eVOokMp2WmgrKi20lq3KWNW4VG+Hu5U
Rfgr6cOUhKT45B9Y32krll8qqz/k/kaYzH/wAsfS/0axP/ABLSpbLcq1kb6akfIyVVRrkww
XDl9H2mOvttZbJkhrYHQvVMURcFRU+hU0KTFVPJHkJQRMerWyVD89EXlwVTzdHOlyPs75FV
zmvlairy4Y8n4IRFdWflnkTTGX2zZIckK11mqZZaKVK1sjUiZnJpb4yCrKGpt8+4VcLopME
XNXmJiiVeJVy0r8YjIDHHlJw9Wc5yivTlGUAANmYAAAAAAAAAAAAAAAAAAAAAAAAAABMx/L
jJX/g9T7HkMTMfy4yV/wCD1PsecXxndj6un4bvShgAdrmAAAAAAAAAAAAAAAAAAAAAA7ccR
O3HnfHf5+/8dnwviAA892BSfdH+DbvTJ/lLsUn3R/g270yf5To+G+bDHH+XKjgA9l5oAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpY77NY5ZXxwsmbKiYsfyY
ouKL9hFgrVTFUZSmJmJzhlfUyyVbqpXruzn7orv8AFjjj1kzNlLDNNvx1op+EME/8RnOVMU
/vZnJiQIImime1MVTDdu9zfd7jJWyRtjc9ERWtXFEwTD+gutzfdalk742xqyJseDVx5PGaQ
JimIyy8ETVM5gALISdrvO8KeaknpWVdJPgr4XuVulPGipyKS1RWx1mRVTuFLHSwxVTWsjYq
rhoxxVV0qukqx6SR6RrGj3IxVxVuOhV9BlVhxM5rxXMRklqS+xR2xlvrrdFWxROV0KuerFY
q8ulOVDFdL5NdI6RjoY4d6I5GbloTBVTBMPFhghGAtt0555I11ZZJ6bKWGolSrmtFO+4Iif
8AiFc7BVTkVWciqa9Tf5qm+xXZ0LEkiVq5iLoXNIkERh0x4JmuqW9DdHw3vhRI2q/dllzMd
GKqq4fia1TOtTVS1CojVle56onixXExAtFMROaucpmrygZcIV35bKeWpWPM3wiua7kwRcEX
BVNGgq6alV++KCOrzsM3Pe5ub1KagIiimIyhM1TM5pu45QU9za501pgSZY9zbKkj8WoiaNG
OGg0bVdJrTVOmiYyRHsWOSORMWvavKimkBFFMRp8Capmc25cKymq1YtPb4qTNxztzc5c7r/
70lgtK12TuTtxqalqwb4RrKZjtDleqL75PQi/gVM9ySyS4bpI5+GhM5yrgVqw9UafBNNeU5
+LwS0+UEs+T8NnWBiRxKipIiriulV/qRILzTE5ZqxMx2AALIb9ruMFvc90tvhq3KqK1ZFVM
zDHkw/70G1d7/Fd2yOfbIIqiRUVZ2qqu0f8A4mBDApNFM1avFbVOWTdmub5rRT25Y2oyCRz
0fjpXET3N89opbcsbUZTOc5Houlc5cTSBOmEapSNsvD7dDPTvp4qmmqMN0ilxwxTkVFTkNa
tqIamo3SClZSswRNzY5VT06TXA0xE5mqcsgAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAEzH8uM
lf+D1PseQxMx/LjJX/g9T7HnF8Z3Y+rp+G70oYAHa5gAAAAAAAAAAAAAAAAAAAAAO3HETtx
53x3+fv/AB2fC+IADz3YFZyppIa68WWlqGq6KR8qORFwx0NLMV++/KOw/Wy+xDXBnKvP6+j
PE50/j1OJNi1Z/eu2jiTYtWf3rtpYAN7E6pTt0WV/iTYtWf3rto4k2LVn967aWADexOqTbo
sr/Emxas/vXbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8AE
mxas/vXbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8SbFqz+
9dtHEmxas/vXbSwAb2J1SbdFlf4k2LVn967aOJNi1Z/eu2lgA3sTqk26LK/xJsWrP7120cS
bFqz+9dtLABvYnVJt0WV/iTYtWf3rto4k2LVn967aWADexOqTbosr/Emxas/vXbRxJsWrP7
120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8AEmxas/vXbRxJsWrP7120s
AG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8SbFqz+9dtHEmxas/vXbSwAb2J1
SbdFlf4k2LVn967aOJNi1Z/eu2lgA3sTqk26LK/xJsWrP7120cSbFqz+9dtLABvYnVJt0WV
/iTYtWf3rto4k2LVn967aWADexOqTbosr/Emxas/vXbRxJsWrP7120sAG9idUm3RZX+JNi1
Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8AEmxas/vXbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu
2jiTYtWf3rtpYAN7E6pNuiyv8SbFqz+9dtHEmxas/vXbSwAb2J1SbdFlf4k2LVn967aOJNi
1Z/eu2lgA3sTqk26LK/xJsWrP7120cSbFqz+9dtLABvYnVJt0WV/iTYtWf3rto4k2LVn967
aWADexOqTbosr/Emxas/vXbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7
E6pNuiyv8AEmxas/vXbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pN
uiyv8SbFqz+9dtHEmxas/vXbSwAb2J1SbdFlf4k2LVn967aOJNi1Z/eu2lgA3sTqk26LK/x
JsWrP7120cSbFqz+9dtLABvYnVJt0WV/iTYtWf3rto4k2LVn967aWADexOqTbosr/Emxas/
vXbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8AEmxas/vXbR
xJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8SbFqz+9dtHEmxas
/vXbSwAb2J1SbdFlf4k2LVn967aOJNi1Z/eu2lgA3sTqk26LK/xJsWrP7120cSbFqz+9dtL
ABvYnVJt0WV/iTYtWf3rto4k2LVn967aWADexOqTbosr/Emxas/vXbRxJsWrP7120sAG9id
Um3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8AEmxas/vXbRxJsWrP7120sAG9idUm3R
ZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8SbFqz+9dtHEmxas/vXbSwAb2J1SbdFlf4k2
LVn967aOJNi1Z/eu2lgA3sTqk26LK/xJsWrP7120rtxooKX3Wsm6OJqpCy21DERVx0YO8Z0
Iot5/wDOfJ3/AHCo9jitWJVV2ymKKY7ITXEmxas/vXbRxJsWrP7120sALb2J1Sjbosr/ABJ
sWrP7120cSbFqz+9dtLABvYnVJt0WV/iTYtWf3rto4k2LVn967aWADexOqTbosr/Emxas/v
XbRxJsWrP7120sAG9idUm3RZX+JNi1Z/eu2jiTYtWf3rtpYAN7E6pNuiyv8SbFqz+9dtHEm
xas/vXbSwAb2J1SbdFlf4k2LVn967aOJNi1Z/eu2lgA3sTqk26LK/xJsWrP7120cSbFqz+9
dtLABvYnVJt0WV/iTYtWf3rto4k2LVn967aWADexOqTbospWU2S9qttinq6WF7ZWK3BVkVe
VyIXUgctfkvU+sz+ZCeJrqmqiJmfGf4rTTEVTl5f0ABi1Cv335R2H62X2IWAr99+Udh+tl9
iGuF3vtPopid38eqwAAyXDDLV08K5skzGLzK7SaV5r3UsTYolwkk8fMhXFVVXFVxVfGYYmL
pnKHZg/DbkapnktvCNHrMfWOEaPWY+sqQM9+bN+CoutvCNHrMfWOEaPWY+sqQG/NjgqLrbw
jR6zH1jhGj1mPrKkBvzY4Ki628I0esx9Y4Ro9Zj6ypAb82OCoutvCNHrMfWOEaPWY+sqQG/
NjgqLrbwjR6zH1jhGj1mPrKkBvzY4Ki628I0esx9Y4Ro9Zj6ypAb82OCoutvCNHrMfWOEaP
WY+sqQG/NjgqLrbwjR6zH1jhGj1mPrKkBvzY4Ki628I0esx9Y4Ro9Zj6ypAb82OCoutvCNH
rMfWOEaPWY+sqQG/NjgqLrbwjR6zH1jhGj1mPrKkBvzY4Ki628I0esx9Y4Ro9Zj6ypAb82O
CoutvCNHrMfWOEaPWY+sqQG/NjgqLrbwjR6zH1jhGj1mPrKkBvzY4Ki62pcaNVw3zH2jYa5
r2o5qo5F5FRSlG3b6+SimRcVWJV9+3+vpLU4/PnClfweUZ0ytYPiKioippRT6dLzwAAADFU
TpBHjyqvIhEzERnKYjOcoZQRL55Xri56+hFwPOe/yndZz8RFm2zN0wCHz3+U7rGe/yndY4i
LJ2fNMAh89/lO6xnv8AKd1jiIsbPmmAQ+e/yndYz3+U7rHERY2fNMAh89/lO6xnv8p3WOIi
xs+aYBD57/Kd1jPf5TuscRFjZ80wCHz3+U7rGe/yndY4iLGz5pgEPnv8p3WM9/lO6xxEWNn
zTAIfPf5TusZ7/Kd1jiIsbPmmAQ+e/wAp3WM9/lO6xxEWNnzTAIfPf5TusZ7/ACndY4iLGz
5pgEPnv8p3WM9/lO6xxEWNnzTAIfPf5TusZ7/Kd1jiIsbPmmAQ+e/yndYz3+U7rHERY2fNM
Ah89/lO6xnv8p3WOIixs+aYBD57/Kd1jdH+W7rHERZGz5pgEfT1jmuRsi4tXxryoSBtRXFc
ZwyqpmmeYAC6oAABjfPFGuD5GovMqmtX1LompGxcHO0qvMhGGlNGfNjXi6ZyhNb6g863rG+
oPOt6yFBbbhTemya31B51vWN9Qedb1kKBtwb02TW+oPOt6xvqDzreshQNuDemya31B51vWN
9Qedb1kKBtwb02TW+oPOt6xvqDzreshQNuDemya31B51vWN9Qedb1kKBtwb02TW+oPOt6xv
qDzreshQNuDemya31B51vWU+60803urWO4xxudRwUUzJZkT3rHKi4IqksBtwb02TW+oPOt6
xvqDzreshQNuDemya31B51vWN9Qedb1kKBtwb02TW+oPOt6xvqDzreshQNuDemya31B51vW
N9Qedb1kKBtwb02TW+oPOt6xvqDzreshQNuDemya31B51vWN9Qedb1kKBtwb02TW+oPOt6x
vqDzreshQNuDemyaSqgX/1WdZlRUVMUXFCAM9JUugkTFfeLyoROHZNONz5pkAGToQOWvyXq
fWZ/MhPEDlr8l6n1mfzITxpPy4+s/xSO/P2/oADNcK/fflHYfrZfYhYCv335R2H62X2Ia4X
e+0+imJ3fx6rAADJdXL/APH2/Vp7VIwk7/8AvBv1ae1SMODE78vawPl0gAKNgAAAAAAAArO
TmUFXc7tdaerWJsNG9UYrUwwTOVNK48yFmOfZNfvDKn1ZPa8vTETEsMSqYqpyXV93tkUTZZ
LjStjcuDXLM1EVebHE1coLq+35O1FyonRyOYjVY5ffNXFyJ4uXQpT8lcnbdcsl6ysrIllmR
Xtjdnqm5ojUVMET6VMduke/3LLm1zlVGVCNai+JM6Nfaql9ERP3Z71U0847YmVxtWUFLPa6
OWvraWGpqI0csayI3HHmRVJd8jI2K972tY1MVc5cERDnU2T1uZ7niXPclWs3Nsm6q5cdLkT
DDkww0GC9VlTPk3k7RKskjJ2rnta7BZMFRGp+PsG3EzyN6qmP+o8M3RKa6W+tkWOlrqed6c
rY5WuXqRT2+uo45XxPq4GyRtznsWREVqc6p4k0oc6uFqq1fTT2bJqst9RA9F3RJM7ORP6me
otjL37o1RS1SvZE+Jj5WMXBVwjYub14dQ24unfq7Muea0V9zreFrc231NE6iqFTdFdK3Ocm
dh7zTp0cxjlyrhiypZZ1SHcVYquqFlTBq4KuHNyphykJf6OGgyrybpKdqtiicxrUVccE3Qx
VVnt8nulR0b6ZqwSxrI9mK4OcrXLj1kxTTlzsrNdcTyvC9VVdSULUdV1UNO13IssiNx6z1T
1NPVxJLTTxzRryPjcjk60OcTvdc8tLi+rtc10bTudGyFj81GIi4Ivo/qp7pI7rZKu5VlHbK
mgopKZ6oyRc5I3I3QuP0Ljh6SNvl281uInPs5L5PdaGN8lO2tp98tauEW6tzsUTmxxI3I69
1d+tUtTWJGj2TrGm5twTDNavP9JXsnclrZcslH19SjnVUu6OSbPVFjVFVE0cnix085Ie5p8
n6j/enfyNImmmKZyKa66q6c+yYXAAGTqAAAAAAAAAABcKT4nB9W32GYw0nxKD6tvsMx6Mdj
wau9IACVQj7gq7q1PFmkgR9f8Atm+r/Uxxu41wu81QAcTrAAAAAArOUeXVuyfq0oUhlra1c
MYYf7uPJivOvNpLMc19z6NtdlpfbhUpnVEb3Ziu5W5z1xw+xET0F6Iic5nwUqmeUQnrH7oN
Bdbk221VJPbqt64MZNyOXmx8S+lC2ERd8mbVeqymrKyJ27037ORj1aqacU5OXBSqXarumVO
XMuTtFcZbfR0cedK+FVRz8MMeRUx0uRMPtJ0xV2cjOY7XQgc7tlVdck8uaewVlymuFFWsR0
bplVXMxxwwxVcNLVTmwXE1bay+5R5VX62tv9XSUkFTIuLHqrkRHuRrW6fep6OZBt+Zr8nTg
c5yQqLvVVOUGTVRdJ5nUzXsgqVkXPY5HK3FF5cMcFwx8RjsmVdZBkBeXVtTK+4UL1ia+R6q
9FfobpXTijs7qE4cmuHSgcuuF9vNhyGtcb6+da+7OdK6omer3RR6MERV0poVvo0kbVXp2T7
6autGWE92lz0SenmR+a5PGvvtGHi59JMYUyicSHYwc1uNfeLv7oEdut12qKKnq6Vj9DlVI2
rHnKqNxwx+n6TJYpbrYfdFTJ+e6z3ClnjV2M7lVU94rkXSq4Low0cpG3y7U61ttOUSXS719
vShng3k9W7q9PeyYOVMU6sSZOd2XKCtpb7ldPU1M9RDQbq+GGSRVa3B7sERPFyIhXqa6vu1
HNcbjlrUUNwVXLFTRpIjG4cie90Jj9H4ltvOUa+TsoOTV2WF1r/c7hqkrJYa2C4NgkmhcrH
SN3Nyoq4f96DNlLTZRWG1UeUS5R1UtRNIxHwoqpG1XNVyIiY4KiYYaU0kbU9kybjqYOf5WX
66Vtxs1httStFJcYmSzTRqqKiO0YIvKiJgq/ToNu12LKmw5RQJHc5bpapEwn3xJpZy8iKqr
o0Lo5SujlnMp1c+ULqDkCZRLlLc6ye55Uz2amY7ClggR+lPEq5v2cvP4iye51lHV3CorrTW
Vm/t6++gqVxxezHDTjpXxKmOnSWqwpiMyK4mV7ABkuAAAAABLQrjAxV8lCJJaD9hH6qHR8P
2ywxuyGQAHW5gAARNx+NL6qGqbVx+NL6qGqdNPZDir70gAJUAAAAAAo+UuU1/pMrYbJZ2Uz
3TRI5iSt0qulV04p4kLwc+u3/nDbPqU/leVqaYeWc5lTlblZk5NDLlDa6d1HK/NV8K6UX6F
Rypj48FTTgXla6kbRNrX1EcdM5iPSV7ka3BdKLipVvdQmhjyT3J6puks7EjTx4ppX8PaVG7
uqp6nJq0VFNNVwx0MUi0kbs1ZFVF0Y+hETrK56ZyWimK4iex1WjulvuOdvKup6nN+FuMrX4
enBTxWXi2W+RI624U1O92lGyytauHoVTnDbXcYMpLfcLNkzWWtsb0SdqvzmvbimP4Y4mO4W
6utOUNyrbrk8t6pqmRXNla5y5jcVwwVuObowTSni0E6pNuM+10e6VsiWKests9O6RI86KR8
jdzVfpdjhh9p5sdZUzWGCquctPuytcsskT2rHoculFRcOTDxlGtktqd7nV8jtctXg1udJBU
q1VjVebBORcPwI661c0XuX2OljerI6iWTdFTxoj3YIv0Yrj9g1eJt+Hm6dHfLRLE+WO6Ub4
2KiOek7VRqryYriZ311HE6JslXAxZ8NyR0iJunq8/KnIc4y5yRtFjybgqre10cqSNje5ZFX
dkVFXSirhjimOgZYwJVOyQp1c5qSxtYrmrgqY7mmKDVMIiiJyyl0OC722qqVpqe4Us07eWO
OZrnJz6EU91lxobe1HVtZBTNdyLNIjMfRic5ysslvydyjyfktMK0yyTYOzXquOa5mC6V/xK
bOUaWqqy3e1aGtvdZHEiLRsVGxRJgnj5fHjzYqNUmiJyyX2K40NRTOqoaynkgb8KVkrVanp
XHAhMlMrmZSOqmSRRU8kL81jElzlkTTpRNBUsi6KObK282yqoN7U0tOu6UW6K5G+/bgmPjw
xXrMWRcMNHZ8oLvFCm/KFj9wkxX3nvXDVPJOiIiXSKi9WqkqN71NzpIZvNyTta7qVTbWWNs
Syue1I0TOV6row58Tj9ht8dZZpJZ8l626TVDnLvxk+GC/R9OPOeLi++W3IuC0XGOamjfWLm
7poxYjUXN9GcuJGs2ozyiV8ypyujoLC+tstbR1UrJmsdmvSRGouPKiL9BYLZUPq7VSVMuGf
NAx7sE0Yq1FU53lzkfaLHk3DVUDHRTMkbG9yyKu6oqLyovjxTHQX+x/uC3f7rF/KhaJnPmr
VEaYmG+ACzMAAAAAAABOx/smeqh7PEX7Jnqoezld8diBy1+S9T6zP5kJ4gctfkvU+sz+ZCe
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
5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAg
eOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x
3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2Dj
pYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3
L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sT
pk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp
4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0s
OuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+
wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDr
ju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG
1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5
RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAge
Olh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3
cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2Djp
Ydcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L
9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTp
k3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4
EDx0sOuO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sO
uO7l+wcdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+w
cdLDrju5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrj
u5fsG1idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1
idMm5RdPAgeOlh1x3cv2DjpYdcd3L9g2sTpk3KLp4EDx0sOuO7l+wcdLDrju5fsG1idMm5R
dPAgeOlh1x3cv2Hx2WtjRPeVEkjvE1sLsV60GzidMm5Rd9y0VFybmj/vSSMa1Odc5F/oTxW
4IK3KK5QVtbTvpKCldnwQSfDkd4nOTxFkJr5UxSinnM1AAMmgAAPioipgp83NnkN6j0APO5
s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubP
Ib1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG
9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvU
NzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc
2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3Nn
kN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5D
eo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3q
PQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0
APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9AD
zubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87
mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s
8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPI
b1Dc2eQ3qPQA87mzyG9Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9
Q3NnkN6j0APO5s8hvUNzZ5Deo9ADzubPIb1Dc2eQ3qPQA87mzyG9QRjWrijURfoQ9AAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4kkZDE6WR6MYxMXOcuCIh7Kn7oFb
JBbIKViqiVD1V+HjRuGjrVOovh0a64pUrq00zLWuPugtZKsdupUkai/tJVVEX0IhpeEO5ap
S9TtpUwetHw2FEdjgnGxJ8Vs8Idy1Sl6nbR4Q7lqlL1O2lTBPD4Vkb1d1s8Idy1Sl6nbR4Q
7lqlL1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL
1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2lT
A4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCs
b1d1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s
8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s8Idy1Sl6nbR4Q7lqlL1O2ldS2XBzEelDUqxUxR
yROwVOfkNURgYU9kG7iR4rZ4Q7lqlL1O2jwh3LVKXqdtKmBw+FY3q7rZ4Q7lqlL1O2jwh3L
VKXqdtKmBw+FY3q7rZ4Q7lqlL1O2jwh3LVKXqdtKmBw+FY3q7rZ4Q7lqlL1O2jwh3LVKXqd
tKmemMfI7NY1zl5kTEcPhWN7EutXhDuWqUvU7aPCHctUpep20qiorVVHIqKnKimSalqKdGr
PBJEj0xbnsVud6MRsYVjdxLrP4Q7lqlL1O2jwh3LVKXqdtKmBw+FY3q7rZ4Q7lqlL1O2jwh
3LVKXqdtKmBw+FY3q7rZ4Q7lqlL1O2jwh3LVKXqdtKmBw+FY3q7rZ4Q7lqlL1O2jwh3LVKX
qdtK1RUVRcKtlLSs3SaTHNbiiY4JiulfoQ81VNNR1MlNUMzJY1wc3FFwX7CNjBzyyN3Eyzz
Wfwh3LVKXqdtHhDuWqUvU7aVME8PhWN6u62eEO5apS9Tto8Idy1Sl6nbSpjlHD4VjexLrZ4
Q7lqlL1O2jwh3LVKXqdtKmfURXKiJyroHD4VjexLrX4Q7lqlL1O2jwh3LVKXqdtK/cbVW2m
VkVbDuT3tzmpnI7FPsU0yIwMGYziCcXEjlMrZ4Q7lqlL1O2jwh3LVKXqdtKmCeHwrG9XdbP
CHctUpep20eEO5apS9TtpUz7mrzL1Dh8KxvYl1r8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb2Jd
bPCHctUpep20eEO5apS9TtpUwOHwrG9XdbPCHctUpep20eEO5apS9TtpUwOHwrG9XdbPCHc
tUpep20eEO5apS9TtpUwOHwrG9XdbPCHctUpep20eEO5apS9TtpUxhjyDh8KxvYl1s8Idy1
Sl6nbR4Q7lqlL1O2lTVFTlQDh8KxvYl1s8Idy1Sl6nbR4Q7lqlL1O2lTA4fCsb1d1s8Idy1
Sl6nbR4Q7lqlL1O2lTNq322rulQtPRxbpIjVcqZyN0fb6ROBhRGcwRi4k8olYvCHctUpep2
0eEO5apS9TtpVZY3wyvikTB7HK1ycyoeRw+FY3sS62eEO5apS9Tto8Idy1Sl6nbSpgcPhWN
6u62eEO5apS9Tto8Idy1Sl6nbSpoiryIfc1eZRw+FY3sS61+EO5apS9Tto8Idy1Sl6nbSpg
cPhWN6u62eEO5apS9Tto8Idy1Sl6nbSpgcPhWN6u62eEO5apS9Tto8Idy1Sl6nbSpgcPhWN
6u62eEO5apS9Tto8Idy1Sl6nbSpgcPhWN6u62eEO5apS9Tto8Idy1Sl6nbSsQ0tRUNe6GCS
VGJi9WMVUb6cOQ8wwvqJ44Ym50kjka1McMVVcEGxhWN3EutPhDuWqUvU7aPCHctUpep20rl
fbqq2VO9qyPc5c1HZuci6F9BrCMDCmM4gnFxI7ZWzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV
3Wzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh
3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKX
qdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHh
DuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqU
vU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqUvU7aVMDh8KxvV3Wzwh3LVKXqdtHhDuWqUvU7aV
MDh8KxvV3Wzwh3LVKXqdtPrfdDuCOTPo6ZW+NEzkX2lSA4fCsb2Jd1WxZTUd8arGIsNQ1MX
ROXHRzovjQmTjVvrJLfcIKuNVR0T0do8aeNPtQ7Ked8Tgxh1Rl2S7MHEmuOYADmbhSfdG+B
b/TJ/lLsUn3RvgW/0yf5To+G+bDHH+XKjgA9l5oAAAAAAAAAAAAAAAAAAAAAAAAAAJSx2Gp
vtQ9kLmxxxpjJK7kbzelTZumTtLQ0UlTS3mnrdyVEexmCOTFcPEqkrkgi1WTt2oYHIlU9q5
qY4KqK3BPx9pW57LcqWCSeoopYYo1RHOkbmppXDRjy/Yc0VzOJMZ5ZeDaaYiiJyzzW3I261
tfS10FVOskcELUjbmomamCp4k+hCiFvyAVHSXGFFTPfE3NTrT+qFfdZ6ymqoI6+mlpo5ZUY
r3twTl04KKNNOJXH0TVnVRTKVhyXoXNjZPlBSxTyIipEjc7BV8SrnJgR1dYayhvLLWua+WV
W7m5ORyLoRfo//C43CJtquFJb7bk9TzskRMZnxZ2C44aV+jlxVfGR+WLqlmVdvfRpjUJG3c
053Z64IZ4eLXNXbymJsvXh0xH0aUuSNHBLvafKCmjqsExiczBEVfpx/oQ9ps893uW8oHNaq
Ique7kaieMuVM6LKKrWmu+TkkE6tXGoRqomhOfBF9GlSt2xa60ZSVLbVEtW6nV7HMwxV7Ed
h4vs5C1GJXMTEzz+ytVFOcTEcnqsycoaennfBfqeomgaquhzc1Vw5UTSuJAF8WioMoaCtnq
LLJbKmJiv3VUVqKuCrzJjyadHjKGaYNc1ZxPbH/vBTEpiMpgL/bEq6LIynqLFTxzVMi4zLh
i5dK4+lU0JgUAsFtp8pbZBFV21kzoJ0zkSJM9q+lvOMenVEc/yYU5TLWv15q7qsEddSthqK
fORyo1Wq7HDlRebD8S23+ysu7LWktdFSMbGrUV+lXuVG4IiYpjyGjlq3dbHbqqrhZFXuVEe
1OXDNVVT7Fw9GIyuVd2sKY/9+8OfPVo08u1tllq1c+xXLlYaq33ltsTCaSTDclamGei8noJ
jiN75KdbxTJXK3O3vh/XHH8CUu80UHuiWx8yojdwRuK86q9E/FUNd9nuS5fpVJDJuG6pJu2
Hvc3Dkx/DAnermI55cs0bdMTPLPnkr9qydqLjd57bJIlNLAxXOzm53IqJh+JIpkRJJTzbhc
qearhT39MzSrV5lXHQv2E1a5op/dEuT4lRWpT5qqnOmYi/ihhyXtVwoco7hU1cb44c16bo7
Qj1VyKiovj0Ioqxq+c55cokpw6ezLPnKvWXJma9UU9RFUMjdC7NzHpyrhjy+IzXHJNaW1Ou
NHcIa6KP9puafB58FxXHAmcmmOrbFfGU3wp5JEj8XK3QeLPR1NryNu618ToEka9GMkTBcVb
mouH0qqE1YtcVTz7JjkRh05Ry8O1F5MWl9TJFV0l4p6Wsa5yMiciOfyaVwVdOhV8RFXuOeK
81TKmZJpmyKj5Ebm5y8+BLZHW6tS/UdYtLKlN7/APtcxc34Dk5fSYMqLdWsvNbVupZW06y6
JVYuauP0mkVf/NMTPh/6Gc0//Hnk3UyIzUpnz3aCGOoRMFc3Bc5cMGoirp5fwIq5ZP1VvvT
LWipNJLm7k5EwRyKuH2ePqJ/K9V3KwJj/AHV/yG5epo6fL+1SSqiM3JG4r4lVXon4qhnRi1
8pmc84n9NKsOjsjy/aLdkLhMymbd6d1SqZz4c3BWt5004r1IYrHb3WrLyCidIkixK5M5Ewx
xjVf6kylkuKZfcIKxd7Y5+646MM3DDr0Gmz/wA0v+Zf/pKxiVVRMTOf/OadERMTEZc0BlP8
pK763+iGOzW2G4zvbLcYKLMRFa6ZU98uPImKoS1/ydu9VfaueChkfG+TFrkVNKYekhqa03C
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
Hv7bdo4pX7o9/bbtG7R1QaKrIcExxSv3R7+23aOKV+6Pf227Ru0dUGiqyHBMcUr90e/tt2j
ilfuj39tu0btHVBoqshwTHFK/dHv7bdo4pX7o9/bbtG7R1QaKrIcExxSv3R7+23aOKV+6Pf
227Ru0dUGiqyHBMcUr90e/tt2jilfuj39tu0btHVBoqshwTHFK/dHv7bdo4pX7o9/bbtG7R
1QaKrIcExxSv3R7+23aOKV+6Pf227Ru0dUGiqyHBMcUr90e/tt2jilfuj39tu0btHVBoqsh
wTHFK/dHv7bdo4pX7o9/bbtG7R1QaKrNO0VzbbdaesexXtidnK1F0roMFTKk9VLMiYJI9zk
RfFiuJJ8Ur90e/tt2jilfuj39tu0jXh555x+U6a8sskOCY4pX7o9/bbtHFK/dHv7bdpO7R1
QjRVZDgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkO
CY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfu
j39tu0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227R
xSv3R7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv
7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo
6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ
4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+
6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbt
HFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e
/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R7+23aN2
jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZ
DgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkOCY4pX
7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R7+23aN2jqg0VWQ4Jjilfuj39tu
0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3aOqDRVZDgmOKV+6Pf227RxSv3R
7+23aN2jqg0VWQ4Jjilfuj39tu0cUr90e/tt2jdo6oNFVkOCY4pX7o9/bbtHFK/dHv7bdo3
aOqDRVZDnbjkdZk9dqCmdU1VG6OJuGLlc1cMVw8SnXDh+MqirTMTf+Or4aJjPMABwOsK/ff
lHYfrZfYhYCv335R2H62X2Ia4Xe+0+imJ3fx6rAADJcAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA5a/Jep9Zn8yE8QOWv
yXqfWZ/MhPGk/Lj6z/FI78/b+gAM1wr99+Udh+tl9iFgK/fflHYfrZfYhrhd77T6KYnd/Hq
sAAMl2KoqI6WFZZXYNTrX6CDmygqHO/so2Mb4sdKn3KCVy1McWPvWszvtVf/wiTlxcSc8oe
l8P8PRNGqqM80lw7W/w+yOHa3+H2SNBluVXdOzh9KS4drf4fZHDtb/D7JGgblVzZw+lJcO1
v8Psjh2t/h9kjQNyq5s4fSkuHa3+H2Rw7W/w+yRoG5Vc2cPpSXDtb/D7I4drf4fZI01qa5U
VZNLDTVMcskK4SNa7FW+LSNdd0bOFaE3w7W/w+yOHa3+H2SNMVTUwUcDp6mVsUTMM571wRN
OA113NnDtCX4drf4fZHDtb/D7JEwTxVMLJoJGyRvTFr2riioZBuV3Ts4doSXDtb/D7I4drf
4fZI0DcqubOH0pLh2t/h9kcO1v8PskHUXKipaqGlnqWRzTrhGxy6XacNBsbozP3PPbn+Tjp
Guu6NrCtCU4drf4fZHDtb/D7JGgblV07OH0pLh2t/h9kcO1v8PskY5yNarnLgiJiqmCjr6S
4xLLR1Ec8bXZquYuKIvN+I113Rs4XZlCa4drf4fZHDtb/AA+yRoG5VdOzh9KS4drf4fZHDt
b/AA+yRoG5Vc2cPpSXDtb/AA+yOHa3+H2SNA3Krmzh9KS4drf4fZHDtb/D7JGgblVzZw+lJ
JfqzH/01/5SSt94ZVvSKVqRyLyYcjitn1rla5HNXBUXFFTxE04tUSpX8Nh1RlEZLqDHC/dY
I5F/vtRetDIdzx5jIAAAxTzx00LpZXYNT8TKQOUMrlmihx96jc77eT+hSurTTm1wcPcril5
mygnc5dxjYxviztKmPh2t/h9kjQce5Xd6sYGHHgkuHa3+H2Rw7W/w+yRoG5VdOzh9KS4drf
4fZHDtb/D7JGgblVzZw+lJcO1v8Psjh2t/h9kjQNyq5s4fSkuHa3+H2Rw7W/w+yRoG5Vc2c
PpSXDtb/D7I4drf4fZISnuVFVVMtNT1Uck0KqkjGuxVuC4Lj9psjXXdEYOFPZEJLh2t/h9k
cO1v8PskTUVENLA6eokbFExMXPcuCIKeohqoGz08rZYn6WvYuKKNddzZws8soS3Dtb/D7I4
drf4fZI0DcqunZw+lJcO1v8Psjh2t/h9kjTVqrlRUU8MFTUsiknXCJrl0vXHDR1oNdd0Tg4
UdsQnOHa3+H2Rw7W/w+yRayMR6Rq9qPXkbjpU9DcrunZw7JLh2t/h9kcO1v8PskaFXBMVG5
Vc2cPpSXDtb/D7I4drf4fZISiuFHcY3SUdTHOxq4OVjsURTZGuu6IwcKecRCS4drf4fZHDt
b/D7JGgblV07OH0pLh2t/h9kcO1v8PskaBuVXNnD6Ulw7W/w+yOHa3+H2SNA3Krmzh9KS4d
rf4fZHDtZ/D7JGgblVzZw+lY7feWVT0imakci8ipyKSZSkVUVFRcFTkUuFNIs1LFIvK9iKv
UdGFXNXKXn/E4MUTE0+LKADdyAAAw1VVFSQrLKuCJyInKqkJLf6hzv7KNjG+LHSp8v8rnVj
Ysfesbjh9KkWcmJiTqyh6fw/wAPRoiqqM80lw7W/wAPsjh2t/h9kjQZ7lV3Rs4fSkuHa3+H
2Rw7W/w+yRoG5Vc2cPpSXDtb/D7I4drf4fZI0DcqubOH0pLh2t/h9kcO1v8AD7JGgblVzZw
+lJcO1v8AD7I4drf4fZI01qS5UVe+VlJVRzOiVEkRjsc3l5epRrrujZwrQm+Ha3+H2Rw7W/
w+yRpiqqunooFnqpmQxNwRXvXBExGuu5s4UeEJfh2t/h9kcO1v8PskVFLHPCyaF7XxvRHNc
1cUVF8Z7G5XdOzh2SXDtb/D7I4drf4fZI0DcqubOH0pLh2t/h9kcO1v8PskHNcqKnrYqOap
YyomTGONV0u9HUbG6M3Tc89uf5OOnqGuu6NrCtCU4drf4fZHDtb/AA+yRoG5VdOzh9KS4dr
f4fZHDtb/AA+yRb3tjjdI9yNa1FVVXxIYqOupbhDu1JOyeNFzc5i4pjzDXXdGzhdmUJnh2t
/h9kcO1v8AD7JGgblV07OH0pLh2t/h9kcO1v8AD7JGgblVzZw+lJcO1v8AD7I4drf4fZI0D
cqubOH0pLh2t/h9kcO1v8PskaBuVXNnD6Ukl+rEX/01/wCUk7fd2VjtykbucviTHQ70FaPT
Huje17Vwc1cUUmnFqiealfw2HVGURkugPMbs+Nr/ACkRT0dzx0Dlr8l6n1mfzITxA5a/Jep
9Zn8yE8aT8uPrP8Ujvz9v6AAzXCv335R2H62X2IWAr99+Udh+tl9iGuF3vtPopid38eqwAA
yXVy//ALwb9WntUjCTv/7wb9WntUjDgxO/L2sD5dIACjYAAAAAAAAKFklMtPeMpJmoiujV7
kReTQ5yl9Of5NIu/wDKjQvwZPa80o7sufF79P39GekysylulskrKC10ytp1XdZHKuC4Jjg1
M7HHD2mS4Xxb/wC5zW1b4kika5scjWroxR7F0fYqHvIdMMiqvFMPfy/yIQ1sRfBfdUwXHfS
e2M0yjPlHZLHVVp5z2xLZo7/lDbcmaWrprdBwdAxGK+RVVz9OGOCKmCY6OQnbllgyksVDW0
9MslTXp/YwqvIvjx58FXD6TRqkXwVNTBcd7s/nQhrpbppclLDXthklhpmuSdrOVGq5Fx+jk
XT4tAypqnncmquiMonwiU1JlPf7LUU7soLfTspJ3ZufAuli9a9X4nu55XXKlyjqbRRUEdU5
GN3BGouKuVrXYrp5ERVIB65NV00FLbaC4180q6Y3TKzM9K6dn0kxRRoz3UqlqNXBlO1E+j+
zYg009sx4EV1zyifGH243CZL3k+y422mWsmzc9zs7GJ2fh73B2HXiR1XNeU90Vr46SB1YjX
JFGr/euZmuwVVx5cCRyrRVy2sGj/1GfzoYL1WxWj3R6evrEe2n3DDORuOOLXJo+1RT/JRX2
znPZMJK45S3Oe+S2iwUcU8sCYzSzL71OfDSnJjgfbVlbPvmsoL5TMpaqkiWVyx/Bc1ExXDS
unDTy6SuXGio7XlbWvvkVS2kqnukhmhVUTFVx8XLyqhnttut15dcOB7fVIjad7GVc8y4Pcq
YI3DDx+nQNNOSYxK9Xbzt/wChuRZVZRXKlqK+mtET7YzOa733v8MNKouOlU+hDZ9zT5P1H+
9O/kaRtgyoitdgfZZqSoW4Rq9jIkj+Eqqq6ebSun0En7mqKlgqMUw/8U7+RorjKmeRh1aq6
Zzz5LeADndwAAAAAAAAAALhSfEoPq2+wzGGk+JQfVt9hmPRjseDV3pAASqFeyg+PR/Vp7VL
CV7KD49H9WntUxxu46vhPmooAHG9YAAAAAAAAAAFDyWeseV+UUiJirXSqmP1inuhysylu9v
lnt9rpnLA5d0eqrm4YYoiIrsVXl/Ax5NIvGrKTR45vF/jU2vc8RUyYrMUX4w/xf4GnRVlzn
KzhoznKmJy7Xye/Oyh9z+41MkTYpY/7N7W8iri1cU6yPtt8yht2S1PU0dugWgpm4OklVVc/
wB8uKoiKmjFcDXsaL4O70mC47qn+UmY0XwVKmGne6/zqTMRHLLxRE1Vf9Z89Ldrcso6bJuk
ucdOr56z3sUOP95NC6eZF69BpS5T5RWV8E99tsDaOZyNV0K++YvWunDxfRykJXW2oqchrJW
RQvlZSOl3VjOVGufy/wD8P4nyR2TNY6Cnt1Dca+eVf2KzK3N9K6dn0iKKbE4lefblyj/3Zz
WC65YV9HlA+2UVFHV50bVgRqLnOcrUXTp5OVTBdbjUJW5PcKWymWsmlwdnI7GFd0RPe4O9C
6cTxTwpD7p0caNwbHTI1NOOGEeHKZcs0Vcp8ntH/rp/OwrERnERZaZqmmqZnxy/aOu813T3
RIHR0sC1LGqlMxXe9ez3+Crp0LhiTlyylucl5WzWOjinqo2Z075V96zkxTlTkxTT9JG5SVc
dq90C33Cqa9KdkGlyNx8tNHWhH3WjpLfldU1N5iqd41iZ8U0KqmlcF04c2lMPQWyics48FZ
qmnVlPisdpyqqUuFRbL9TMpamCNZc6P4LmomK+NfFp5ec0KbKzKG5NmrqGzxSW2JVRyK7CR
UTlwXHSuHMimla7fa7zV1jbRQVeDaeRjayaZc3OcxW4ZuH0856yaymisdqks9VR1C18cjkj
hazHPVeRF+38CJpjwjmmK6uUVVcufNve5l+6Kz6//KhdCme5mipaaxFTD/xH+VC5mWL35dH
w/wAqAAFGwAAAAAAAAW6g+IU/1bfYVEt1B8Qp/q2+w6MDtlw/G92GwADqeaAACtXz95L6qE
cSN8/eS+qhHHn4nel7eD8un6AAKtQAAAAAAAA59kXUOo2ZS1TERXQtSRqLyKqbop0E5zksi
pQZV6F/Yr7JDWjuz9nPi9+n7+jdgysyluFpfcKK2U25U+cs0jscFw0rmpnY6E5T1erzw77n
U1asW5P3RrHtRdGKPTk+jkMuSqYe57VaNOZP7FIWnRfBZVJguO+k8X+JpfKM+UdksJqq085
zziW5DlDlFa8nqKsjtsCW6KNkedIuL36MMdC6EVeTQTd2yuSjtdBPSUyzVVxaiwwuXkxw5c
OXSqJ9Jo3dF8FsKYad7we1pD3m3yuseT9yWCSWlgga2oSPQ5qYouOPix06fEIimqeceKZqr
ojKJ8ITXGe+Wetp48oaGnjpql2aksK/AX6dK8gr8r7rDlDV2iit8dTIxESFERcccEVVdp5M
MebxEJmZN3Grp6S2UFwr5JV98jplYkf0rjiS9obh7p9z0aEgXBewJppjnkRXXPKJ8Xqrr5E
yosUVdbqdauaFiySLnZ0TsVxRMFw5fSRiT3nwive2kgWszcNzz/e5mby448uBJZQovhEsq4
aMxv8AM417hWxWn3S991aPbDJEjWuRuOOLUT2iP4irt5z2Ska3Ka61l6nteT9HDM6m0TSzL
oRU0KiaU8ejrPVqyvkV1dS3qmbS1dDGsj0j5HNTm08ulPHpxKzU0VDacp69t+jqmU9RI6SC
aFVRFxVV04cvL9imzQWyivMFzdZ7dVMTcHMjqZ5lVJV0e9ww5Vw59AmmnIjExNXbz58v/Q2
+M+UdxtlTXMtEK2xWPaqtd79EwVFVMV04egkPc4+TT/8AeX+xpD2jKmCjyXdZX0k617GSRN
iRmhVXFcV5sMdPoJj3OUVMmn4ph/4h/saRXGVM8lsKrOumc8+S1gAwdoAAAAAAAAAALlT/A
BaL1E9hkMdP8Wi9RPYZD0Y7HgT2oHLX5L1PrM/mQniBy1+S9T6zP5kJ41n5cfWf4zjvz9v6
AAzXCv335R2H62X2IWAr99+Udh+tl9iGuF3vtPopid38eqwAAyXVy/8A7wb9WntUjCbuVG+
tuyRMcjVSFHYr6TFxen89H+Jx10VTVMxD1sLFoooiKpRIJbi9P56P8Rxen89H+JTarsvxGF
dEgluL0/no/wARxen89H+I2q7HEYV0SCW4vT+ej/EcXp/PR/iNquxxGFdEgluL0/no/wARx
en89H+I2q7HEYV0SCW4vT+ej/EcXp/PR/iNquxxGFdEgluL0/no/wARxen89H+I2q7HEYV0
SCW4vT+ej/EcXp/PR/iNquxxGFdDsijjVVYxrceXBMMT0S3F6fz0f4ji9P56P8SduuxxGFd
EnxUReVEUl+L0/no/xHF6fz0f4kbVdjiMK6Hexsjc17UcnMqYn1rWsajWojUTkREJfi9P56
P8Rxen89H+JO3XY4jCuh9zZn5+Y3PwwzsNJ6Jbi9P56P8AEcXp/PR/iNuuxxGFdEgluL0/n
o/xHF6fz0f4kbVdjiMK6JBLcXp/PR/iOL0/no/xG1XY4jCuiQS3F6fz0f4ji9P56P8AEbVd
jiMK6JBLcXp/PR/iOL0/no/xG1XY4jCuiQS3F6fz0f4mOeyTU8D5XSsVGJiqJiNuuyYx8OZ
yiU9SfEoPq2+wzGGk+JQfVt9hmO6Ox49XekABKoV7KD49H9WntUsJC3SkdW3SOJjkau444r
6VMsWM6codPw0xTiZygwS3F6fz0f4ji9P56P8AE5dquz0OIwrokEtxen89H+I4vT+ej/EbV
djiMK6JBLcXp/PR/iOL0/no/wARtV2OIwrokEtxen89H+I4vT+ej/EbVdjiMK6JBLcXp/PR
/iOL0/no/wARtV2OIwrokEtxen89H+I4vT+ej/EbVdjiMK6JBLcXp/PR/iOL0/no/wARtV2
OIwrok8tijYqqyNrVXlVEwxJji9P56P8AEcXp/PR/iTt12OIwrokEtxen89H+I4vT+ej/AB
I2q7HEYV0QqI7lRF9Icxr25r2o5F8SpiS/F6fz0f4ji9P56P8AEnbrscRhXRDWtY1GtajUT
kREwPmYzPz8xudhhnYaSY4vT+ej/EcXp/PR/iNuuxxGFdEgluL0/no/xHF6fz0f4kbVdjiM
K6JBLcXp/PR/iOL0/no/xG1XY4jCuiQS3F6fz0f4ji9P56P8RtV2OIwrokEtxen89H+I4vT
+ej/EbVdjiMK6JBLcXp/PR/iOL0/no/xG1XY4jCuiS3UHxCn+rb7CEmsc0ED5VlYqMarlRM
SboPiFP9W32G2DTNMzm5fiq6a6ImmWwADpcAAAK1fP3kvqoRxNV9E+uuz42Pa1WxouKmPi9
P56P8TiqoqmqZiHrYeNRTREVT4IkEtxen89H+I4vT+ej/ErtV2X4jCuiQS3F6fz0f4ji9P5
6P8AEbVdjiMK6JBLcXp/PR/iOL0/no/xG1XY4jCuiQS3F6fz0f4ji9P56P8AEbVdjiMK6JB
LcXp/PR/iOL0/no/xG1XY4jCuiQS3F6fz0f4ji9P56P8AEbVdjiMK6JBLcXp/PR/iOL0/no
/xG1XY4jCuh2RRx45jGtx5c1MMT0S3F6fz0f4ji9P56P8AEnbrscRhXRJ8VEXlTEl+L0/no
/xHF6fz0f4kbVdjiMK6Hexkjc17UcnMqYn1Go1qNaiIiciIS/F6fz0f4ji9P56P8SduuxxG
FdD5jEer0Y3OXldhpPRLcXp/PR/iOL0/no/xG3XY4jCuiQS3F6fz0f4ji9P56P8AEjarscR
hXRIJbi9P56P8Rxen89H+I2q7HEYV0SCW4vT+ej/EcXp/PR/iNquxxGFdEgluL0/no/xHF6
fz0f4jarscRhXRIJbi9P56P8THU2Wamp3zOlYqMTFUTETh1R4JjHw5nKJWCn+LReonsMhjp
/i8XqJ7DId0djxp7UDlr8l6n1mfzITxA5a/Jep9Zn8yE8az8uPrP8Zx35+39AAZrhX778o7
D9bL7ELAV++/KOw/Wy+xDXC732n0UxO7+PVYAAZLo/8A2/8A9P8A5iQI/wD2/wD9P/mJApT
4tMTw+gAC7MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVuX7un9RTaNW5fu6f1FK1d
kr4ffhkpPiUH1bfYZjDSfEoPq2+wzEx2Iq70gAJVCPf+/o/qF9qkgR7/39H9QvtUpV4NMPx
+kpAAF2YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADXr/AN31H1bvYKD4hT/Vt9gr
/wB31H1bvYKD4hT/AFbfYU/00/8Ar+7YABdmAACPj/fs31Ke1CQI+P8Afs31Ke1CQKU+LXE
7Y+kAALsgAAAAAB8PEKyqxd2RqOxX4PMBkB8VUTHFU0BFRUxRcUA+gxTLKjU3FGq7OTHO5j
IB9BgiqUkmljww3NUTHHlxM4AGtTyOnmlkzv7Nq5jU58OVTYA+g+I5HciovoCuRvKqJ6QPo
PmOKYoM5McMUx9IH0HxFRUxRUVPoGc3Ozc5MebED6AAAAAAAAAABp3X92T+hPahuGndf3ZP
6E9qFau7LTD78fVsQfF4/UT2GQxwfF4/UT2GQmOxSe1A5a/Jep9Zn8yE8QOWvyXqfWZ/MhP
Gs/Lj6z/Gcd+ft/QAGa4V++/KOw/Wy+xCwFfvvyjsP1svsQ1wu99p9FMTu/j1WAAGS6P/AN
v/APT/AOYkCP8A9v8A/T/5iQKU+LTE8PoAAuzAAAAAAAAAAABr1MrUTc2VDIpMU+EqGdVRq
KqrgicqgfQYVqqdqoizM08nvjKqo1quVURE0qoH0GCKRJKhysnY9mboY1UXBec+1NQyCJyq
9qPRqq1qrygZgYKeqjmYz+0ZujmoqtRfHhpFXMsFM56fC5G+kDODHBHuULWKqqqJpVfGphq
nLBLFOirm45j08WC+MDaAAAAAAAAAAAAADVuX7un9RTaNW5fu6f1FK1dkr4ffhkpPiUH1bf
YZjDSfEoPq2+wzEx2Iq70gAJVCPf8Av6P6hfapIEe/9/R/UL7VKVeDTD8fpKQABdmAAAAAA
AAAxxPe/Pz48zByon0pzmQAAY53vjiV0ce6OTkbzgZADE2drp3woi5zERV5tIGUA145nS1c
jG4bnGmC/S4DYAAAAAAAAAAAGvTzOe+WKTDPjdyp40XkU2AAAAAAAAANev8A3fUfVu9goPi
FP9W32Cv/AHfUfVu9goPiFP8AVt9hT/TT/wCv7tgAF2YAAI+P9+zfUp7UJAj4/wB+zfUp7U
JApT4tcTtj6QAAuyAAAAAHiWGOZubI1HIi44Ka1sTClVE8tTPLu+jcUjXnz1X+hgpYaqnTM
XcVarsVVFXH2AY2wMmuVRuiZzURvvfEq4HuiakVVUwt0MarVRObFDNHC5lXNKqpmyI3BPHo
QRQOjqp5VVM2TNww5dCAa9xhjRGSoxM9ZGorjdexsjFY9M5q8qKalVDVVHvU3FGtfnJpXHR
9hsxbtgu7JGnNmKv9QNGnpIH1VSx0SK1ipmpzEhhmszWphgmCIaywVEdTJLAsapJhij8dCp
6DabjmpnYY4acOQDVtnxFnPiuPWeKyNJa6mYqrgudjh6DJSsdBLLDmrmKuexcNGnxHuWBz6
uCVFTNjzsceXSgGvuTKe5QpE3NSRqo5E5NB9qN7uqXItO6eVETHDkaZpIHPrIZkVM1iKip4
9J4WGohqJJIMxzZcFVHLhgoGKjXNmqIkY6NiNRUY5fgmuyCPe9G7N989+Dlx5U5jdgpZmTy
yyPa5ZG+LxKfG0kjYaZiq3GJ+c7Ty+gDE129W1qRpgjFRWpzKqGNkLXU6Z1JK97kxWTFMce
flNxtLjJU5+Csmwww5eQ8MZWwsSJm5Pa1MGudii4fSBmpVlWmZuyKj0TBcTMeGZzY03RyK5
E98qchpWvdH7rK9zlY53vUVQJAAAAAAAAA07r+7J/QntQ3DTuv7sn9Ce1CtXdlph9+Pq2IP
i8fqJ7DIY4Pi8fqJ7DITHYpPagctfkvU+sz+ZCeIHLX5L1PrM/mQnjWflx9Z/jOO/P2/oAD
NcK/fflHYfrZfYhYCv335R2H62X2Ia4Xe+0+imJ3fx6rAADJdH/7f/wCn/wAxIEf/ALf/AO
n/AMxIFKfFpieH0AAXZgAAAAAAAAAA0rkxu9s7NTOzk04aTZqPi0vqL7DBUUs1QitWoRGY4
om58n4mRIpljkZLMj89uCKjMMANaKCLglVViKqxq7HDTibNJ76jiztOLExxPrafNo97539x
W52AZC+OmbEyTBzUREdm4/gBhia1tzlRrURNzTQiGWsa1aWVVaiqjFwVU+gxJSVCTLMlUme
5MF/s/wD9NlWZ8KxvXOxbg5eTEDHSRsSmhcjG52YmnDTyGK5fsol8SStVT3BTzQq1u+M6Nu
hGqxMesyVEKVED4l/vJoXmUDKadz+IuTxqqYdZsQLIsLd1bg/D3yYmOeJ808TVT+yYue5ed
fEgGdORMT6AAAAAAAAAAAAA1bl+7p/UU2jVuX7un9RStXZK+H34U9fdZySoFWiqKmpSan/s
pESmcqI5uhdOHOhWvdB903J2+5GVtvtdXUb7kdEseMLmfBka5dPi0Ip1mk+JQfVt9hCZdZP
1OVOSVXZ6SWKKWodGqPlxzURr2uXkRfEikx2Iq70vz7aPdLyvs2a2C9TzRp/6dThMmHN77F
U+xULvafd+qW5rLzZY5OeSkkVq9l2OPWhKWj3BLVArX3e61FW5NO5wNSJvoVVxVfwLvacgs
lbJgtFZKVHt5JJW7q/tOxVPsJVMmMtrXlZEj6CGuj0Y/wBvSva3tois/EkX/v6P6hfapvom
CYIaD/39H9QvtUpV4NMPx+kpAAF2YAAAAAHiSNJWZqq5E52rgp7Mcr5GNRY4t0XHSmciYAY
Lers2Zquc7NlVEzlx0GN7HTXJ8ayPazc0VUauGJ9pkqYXSI6m0SSK7HPTRiZWxPS4PlVPeL
GiIuPjxAx0qLDWS06Pc5iNRzc5ccD5cmK2B8zZJGuTBNDlROUysielfJKqe8cxERcfGY61t
RPE+FlPoVUwdnp7ANt7UexWqqoiphoXBSPjpWLXzR58mDWouOeuJuwySvVd0h3PDk98i4mF
8c8VY6aKNJWvaiKmdgqKgGyxqMYjUVVREw0ripq23TDI5eV0jlU2mK5WIrm5qqmlMccDWp0
3CrmhXkeu6M/qB8rlestO1j1ZnPwVUPDo961kG5verZFVHI52OJmqYnyT07mpijHYu08gqI
nyVFO9qYoxyq7TyAeKvcN1RJZZMcNEbFXT9OCHijlwq3wsdIseZnIkmOKafpPb2TQ1j544t
1bI1E0LgrcBBFULXunlYjWujwREXHDTyAaiNetNHNu0iPWXNxzuRMVNmJ29ZapiK5zGMR6I
q4+I8pSzJRxx5vvmy5ypinJiZ97udUzq9P7ORiNxx6wNKN0cse6TSVCyu04tRcG+g3qKSSS
masqKj00LimGJiiWqpo0hWn3VG6Gua5ExQ2olkWNFlajX+NEXHADW5Lvo/vQ6es3DUpk3Wq
mqf7vwGfSicptgAAAAAAAAa9f+76j6t3sKavurZKWxVoKqpqGz039lIjadyojm6F0+MuVf+
76j6t3sFB8Qp/q2+wp/pp/9f3cO91P3Qbbf4rW7J6uqo56WSRz3o18Soio3DBdHMQFo91vL
G0q1q3JK6Nv9ysYkmP8AzaHfidh90jISsy4jtsNNWQ0rKV73SPkRVXByNwwROXkXxoRNo9w
rJ2jzX3Krq7i9OVuO5MX7E0//AMRdmjLR7v1O9WsvFkkjXxyUkiPx/wCV2GHWp02x36jygo
0qqOOqYz//ACKZ8XVnIiL9iqeLTkrYLGicGWikpnJ/6jYkV/aXT+JLAR8f79m+pT2oSBHx/
v2b6lPahIFKfFridsfSAAF2QAAAAAAGGapigwR7tLuRqJiqgZgYYqqGZ+ZG/F2GKphyHtkr
JHPRi4qxcHaORQPYPEcrJVejFxzFzXaORTBwjT8uc7N8rNXADaBjfNHHCsrne8RMcU0mLf8
AT56Nz10rgjsFwx9IGyDBU1DYGLiqo5UXNwaqmKkrWyxxte5yyO5fergBuAxzTMhaivVUx0
Jgir7DxSK1aZmZI6RNPvncq6QM4NGevayoia1zkbnKj/eKbLKiOSNz252a3lxaqAZQeI5Gy
xpIxcWu5FPkUzJmq6NcURcMcAPehyeJUU+Na1jUa1qNRORETA1oV3Gulg/uvTdGpzc5tgAA
AAAAAADTuv7sn9Ce1DcNO6/uyf0J7UK1d2WmH34+rYg+Lx+onsMhjg+Lx+onsMhMdik9qBy
1+S9T6zP5kJ4gctfkvU+sz+ZCeNZ+XH1n+M478/b+gAM1wr99+Udh+tl9iFgK/fflHYfrZf
Yhrhd77T6KYnd/HqsAAMl0f/t//p/8xIEf/t//AKf/ADEgUp8WmJ4fQABdmAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAABq3L93T+optGrcv3dP6ilauyV8PvwyUnxKD6tvsMxhpPiU
H1bfYZiY7EVd6QAEqhHv/f0f1C+1SQI9/wC/o/qF9qlKvBph+P0lIAAuzAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAa9f+76j6t3sFB8Qp/q2+wV/7vqPq3ewUHxCn+rb7Cn+mn
/1/dsAAuzAABHx/v2b6lPahIEfH+/ZvqU9qEgUp8WuJ2x9IAAXZAAAAAAacem7S53KkaZvo
NwwT0rZntkR7o5Gpgjmr4gMMaNS7yYeOLT6cUPtF+2qvrTxBEkN0e1HOcqxYq5y4qq4mZ9G
10zpWSyRq/4SMXDEDFSPRm/JF0o2RyrgEdVTUyyKsUcbm45uCroM8NLFAx7G4q164qimNKB
qNzFmlWPyM7QBr442H7P8xmrmtS1qiJoajcPo0oZd6R703ti7M58dPLie5oGzQLC5VRqoiY
pygJdNM/1F9h4oPiMXqmfBMMOVOQwRUbYXIrJZUai6GZ3vQM7vgr6DVtn7vj+32qZpoN1VP
7WRmHiYuGJjgo0gzUZNLmt/uq5MPYB4q/jdJ66+w3DFPTsqGojlcitXFHNXBUU+xRbi1UWR
7/Hi9ccANHdVo46inTlRcYk+hdhu00KQU7I/JTT6fGan9nW18ckaZzIkxV2HKviQkANN3vr
s3D+7Fp6zcMEELmSSyyKivkXxeJPEhnAAAAAAAAAGndf3ZP6E9qG4ad1/dk/oT2oVq7stMP
vx9WxB8Xj9RPYZDHB8Xj9RPYZCY7FJ7UDlr8l6n1mfzITxA5a/Jep9Zn8yE8az8uPrP8Zx3
5+39AAZrhX778o7D9bL7ELAV++/KOw/Wy+xDXC732n0UxO7+PVYAAZLo/kv/pp/8xIGjXwy
pJHV07c6SHlb5TfGh7huVJM3Hdmsd42vXNVCkTlMxLaqJqpiYbYMO+6bWIu2g33TaxF20LZ
wz01WZgYd902sRdtBvum1iLtoM4NNVmYGHfdNrEXbQb7ptYi7aDODTVZmBh33TaxF20G+6b
WIu2gzg01WZgYd902sRdtBvum1iLtoM4NNVmYGHfdNrEXbQb7ptYi7aDODTVZmBh33TaxF2
0G+6bWIu2gzg01WZgYd902sRdtBvum1iLtoM4NNVmYGHfdNrEXbQb7ptYi7aDODTVZmBh33
TaxF20G+6bWIu2gzg01WZgYd902sRdtBvum1iLtoM4NNVmYGHfdNrEXbQb7ptYi7aDODTVZ
mBh33TaxF20G+6bWIu2gzg01WZgYd902sRdtBvum1iLtoM4NNVmYGHfdNrEXbQb7ptYi7aD
ODTVZmNW5Lhbp/UMi1lKiYrUxdtDRnmW6vSmp8VgRUWWXDBF+hCtVUZZL4dE6omeyG9SaKO
D6tvsMx8RERERNCIfS0djOZznMABKAj3/v6P6YF9qkgaVwglVY6qnTGWFcc3yk8aFa+xphz
GeV26DUgudLM3TK2N3jY9cFRTLvum1iLtoTFUT4qzRVE5TDMDDvum1iLtoN902sRdtBnBpq
szAw77ptYi7aDfdNrEXbQZwaarMwMO+6bWIu2g33TaxF20GcGmqzMDDvum1iLtoN902sRdt
BnBpqszAw77ptYi7aDfdNrEXbQZwaarMwMO+6bWIu2g33TaxF20GcGmqzMDDvum1iLtoN90
2sRdtBnBpqszAw77ptYi7aDfdNrEXbQZwaarMwMO+6bWIu2g33TaxF20GcGmqzMDDvum1iL
toN902sRdtBnBpqszAw77ptYi7aDfdNrEXbQZwaarMwMO+6bWIu2g33TaxF20GcGmqzMDDv
um1iLtoN902sRdtBnBpqszAw77ptYi7aDfdNrEXbQZwaarMwMO+6bWIu2gWspUTFamLtoM4
NNVnm4aLfUfVr7BQ6KCn+rb7DTqJ1ubt6UuKxY/wBrLhoROZCTa1GNRrUwREwRCsTnVnC9U
aaIpntfQAXZAAAj49F+l+mBPahIGhXRSsmjrYG5740wezymmWG5UkzcUma1fG165qoUiYiZ
iW1UTVEVQ2gYd902sRdtBvum1iLtoWzhnpqszAw77ptYi7aDfdNrEXbQZwaarMwMO+6bWIu
2g33TaxF20GcGmqzMDDvum1iLtoN902sRdtBnBpqszAw77ptYi7aDfdNrEXbQZwaarMwMO+
6bWIu2g33TaxF20GcGmqzMDDvum1iLtoN902sRdtBnBpqszAw77ptYi7aDfdNrEXbQZwaar
MwMO+6bWIu2g33TaxF20GcGmqzMDDvum1iLtoN902sRdtBnBpqszAw77ptYi7aDfdNrEXbQ
ZwaarMwMO+6bWIu2g33TaxF20GcGmqzMDDvum1iLtoN902sRdtBnBpqszAw77ptYi7aDfdN
rEXbQZwaarMwMO+6bWIu2g33TaxF20GcGmqzMad20Wyb0J7UMq1lKiYrUxYeuhpSy8LStgh
Rd7NdjJIqYI76EK1TGWUNMOmYqiqeyEhB8Xj9RPYZD4fS7KecoHLX5L1PrM/mQniBy1+S9T
6zP5kJ40n5cfWf4zjvz9v6AAzXCv335R2H62X2IWAr99+Udh+tl9iGuF3vtPopid38eqwAA
yXDDLR007s6WBjl51TSZgRMZpiZjsavBtFqzOocG0WrM6jaBGmmy25Xdq8G0WrM6hwbRasz
qNoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUO
DaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0
WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K
7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtA
aabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5XdqpbaJFx3tH1Gw
1rWNRrWo1E5ERMEPQJiIjsRNUz2yAAlUAAAAAYZaSnnXGWFj151TSY+DaLVmdRtAjTFlorq
jslq8G0WrM6hwbRaszqNoEaabJ3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszq
NoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUOD
aLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0W
rM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7
tXg2i1ZnUODaLVmdRtAaabG5Xdq8G0WrM6hwbRaszqNoDTTY3K7tXg2i1ZnUODaLVmdRtAa
abG5Xdq8G0WrM6gltokX4tH1G0Bppsbld3ljGxtRrGo1qciImCHoAsoAAAAABglo6aZ2dJA
xzudW6TOCJiJTEzHY1eDaLVmdQ4NotWZ1G0CNNNltyu7V4NotWZ1Dg2i1ZnUbQGmmxuV3av
BtFqzOocG0WrM6jaA002Nyu7V4NotWZ1Dg2i1ZnUbQGmmxuV3avBtFqzOocG0WrM6jaA002
Nyu7V4NotWZ1Dg2i1ZnUbQGmmxuV3avBtFqzOocG0WrM6jaA002Nyu7V4NotWZ1Dg2i1ZnU
bQGmmxuV3avBtFqzOocG0WrM6jaA002Nyu7V4NotWZ1Dg2i1ZnUbQGmmxuV3avBtFqzOocG
0WrM6jaA002Nyu7V4NotWZ1Dg2i1ZnUbQGmmxuV3avBtFqzOocG0WrM6jaA002Nyu7V4Not
WZ1Dg2i1ZnUbQGmmxuV3avBtFqzOocG0WrM6jaA002Nyu7VS3USLjvaPqNlrWsajWojUTkR
EPoJiIjsVmqZ7ZAAShA5a/Jep9Zn8yE8QOWvyXqfWZ/MhPGk/Lj6z/FI78/b+gAM1wgMqWS
QtorrExX7wmz5Gpy5i6HexCfPjmo5qtciKipgqL4y1FWmrNWqNUZMdNUw1dOyop5EkikTFr
k8ZlIF2S608z5LTcp7ej1xdG1M+PH6GqOBr785n/dGbS+iieyr1V1VeMJ4EDwNffnM/7oza
OBr785n/dGbSNFPVH79k6p6fT3TwIHga+/OZ/3Rm0cDX35zP8AujNo0U9Ufv2NU9Pp7p4ED
wNffnM/7ozaOBr785n/AHRm0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2
NU9Pp7p4EDwNffnM/wC6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf8AdGbRwNffnM/
7ozaNFPVH79jVPT6e6eBA8DX35zP+6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf90Z
tHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/dGbRop6o/fsap6fT3TwIHg
a+/OZ/3Rm0cDX35zP8AujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/AHRm0aKeqP37
Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/wC6M2jga+/OZ/3
Rm0aKeqP37Gqen0908CB4Gvvzmf8AdGbRwNffnM/7ozaNFPVH79jVPT6e6eBA8DX35zP+6M
2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDw
NffnM/7ozaOBr785n/dGbRop6o/fsap6fT3TwIHga+/OZ/3Rm0cDX35zP8AujNo0U9Ufv2N
U9Pp7p4EDwNffnM/7ozaOBr785n/AHRm0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/uj
No0U9Ufv2NU9Pp7p4EDwNffnM/wC6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf8AdG
bRwNffnM/7ozaNFPVH79jVPT6e6eBA8DX35zP+6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4
Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/dGbRop6o/fsap
6fT3TwIHga+/OZ/3Rm0cDX35zP8AujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/AHR
m0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/wC6M2
jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf8AdGbRwNffnM/7ozaNFPVH79jVPT6e6eBA8
DX35zP+6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU
9Pp7p4EDwNffnM/7ozaOBr785n/dGbRop6o/fsap6fT3TwIHga+/OZ/3Rm0cDX35zP8AujN
o0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/AHRm0aKeqP37Gqen0908CB4Gvvzmf90ZtH
A19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/wC6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4G
vvzmf8AdGbRwNffnM/7ozaNFPVH79jVPT6e6eBA8DX35zP+6M2jga+/OZ/3Rm0aKeqP37Gq
en0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/dGbR
op6o/fsap6fT3TwIHga+/OZ/3Rm0cDX35zP8AujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOB
r785n/AHRm0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNf
fnM/wC6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf8AdGbRwNffnM/7ozaNFPVH79jV
PT6e6eBA8DX35zP+6M2jga+/OZ/3Rm0aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo
0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/dGbRop6o/fsap6fT3TwIHga+/OZ/3Rm0cDX
35zP8AujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaOBr785n/AHRm0aKeqP37Gqen0908CB4Gv
vzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/wC6M2jga+/OZ/3Rm0aKeqP37Gqe
n0908CB4Gvvzmf8AdGbRwNffnM/7ozaNFPVH79jVPT6e6eBA8DX35zP+6M2jga+/OZ/3Rm0
aKeqP37Gqen0908CB4Gvvzmf90ZtHA19+cz/ujNo0U9Ufv2NU9Pp7p4EDwNffnM/7ozaFsl
6embJlLKrV5cyma1etF0DRT1R+/Y1VdPoxZTzNr301hgXPmqZWulRP/TjRcVVSxkdarJSWl
HuhR8k0n7SeVc57/tJEV1RlFNPZBTE85kABmuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//Z
</binary><binary id="_39.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCADGAxkDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgMHAgEI/8QAUxAAAQMCAgUHBwkEBQoGAwAAAAECBAMFBhESIVST0QcTFBUx
c7EWNUFRVVelIjM0YXFygZGyFzI3oTZCUrPSI0NWYnR1gpKUwSSDwtPi8Aii4f/EABkBAQE
BAQEBAAAAAAAAAAAAAAABAgMEBf/EAB8RAQEAAgIDAQEBAAAAAAAAAAABERMCMQNBUSESMv
/aAAwDAQACEQMRAD8A9mAKrE168ncOTbv0fpHRKenzWnoaWtEyzyXLt9QFqCNbpfWFsizdD
m+kUWVdDPPR0mouWfp7SSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWtcoE
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
F70WPRourucnpajdLP8iNiO0tvuHLha3In/AIqO9jVX0Oy+Sv4Lkp5zLv8AXn8h8CJTVesJ
z6dpRq9umjtFUX7Wt/mB6Lhq9piOwRbu2K+KyU1XNpVFRXImaoi6vXln+JaGav0S2WjBtGF
LvVezQIjKdJZEepzdRWtTJGoqIq5rl6EzPP5N5tthuFpm4Yul+dzs6lRk0Zzay0K9Jy5Kud
RMtL1faB6diCXfIcdlWywIstU0lrJIrrT0URNWWSLn6Tng2/1MUYVhXmrHbHfJR+dNrtJG6
L3N7f8AhLSb9Bkd07wMpySfwytH2Vf754GyBjrJOl1eVHE0OpKrPjUI8VaVF1RVZTVWa1a3
sTP05H5YbhKfyl4vjV5dZ8WLTiLSouqKrKWdLN2i3sTNda5doGyB4tbL7BxWyRd8R3HELX1
qzkixrdTrNox6aLkmSsbk53rU3HJtdrjcbTMjXF0qusKU6lHlSqLqdSvR7WucjkRc/WBsQA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoMQ
XXEVrmUH2uwJdoTmLzyU5DadWm7P0I795MvQX4AwLIWIcXYxtF1uVlWzW6zrUqMbWrNfVrv
ciJlk3sRMk/+9lxi+TfakKXa7XhyrcKcuI+n0lsulTRjnI5uWi5UVctS/iXrrjCbcW210qk
kx9PnW0FcmmrM8tLL1ZkkDHYGdiG3Wq3WO54aqxKUWPzbpazKL2qqJ/ZaqrrK2xwMW4Kpy7
FbLFSukB1d9SDLWW2klFrtejUautcl16u3WbyZMjW+JUlzK7KFCkmb6lR2TWp9amalYIh3W
vWm0cRXyhQnLzr6MWdo0Xo7XqTJckX6lAoOTmHKkcmV6itVK8ivIlsY5FREquVujmirq1qX
1rslxj8lPUdWPo3DqypQ5nTavy1a5ETSzy7VTXnkaG1WqFZLZQttuoJQjUG6LGJry9Krn6V
VdeZMApcHwJVrwhaoE2lzUmPGZTqs0kdouRNaZpmi/gXQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPM4WCb1R5RtKpGamHY9wq3OjU5xvyqz2NRG6OeaaLs8tXoU9MI8+fEtcOp
MnyacaPTy06tV2i1uaoiZr9qogGZ5QLLcrpGtc21xmTa1qnslrDe9GpXanaiKurP7fr+wos
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/9k=
</binary><binary id="_38.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCADGAxkDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgMHAgEI/8QAUhAAAQMCAgUHCAcDCAgGAwAAAAECAwQFBhESIVST0QcTFBUx
QbEWNVFXcnORlSI0YXGBobIyM0I2N0NSgpKisxcjJFZ0dcHwJYOU0+HiOGLS/8QAGQEBAQE
BAQEAAAAAAAAAAAAAAAECAwQF/8QAHxEBAQABBAMBAQAAAAAAAAAAAAERAhMxUQMhQRIy/9
oADAMBAAIRAxEAPwD2YAqsT3vycw5W3jo/SeiM0+a09DS1onbkuXb6ALUEa3VfT7bS1mhzf
SIWS6GeejpIi5Z9/aSQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAizXOgp5V
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
4uqp+g1ToqeqqonRyTw9rHORyZ5+kDZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABQYguuIrXWQvtdgS7UTmLzyR1DY5Y3Z9yO/aTLuL8A
YFlFiHF2MbRdblZVs1us6ySMbNM18s73IidjexEyT/AL7LjF9TfZKKstdrw5LcI6ukfH0lt
XFGjHORzctFyoq5al/EvXXGibcW211VElY+PnWwK5NNWZ5aWXozJIGOwM7ENutVusdzw1LS
RUtPzbqtayF7VVE/qtVV1lbY6DFuCo6uxW2xxXSgdO+Shq1q2xpC1y56MjV1rkuvV2m8ra2
lt1JJV1s8dPTxJm+WR2TWp2a1M3V4HpLpUTVkWIb7TwVq84+ClrtGF+l25JkuSL9igZ/k4o
6qo5Mr1StVJ6ieoq2McioiSuVujmirqyVS+tdkuNPyU9Ry0+jcOrJIOZ02r9NWuRE0s8u1U
155GhtVqorJbILbboEgpoG6LGJry71VV71VdeZMApcH0FVa8IWqgrYuaqaemZHKzSR2i5E1
pmmaL+BdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8yosE3qHlG0pKZqYdp7hLc4
ZOcb9KZ7GojdHPNNF2eWruU9NI9fX0lro5KyvqY6anjy05ZXaLW5qiJmv3qiAZnlAstyulN
a6210zK2a1V7KtaN70ak7U7URV1Z/f9v3FFiiHF+MmWxkOHH2+ko6+KeVlRUx87IqL2omeS
NamffmuaZJqPSmqjmo5q5oqZop+gc54m1FPJC/PRkarVy9CpkYjBUGK8MU1Lhqrw/HUUFNI
9rbpFWsRObVyuRVjX6WevI2VLcaKtlqIqWqimkpX83M1jkVY3ehfQpJAwdwpb/h3lArb7bb
K+70V0po45GQzNY+KRmpP2u7Lx+zX1wdZ7/Bi/Ed4vtDHTtubYFiRkrZEya1UVmpc82pkiq
qIiqi5ajbgDzuyw4mwBDNZabD8l6taTPkop6eoY17GuXPQe13oXvNhYKy711C+e82xlsmWV
ebp2zJKqR5JkrnJqzzz7PsLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAeaYouNZbeWK3ut1vWvrJ7OsUMOmjG5rI5VVzl7GoiKpf2
HFtwnxFJhzENrZbrjzPSIHQy85FPHnkuS9yp6PsUpr7dKK08ttplrpmQxS2l0SSyLk1rlkf
lmvdnll+J91FXT3zlmtC2yZlSy10MzqqWJyOa3TRWtaqpqzzVFy+0Czx/eKy12iqdPhmG7W
dsLXVL5K1Itello6Giqr/Cueff9hoqWZzrJDPSUzUctM18UCvyTPRza3Sy7OxM8jMcqNxoW
4DvNGtbTpU803/UrK3T/AGmr+znn2ay+w9caGrtNHDTVlPNIymj0mRytcrfoomtEXUBgIrn
ir/SzPKlgpVrupkatL1h9BI+dT6enoduerLL8T0u2y1s9BFJcKVlLVORechjl5xrda5ZOyT
PVkvYYqoraW18tqzV9RFSxVNi5uKSZ6Na9yTIuSKurPJFN3BPDUwtmp5WTRO/ZfG5HNX7lQ
DoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYzld/mwu//k/50ZszGcrv82F3/wDJ
/wA6MCDLju/2q2016uGGUisD9BFlbUI6eJjska9zMu/NNX29ptLhV1cdrdVWqjZcJ1RqxQr
OkTZEVU16aouWpVXs7jDYzxTZa/krkZSVkE09fBHDBTRvRZFeqt+joprRU15/cbO3OisuHr
fDcamKBYaeKFz5ZEaivRiIqZr9ygUuB7rFc6u+otiitNZBWaFWkdRz3OyZa3KuihRcr1Ze2
4eqIG2yFLck8Ktq0qsnqukmrQ0fTq7ftO+BLtbYsQ4udJcKViTXRXRq6ZqaaZdqa9ZM5XmO
dyfVT2tVUinhe/JM8kSRNYF9Zq7ENVUSNvFlpqCJGZsfFW88rnZ9mWimWrvKmsxXeq3EdfZ
cNWimqltiM6VUVdQsbEc9M0a1ERVXV3/9ro6G7225oi0FwpqrNul/qZWvXL06lMjecP2Cvv
8AWXK3Yplsl3TJlWtLVtajlRNXORr26svQBqrLVXOroOcu9uZQVTXq10TJklaqJ2ORydy+g
sDIcm17uV7sdWtyqmVrqOukpoq1jEalSxuWT0RNXeuv/rma8AAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDW2W1XGR0ldbaSpkdFzSv
mha5yszz0c1TPLPXl6Ra7Ja7JC6G12+no2PXNyQxo3SX7fSTgBWVmGbBcKp9VW2O3VVQ/LT
lmpI3vdkmSZqqZrqREPu32GzWmV0tttNDRSPboufT07I1cnoVWomosABEr7Tbbqxsdyt9LW
sYubW1ELZERfs0kU60lHS0FMylo6aKmgjz0IoWIxjdeepE1JrU7AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAcKyipbhSvpa2mhqqeTLTimjR7HZLmmaLqXWiL+B3AFVHhewQ3
TrSOzUTK3PS59sDUci+nPLt+3tJdfbKC6wJBcaGmrIWu00jqImyNR2Spnk5F15KvxJQApm4
Owu1yObhu0oqLmipQxav8ACW0kbJo3Rysa9j0yc1yZoqehUPsAQKCxWe1TPmt1poqOV6aL3
09OyNzk7clVETMjXDCOHLrVLVV9koaid2t0r4G6TvvXv/EuABypqWnoqdlNSwRwQxpkyOJq
Na1PQiJ2HUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/
9k=
</binary><binary id="_11.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAB9AMQDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAUGBwQDAgH/xABEEAABAwMBBAUIBwYEBwAAAAABAAIDBAURBgcSITETNkFhdBQy
UXGRsrPDFRYiI1KBoUJDVpSx0TM3YvBVcpOVosLS/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/
EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/ANmRFUtda5+pYoT9G+W+V9J+/w
Cj3N3d/wBJzne/RBbUVSoNTaouVBBXU2kYXQ1EbZIybo0EtIyOG4pG3XPUVRXRxV+nIqOnd
nfnbcGylvA4+yGjOTgc+1BOIiICIiAiIgIiICIiAiIgIiICIiAi5q+aqgopJaGkbV1DQNyF
0ojD+P4iDjhx5KD+mdXfwhB/3Zv/AMILKizm/bUbjpu4Mobnpdkc0kYkAbcA4bpJHMR+kFa
MgIiICybbn5tj9dR8taysm25+bY/XUfLQX/RvUuzeCi90KaULo3qXZvBRe6FNICIqxqHUtT
BfqHTdnbE641o33yyguZTxDOXEDGTwOBns70FnRVG+Xm66ONLX11WLja5ZRFUl0LWSQE8nj
d4FvcRnlxVsY9sjGvY4Oa4ZBByCEH0ijr9eqbT1lqbpV5McDcho5vceAaPWVD246putjjuv
0hBSVNRH00FH5OHRNaRlrXuP2iSMZIIxnkgtKKC0jqaPU9oNSYugqoXmGpgJz0bxz/I/75K
dQERfL3FrHODS8gZDW4ye4ZQfSKlfW67naPRacmoYqSmlidKft9I943HEcRwbxbyGeXNXVA
RFUtRXbU094Ns0pFSvfSRh9ZJUcml/mNHfgEn1hBbUVV04zW77kX6ikoo6RjCWspgC57uQz
6AOJ9eFakBERBh+2brrSeBj+I9bgsP2zddaTwMfxHrcEBERAWTbc/NsfrqPlrWVk23PzbH6
6j5aC/6N6l2bwUXuhTShdG9S7N4KL3QppAWZ6dkdW7b75LLxMFM5rO7Bjb/TPtWmLOaanNj
23TvkG7DeKR3QuPIuw0uGfTlh9oQTe02Jsuz66Bw81sbh3ESNXVoGpfV6FtEshJcKcMyfQ0
lo/QLg2p1Ah0HWQjjJVSRQxtHNzi8HA/JpU3pu3fQmmKChlIa6mp2iQk8A7GXfrlBSttlQ9
un7fTNOGzVW87v3WnHvLR4o2wwsiYMNY0NA7gs/2q00V+0Sy5W2eKrZRTiQvgeHjcwWu4j0
Egn1FXm2VsdxtdLXRODmVELZAR3jKDPdASOp9pOrKJnCJ8r5cdgIkOPfK0xZ5s2pDV6g1Lq
LH3NVWPjp3fibvFxP6t/VaGgIiIM6uH+e9r8C73ZVoqzq4f572vwLvclWioCzi7bPdSR3Gr
u1j1TKypqZTK+F29E1x7BkEg4GAMjsV/jr6Oaomp4quB80H+LG2QF0f/MOY/NekM8NTEJYJ
WSxnk9jg4H8wgpWgtYXK5V1Vp7UUPRXajG9vbob0jRjOQOGeIORwIKvKpEdGK7bDLXUw+6o
Le2OpeORlcThvr3SD+Su6AiIgw/bN11pPAx/EetwWH7ZuutJ4GP4j1uCAiIgLJtufm2P11H
y1rKybbn5tj9dR8tBf9G9S7N4KL3QppQujepdm8FF7oU0gKOvFjoL5BHHWxu3oXiSGWNxZJ
E4ftNcOIKkUQQ0emaY1sFZXVdXcpaU70Hlb2lsTvxBrWtBPeQSpKspIq+ino5wTDURuikAO
CWuGDx9RXuiCG09pe3aatD7XRiSWCR7nydOQ4vLgAc8AMYAGMLwi0dSU1PJR0dwuNLQyE5p
IpgIwDzDSQXNB9AcFYEQc9DQ0ttooqOigZBTwt3WRsHABdCIgL8cC5pAcWkjGRzHtX6iCty
aHoJb6y+PrrgbhGMNn6VvAYIxjdxjBPDHarFG0sja10jpCBgudjJ9eAAvpEFeotE2egvNzu
sbZnzXRr2TsfJlmHnLgBjIye892Fx2rZ3brJNI623W700cp+3BHUgMP/jn88571bUQctBbq
S103k9HCIo94uPEkucebnE8ST6TxXUiICIiDD9s3XWk8DH8R63BYftm660ngY/iPW4ICIiA
sm25+bY/XUfLWsrJtufm2P11Hy0F/wBG9S7N4KL3QppQujepdm8FF7oU0gKLvV9hszI2Cnn
rKufPQ0tMzekkxzPc0ZGSfSpReApYGVb63cHTOjEbnk8mgkgd3En/AGEFTotojfp2Gz3uy1
dnnqSGwOmIc15PAccDmeHDPFXNZ7qKusmr9X2ez09ypyaCc1Esgf55GMRMPaTjj6Mdp4LQk
HlU1MFHTS1NTK2KGJpe97jgNA5lUet2pxUgFSNOXZ9uJ4VjoSxjh6RkYPdkhXC6W2K608dN
UH7gSskkjxkSBpyGnuyBn1YXvVRU81HNFVNY6newtka/zS3HHPdhBzWa80N/tkVxt8vSQS8
sjBaRzBHYQu9Z9sbpJoNLVUzt4QVFW50Ad2tADSfaMfktBQFyXS6Udmt01wr5hDTwjLnH9A
B2k+hdazbajO6svmmrAT9zVVbXTN7HZc1o/q5BZJNW1FPa23epsNXFbSA90m+wysYeT3Rg5
A7Tgkgdin6WqgraWKqppWywzND2PachwPIr9qaeOqpZaaVoMcrCxw9IIwVQdjdwlm07V26Z
xd5DUkM7mu449ocfzQaGoBuqRXXKqoLNQSXB1Gd2om6RscTHfgDjzd6hgeldWqLi+06XuVf
EcSQ0z3Rn0OxgH24UBsmpWwaDppgPt1U0srz2k7xb/RoQT1k1DS3p9TTtjkpq2jfuVNLNgP
jPYeBIIPYQpZZveqg2fbVapojusuVK2KcD9vJc0fq1nsWkICIiDD9s3XWk8DH8R63BYftm6
60ngY/iPW4ICIiAsm25+bY/XUfLWsrJtufm2P11Hy0F/wBG9S7N4KL3QppQujepdm8FF7oU
0gL4lijnidFNG2SN4w5jxkEd4X2q3faDVz7zBW2G6UbKVsYbJR1bDuOOTxy0E8eHo5IKztQ
0laqXTz77bqaKhrKORjt6naI98FwbyHaCQc8+C0G2vnltlLJUjE74WGQYxhxaM/qoqWzV16
dT/Tz6boIJBL5JTBxZI8ci9zsEgc93A488qXroqiagqIqSYQVD4nNilIzuPIOHY7jxQe6rt
6fNf55NP0Mjo4OVxqm/u2H900/jcOf4QfSQuW1WnV9DpCWhmu1PUXaSR3R1MrnPbEw47SMu
I4kZHb3KFotKbRLfTNpqXVNDHE0k46BpJJOSSSzJJPEk8Sgv9LTU9DSw0dNG2GGJgbHG3kA
F7qt6Yst9oqmes1FdmXGpc0RwGNu62Jmcu4AAZJDez9kKyICzTaTEabWmk7m4fctqmse7sG
JGu/oT7FpaidS6epNT2eS3VZLMkPilb50TxycP98iUEq5wY0uccADJJ7FnGximf9EXS4OaQ
yqqsNz27oz/AO36KxTUWq6u0OtU81uYZI+ikuDHvLy0jBIi3QA4j/XjKmLNaKSxWmntlE0t
ggbujPNx5knvJyUHFrOkfXaNu1PEC57qV5aB2kDOP0UVsrmbLs+t7QcmJ0rHdx6Rx/oQuyz
WjUVJqq6Vtxuzam2VGfJqYEno/tAjgRgYGRw55yvG26duWl6urbYfJJ7dVyGbySpldEYHnn
uOa12WnhwI7OaCA1PA64bZtP08YyaeBszyP2Q1z3cfYPatJUBZdOSUt5rL9c5o57nWNDPug
RHBGMYY3PE8hknn6Ap9AREQYftm660ngY/iPW4LD9s3XWk8DH8R63BAREQFk23PzbH66j5a
1lZNtz82x+uo+Wgv+jepdm8FF7oU0q1pC626LR9ojkuFKx7aOIOa6ZoIO6OYypuG5UFRKIo
K6nlkdyYyVrifyBQdSIiAiIgIiICIiAiIgIiICIiAiIgIviWaKCIyzSMjjbzc9wAH5lcv0z
a/+JUn/Xb/AHQY5tm660ngY/iPW4LCtr9TT1WsaWSnnjmYKJgLo3hwzvv4ZC3VAREQFyV1q
ttz3PpC30tX0edzyiFsm7nnjI4ch7F1ogifqppz+H7X/Jx/2XtS6fstDUNqKO0UNPMzO7JF
TMY4ZGDggZ5KQRAREQEREBERAREQEREBERAREQEREHlU0tPW076eqgjnhf50crA5ru3iDwK
jvqppz+H7X/Jx/wBlLIgifqppz+H7X/Jx/wBlLIiAiIg//9k=
</binary><binary id="_37.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAEEBRIDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAgEI/8QATBAAAQMCAgINCAYIBgMBAQEAAAECAwQFBhESIQcTFTE1QVFU
VXKRlLIUFiJhcbHR0jI2QoGDsyMzNFOSoaLBFyRSYsLhRILwQyWT/8QAGQEBAQEBAQEAAAA
AAAAAAAAAAAECAwQF/8QAIxEBAQABBQEBAAMBAQEAAAAAAAECERITMVEDMiEzQQQiYf/aAA
wDAQACEQMRAD8A7MAeM86xOY1rNNXZ8eW8B7Ai+VS/uE/j/wCh5VL+4T+P/oCUCL5VL+4T+
P8A6HlUv7hP4/8AoCUCL5VL+4T+P/oeVS/uE/j/AOgJQIvlUv7hP4/+h5VL+4T+P/oCUCnu
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
QamVnTGWGOV1rNbTeOik7w0bTeOik7w00oLvyTiwZrabx0UneGkK8XCtsdsmuVda3pTQJnI
6OVHq1M8s8kTPI2R8SxRzRPilY18b2q1zXJmjkXfRUG/I4sGWoZ6+5UMNbR0DJqediPje2p
bk5F3j32m8dFJ3hpnrFLJseYs82Kt7lsd0eslqmeuaQyKvpQqvtXV7U5Vy6MN+RxYM1tN46
KTvDTwmobxLVU825qJtKuXLyhuvNMjWAm+nHizW03jopO8NG03jopO8NNKC78jiwZrabx0U
neGjabx0UneGmlA35HFgxt4uFbY7ZNcq61vSmgTOR0cqPVqZ5Z5ImeR7UM9fcqGGto6Bk1P
OxHxvbUtyci7xqZYo5onxSsa+N7Va5rkzRyLvoqHPLFLJseYs82Kt7lsd0eslqmeuaQyKvp
QqvtXV7U5Vyb8jiwaHabx0UneGjabx0UneGmlA35HFgyc1DeJaqnm3NRNpVy5eUN15pke+0
3jopO8NNKCb6ceLNbTeOik7w0bTeOik7w00oLvyOLBmtpvHRSd4aQrxcK2x2ya5V1relNAm
cjo5UerUzyzyRM8jZHxLFHNE+KVjXxvarXNcmaORd9FQb8jiwZahnr7lQw1tHQMmp52I+N7
aluTkXePfabx0UneGmesUsmx5izzYq3uWx3R6yWqZ65pDIq+lCq+1dXtTlXLow35HFgzW03
jopO8NPCahvEtVTzbmom0q5cvKG680yNYCb6ceLNbTeOik7w0bTeOik7w00oLvyOLBmtpvH
RSd4aNpvHRSd4aaUDfkcWDG3i4Vtjtk1yrrW9KaBM5HRyo9WpnlnkiZ5HrQVNddKCCuoqBk
1PUMR8b21DclRTVyRsmidFKxr2ParXNcmaORd9FQ53ZpH7HWLfN2pe7cC7SK+2yuXNKeVd+
JV5FVdX3cqjfkcWDQ7TeOik7w0bTeOik7w00oG/I4sGTmobxLU0825qJtLnLl5Q3Xm1U/ue
+03jopO8NNKCb6ceLNbTeOik7w0bTeOik7w00oLvyOLBmtpvHRSd4aQ7tX11ktk1xrbW9Ke
BNKR0cqPVqcuSa8jYnzJGyWN0cjGvY9Fa5rkzRUXfRUG/I4sGUoKmuulBBXUVAyanqGI+N7
ahuSopI2m8dFJ3hpnrNI/Y6xb5u1L3bgXaRX22Vy5pTyrvxKvIqrq+7lU6MN+RxYM1tN46K
TvDTwmobxLU0825qJtLnLl5Q3Xm1U/uawE3048Wa2m8dFJ3ho2m8dFJ3hppQXfkcWDNbTeO
ik7w0bTeOik7w00oG/I4sGOu1fXWS2TXGttb0p4E0pHRyo9Wpy5JryPSgqa66UEFdRUDJqe
oYj43tqG5KimrkjZLG6ORjXseitc1yZoqLvoqHO7NI/Y6xb5u1L3bgXaRX22Vy5pTyrvxKv
Iqrq+7lUb8jiwaHabx0UneGjabx0UneGmlA35HFgyc1DeJamnm3NRNpc5cvKG682qn9z32m
8dFJ3hppQTfTjxZrabx0UneGjabx0UneGmlBd+RxYM1tN46KTvDSHdq+uslsmuNba3pTwJp
SOjlR6tTlyTXkbE+ZI2SxujkY17HorXNcmaKi76Kg35HFgylBU110oIK6ioGTU9QxHxvbUN
yVFJG03jopO8NM9ZpH7HWLfN2pe7cC7SK+2yuXNKeVd+JV5FVdX3cqnRhvyOLBmtpvHRSd4
aIqK6SXOkmloEijgc5XLtzXb7VT+5pQS5WrPnjLrEPQn/AHP9SDQn/c/1ITAZbQ9Cf9z/AF
INCf8Ac/1ITABD0J/3P9SDQn/c/wBSEwAQ9Cf9z/Ug0J/3P9SEwARI45tvjc6PRRuea6WfE
SwAAAAAAAAAAAAAAAAAAB8ve2NjnvcjWtTNXKuSInKBV4mxFR4WsVRda1c2xJkyNF1yvX6L
U9a+7NeIo8BYerKdKnE1+TSvd29ORFT9ni+zGnJqyz9iJxFVamO2R8XbuTtVcO2eRWW+Nya
qqZN+VU40Ti+7/cdHAAAAAAAAAFTibEVHhaxVF1rVzbEmTI0XXK9fotT1r7s14i0e9sbHPe
5GtamauVckROU51amO2R8XbuTtVcO2eRWW+NyaqqZN+VU40Ti+7/cBa4Cw9WU6VOJr8mle7
t6ciKn7PF9mNOTVln7ETiNkAAAAAAAAD5e9sbHPe5GtamauVckROUCrxNiKjwtYqi61q5ti
TJkaLrlev0Wp6192a8RR4Cw9WU6VOJr8mle7t6ciKn7PF9mNOTVln7ETiKq1Mdsj4u3cnaq
4ds8ist8bk1VUyb8qpxonF93+46OAAAAAAAAAKnE2IqPC1iqLrWrm2JMmRouuV6/RanrX3Z
rxFo97Y2Oe9yNa1M1cq5Iicpzq1Mdsj4u3cnaq4ds8ist8bk1VUyb8qpxonF93+4C1wFh6s
p0qcTX5NK93b05EVP2eL7MacmrLP2InEbIAAAAAAAAH45zWNVzlRrUTNVVdSIBWYkxBR4Ys
dRda536OFvosRdcj13mp61X4mfwFh+sY6pxVfm53q7ekrVT9mh+zGnJqyz9iJxKVlva7ZJx
futKirhuyyq2jYqejVzpvyKnG1OL7uVyHRwAAAAAAAABV4kxBR4YsdRda536OFvosRdcj13
mp61X4lm5zWNVzlRrUTNVVdSIc5t7XbJOL91pUVcN2WVW0bFT0audN+RU42pxfdyuQCzwFh
+sY6pxVfm53q7ekrVT9mh+zGnJqyz9iJxKbQAAAAAAAAH45zWNVzlRrUTNVVdSIBWYkxBR4
YsdRda536OFvosRdcj13mp61X4mfwFh+sY6pxVfm53q7ekrVT9mh+zGnJqyz9iJxKVlva7Z
JxfutKirhuyyq2jYqejVzpvyKnG1OL7uVyHRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ApsV4bpcV2Ga2VPoOd6cMyJrhkT6Lk/wDt5VKnAWJKq4wVFhvf6O+2ldrqWqv65v2ZU5UVM
s19i8aGvMRj2x1sM9PjCwM//rWtM5Ik/wDKg+0xeVUTPL7+PIDbgrcP3yixJZaa60D9KGdu
eS77HcbV9aLqLIAAAAAAFNivDdLiuwzWyp9BzvThmRNcMifRcn/28qlyAMhgLElVcYKiw3v
9HfbSu11LVX9c37MqcqKmWa+xeNDXmIx7Y62GenxhYGf/ANa1pnJEn/lQfaYvKqJnl9/Hka
XD98osSWWmutA/Shnbnku+x3G1fWi6gLIAAAAAAAFNivDdLiuwzWyp9BzvThmRNcMifRcn/
wBvKpU4CxJVXGCosN7/AEd9tK7XUtVf1zfsypyoqZZr7F40NeYjHtjrYZ6fGFgZ/wD1rWmc
kSf+VB9pi8qomeX38eQG3BW4fvlFiSy011oH6UM7c8l32O42r60XUWQAAAAAAKfFGHKTFVh
ntdX6OmmlFKia4pE+i5PZ/NM0LgAY7AWI6usjqcO330L5aV2ubNf18f2ZU5c0yz9qLxmxMV
j2w1qSU+LbA3K8WpM1YiftUP2o1Tj1Z5ffx5Giw7f6LE1jp7rQuzimbraq643cbV9aKBZgA
AAAAAAp8UYcpMVWGe11fo6aaUUqJrikT6Lk9n80zQpsBYjq6yOpw7ffQvlpXa5s1/Xx/ZlT
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
ACoGQxHsl2GwufBHItfVsVUWGBdTV5HO3k+7NfUa8z1pwPYrTWy10dIk9XLI6RZ5/TVqquf
opvJv8Wv1kuv+NY6f6rcDY9lxfWVdPJb2Uvk8aPzbKrs81yy3kNmcm2IvrNfOr/zU6yTG6x
fpJMtIAA0whz8L0H4nhLIrZ+F6D8TwlkfL/6v7H1v+T+sAPGsqEpKKepcmaQxuev3JmeZ6m
UxHj3c26JZ7RQuuNfnk5rc9Fq7+WSa1Xl5CDDsi3G3V8VNiayOoY5foysRyZevJd9OXJSHs
UUvldZdLzU/pJ3ORiPXfzcquev36jx2SLpLeqx9noI0kitjFqKqT/S5Eyyz9WeXtX1HomOO
7bo47rpu1dPY9sjGyMcjmORFa5FzRU5T6MtscV767BtMkjtJ1O50Kr6kXNP5KiGpOGU0ujr
LrNQ8G8P272S+E9zwbw/bvZL4Tfy/cY+n4rQgA97xgAAAAAAAAAAAAAAAKW+cJWzryeAC+c
JWzryeAHj+/wCnq+P5ADyqqhtLSTVL/owxuevsRMzg7MZivZHbZ7slks1vdc7mqojmNz0WK
uvLJNbly4kyy5Ssh2ULtabhDT4sw++gim+jNGjkyTlyXPSROPJc0IOw5TLcbreb9V5SVKuR
qPXlequev8k/mfGyrd5r9WvsFsiSaO1sdV1suWegqJvZ8WSLr9a5cR6Jjju2aOG7LTdq61F
LHNEyWJ7XxvajmuauaORd5UPoxmxRcX3DAtOyRyudSSPp815EyVOxHIn3GzOGU0ujtLrNQr
6/hK39aTwlgV9fwlb+tJ4Tp8P7I5ff+vJKAB9h8UMjiPZJsOH3PgbKtdWMVUWGBdTV5HO3k
/mvqNcZ62YHsVruE1wbSJUVk0rpVmn9JWqq5+im8m/7fWS6/wCNY6f6q8D4+lxfcKqlktzK
XaIkfmkquz15ZbyG1OTbFP1yvvVd+YdZJjdZ/K/SSZfwAA0wg1fCdB1pPCTiDV8J0HWk8JO
JFvUAAVGRxHsk2HD7nwNlWurGKqLDAupq8jnbyfzX1HhgfH0uL7hVUsluZS7REj80lV2evL
LeQtLZgexWu4TXBtIlRWTSulWaf0laqrn6Kbyb/t9Zh9in65X3qu/MMa3WausmNxujrIANu
QQavhOg60nhJxBq+E6DrSeElWdpwAKgZHEeyTYcPufA2Va6sYqosMC6mryOdvJ/NfUa4z1s
wPYrXcJrg2kSorJpXSrNP6StVVz9FN5N/wBvrJdf8ax0/wBVeB8fS4vuFVSyW5lLtESPzSV
XZ68st5DanJtin65X3qu/MOskxus/lfpJMv4AAaYQazhK39d/gUnEGs4St/Xf4FJxIt6gAC
oyWI9kiw4edJTpKtbWMVUWCBc9FeRzt5P5r6iNgjZAlxdc6mjktraRIYds0klVyr6SJlvJy
lrbsD2K33KouaUiVFZPM6ZZZ/S0Fcqr6KbyZZ7+/wCsw+xf9fr91ZPzUMa3WOsmNxujrIAN
uQQazhK39d/gUnEGs4St/Xf4FJVnacACoGSxHskWHDzpKdJVraxiqiwQLnoryOdvJ/NfUa0
z1uwPYrfcqi5pSJUVk8zplln9LQVyqvopvJlnv7/rJdf8ax0/1VYI2QJcXXOpo5La2kSGHb
NJJVcq+kiZbycptjk2xf8AX6/dWT81DrJMbrP5XOSX+AAGmEGs4St/Xf4FJxBrOErf13+BS
cSLeoAAqMliPZIsOHnSU6SrW1jFVFggXPRXkc7eT+a+ojYI2QJcXXOpo5La2kSGHbNJJVcq
+kiZbycpa27A9it9yqLmlIlRWTzOmWWf0tBXKq+im8mWe/v+sw+xf9fr91ZPzUMa3WOsmNx
ujrIANuQQazhK39d/gUnEGs4St/Xf4FJVnacACoGZv2PbNY3Ph2xauqYqosMK56K8jnbyfz
X1GmKOgwfZqGvmuCUyT1U0rpVkm9LRVVz9FN5N/wBvrJdf8ax2/wCq3CGNpcT3CelfQNpkh
i080kV2etEy3k5TXHM9jv66XrqyfmIdMJjdZ/LX0kmX8AANObxZw9bOvJ+W40xmWcPWzryf
luNMcM/09fy/IADDqFBfuGLX1Zvc0vygv3DFr6s3uaax7jOf5r8AB6HhACqq8UWGgqn0tXd
6SCeNcnxySojm6s9aA01c72HOGr31W+Jx1k4zsV3m2Wq7XeS4V0FKyVrdB0r0ajvSXeOu0F
xorpT+UUFVFUw6St04nI5M04szGHTr9Z/6SQAbckGp4WoerJ7kJxBqeFqHqye5CcSLeoAAq
BybYc4avfVb4nHRKvFFhoKp9LV3ekgnjXJ8ckqI5urPWhy7YrvNstV2u8lwroKVkrW6DpXo
1Heku8Yyv8x1xl212YEaguNFdKfyigqoqmHSVunE5HJmnFmSTbkEGp4WoerJ7kJxBqeFqHq
ye5CVZ2nAAqABVVeKLDQVT6Wru9JBPGuT45JURzdWetAaaud7DnDV76rfE46ycZ2K7zbLVd
rvJcK6ClZK1ug6V6NR3pLvHXaC40V0p/KKCqiqYdJW6cTkcmacWZjDp1+s/wDSSADbkg1PC
1D1ZPchOINTwtQ9WT3ITiRb1AAFQOTbDnDV76rfE46JV4osNBVPpau70kE8a5PjklRHN1Z6
0OXbFd5tlqu13kuFdBSsla3QdK9Go70l3jGV/mOuMu2uzAjUFxorpT+UUFVFUw6St04nI5M
04sySbcgg1PC1D1ZPchOINTwtQ9WT3ISrO04AFQAKqrxRYaCqfS1d3pIJ41yfHJKiObqz1o
DTVzvYi+s186v/ADU6ycZ2MbzbLXiC8TV9dBTRyt/RulejUd6arqOuUFyobrTrUW+qiqokc
rVfE5HJnyZ/ehjDp1+su5KABtyQarhSh/E8JOINVwpQ/ieEnEi3qAAKgcm2IvrNfOr/AM1O
iVmJ7Db6p9LWXekgnjy045JURzc0zTNPYqHLtjG82y14gvE1fXQU0crf0bpXo1Hemq6jGV/
mOuMu2uzAi0FyobrTrUW+qiqokcrVfE5HJnyZ/ehKNuQQarhSh/E8JOINVwpQ/ieElWdpwA
KgAVVZiew2+qfS1l3pIJ48tOOSVEc3NM0zT2KgNNXO9iL6zXzq/wDNTrJxnYxvNsteILxNX
10FNHK39G6V6NR3pquo65QXKhutOtRb6qKqiRytV8TkcmfJn96GMOnX6y7koAG3JDn4XoPx
PCWRWz8L0H4nhLI+X/1f2Prf8n9YV+IEV2HLm1u+tJKifwKWB8SxtmhfE9M2ParXJyop5p2
9VcjwliRmHsFXF8WTq2ap2unZlmquVqa8uRPgnGaOHD3m/sc3V9V6VfV0z5Kl6rmukqam5+
rPtVTJ4Vt9DZsfLR316RLSOdtCyamOkz9FVVd5FTWnryNfsk4koocPSWynqY5amrVrVbG5H
KxiLmqrlvZ5ZfeerL9ST/XDH863/H1sTIqYTmVeOseqfwsNuUOCbTJZsKUdNM1WTORZZGrv
orlzyX1omSfcXx587rla64zTGB4N4ft3sl8J7ng3h+3eyXwmvl+4z9PxWhAB73jAAAAAAAA
AAAAAAAAUt84StnXk8AF84StnXk8APH9/09Xx/IV+IGq7Dlza3fWklRP4FLA+ZGNljdG9M2
vRUVOVFOEdq4jgjFMeF8DXeeNUdXTVLY6aPfVXq3fy5E1r2JxmrosMOw5sZXuor83XOvo5Z
ap71zciq1cm5+rPX61UxWFLVbrDslrQYikSFKN7todLqY6RMtByqu8iprT15G62U8V2+mwv
Na6arimq67RZoRPRysZmiqq5b2eWX3+o9Wf60n+vPj+db/j42FWqmD6tV3lr35fwRnQzM7H
lllseDKKmqGKyeVFmlaqZK1XLmiL60TJDTHDO65V2wmmMCvr+Erf1pPCWBX1/CVv60nhNfD
+yOf3/AK8koAH2HxQAq6zE9it1U+lrbtSU88eWlHJKiOTNM0zT2KgNNXOtin65X3qu/MOsn
Gdja82y24qvNRXV0FPFM121vkejUd6eer7jrlvudDdadai31cVVE12gr4nI5EdqXL+aGMOn
X6y7koAG3JBq+E6DrSeEnEGr4ToOtJ4ScSLeoAAqBybYp+uV96rvzDotZiexW6qfS1t2pKe
ePLSjklRHJmmaZp7FQ5bsbXm2W3FV5qK6ugp4pmu2t8j0ajvTz1fcYyv8x1xl212YEW33Oh
utOtRb6uKqia7QV8TkciO1Ll/NCUbcgg1fCdB1pPCTiDV8J0HWk8JKs7TgAVAAq6zE9it1U
+lrbtSU88eWlHJKiOTNM0zT2KgNNXOtin65X3qu/MOsnGdja82y24qvNRXV0FPFM121vkej
Ud6eer7jrdvulBdoHT2+rhqomu0FfE9HIjskXLV7UMYdOv1l3JYANuSDWcJW/rv8Ck4g1nC
Vv67/AAKTiRb1AAFQOTbF/wBfr91ZPzUOi1uJrHbqp1LW3akp52ZaUckqNcmaZpq9hy3Y8v
Nst2NL1VVtdBTwTNk2uSR6I12ciKmS+wxlf5jrhLtrswIlvulBdoHT2+rhqomu0FfE9HIjs
kXLV7UJZtyCDWcJW/rv8Ck4g1nCVv67/ApKs7TgAVAAq63E1jt1U6lrbtSU87MtKOSVGuTN
M01ewGmrnWxf9fr91ZPzUOsnGdjy82y3Y0vVVW10FPBM2Ta5JHojXZyIqZL7DrdvulBdoHT
2+rhqomu0FfE9HIjskXLV7UMYdOv0l1SwAbckGs4St/Xf4FJxBrOErf13+BScSLeoAAqByb
Yv+v1+6sn5qHRa3E1jt1U6lrbtSU87MtKOSVGuTNM01ew5bseXm2W7Gl6qq2ugp4JmybXJI
9Ea7ORFTJfYYyv8x1wl212YES33Sgu0Dp7fVw1UTXaCviejkR2SLlq9qEs25BBrOErf13+B
ScQazhK39d/gUlWdpwAKgAV1XiCz0FQ6nq7lTQTNy0mSSIipmmaagaasJsd/XS9dWT8xDph
yjA11t9Diy7VFXWQwQyo/Qe96Ijs5M9S+w6dQ3GiucLpqGqiqY2u0VdG5HIi7+X80MYdOv1
l3JIANuTxZw9bOvJ+W40xmWcPWzryfluNMcM/09fy/IADDqFBfuGLX1Zvc0vygv3DFr6s3u
aax7jOf5r8AB6HhDM3TY9w3eLjNcK2jkfUTKivckz2ouSIm8i8iGmAslWWzpjv8KsI8wl7w
/wCJoLJYqDD1B5DbYnRQaav0XPV2td/WvsLEEkkW5W90ABWUGp4WoerJ7kJxBqeFqHqye5C
cSLeoAAqMzdNj3Dd4uM1wraOR9RMqK9yTPai5IibyLyIRP8KsI8wl7w/4mxBNsa3Zeq6yWK
gw9QeQ22J0UGmr9Fz1drXf1r7CxAKz2EGp4WoerJ7kJxBqeFqHqye5CVZ2nAAqBmbpse4bv
FxmuFbRyPqJlRXuSZ7UXJETeReRDTAWSrLZ0x3+FWEeYS94f8TQWSxUGHqDyG2xOig01fou
erta7+tfYWIJJItyt7oACsoNTwtQ9WT3ITiDU8LUPVk9yE4kW9QABUZm6bHuG7xcZrhW0cj
6iZUV7kme1FyRE3kXkQif4VYR5hL3h/xNiCbY1uy9V1ksVBh6g8htsTooNNX6Lnq7Wu/rX2
FiAVnsINTwtQ9WT3ITiDU8LUPVk9yEqztOABUDM3TY9w3eLjNcK2jkfUTKivckz2ouSIm8i
8iGmAslWWzpjv8ACrCPMJe8P+JoLHYbfh2hWitsTooXSLIrXPV3pKiIutfYhYgkki3K3ugA
Kyg1XClD+J4ScQarhSh/E8JOJFvUAAVGauux9hy9XKa411JJJUTZabkmc1FyRETUi8iIQ/8
ACrCPMJe8P+JsQTbGt2Xqusdht+HaFaK2xOihdIsitc9XekqIi619iFiAVnsINVwpQ/ieEn
EGq4UofxPCSrO04AFQM1ddj7Dl6uU1xrqSSSomy03JM5qLkiImpF5EQ0oFmqy2dMd/hVhHm
EveH/E0FjsNvw7QrRW2J0ULpFkVrnq70lREXWvsQsQSSRblb3QAFZQ5+F6D8TwlkVs/C9B+
J4SyPl/9X9j63/J/WAA8z1KW/YTs+I9F1fTrtzEybNG7ReicmfGntIVo2PMP2eqbVRwy1Es
a5sdUP0kavKiIiJmacGt2WmmrO2a6gAMtB4N4ft3sl8J7ng3h+3eyXwnT5fuOf0/FaEAHve
MAAAAAAAAAAAAAAABS3zhK2deTwAXzhK2deTwA8f3/AE9Xx/IADg7KLEeDbJilGLcqZVmYm
TJ4naL0Tkz409S5lbZti/DNlrGVccE1VNGulGtS9HI1eVERETP2mvBrflJpqztmuugADLQV
9fwlb+tJ4SwK+v4St/Wk8J1+H9kcfv8A15JQAPsPihm7tgDDt7uUtxr6SSSomy03JM5qLki
ImpF5EQ0gFmqy2dMd/hVhHmEveH/Ev7FYLdhyhdR2yJ0UL5FkVrnq70lRE319SIWQJJItyt
7oACsoNXwnQdaTwk4g1fCdB1pPCTiRb1AAFRm7tgDDt7uUtxr6SSSomy03JM5qLkiImpF5E
Qhf4VYR5hL3h/xNiCbY1uy9VtisFuw5Quo7ZE6KF8iyK1z1d6Soib6+pELIArOuoQavhOg6
0nhJxBq+E6DrSeElWdpwAKgZu7YAw7e7lLca+kkkqJstNyTOai5IiJqReRENIBZqstnTHf4
VYR5hL3h/xL6xYftuG6N9JbIXRQySLI5HPV3pKiJvr6kQswTSRblb3QAFZQazhK39d/gUnE
Gs4St/Xf4FJxIt6gACozd3wDh2+XKS4V9JJJUSoiOckzmouSIiakXkQhf4VYR5hL3h/wATY
gm2NbsvVZYsP23DdG+ktkLooZJFkcjnq70lRE319SIWYBWbdQg1nCVv67/ApOINZwlb+u/w
KSrO04AFQM3d8A4dvlykuFfSSSVEqIjnJM5qLkiImpF5ENIBZqstnTHf4VYR5hL3h/xL6xY
ftuG6N9JbIXRQySLI5HPV3pKiJvr6kQswTSRblb3QAFZQazhK39d/gUnEGs4St/Xf4FJxIt
6gACozd3wDh2+XKS4V9JJJUSoiOckzmouSIiakXkQhf4VYR5hL3h/xNiCbY1uy9Vliw/bcN
0b6S2QuihkkWRyOervSVETfX1IhZgFZt1CDWcJW/rv8Ck4g1nCVv67/AAKSrO04AFQKG6YK
sV4r311bTPfPIiI5ySubnkmSakXkQvgLNVls6ZX/AA3wxzKT/wD3f8S6s1joLDSvpbfE6OJ
71kcivV3pZInH7ELAE0kW5W90ABWXizh62deT8txpjMs4etnXk/LcaY4Z/p6/l+QAGHUM5i
WeKmulskmejGI2ZM19jTRgsulSzWaMjuzbudx9o3Zt3O4+01wN8lceGesjuzbudx9o3Zt3O
4+01wHJThnrI7s27ncfaN2bdzuPtNcByU4Z6yO7Nu53H2jdm3c7j7TXAclOGesPPdKF1ypJ
G1LFYxJNJeTNEyJW7Nu53H2muA5KvDGR3Zt3O4+0bs27ncfaa4DkqcM9ZHdm3c7j7Ruzbud
x9prgOSnDPWR3Zt3O4+0bs27ncfaa4Dkpwz1kd2bdzuPtIs90oXXKkkbUsVjEk0l5M0TI3A
HJVnxkZHdm3c7j7Ruzbudx9prgOSpwz1kd2bdzuPtG7Nu53H2muA5KcM9ZHdm3c7j7Ruzbu
dx9prgOSnDPWR3Zt3O4+0bs27ncfaa4Dkpwz1h57pQuuVJI2pYrGJJpLyZomRK3Zt3O4+01
wHJV4YyO7Nu53H2jdm3c7j7TXAclThnrI7s27ncfaN2bdzuPtNcByU4Z6yO7Nu53H2jdm3c
7j7TXAclOGesjuzbudx9pFnulC65UkjalisYkmkvJmiZG4A5Ks+MjI7s27ncfaN2bdzuPtN
cByVOGesjuzbudx9o3Zt3O4+01wHJThnrI7s27ncfaN2bdzuPtNcByU4Z6yO7Nu53H2jdm3
c7j7TXAclOGesPUXShdcaORtSxWs09JeTNNRK3Zt3O4+01wHJV4YyO7Nu53H2jdm3c7j7TX
AclThnrI7s27ncfaN2bdzuPtNcByU4Z6yO7Nu53H2jdm3c7j7TXAclOGesjuzbudx9pFqLp
QuuNHI2pYrWaekvJmmo3AHJVnxkZHdm3c7j7Ruzbudx9prgOSpwz1kd2bdzuPtG7Nu53H2m
uA5KcM9ZHdm3c7j7Ruzbudx9prgOSnDPWR3Zt3O4+0bs27ncfaa4Dkpwz1iJrrQOuVHIlUx
WM09JeTNNRP3btnPI+01APP9PnPplur0/PK/PHbGX3btnPI+0bt2znkfaagHPgx9dOasvu3
bOeR9o3btnPI+01AHBj6c1Zfdu2c8j7Ru3bOeR9pqAODH05qy+7ds55H2n5SV1LWYgoEp52
yK1Jc9Hi9E1INY/GY3VMvrcpoAA7OQAAAAAAAAAAAAAAAChxHPFTVttlmejGNfJm5eL0SLu
3bOeR9pqAcs/lM7rXTH6XGaRl927ZzyPtG7ds55H2moBjgx9a5qy+7ds55H2jdu2c8j7TUA
cGPpzVl927ZzyPtG7ds55H2moA4MfTmrL7t2znkfaQqy60ElfRPZVMVsav0lTizbqNqDeHy
mOUyjOf0ueNxrI7s27ncfaN2bdzuPtNcD08leThnrI7s27ncfaN2bdzuPtNcByU4Z6yO7Nu
53H2jdm3c7j7TXAclOGesjuzbudx9o3Zt3O4+01wHJThnrD1N0oX19HI2pYrWK/SXkzaSt2
bdzuPtNcByVeGMjuzbudx9o3Zt3O4+01wHJU4Z6yO7Nu53H2jdm3c7j7TXAclOGesjuzbud
x9o3Zt3O4+01wHJThnrI7s27ncfaRam6UL6+jkbUsVrFfpLyZtNwByVZ8ZGR3Zt3O4+0bs2
7ncfaa4DkqcM9ZHdm3c7j7Ruzbudx9prgOSnDPWR3Zt3O4+0bs27ncfaa4Dkpwz1kd2bdzu
PtG7Nu53H2muA5KcM9YepulC+uontqWK2N71cvJm1UJW7Nu53H2muA5KvDGR3Zt3O4+0bs2
7ncfaa4DkqcM9ZHdm3c7j7Ruzbudx9prgOSnDPWR3Zt3O4+0bs27ncfaa4Dkpwz1kd2bdzu
PtItTdKF9dRPbUsVsb3q5eTNqobgDkqz4yMjuzbudx9o3Zt3O4+01wHJU4Z6yO7Nu53H2jd
m3c7j7TXAclOGesjuzbudx9o3Zt3O4+01wHJThnrI7s27ncfaN2bdzuPtNcByU4Z6w9TdKF
9dRPbUsVsb3q5eTNqoSt2bdzuPtNcByVeGMjuzbudx9o3Zt3O4+01wHJU4Z6yO7Nu53H2jd
m3c7j7TXAclOGesjuzbudx9o3Zt3O4+01wHJThnrI7s27ncfaRam6UL66ie2pYrY3vVy8mb
VQ3AHJVnxkZHdm3c7j7Ruzbudx9prgOSpwz1kd2bdzuPtG7Nu53H2muA5KcM9ZHdm3c7j7R
uzbudx9prgOSnDPWR3Zt3O4+0bs27ncfaa4Dkpwz1kqSupavEFtbTzNkVr5FVE4v0bjWgGL
dbq6447ZoAAjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAP/2Q==
</binary><binary id="_10.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAFaAjEDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAUGBwQDAgH/xABSEAABAwMBBAUIBwMGDAUFAAAAAQIDBAURBgcSITETQVFhcRQi
NTZzgbGyFTJydJGhsxYjUjM3QpLB0RckJUNTVVZigqLS4TRUk5Xxg5SkwvD/xAAYAQEBAQE
BAAAAAAAAAAAAAAAAAgEEA//EACcRAQEAAgAFBAICAwAAAAAAAAABAhESMTJCcQMEITNBUa
HBEyKB/9oADAMBAAIRAxEAPwDZgAAAAAAAAAAAAAAAAAAAK7rTViaPtMNe6iWrSWdIdxJNz
GWuXOcL/CBYgVG3ar1HdbfBX0ekWvgnbvxuW5MTKeCtJe03G91dU6O5WFtvhRiq2VKxs2XZ
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
vaqtcv4opSIrHUR6F1Bqe9JvXS7Ur34VP5GNfqtTs6uHYiJ1E/snRybP6LPJZJceG+oauQA
DFP2oXuay6MmWnesc1XI2na9F4tRUVXKn/Cip7yPtOlNMae0A2tvVup53LTJNUyyxo5+85M
7rV5pzRExjicu21Hfs7b1/o+V8fHcd/3Pqud+3moqTT9M5VstqayWve1eEsmOEefy/rdiAR
Ox67zQXquscjZI6eaLymCKRcqxeHLxa5Fz14Q14y2ia1u32rbC1GsZAiKjUwiJ0DE/uNSAA
AAAAITWN3fYtJ3C4xLiWKLEa9j3KjWr7lVFKls+0pZWaQ+m73SU9VNVo+eWWrYj0jYir28u
CZVefEldrKOXQFXjkkkWfDfQrLKybUdh09om1SK3pqSOW5TM/zUSY83xX/p7QI3Z9eo6DaI
+noIZaa03ZXpBE9VxhN7ccme9qp71TqNrMo1FRU9Bta0tRUUaRxU9PCxrG9TUfJ/YauAAAG
VVUDNcbXprfW5kttojX9zng5Uwi58Xu49qNwcG1WCy2ytooLHQR0tzpk6eWSkYjEiZ/R3kb
15wqLzT3oLFfabTet9Z3KsXKxOm6NmeMirN5rU8eBITWKopdnN+1BeU3rtdokkkVycYmK5u
6xOzq4eCdQav+mLqt701b7k/G/UQtWTHLfTg780UlSp7L0cmzy173PEv4dK8tgYxrZJ6/Xb
7vL+qw2UxrZJ6/Xb7vL+qw2UAAABV9b6brb3T0FdaZI47paalKim6X6j/wCJi9mcJ+HvLQc
F6s9Pfbc6hqZZ4mK5rkkp5Vje1UXKKjk5AZvqqfU1xvukZLzbqe2RsvMCMpY6hJ3yuRyK56
qiIiNRE5f7ylu2hWOv1Bp6Kjt0TZJm1kUqo56N81q5Xip62rQ1ttt0juk1ZcbpWQtVsEtxq
lmWFF57qcETPaWQAVDW37S3G3XCy2zT0dTT1dOsaVbq9ke6rk4+YqdXiW8AVXSa6gZbqWy3
nT0dJS01E2Baltc2XpFa1G43EThlMrz4EJZKDW2k7ZJpm32inrqZj3pRXN9W1jYmOVVy+PG
8qoqquE8DRQBVdm9hr9N6PhttzY1lSyWRyo16O4K5VRcoWoACHv2lLHqfoPpmgbV+Tb3RZe
5u7vYz9VU/hT8CI/wUaH/1DH/68v8A1FvAHxFEyCFkUbd1kbUa1OxE5H2AAM621+qNH9/b+
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
</binary><binary id="_17.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAI8A8QDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAgEI/8QAWRAAAQMCAgQICAsFBQUHAwUBAAECAwQFBhESIZPRExQVMVFU
VZEWF0FSU2FxcgciMjQ2c4GSlLHiM6GywdIjNUJ1wjdEdIOEJEVigrPh8EOi8RglR1bDdv/
EABkBAQEBAQEBAAAAAAAAAAAAAAACAQMEBf/EADARAQABAwMCBQMEAwEAAwAAAAABAhNRAx
EUEmEhMTJBUoGRwQQzcbEiQmKhI9Hw/9oADAMBAAIRAxEAPwDswB+KqIiqq5InOqgfoMtcc
eW+klWKlifVq3Urkdos+xfL3ELxjp2Uv4j9J3j9PqzG8Q5Trace7bAxPjHTspfxH6R4x07K
X8R+k3jauGX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kc
bVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PL
bAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHT
spfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R
4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8
R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVw
X9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAx
PjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspf
xH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x0
7KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+k
cbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9P
LbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjH
TspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6
R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX
8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbV
wX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbA
xPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTspfxH6R4x07KX8R+kcbVwX9PLbAxPjHTsp
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
4cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXT
s2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2D
tx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2ID
m1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOL
GXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeR
rp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV
7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24c
jXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2
r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx
2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1
YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGX
HeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp
2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B
24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjX
Ts2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2
Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2I
Dm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YO
LGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHe
Rrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2b
V7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24cjXTs2r2Dtx2IDm1YOLGXHeRrp2bV7B24
cjXTs2r2Dtx2IDm1YOLGXGprbX08Syz0VRFGnO58Tmon2qh2Uoca/Rep95n8SF8ctfVnVpp
qnv+HTSo6Kpj+PyAA8ruGfvv0jsP1sv5IaAz99+kdh+tl/JDrper6T/AEjU9P2/toAAclgP
lzmsarnLkiER9w1/EZq6VUiqumnzVTRNXkmggcoP8xo5Qf5jSb1C7VSeCByg/wAxo5Qf5jR
eoLVSeCByg/zGjlB/mNF6gtVJ4IHKD/MaOUH+Y0XqC1UnggcoP8xo5Qf5jReoLVSeCByg/w
Axo5Qf5jReoLVSeCByg/zGjlB/mNF6gtVJ4IHKD/MaOUH+Y0XqC1UnggcoP8xo5Qf5jReoL
VSeCByg/wAxo5Qf5jReoLVSeCByg/zGjlB/mNF6gtVJ4IHKD/MaOUH+Y0XqC1UnggcoP8xo
5Qf5jReoLVSeCByg/wAxo5Qf5jReoLVSeCByg/zGjlB/mNF6gtVJ4IHKD/Rp3kiCqZNq+S7
oU2nUpqnaJTOnVHjL3AB0QAAAAfL3tY1XOXJE51A+gV8l0RFyjjzTpVT45Uk9G3vL6KnO7S
swVnKkno2945Uk9G3vHRUy7SswVnKkno2945Uk9G3vHRUXaVmCs5Uk9G3vHKkno2946Ki7S
swVnKkno2945Uk9G3vHRUXaVmCs5Uk9G3vHKkno2946Ki7SswVnKkno2945Uk9G3vHRUXaV
mCs5Uk9G3vHKkno2946Ki7SswVnKkno2945Uk9G3vHRUXaVmCs5Uk9G3vHKkno2946Ki7Ss
wVnKkno2945Uk9G3vHRUXaVmCs5Uk9G3vHKkno2946Ki7SswVnKkno2945Uk9G3vHRUXaVm
Cs5Uk9G3vHKkno2946Ki7SswVnKkno2945Uk9G3vHRUXaVmCs5Uk9G3vP3lR/o2946Ki7Ss
gRqetjqF0ctF/QvlJJMxMebpExMbwAAxoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
I9c/T8gAOawz99+kdh+tl/JDQGfvv0jsP1sv5IddL1fSf6Rqen7f20AAOS0GqidNVI1mWeh
nrPPiM3QneSv9/wD+X/MkHC1TVMzLtcmmIiFbxGboTvHEZuhO8sgLFJeqVvEZuhO8cRm6E7
yyAsUl6pW8Rm6E7xxGboTvLICxSXqlbxGboTvHEZuhO8sgLFJeqVvEZuhO8cRm6E7yyAsUl
6pW8Rm6E7xxGboTvLICxSXqlbxGboTvHEZuhO8sgLFJeqVvEZuhO8cRm6E7yyAsUl6pW8Rm
6E7xxGboTvLICxSXqlbxGboTvHEZuhO8sgLFJeqVvEZuhO8cRm6E7yyAsUl6pW8Rm6E7xxG
boTvLICxSXqlbxGboTvHEZuhO8sgLFJeqVvEZuhO8cRm6E7yyAsUl6pW8Rm6E7xxGboTvLI
CxSXqlbxGboTvPx9JKxiuVEyT1lmeVR83f7DJ0aYjcjVqmX1D+xZ7qH2fEP7FnuofZ3jycp
8wAGsCuroXzVbWMyz0M9ftUsSK7+8m/V/zKpnaUVxvGyHydUdDe8cnVHQ3vLYFXJRZpVPJ1
R0N7xydUdDe8tgLklmlU8nVHQ3vHJ1R0N7y2AuSWaVTydUdDe8cnVHQ3vLYC5JZpVPJ1R0N
7xydUdDe8tgLklmlU8nVHQ3vHJ1R0N7y2AuSWaVTydUdDe8cnVHQ3vLYC5JZpVPJ1R0N7xy
dUdDe8tgLklmlU8nVHQ3vHJ1R0N7y2AuSWaVTydUdDe8cnVHQ3vLYC5JZpVPJ1R0N7xydUd
De8tgLklmlU8nVHQ3vHJ1R0N7y2AuSWaVTydUdDe8cnVHQ3vLYC5JZpVPJ1R0N7xydUdDe8
tgLklmlU8nVHQ3vHJ1R0N7y2AuSWaVTydUdDe8cnVHQ3vLYC5JZpU76GdjFe5G5NTNdZZ03
zaL3UFT82l91RTfNovdQyapmPFtNMU1eD1ABDqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAChxr9F6n3mfxIXxQ41+i9T7zP4kL46T+3H8z+ER65+n5AAc1hn779I
7D9bL+SGgM/ffpHYfrZfyQ66Xq+k/0jU9P2/toAAclo/wDv/wDy/wCZII/+/wD/AC/5kgin
3VV7AALSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5VHzd/sPU8qj5u/wBhNXlLafO
H1D+xZ7qH2fEP7FnuofZseRPmAA1gRXf3k36v+ZKIrv7yb9X/ADKhNXslAAlQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADyqfm0vuqKb5tF7qCp+bS+6opvm0XuoV7J/2eoAJUA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChxr9F6n3mfxIXxQ41+i9T
7zP4kL46T+3H8z+ER65+n5AAc1hn779I7D9bL+SGgM/ffpHYfrZfyQ66Xq+k/wBI1PT9v7a
AAHJaP/v/APy/5kgj/wC//wDL/mSCKfdVXsAAtIAAAAAAAAAAMzii9QJoW2gxTbLVcmVEay
MqJo9NWc6t0V15qiplqNFNNFTQSTzyMiiiar3veuTWtRM1VV8iIhhPhYoKNtjpa1tJAlU65
U6OnSNNNUzyy0ufyIafF/0Lvn+XVH/puA/JcX4agnhhlvtvbJO1HRotQ34yLzLz8y+QtZ54
aankqKiVkUMTVe+R7ka1rUTNVVV5kOZ02GrOnwGPmW307p3Wp1Sszo0WThEYrkXS59S5J7E
yNphJ3HsC2dapEm4a3QpIkiaSPzjTPPPnzA8bNc0ueJa+akxJQXG3rCzgaOmlY90Dv8TlVu
vJV9Z9YuxXRYZtFXK6tomV7Kd0tPTTyojpVTPLJuaKqKqZaiiw5S09H8LmI4KWCKCJKKnVG
RMRrU1J5ELX4Q6GknwTeaialhkmjopNCR8aK5upeZedAJOHMXWm+0NAjLpQPuFRTskkpYah
qva5Work0c89WvuPPHl+lw9hOqq6XXWSq2npU8vCvXJF+zWv2H1g22W+HC1lqoqGmZULb4F
WVsTUeqrGma55Z6yl+FPNtPhuZ/7CO+0yy9CJ8bWv7+8DWWO2raLJSW988lQ+CJGvlkcrnS
O53OVV161zM5i+snw7iSx35k0iUc8yW+ti0l0NF+tj8uZFa5F18+Wo2Rhfhi+NgGSJv7aWq
hZCnlV+l5PsRQN0D8Tm1n6AAAAAAAAAAAA8qj5u/wBh6nlUfN3+wmryltPnD6h/Ys91D7KT
wvwzT/2E+IbZFLH8R7H1caOa5NSoqZ6lOefCl8Ik1vqLRLhPENPIv9txhKaSOZv+DR0k1p5
2X2mx5E+brwOFWj4e7tArWXe1U1W3mV8Dlif7deaL+429p+GfCFy0W1E89ukXVlUxLo5+83
NO/I1jfEV395N+r/mflvulvu0PDW6up6uPyuglR6J7cuY/Xf3k36v+ZUJq9koAEqAAAAAAj
11worZTLU19XBSQIqIss8iMairzJmuokHjU0lNWwrDV08VREq56ErEc3P2KBT4VqpqyG4Ty
X2jvET66Rad9K9rmwRLkrY1VvlRPzJ9ZfbRb3yx1l0pKd8EaSSMlma1zGquSKqKueSrqMr8
F8bIWYoiiY1kbMQVLWtamSNRNHJETyIRFtNFdPhvq1rqeOobT2lkkbJGo5unpImaoupVRFX
vA29rvFtvdMtRa66Csia7RV0L0dkvQvQpTYwvUMNumt9Fim2WW6roOY+qnjRWNzRV+K7pTP
yFPh6lgtnwu4gpKKJlPTzUEMzoo00W6eeWeSavKvep8/DJQUa4Br61aSDjSPhRJ+DTTROEa
mWlzgbuoqIKSnkqKmZkMMTVc+SRyNa1E51VV5kMdRfCTaZ8W3K2z3W1R26nhjfT1XGWpwrn
J8ZNJXZLl6jZyxRzxOiljbJG9MnMemaOToVDn1mtFsf8ACziOndbqV0MdHTKyNYWq1qq1M1
RMskA39NUwVlPHU000c8MrdJkkbkc1ydKKnOZLDdZPiLG17uizScQtj+TqWJHLoK9Ncr1Tm
Vc8kReg18UUcETYoY2xxsTJrGJkiJ0IiGH+CRFZhy5Qv/bRXaobN06Xxef9wGyqrjRUMkMd
XWQU753K2JssiNWRU1qiZ85EtuJbHeKmSmtt2pKuaNM3RwzI5UTpyTnT1mT+EqhguV/whRV
TdOCa4ObIzyObkmaL6l5l9p+YnttFavhBwbU2+khpJJZ5oZFhjRmmzQTUqJz8694GvuuIrL
Y1al0ulJRuembWzSo1zk6UTnVD2tt2t14puM22ugrIc8lfDIj0RehcuZTKX66QT4wdbrVhW
nvd3p6Zqzz1D2Rsp41VVa3ScirmulnkieXy+Sowhxyl+Fy5U1Ta6a0rUWlJpaWklR8bnJI1
EfqRERclXyfmBtm4tw4+pZTNvtvdLIiq1rali55Z5+X1L3KSrXerXe4XzWuvp6yON2i90Mi
O0V6FyONx2mgn+DWzzSUkKyz4iRskisTSciyuaqKvRkiavUalZVsOKceS2yJkKw2qKoYyNq
I1JGxOyXJANjWYtw7b67iNZe6GCpzyWKSdqK1fXr1faW7XI5qOaqKipmipzKcjwjabu/B1O
2PBdpuMVfFwstVU1qcLOrtaq7Niqi6+nUbjAFru9lwnT2286PD073NjRsmnlHnm1M/Vnl7E
QCFhOsnt2K75hSqmfKyByVtC6RyudwMnO3NfI1y5J7TZGEkRZPh1jWH/AOlYf7bL1yrki96
G7AAAAAAAAA8qn5tL7qim+bRe6gqfm0vuqKb5tF7qFeyf9nqACVAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoca/Rep95n8SF8UONfovU+8z+JC+Ok/tx/M/hEeu
fp+QAHNYZ++/SOw/Wy/khoDP336R2H62X8kOul6vpP9I1PT9v7aAAHJaP8A7/8A8v8AmSCP
/v8A/wAv+ZIIp91VewAC0gAAAAAAAAAAxGJsGYixKr4JcUQRUTalJ4YUtyKseiubUV2mmeX
7y1jsd7qbFdbbeL7DWurqd8MUkdGkXA6TXNVVRHLpc6dHMaIAUDMMqzAS4X43mvEFo+McH0
s0dLRz/dmetNZq+3YQpbNbrkyCrpaeKFlW+n00+LkiroKvlRFTn1Zl0AMFT4IxVTX2rvUWL
6ZKysjZHK5bWiorW82rT1GurLY252KW13GThkqKdYZ5GN0NLNuSuRNeXSnQTwBl8N4bv9hd
TUs2Jm11spY+DZTvoWsfoomTU00d5NXk8hOxdYGYmwxWWpXIySVmlC9f8EjVzaveifZmXQA
gWKa4T2Sjku1MtNX8EiVEaua7J6alVFaqpkuWae0pcQ2Wuv8AiqyxSQaNntr1rZZFcn9rOm
qNiJnnq1qq5Za8jUgAAAAAAAAAAAAAAHlUfN3+w9TyqPm7/YTV5S2nzhSrgrC9Sq1E+H7fJ
LL8d73U7VVzl1qqrlz5mD+En4MJbnUWqPCdkpKdreF40+PQianyNHS8q/4ubPynWIf2LPdQ
+zY8ifNxS0fADUO0X3m9Rxp5YqSNXL952WX3VNvafgkwbatFy21a2RP8dY9ZM/8Ay6m/uNo
DWPGmpKaihSCkp4qeJvMyJiNan2Iebv7yb9X/ADJRFd/eTfq/5lQmr2SgASoAAAAACsvdJd
6ynjbZ7rFbpWvze+SmSZHNy5slVMvaWYAw1iwViaw1FS+nxXTujrKx1XUsW2pm97lTSyXT1
Z5fYXkGG1hxvVYl40ipUUTaXgODy0cnIulpZ6+bmyL0AUVLhtafGtbiPjSOSqpWU/AcHlo6
Kouelnr9mRUYtwbf8VQVVBJiWGC2zva5tPyejnMRFRUTT00VdaG0AFPY6G/Ub5lvN7huTXI
nBpHRpBoLrz5nLnnqKy7YPr5cSyYgsV9W11c8DYahr6Vs7JUbzLkqpkvN3GrAEehiqYaGGO
sqW1NQ1iJJM2PQR7vKujmuXsM9aLNXWTG91lgg07Td2tqVejkTgahNTkyzzVHJrz6UNSAKK
/YbW9Xey16VSQ8lVKzqzg9Lhc0yyzzTL94vmG1vN8slySqSHkmZ8qx8HpcLpIiZZ5plzesv
QBkbrhK6pieXEOHbxHQVNVE2Kqing4WOVG/JdzoqKiHzh/A9VaMXT4krb2+41VVRrBOjoUZ
m7Taubclya1EaiI3L15mwAGLi+D50eF6Cy8poq0dySu4XgPl5PV+jlpaufLPP7C3p8MsjxR
drxNO2aK508cDqdY9TUaioua5688+gvQBh6TB2JrBCtvw7ieKG2aSrDDWUiSvp0Vc1Rrs9a
e01Vno6u32uGmrri+41LNJZKl7EYsiq5V+SmpETPJE6EJwAy2FbLWxXm9Yhu0HAVlymRkUK
uRyxU7NTEVUVUzXnXJeg1IAAAAAAAAAHlU/NpfdUU3zaL3UFT82l91RTfNovdQr2T/s9QAS
oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFDjX6L1PvM/iQvihxr9F
6n3mfxIXx0n9uP5n8Ij1z9PyAA5rDP336R2H62X8kNAZ++/SOw/Wy/kh10vV9J/pGp6ft/b
QAA5LR/9/8A+X/MkEf/AH//AJf8yQRT7qq9gAFpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAA8qj5u/2HqeVR83f7CavTLafOH1D+xZ7qH2fEX7FnuofZseRPmAA1gRXf3k36v+ZKI
rv7yZ9X/M2E1eyUADFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPKp+bS+6opvm0
XuoKn5tL7qim+bRe6hXsn/AGeoAJUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAChxr9F6n3mfxIXxQ41+i9T7zP4kL46T+3H8z+ER65+n5AAc1hn779I7D9bL+SGg
M/ffpHYfrZfyQ66Xq+k/0jU9P2/toAAclo86OY9s7Uz0dTk9R6skZI3NjkU+zxfSwvXNWa/
VqI2mJ3hW8TG0vYEfiUHmr3jiUHmr3jerBtTlIBH4lB5q944lB5q943qwbU5SAR+JQeaveO
JQeaveN6sG1OUgEfiUHmr3jiUHmr3jerBtTlIBH4lB5q944lB5q943qwbU5SAR+JQeaveOJ
QeaveN6sG1OUgEfiUHmr3jiUHmr3jerBtTlIBH4lB5q944lB5q943qwbU5SAR+JQeaveOJQ
eaveN6sG1OUgEfiUHmr3jiUHmr3jerBtTlIBH4lB5q944lB5q943qwbU5SAR+JQeaveOJQe
aveN6sG1OUgEfiUHmr3jiUHmr3jerBtTlIBH4lB5q944lB5q943qwbU5SAR+JQeaveOJQea
veN6sG1OXvzEeZ/DrwEa55/KcnMiH7xODzV7z2YxsaZMaiJ6hMVVeEtiaY8YfqIiIiJzIfo
BaAAACNVNc17KhiZrHzp0oSQbE7MmN4ecU0czc2ORfV5UPQ8JKOCRc3Rpn0pqPjk+n81fvG
+DP8koEXk+n81fvDk+n81fvGeBvVhKBF5Pp/NX7w5Pp/NX7w8DerCUCLyfT+av3hyfT+av3
h4G9WEoEXk+n81fvDk+n81fvDwN6sJQIvJ9P5q/eHJ9P5q/eHgb1YSgReT6fzV+8OT6fzV+
8PA3qwlAi8n0/mr94cn0/mr94eBvVhKBF5Pp/NX7w5Pp/NX7w8DerCUCLyfT+av3hyfT+av
3h4G9WEoEXk+n81fvDk+n81fvDwN6sJQIvJ9P5q/eHJ9P5q/eHgb1YSgReT6fzV+8OT6fzV
+8PA3qwlAi8n0/mr94cn0/mr94eBvVhKBF5Pp/NX7w5Pp/NX7w8DerCUfhG5Pp/NX7x+8n0
/mL95R4G9WHzUS8P/ANnhXSV3ynJzNQlNajWo1OZEyQ+Y4mRN0WNRqeo+xMkR7yAAxQAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKHGv0XqfeZ/EhfFDjX6L1PvM/
iQvjpP7cfzP4RHrn6fkABzWGfvv0jsP1sv5IaAz+KdKlltt10VdHR1H9rl5GuyRV/d+866X
r+/9I1PS0APmORksbZI3I5jkza5FzRUPo5LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACixtduQ8GXW4I7RfHTubGvQ93xW/vVAIOA
sVpiqlukmmjuK3CWOPp4JVzYvdmn2GrOCfAPduK4nrbW92TK2n02p0vYuaf/a53cd7AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC
hxr9F6n3mfxIXxnsWypUU1PZ410qitmaminOjUXNXL6tX5mhOtXhp0/X8Ij1z9AAHJYfEsU
c8T4pWI+N6ZOa5M0VD7AGdbYrra3K2y3JradVzSnqm6TWexec+uCxf1i1dz9xoAdbsz5xEu
duPZn+Cxf1i1dz9w4LF/WLV3P3GgAudo+zejvLP8Fi/rFq7n7hwWL+sWrufuNABc7R9jo7y
z/BYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wWL+sWrufuHBYv6xau5+40AFztH2OjvLP8Fi
/rFq7n7hwWL+sWrufuNABc7R9jo7yz/BYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wWL+sWr
ufuHBYv6xau5+40AFztH2OjvLP8Fi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/BYv6xau5+4c
Fi/rFq7n7jQAXO0fY6O8s/wWL+sWrufuHBYv6xau5+40AFztH2OjvLP8Fi/rFq7n7hwWL+s
WrufuNABc7R9jo7yz/BYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wWL+sWrufuHBYv6xau5+
40AFztH2OjvLP8Fi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/BYv6xau5+4cFi/rFq7n7jQAX
O0fY6O8s/wWL+sWrufuHBYv6xau5+40AFztH2OjvLP8Fi/rFq7n7hwWL+sWrufuNABc7R9j
o7yz/BYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wWL+sWrufuHBYv6xau5+40AFztH2OjvLP
8Fi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/BYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wWL+
sWrufuHBYv6xau5+40AFztH2OjvLP8Fi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/BYv6xau5
+4cFi/rFq7n7jQAXO0fY6O8s/wWL+sWrufuHBYv6xau5+40AFztH2OjvLP8Fi/rFq7n7hwW
L+sWrufuNABc7R9jo7yz/BYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wWL+sWrufuMB8M90u
NJhOitVwlgdU1tUsi8Bno8Gxqalz/8AE5F+w6+VV2wzZL7LHLdbZT1j4m6LFlbnop6iaq94
22hsU7e7+YsGXbkPGNquKu0WRVDUkXoY74rv/tVT+lZYsV8K/gqi2cHpLo6TX55eTPUYjAG
DsO3GqxM2ss9LO2lvU8MKPZnwbEXU1PUh1NrUa1GtTJETJEMpq6fYmN1BwWL+sWrufuHBYv
6xau5+40ALudo+zOjvLP8ABYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wAFi/rFq7n7hwWL+
sWrufuNABc7R9jo7yz/AAWL+sWrufuHBYv6xau5+40AFztH2OjvLP8ABYv6xau5+4cFi/rF
q7n7jQAXO0fY6O8s/wAFi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/AAWL+sWrufuHBYv6xau
5+40AFztH2OjvLP8ABYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wAFi/rFq7n7hwWL+sWruf
uNABc7R9jo7yz/AAWL+sWrufuHBYv6xau5+40AFztH2OjvLP8ABYv6xau5+4cFi/rFq7n7j
QAXO0fY6O8s/wAFi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/AAWL+sWrufuHBYv6xau5+40A
FztH2OjvLP8ABYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wAFi/rFq7n7hwWL+sWrufuNABc
7R9jo7yz/AAWL+sWrufuHBYv6xau5+40AFztH2OjvLP8ABYv6xau5+4cFi/rFq7n7jQAXO0
fY6O8s/wAFi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/AAWL+sWrufuHBYv6xau5+40AFztH2
OjvLP8ABYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wAFi/rFq7n7hwWL+sWrufuNABc7R9jo
7yz/AAWL+sWrufuHBYv6xau5+40AFztH2OjvLP8ABYv6xau5+4cFi/rFq7n7jQAXO0fY6O8
s/wAFi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/AAWL+sWrufuHBYv6xau5+40AFztH2OjvLP
8ABYv6xau5+4cFi/rFq7n7jQAXO0fY6O8s/wAFi/rFq7n7hwWL+sWrufuNABc7R9jo7yz/A
AWL+sWrufuC0+LnporWW2NF/wATGOVU+xUyNABc7R9jo7yqbVYo7fM+rnnfWVsiZPnk50To
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
RG5WM0k5skT+btfsJkVxS8YLuVZLTRRzppNkdG3JHKiJr7lRPsNq15idojw32I0t482CBs8
GLAywXWWohbLHGiuc1U50RqqqFVcMUVd4pFt8lLTRxvc3g+DaqKzX7So1JmqaYjyT0RFMTM
+ahB1CWguNrp6elsNPRpG1v9q6bPSev2FZebFSS4otSrCxiVauWeNvyVViaS9/Mcqf1VMz5
Ok6ExDIWWgjuV3p6OVzmslcqKrefmVf5H7e6CO2Xioo4nOcyJURFfzrqRf5m2S/I/GDLOtJ
DxeJ2jG7R+MxyNzzToTyGbvldJbca1NXCxj3xv1NkTNq5sRNafabRqV1V+XtuyqimKfP3Rq
91kWwUiUif/uKOTh1yfzZLnz6ufLmKc2uKJ1rMHW6sfHGySaVrnaDck+S4+cEWxr6CruTIY
5qpjljgSX5LVREXP8Aegp1enTmqck6fVXFMMYDpVVb625WSsZfIaXho2K+CSHnRURV/l+8r
LXUtt+AFrUp4pZI5F0EkbmmemiIq+znEfqN48I8d9idHafNiC1t1hluNrrK9kzGNpGqrmqi
5uyTPUX2K3tuOF7bdZImNqJHo1ytTyK1VVPZmhY2O/1Vbh+5VkkNO19Kxysaxio1cm560z1
mVa1XR1Ux7tp06eraZc7BYXe81F5mjlqIoY1jbookTVai/vUm0tztMWGJqKWkR1c/S0JeCa
uWvV8bnO81VRETs4xETPmogAdErrD2HVvyVK8bSnSn0c1Vmlnnn60y5iw8D6D/APslH3N/q
JXwfI1YLqj1yarY9JehMnkCptuEmU0roLvUPlaxVY1W6nOy1J8npPHVXXcmnefb23emKaei
J2/9ZtyaL1ai55Lln0n4bOi4vhvCUN1bSxT1lU9Ea6RM0bnnl9mSd4reL4kwlNdXUsUFZSv
VHOjTJHZZKqezJe86XvHy8N9t0WvDz8fNjAbq4VUODrdRU9JRwS1EzdKWWVueeWWfr51+w8
rva6S9UlpucELaZ9ZMyKZGJknxs819qZKZGv5TMeE+5Ol7b+LFsbpPRvNmuRa4gsS2GrigW
oSfhI9PSRmjlrVOleg0t4vFBZrhHZmWqnfSta3hc016+j15a8yD8If97U31H+pTKdWqqunw
2id2zpxTTPj4wyQAPU4AAAAAAAAAAAAAAXMf04wr/k9T+TymLmP6cYV/yep/J54v1npj+Xp
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
eil+6SANqsm9OEfjaeil+6ONp6KX7pIA2qyb04R+Np6KX7o42nopfukgDarJvThH42nopfu
jjaeil+6SANqsm9OEfjaeil+6ONp6KX7pIA2qyb04R+Np6KX7o42nopfukgDarJvThH42no
pfujjaeSGX7pIA2qyb04RtCSociyN0I0XNG+VfaSQDYjZkzuAApgAAPOaFk0asemryL0Hij
KyL4rXskb5FdzkoGxKZpifFF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsdPd
F0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsdP
dF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsd
PdF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfs
dPdF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDfsdPdF0q3zIe9RpVvmQ96koDf
sdPdF0q3zIe9RpVvmQ96koDfsdPdFzrl1aMKevWfUVMrZOFlfwknkXyJ7CQBudIADFKHGv0
XqfeZ/EhfFDjX6L1PvM/iQvjpP7cfzP4RHrn6fkABzWGfv66F+sUrtTEne1V9aomRoCBebW
y7291Mr1jkRUfFInOx6cynTTmIq8UVxM0+CeDOQYkntrUp79RzQys1cYjZpRyevNOb/5zHr
4aWPrL9i7cbZr9o3Zcp95XwKHw0sfWX7F24eGlj6y/Yu3GWdT4y25RlfAofDSx9ZfsXbh4a
WPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Y
u3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6n
xkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV
8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDS
x9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F
24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY
+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7
cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfG
S5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXw
KHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH
1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXb
h4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6
y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltw
s6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZL
lGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAo
fDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfW
X7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduH
hpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL
9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3Cz
qfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuU
ZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8
NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9Zf
sXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2Ltws6nxkuUZXwKHw0sfWX7F24eG
lj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp8ZLlGV8Ch8NLH1l+xduHhpY+sv2
Ltws6nxkuUZXwKHw0sfWX7F24eGlj6y/Yu3CzqfGS5RlfAofDSx9ZfsXbh4aWPrL9i7cLOp
8ZLlGV8Ch8NLH1l+xduC4zsyp/ZyTSu8jGQuzXvFnU+MlyjJjRUXDcsf+KWRjWJ0rpIv8i+
M3T09diC5QV1fTupKGldpwU7/lyO8jnJ5DSG1+FMUsp8ZmoABydAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Af/2Q==
</binary><binary id="_42.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAEEBRIDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAggB/8QAURAAAQMCAgINCAYEDgMAAwEAAAECAwQFBhESIQcTFTE1UVRV
YXKRlLIWIkFxgbHR0hQyNkKDszRTkqEXIyQzN0RSdoKiwcLh8CdFYiVDkwj/xAAZAQEBAQE
BAQAAAAAAAAAAAAAAAQIDBAX/xAAiEQEBAAEFAAMBAQEBAAAAAAAAAQIREhMxUQMyQSEzBC
L/2gAMAwEAAhEDEQA/AOzAFXd7vLbZ6aGGkSpfUI9cll0MtHLoXjEmotAZ/wAoLjzOzvafK
PKC48zs72nym9mXjW2+NADP+UFx5nZ3tPlHlBceZ2d7T5Rsy8Nt8aAGf8oLjzOzvafKPKC4
8zs72nyjZl4bb40AM/5QXHmdne0+UeUFx5nZ3tPlGzLw23xoAZx2Jq5k8cK2dunJmrf5Uno
3/unpu9cuZmd7T5Sbb4xbMbpV+Cg3euXMzO9p8o3euXMzO9p8o23xN+Pq/BQbvXLmZne0+U
bvXLmZne0+Ubb4b8fV+Cg3euXMzO9p8o3euXMzO9p8o23w34+r8FBu9cuZmd7T5TzfiWvZN
HC6zt05M9H+VJ6N/wC6TbTfj60YKDd65czM72nyjd65czM72nyl23w34+r8FBu9cuZmd7T5
Ru9cuZmd7T5Rtvhvx9X4KDd65czM72nyjd65czM72nyjbfDfj6vwUG71y5mZ3tPlG71y5mZ
3tPlG2+G/H1fgzj8S17Jo4XWdunJno/ypPRv/AHT03euXMzO9p8pNtN+Pq/BQbvXLmZne0+
UbvXLmZne0+Uu2+G/H1fgoN3rlzMzvafKN3rlzMzvafKNt8N+Pq/BQbvXLmZne0+UbvXLmZ
ne0+Ubb4b8fV+Cg3euXMzO9p8p5vxLXsmjhdZ26cmej/Kk9G/8AdJtpvx9aMFBu9cuZmd7T
5Ru9cuZmd7T5S7b4b8fV+Cg3euXMzO9p8o3euXMzO9p8o23w34+r8FBu9cuZmd7T5Ru9cuZ
md7T5Rtvhvx9X4KDd65czM72nyjd65czM72nyjbfDfj6vwZx+Ja+OaOJ1nbpS56P8qT0a1+
6em71y5mZ3tPlJtpvx9X4KDd65czM72nyjd65czM72nyl23w34+r8FBu9cuZmd7T5Ru9cuZ
md7T5Rtvhvx9X4KDd65czM72nyjd65czM72nyjbfDfj6vwUG71y5mZ3tPlPN+Ja+OaOJ1nb
pS56P8qT0a1+6TbTfj60YKDd65czM72nyjd65czM72nyl23w34+r8FBu9cuZmd7T5Ru9cuZ
md7T5Rtvhvx9X4KDd65czM72nyjd65czM72nyjbfDfj6vwUG71y5mZ3tPlG71y5mZ3tPlG2
+G/H1fgooL/VyV0NNNbGxbdpaLkqEdvJn/AGSz+lS/qE/b/wCDPSyy9JQIv0qX9Qn7f/A+l
S/qE/b/AOAqUCL9Kl/UJ+3/AMD6VL+oT9v/AIAlAi/Spf1Cft/8D6VL+oT9v/gCUCL9Kl/U
J+3/AMH1HUvdK1jotHSz16WYEgAAAAAAAAAAAAAAAAAAAVt3usttdTshpUqHzuciIsmhlkm
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
2OTNHIupUVBvyOLBl6Oa4XCjhrKSgZNBOxHxyNqW5OautFPbabxzUneGmfw9NJsf4q8k62R
y2a4vWS0TvX+beq+dCq+tdXSqf2tXRRvyOLBmtpvHNSd4aeEtDeZKunn3MREh0tX0huvNMj
WAm+nHizW03jmpO8NG03jmpO8NNKC78jiwZrabxzUneGjabxzUneGmlA35HFgxl5uVbYbXL
cq+1vbTQ5LI6ORHq1FXLPJEzyJFHNcLhRw1lJQMmgnYj45G1LcnNXWimomhjqIXwTRtkika
rXscmaORdSoqHPcPTSbH+KvJOtkctmuL1ktE71/m3qvnQqvrXV0qn9rU35HFg0G03jmpO8N
G03jmpO8NNKBvyOLBmoKK6PulNPLQpEyFH5rtzXZ5pkXOhP+p/zITAZt1bkkmkQ9Cf9T/mQ
aE/6n/MhMBFQ9Cf9T/mQaE/6n/MhMAEPQn/AFP+ZBoT/qf8yEwAQ9Cf9T/mQ/sccu3sc6PR
Ruf3syWAAAAAAAAAAAAAAAAAAAAp77R1dRNRzUkCTLC56uar0bvpl6SD9HvHNad4aaYG8fk
yxmkamVnTM/R7xzWneGj6PeOa07w00wNc2fq78mZ+j3jmtO8NKG9YrbYK19HX0ErZo6X6W9
sbtPRi0tHS1Jx/E6IYOsjjm2b4YpWNkjkw6rXNcmaKizOzRUHNn6b8k+hlr7lRQ1tHQMmp5
2I+ORtQ3JyLvHv9HvHNad4aZ+xSybHmLPJire5bHdHrJapnrmkMir50Kr611etONcujDmz9
N+TM/R7xzWneGnhLQXmSqp5tzUTaVcuX0huvNMjWgl+XKpcrlNKzW03jmpO8NG03jmpO8NN
KCb8nHiwZrabxzUneGjabxzUneGmlA35HFgxt4uFbY7ZNcq61vSmgTOR0cqPVqZ5Z5ImeR7
UM9fcqKGto6Bk1POxHxyNqW5ORd41MsUc0T4pWNfG9qtc1yZo5F30VDnlilk2PMWeTFW9y2
O6PWS1TPXNIZFXzoVX1rq9aca5N+RxYNDtN45qTvDRtN45qTvDTSgb8jiwZOahvEtVTzbmo
m0q5cvpDdeaZHvtN45qTvDTSgm+nHizW03jmpO8NG03jmpO8NNKC78jiwZrabxzUneGkK8X
CtsdsmuVda3pTQJnI6OVHq1M8s8kTPI2R8SxRzRPilY18b2q1zXJmjkXfRUG/I4sGWoZ6+5
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
</binary><binary id="_5.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAJEAkIDASIAAhEBAxEB/8QAGwABAQADAQEBAAAAA
AAAAAAAAAMCBAUGAQf/xABMEAABAwEDBAwJCgYDAQEBAQEAAQIDBAURExIhcpIGMTIzNEFR
UmFxkbEHFCJCU1RjocEVFyM3RGJ0s9HhNkNWgZOjFvDxJCayc9L/xAAYAQEBAQEBAAAAAAA
AAAAAAAAAAwIBBP/EACARAQEBAAMBAQEBAQEBAAAAAAABAhESMYEhQVHxkbH/2gAMAwEAAh
EDEQA/AP2YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANa0K+nsyz566qcr
YKdivkciXqiJ0IBsg07KtSktqzIbRoXq+nnRVY5Wq1VuVU2l6UU3AAAAAAAAAAAAAAAAAAA
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
D5Ob6zUa/wCxuADQnoGsgkd4xOtzVW5X5lzGNNQtkpo3rPO29t9zX5kNyq4LNoO7jGi4FDo
oBL5Ob6zUa/7D5Ob6zUa/7G4ANCSz2tai+MTrnTbeZ/JzfWajX/Y2JtwmkneUA0/k5vrNRr
/sPk5vrNRr/sbgA0Fs9uK1vjE+dFz5Zn8nN9ZqNf8AY2Hb+zRUoBp/JzfWajX/AGKwUqQPV
ySyvvS657ry4A85b9TszitBrdj9BZU9JhornVcr2vy71vS5OK64lbmyl9iMs+lSzflDZDXR
IkdHTLcl6J5Sq9dyxFvzr+qp6ZHIrnJzTzFu7AqS3beS2ltm2LPq2wJTo6gqUi8hFVbr8lV
zqvKBCw9itqT2/Hsn2U1cU9oxRqylpaZFSGka7buVc7nXKqX9+a7e2dwI/Yda0qySNyaR+Z
rrkXNxkbJ2EfJVpw13/KdklbhKq4FZaGJE+9FTym5KX7d/WiG1s4/gi2Pwj+4Dl+DmibLsC
st6zzNvY/M19yb449N8nN9ZqNf9jheDT6vrK0H/AJjj1IGn8nN9ZqNf9jD5PbjZPjE+5vvy
zfJ/aF0PiBr/ACc31mo1/wBh8nN9ZqNf9jcAGn8nN9ZqNf8AYwjs9q5X/wBE6XOVMzzfJxe
fpqBr/JzfWajX/YfJzfWajX/Y3ABpOs9qMVfGKja5/wCwZZ7VY1fGKjOnP/Y237h3Uoj3tv
UgGr8nN9ZqNf8AYfJzfWajX/Y3ABy6mjbHPTtxply3XXq7OnUbHyc31mo1/wBhWcKpNNTcA
0/k5vrNRr/sPk5vrNRr/sbgA0H2e1FZ/wDROt7rs7zP5Ob6zUa/7GxLuo9L4FANP5Ob6zUa
/wCw+Tm+s1Gv+xuADQ+T242T4xPub78sz+Tm+s1Gv+xsfaF0PiUA0/k5vrNRr/sPk5vrNRr
/ALG4ANCOz2rlf/ROlzlTM8z+Tm+s1Gv+xsRefpqUA0/k5vrNRr/sc22LEgrGwwPlkVXuVG
vct6sXoO8adZwqk01Oy2XmOy2XmPOWdUzUNf8AJVsTzRu2oZkf5Lk4tvvPR/JzfWajX/Yxt
ayae16RYJ0ucmdkiJnYv/eI49k2tUWXVpY9srcqZoZ1XM5OK9fj/Y3ZNTmeq2Tc7Z9dr5Ob
6zUa/wCxhFZ7XRtXxidL+R/7G+Tg3lvUTRYQUyU6qqSyPv57r7i4AAAAADFyKqeS7JXluAx
dv7OpTlWxbD4HpQUCYtZJmzZ8j9ydsWpLBOyjoXY1Y/NciJ5F/wAS9k2L8nsWV8uXVSZ5Hq
l/9kVf+qZ9/IjrV1euftZWPY7LNjWWVcWqkzySLn/shv1XBZtB3cfciT0q6qE6lj/FZb5VX
yFzZKchrxTOZmcR9ouBQ6KFzVo2vWjiVJFRMlM1yFsiT0q6qBpQm7f2aKjIk9KuqhgrX4zU
xM9y57kAuCeRJ6VdVBkSelXVQChNm+SdadwyJPSrqoYMa/Ef9IqZ04kz5gLgnkSelXVQZEn
pV1UAoTg3lvUMiT0q6qGELXrE1UkVEu2rkAuCeRJ6VdVBkSelXVQD5VcFm0HdxjRcCh0UPl
Sx/ist8qr5C5slOQxo2vWjiVJFRMlM1yAbQJ5EnpV1UGRJ6VdVAE24TSTvKEJWvRqXyX+Un
EhnkSelXVQCgJ5EnpV1UGRJ6VdVADt/ZoqUIK1+M1MTPcue5DPIk9KuqgFATyJPSrqoMiT0
q6qAGb5J1p3FCDGvxH/SKmdOJM+YzyJPSrqoBQ4Ozj+CLY/CP7jtZEnpV1UOHs2a9NhVsKs
l6eKPzZKcgGt4NPq+srQf+Y49SeT8GzXr4P7KVJLkyH5rk9I49RkSelXVQChP7Quh8RkSel
XVQwyX4ypiLfk7dycoFwTyJPSrqoMiT0q6qAUJxefpqMiT0q6qGEbXrlXSKnlLxIBcE8iT0
q6qDIk9KuqgGT9w7qUR723qQweyTId9Ku1zUPjGSYbbpVTMnmoBYE8iT0q6qDIk9KuqgGvW
cKpNNTcNCra9Kmlvkvvet2ZMxt5EnpV1UAoCeRJ6VdVBkSelXVQBLuo9L4FCEjXorL5FXyu
RDPIk9KuqgFATyJPSrqoMiT0q6qAPtC6HxKEMl+MqYi35O3cnKZ5EnpV1UAoCeRJ6VdVBkS
elXVQBF5+mpQhG165V0ip5S8SGeRJ6VdVAKGnWcKpNNTYyJPSrqoalW16VNLfJfe9bsyZgN
80bWsmntekWCdLnJnZIiZ2KbWRJ6VdVBkSelXVQ7LZeY7LZeY85ZNq1FlVaWPbC3KmaCddp
ycSX/H+x6ODeW9RpWpY8VrUqwVD86Z2PRqXtXoOLZNq1Vm1TbJtWRWN2oJlTM5OK9eQ3Z2/
Z6rZNztPXqwYta5N0/K/sZE0QAADVtJaxKGTxFrVnu8m9e7pNoByzmcOVY9its5uNK7EqpL
1keufb4kOqAPHM5mZxAnO1X08jGpermKiJ/YoA0jSsdHSxselzmtuVCwAAxVt70dyJcZAAA
ABijclzl5xkAAAAGLG5DEanEZAAAAJztV9PIxqXq5ioif2MaVjo6WNj0uc1tyoWAAAAYvbl
oiLy3mQAAAAYq296O5EuMgAAAAxRuS5y84yAAHJ2VUVRaWxa0qKkjxKiencyNmUiZSqmZL1
zHWAHA2D2ZWWPsOs+z6+HBqYWuR7MpHXXvcqZ0VU2lQ74AAxyfLy+i4yAAAADFrcm/pW8yA
AAAfFS9FTlDUyWonIlx9AAAAa1TE+Senc1t6Mde7PtGyAAAAGLm5StXkW8yAAAADHJ8vL6L
jIAAAAMWtyb+lbzIAAa1TE+Senc1t6Mde7PtGyAAAAGhaVkU1qUPi06Z27iRNti8pvg7Lx+
x2Wy8x5+wZ7Spap9kV8T5EiblR1CbWTxXr3cZ6AAavN5d1rteQAHGQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAf//Z
</binary><binary id="_25.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGLBOUDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAMEBQYCBwEI/8QAUhAAAQMCAQYJBwoFAwIFAwUBAAECAwQRBQYSEyExkhQVFkFT
VFWT0QciUXGUsdIXMjQ1UmFydIGRNnOhssEjM0I3YkN1s+HwJKLCJSZEY4Px/8QAGQEBAQE
BAQEAAAAAAAAAAAAAAAIDAQQF/8QALREBAAEDAwMDAwQDAQEAAAAAAAECERMDElEUMWEhMl
JBQoEEQ5GxIjPwceH/2gAMAwEAAhEDEQA/APswAAAAAAAAAAAAAAAAAAAAAAY9TlFGkroqG
mfWOYtnOa5GsRfRnLt/QF7NgGDx9iPZDPak+EcfYj2Qz2pPhOXhO6OW8DB4+xHshntSfCOP
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPxVRqK5yoiJr
VV5gP0GPPlA3PVtJTumRNWeq5qfoRcfVfUmd4ZZaGsaVbdBhcfVfUmd4OPqvqTO8Gagw1t0
GFx9V9SZ3g4+q+pM7wZqDDW3QYXH1X1JneDj6r6kzvBmoMNbdBhcfVfUmd4OPqvqTO8Gagw
1t0GFx9V9SZ3g4+q+pM7wZqDDW3QYXH1X1JneDj6r6kzvBmoMNbdBhcfVfUmd4OPqvqTO8G
agw1t0GFx9V9SZ3g4+q+pM7wZqDDW3QYXH1X1JneDj6r6kzvBmoMNbdBhcfVfUmd4OPqvqT
O8Gagw1t0GFx9V9SZ3g4+q+pM7wZqDDW3QYXH1X1JneDj6r6kzvBmoMNbdBhcfVfUmd4OPq
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
JNw5+MMWdzmt82J7mo5diK5Esi/rq5zZxnG8NyfoFr8VqkpqZHIxZFa52tdiWRFUC+CCira
fEaGCtpJElp6iNJInoipnNVLotl1k4AEFbDNUUM8FPULTTSRubHO1qOWNypZHWXUtl12Pn+
U2HZT5NZO1uMT+UCqe2mjzms4BEme5dTW3+9VRAPo4OZwyjyjrMgqOCbGHUuNTRMfJWOga9
Y852cqZmpLo1c3+pzOUvKbICihx1MqZ8WgbUMjqKOrhaiStcv8AwVNaL6v8WUPpgAAAAAAA
AAAAAAAAAAAAAAAAAAAAADNyh/h6v/kP9xJgn1Dh/wCVj/tQjyh/h6v/AJD/AHEmCfUOH/l
Y/wC1DX9v8o+/8LwAMlhTq/p1H63f4LhTq/p1H63f4Jq7Kp7rgAKSAAAAAAAAAAAU8SajmQ
NVLoszUX+pcIp4EnzLqqZj0elvuAgrkRH0qollSZqJ6j1NM/hKQwxsdJm5yudsRCWaBJljV
VVNG9HJbnseJqXSSpNHI6KREtdEvdAK7NKmKs0ujzljX5l9afeRPai4fU6v/HX3oXI6NGTp
O6Rz32sqrzhaJqwSRZ62kfnqvo13A8LduJPzU16C/wDUhoW1PBUdHoFR6qqq691185d0KcJ
091vmZtv1uRcDcxzlgndE1y3VqIip+gHqjgfTxOY9W63KqI3YiegRw07at8jHosqp5yZ3+C
SGNYmZqvc9b3VXLrI46NsdW+oRyqrk2AWAAB+K1FVFVEumxQjURVVES67VP0AClh3+3Ov/A
Pc7/B7dSSZ7ljqpGI5VVW2Rbeolp4GU8SRsvbaqrtVQK+GIjqPOVEVz3Krr85HT6sOq2p81
qvRvqsTLRK1zlhnfE163VqJf9vQStpmMpVp23RqtVFXn184FdI2pg1s1LaLO/W1zxU+dhUK
Lz5ly5oE4LwfOW2Zm3PL6Vr6ZkCuVEZbX6gIsQa1sMVkRM2RtrcxcIp4EnYjVVUs5HavuJQ
Bnyzf/AKnfRySJC21mJeyqaBDBTpC6R2crnSOzlVQK1BJaeeJWOYiuz2tcllsp6w5rf/qHW
TOWVUX1E606LVNqEcqORuaqelCnSQPk0z45nRKsrkWyXRUA9U/mwVrG/Ma51vu1ElLHGuFt
aqJmuYqqe1gZT0MjGXXzXKqrtVbFemo3SUbESoe2N7buYlveBPhyq6giV3oVP6nmm+n1frZ
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
E2Kmw6MwMofrfA/zS+5DXS9/8/0z1PatcnaTrFd7XJ4jk7SdYrva5PE1QTkr5Vsp4ZXJ2k6
xXe1yeI5O0nWK72uTxNUDJXybKeGVydpOsV3tcniOTtJ1iu9rk8TVAyV8mynhlcnaTrFd7X
J4jk7SdYrva5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK72uTxNUDJXybKeGVydpOsV3tcniOT
tJ1iu9rk8TVAyV8mynhlcnaTrFd7XJ4jk7SdYrva5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK
72uTxNUDJXybKeGVydpOsV3tcniOTtJ1iu9rk8TVAyV8mynhlcnaTrFd7XJ4jk7SdYrva5P
E1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK72uTxNUDJXybKeGVydpOsV3tcniOTtJ1iu9rk8TVAy
V8mynhlcnaTrFd7XJ4jk7SdYrva5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK72uTxNUDJXybK
eGVydpOsV3tcniOTtJ1iu9rk8TVAyV8mynhlcnaTrFd7XJ4jk7SdYrva5PE1QMlfJsp4ZXJ
2k6xXe1yeI5O0nWK72uTxNUDJXybKeGVydpOsV3tcniOTtJ1iu9rk8TVAyV8mynhlcnaTrF
d7XJ4jk7SdYrva5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK72uTxNUDJXybKeGVydpOsV3tcn
iOTtJ1iu9rk8TVAyV8mynhlcnaTrFd7XJ4jk7SdYrva5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0
nWK72uTxNUDJXybKeGVydpOsV3tcniOTtJ1iu9rk8TVAyV8mynhlcnaTrFd7XJ4jk7SdYrv
a5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK72uTxNUDJXybKeGVydpOsV3tcniOTtJ1iu9rk8T
VAyV8mynhlcnaTrFd7XJ4jk7SdYrva5PE1QMlfJsp4ZXJ2k6xXe1yeI5O0nWK72uTxNUDJX
ybKeGVydpOsV3tcniOTtJ1iu9rk8TVAyV8mynhlcnaTrFd7XJ4jk7SdYrva5PE1QMlfJsp4
c5jeB00GCVkrZ6xXMhcqI6pe5F1c6Kus1cE+ocP/Kx/2oR5Q/w9X/yH+4kwT6hw/wDKx/2o
XNUzp+vKYiIr9OF4AGLQKdX9Oo/W7/BcKdX9Oo/W7/BNXZVPdcABSQAAAAAAAAAAACKnnSo
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
AAAAAAAAAAAAAAAD//Z
</binary><binary id="_34.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGgA34DASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAQGAwUHAQII/8QAVhAAAQMCAgIKChAFBAIBAgcAAAECAwQFBhESIQcTFBUxUVV0
lMEiNkFhcoGRktHiFjIzQkRGU3FzdqGiscLS4SRSVISyIzVigiU0gzc4Q3WTs7Tw8f/EABo
BAQEBAQEBAQAAAAAAAAAAAAABAgMEBQb/xAAnEQEAAgEEAQQCAwEBAAAAAAAAAQJRERITMQ
MUITJBM1IEcbEiI//aAAwDAQACEQMRAD8A7MAAAAAAAAAAAAAAAAAAAAAAAAAAAK7Piiojq
54IrYkjYZFj01qNHPLvaJ8eymt5Ib0pP0mZvWPt0jxXmNYhZQVr2U1vJDelJ+keymt5Ib0p
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
</binary><binary id="_22.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGQBOUDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAUGAwQHAgEI/8QAUxAAAQMCAgQICggDBgMHBAMAAAECAwQFBhESIZPRExUWMUFR
VFUHFBciYXGRkpTSMjVlc3SBsbI2UqEjM0JTcsE04fA3Q2J1grPCJCUmRIOi8f/EABoBAQA
DAQEBAAAAAAAAAAAAAAABAgMEBQb/xAA1EQEAAQMDAgMHAwMFAAMAAAAAAQIDURESFBNiBC
ExMkFSYYGhsRWR4UNx8CIjM0LBBdHx/9oADAMBAAIRAxEAPwDswAAAAAAAAAAAAAAAAAAAA
AAQ9ViGJkzoKKnfWyMXJ6sVGsavVpL0+rMCYBAcoLl3Mz4tPlPnKC5dzM+LT5SNYV3RlYAV
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+OcjWq5yoiImaqvQB9BVrhjmkp5Vjo4HV
OWpXq7Rb+WpczS8oEvdzNqu45p8VZidNXRHhrsxrouwKT5QJe7mbVdw8oEvdzNqu4jl2cp4
l7C7ApPlAl7uZtV3DygS93M2q7hy7OTiXsLsCk+UCXu5m1XcPKBL3czaruHLs5OJewuwKT5
QJe7mbVdw8oEvdzNqu4cuzk4l7C7ApPlAl7uZtV3DygS93M2q7hy7OTiXsLsCk+UCXu5m1X
cPKBL3czaruHLs5OJewuwKT5QJe7mbVdw8oEvdzNqu4cuzk4l7C7ApPlAl7uZtV3DygS93M
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
1s7ZNJVXXz5+peshj6j3oxWI5dFVzVuerPrN6r2+nSqGNNrZVrTLoGJr7xPVwI2ihne5iua
+Tnbr6CEsl2luuL6eprXN0tFzY0RMmt81ckT+pC3G61l1kZJWSpI5iZNVGomSfkajHuje17
HK1zVzRyLkqKaV+Jmq5rHpqzo8PFNvSfXRd6yrttBf3zOs9a+sa9VSRrlVH+lEz5siMhqEq
8exz8A+BXSpnG9MnNXQyXM1mYxvTIkZ4wxyomWk6NMyMbcatlx4wSXOp0tLTVqc/q5ia71M
zGmdfSEUWaoidcaespHF0r34kqUc5VRmi1qZ8yaKHvD94fbqeqZPRPqqOZcpVRPorl0+tCI
rKuauqn1NQ7Tlky0lyRM9WXR6jZtt6r7TppRyo1r8lc1WoqL7TKLn+7NeuWs2/8AaijRMXW
02uawLeLYyana1yI6KTPJdeXTn19ZsXmOWowXa1pGufE1G8IjEz16OWv88yCuWILjdY0iqp
kWNFz0GtRqKv8AufLbf7jamLHSz5Rqueg5qOTP/Y06tvWYiPKY/wA8mfSuaRMz5xKdvrXw4
KtsVUipPptya7nRMnf7KhlxU5yVVkRHKiIqL+ebSrXC51l0nSasmWRyJk1MskanoQ91d4rq
58D6iVHup/7vzUTLm6vUgqv0zExHy+xTZqiYmfn90vjv69j/AA7f3OK2bVwuVVdKhJ6uRJJ
EbooqNRNWvq9ZqmF2qK65qhtapmiiKZeo4pJnaMUbnqiZ5NTMtt/p5n4StLGQvc5qNzajVV
U80rVvudXa53TUciRvc3RVVai6s8+n1Ejywvna27Ju40tVW6aZirXzUuU11VRNOnkksK6cV
jvXO17Y19CoqNcebeufg9rs+iVcva0gor1XwNq2xzIiViqs3mJ52eefRq515jxHdayG2yW5
kqJTSrm5mimtdXTz9CF4vUxER8pj91Js1TMz84n9kxarzFT2VtDdLbJUUTnKrJGp6dfV059
J4xHZ6OipKWuoFkbDUf8AdSc7dWfTrNO3YjudsgSCmmakSKqoxzEXLP8AqYLld627SNfWTa
eh9FqIiI38kKzcom3tnzn+3p9Uxbqi5rHlH9/X6LBh5jpcHXWONqvequya1M1XzUIK021aq
801HUJJCkjs1zTRXJEVdXsMdvu1da3OdR1Cxaf0kyRUX8lPtXeK+uq4quefOaJERj2tRqpk
ufQRNyiaadfWFooriqrT3rdDxbR4mjtlJZc5I1RfGFeubdWeevPP2nmBMvCPUfdJ+xpAPxf
entanjLWq1UXNsbUVfWajb3cG3N1ySZPGXJkr9BObLLmyy5kN58RR5aZ19IhhFivz1xp6yt
GGnudiu8ZuVc3v/o/UauB1zS5xxqiVDmN4P/8At/uqEBS3qvoqyargmRs06qsjtBFzzXNdS
p1mvS1lRQ1LaimldFK3mchnF+mJpnGv3aTYqmKozp9nt9HXMdMr6edqsz4VVaqZetS4wuon
YJpFno5auBq+fHCqoqLmuarkqas/1K5W4nutfSupp5m8G9MnI1iJpGvbb3cLTpNpJ9FjlzV
jkRWqvqUi3ct26p084mE12666Y18piU1cbnSzYadQ0dsqoIUe3QfJra1dLPLNV9ZkobXUWF
Elr742gbz8BE7Tc7/0839FIS44huV0iSKpmRY0XSRrWIiZ9fWRz3uker3uVzl1qqrmqiq9T
u3eunp7vwU2atunp9/ynMTXmiu0kXisDkWPPSme1EdJ7CCAMK65rq3S3ooiinbAACiwAAAA
AAAAAAAAAAAAdatP1PRfh4/2oclOtWn6novw8f7UPR8B7VTg8d7MNsAHqPLAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAApnhF/4Wh/1v/RC5lM8Iv/C0P+t/6IdHhv8Alhje/wCOVEAB7LzQAA
AAAAAAAAAAALHha/UFpjliqoXskld5tTG1rnMTLLLX/wA/UVwFK6IrjbK1NU0zrC23KzVV6
Y+qor4y5xtTSWOR2i5qf6eZPYht2KKiocFzS3GZ8EVfIrVexPOy5kRNS9S+0pLHvjcjmOc1
ycytXJTbqbvW1dvhoJpUWngy4NiNRMsky6OfnMarVUxFOvk0i5ETu081qxHFR12DqWpt8r5
oaJ6MR7087R+jr1J06IxNBVT4Ts/ARvkY1jNNrEVdegmX+/tKrBd62ntstujlRKaZc3sVqL
murp6OZC03a/yW+z2d9trI1lbCjZWNcjv8LdSp6zObdVE0xHn5y0iumqJmcM2IKRaqkw7QV
b1ZPIrWSKv0k81qO/PM9ystVsxFS2ymsfDTOcx3DukXNuv6WvPPLnKbX3euuVW2qqZ1dKzL
QVurQy6suY33Yyvj4mx+NomiqeckbUcuXXqJ6Ne2I/ujq06zLfxUn/5rT+lYv1PnhBle69w
xK5dBtOio3PUiq5c1/ohA1l1rK6ubW1EqOnblk7RRObm1IfLjc6u61KVFZIkkiNRqKjUTV+
XrNKLUxNMz7oUquRMVae99tLlW9USuX/8AYj1r/qQnMc0tQ6/OlbBI6PgWrpo1VTVnnrKwi
q1UVFVFTWioS78WXqWkfSyVmnG9isdpRtzVFTJdeWZaqmrfFVKtNUbZplYKJcrDhn8d/wDJ
xlq9dJin/W39CosvdfHT0tO2ZEjo5OEhTQTzXZqufNr51Pr77cZGVbHTIqVqos/mJ539NX5
GXRq11/z11adWnTT/AD00XW8PtnEdtkqrfPWUyRpocA5URnmpz5Kn/SKQl/ukNbaaCnht1V
TRRSokT5k1K1EyyRc816CKtuJbraoeApqj+yTWjHtRyJ6uoxXO+3C7ujWsmR6RLmxqNRET2
CizVTVGvpHz/wDCq7EwtuJnuTGdlbpLkjmZJ636yCxx/E0v3bP0I+qvlwra6CtnmR09OqLG
7QRMslzTVl1mCvuFTc6pamrej5XIiKqNROb1FrdqqmY190K13IqidMrVieCaowxZFhifIjY
m56DVXLzE6imuarXK1yKiouSovQStFie8W+nbT09YqRM+i1zGuy9qEZNM+onkmkXN8jlc5c
ss1Vc1L2qKqI0n0VuVRVOsPBIWSnmku9FIyGRzG1MebkaqonnJ0keSduxFc7VTLT0c6Rxq5
XKixtXX+aegvXumnSlWnTXzSmOaeZ9/dK2GRzEhbm5GqqJz9Js3Zyp4OraiKqI6VqL6fpkR
UYtvVVTSU81U10crVa5OCamaLz9BpzXetqLbFbpJUWmhXSYzRRMl19PP0qYU269KYn3NZrp
1qmPesWM1VbLZFXWqxLr/APSwzpdbfepKahvtpnZV6o2yNRU1r09C5e0q1dd624wQQVUqPj
p26MaI1EyTJE6OfmQkYsaXyKJI0qGOREyRXRNzQjo1RREe+NffonqRumfc1cRWtlnvElJHI
58aNRzFdzoipzKT9/glqMGWbgYnyaLWZ6DVXLzCpVVXPW1L6mpkWSV65ucvSb9Dia726nbT
01WrYm/Ra5jXZerNDSqiuYpn3wpFVOs4lIYPstNcquqWuY9zadqZw5qmkq58+WvVlzFiwrV
0VbLVrR2ZKKNiI10mlnp+hUyKPTXq4Ulxkr4J9GeVVWRdFMnZrmuacxvOxnfHS8IlW1urLR
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
Iy717ayivS08DUnXRY1W6SqnTnmidPMhdMOzSYHxxi23w1dTWUlDafHkbUSaSve1jHa/Wr1
QxTeDfEr8BXC0NpofG57x42xvDNyWPQyzz68+gtMWDa2fwk4gudbC3im6WzxRHNkTSVVbG1
yZc6fRcByajutkvlLV3LFOJrvHepHuWBIGqscerzejmz6EyyQt1qxTc714Db3JWVUr6ugck
LajSXTc3SYqKq8+etUz9BtWeweEXA8U1qtNqtd6oFlV8M0zmtVufoVzV9aa9fMpYayyYrvP
g2utuusVHxtWOzihp1RrGNzYqNz/J3SvrA5ncrJXU/gytWMXX64Pr+FRkbFm8yJmk5E0elF
zTPPPpOm4ksKYxwPQXWruNZSzQW11QraWRGNlc+NrlRyZa0zb/AFUjLrge+1Xget+G4oI1u
MEjXPYsqI1ERzl+lzcyoXi3WuRuEKW0VXmSJb2U0uiueivBo1cusDk3gmwRT3yyNvEl2uVM
+nrlRIKeVGxu0UY7WmXTnkp285RhDD3hFwUnFNJS2qqtr6rhJJnvVXI1ckcrfOb0JzKi6zq
4A5R4YcPLSW6pxRT3a4xVDpIo/F2TaMSJqbmiImeerrOrnLse2nwh4ojrLPFbLYtqWdHQSp
Joyua1c255vy/oBeMHPfJgqxySOV73W6BXOcuaqvBt1qpxHClhrMV4TxDV1l8r2MtqOlghb
KqtdIjFdm/PPNMkREy61On4Gjx1QeK2u+2+3QWukpEhjlgerpVVqI1ufnKnMi56iLwJgm+W
HCWI7dXwRsqLgx6QNbKjkdnG5qZqnNrUD5ga7X24eBqrmpZZai50zJoqZ6rpPXJM25Z86pn
knqQoOHXYRr6dGYgxBfbXfle5H1L5F0EdmuWvJVToz0stees6fgbDmIcMeDyqtuhBDduElk
p0c9HM0lRNHNU9KFcxNZfCFjKibbbjhW0U71e1VuDZmKrcurzlcidepQLtjPC8GJrNG6S51
lOlJE+RrqSVGpLm3/FqXNNX9TmfgmwRT4isstzlutypH09dopFTTI1jsmsdmqZc+vL1HZLb
akocOUtnklWVIKRlM6TpdkxG5/0ObYUw14RcDLLbLbTWqst81Twr5ZHrpZakVUTSaqakTUu
YG/4Vq3Dray3017vN0h0WOd4hbMtOZFVERzs10UTUqJnr1rkU7Cd4itHhMtdJYX3qC2VqcH
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
/AAp0EyRVMREUwUxOu6QAGa4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgp62ea5y07q1KOONc
m+bzklTMqfEntdVNle7Pg5Wp0Zav6mlXSxvmeyptckuS5NkY36SesyWKnngp5OFY6Nr3ZsY
7nQ821M9aaZnXXXPl9PT+2jtuRHSifTTTH/6jlgrOPEi8aTh9H+90fR1E5G2eGick0vCStR
V08siPrY6mmvLa2OnfMzRyyZ6siQjlfU0LnuhfE5zXJoO5yfDUxRVXHnrrOfT/PqXqpqppn
y08sImhfdLjA5W1SRta76SprVcub/rrNmurKuipaeBHo+plXLTy/660PdhhlhoXtljdG5ZV
XJyZLlkh8vNJNMkNRTt0nwuz0U51/6yKU0Vx4bfEzumP/Vpqom/tmI0a8k9faqiFamoSeKR
cnauYy3Gqq2XWCnppdFJGJqVEVM1VdZgnWqvE8Ea0r4I41ze56GxWQSvv1LK2J6xtambkbq
TWvSU1qmmYomdusaeuvz+adKYmN0RrpOv/jzQ1FXDdn0VRNwyaOaLl6Mzwk9dcbhMymnSGO
Fck1c//WRlbDLykdNwT+D0fp6K5fR6zC2KtttwndDTLPHMuaZLzdX6k/64jSddsVTnXT3fM
/0zOsaa6Rj6stnq6qoqqllS/NWf4ctSLmpLkHYtPx2s4TLTz87LmzzUnDr8HVNVmJmc/lz+
JiIuTEfIAB1ucAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAj6m2SzVD5Yq6WHTyza3m5suskAZ3LdNyNKl6K6qJ1hqUFvioI3NYquc9c3OXpNsAtRRT
RTtpjyRVVNU6yAAsqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/9k=
</binary><binary id="_33.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAEDA34DASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAQGAgUHAQMI/8QAShAAAQMCAgQHDAkEAQMEAwAAAAECAwQFBhEHEiExExQVQVF0
oiJCU1VhcXKBlKHBwjI2REZSdpGx0TM0hLIkFiNzQ2J18DU4s//EABgBAQEBAQEAAAAAAAA
AAAAAAAABAgME/8QAHxEBAAICAwEBAQEAAAAAAAAAAAECEjERE1FBIQMy/9oADAMBAAIRAx
EAPwDswAAAAAAAAAAAAAAAAAAAAAAAAAAAjLVP13NbDmjVyz1sjzjUngO2BKBF41J4DtjjU
ngO2BKBF41J4DtjjUngO2BKBF41J4DtjjUngO2BKBF41J4DtnjayR2eUG5cvpgSwReNSeA7
Y41J4DtgSgReNSeA7Y41J4DtgSgReNSeA7Y41J4DtgSgReNSeA7Y41J4DtgSgRErJHZ5Qbl
y+me8ak8B2wJQIvGpPAdscak8B2wJQIvGpPAdscak8B2wJQIvGpPAdscak8B2wJQIvGpPAd
s8SskdnlBuXL6YEsEXjUngO2ONSeA7YEoEXjUngO2ONSeA7YEoEXjUngO2ONSeA7YEoEXjU
ngO2ONSeA7YEoGgXEVW6aZkNq4RsUixq7jCJmqeTI95fuPiZPam/wAF4lnKsfW+BoeX7j4m
T2pv8Dl+4+Jk9qb/AAMZ8M6+t8DQ8v3HxMntTf4HL9x8TJ7U3+BjPhnX1vgaHl+4+Jk9qb/
A5fuPiZPam/wMZ8M6+t8DQ8v3HxMntTf4PnFiatm19Sz58G9WO/5Kb09Qxkzr6sQNDy/cfE
ye1N/gcv3HxMntTf4GM+GdfW+BoeX7j4mT2pv8Dl+4+Jk9qb/Axnwzr63wNDy/cfEye1N/g
cv3HxMntTf4GM+GdfW+BoeX7j4mT2pv8Dl+4+Jk9qb/AAMZ8M6+t8CuxYmrZtfUs+eo9WO/
5Kb09R9OX7j4mT2pv8DGTOvrfA0PL9x8TJ7U3+By/cfEye1N/gYz4Z19b4Gh5fuPiZPam/w
OX7j4mT2pv8DGfDOvrfA0PL9x8TJ7U3+By/cfEye1N/gYz4Z19b4Gh5fuPiZPam/wfOLE1b
Nr6lnz1Hqx3/JTenqGMmdfViBoeX7j4mT2pv8AA5fuPiZPam/wMZ8M6+t8DQ8v3HxMntTf4
HL9x8TJ7U3+BjPhnX1vgaHl+4+Jk9qb/A5fuPiZPam/wMZ8M6+t8DQ8v3HxMntTf4HL9x8T
J7U3+BjPhnX1vgQbTcXXOmklfBwDo5VjczX1tqZc/rJxGgAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAQm/Tl9NT08b9OX01PQAAAAAAAABhF3/pqZmEXf8ApqBmAA
AAAAAAAAMIu/8ATUzMIu/9NTMAAAAAAAAAYRd/6amZhF3/AKagZgAAAAAAAAADQ0f9au63J
8CURaP+tXdbk+BKPTXTxX/1IACsAAAAAAQbbvq+sv8AgTiDbd9X1l/wJ9ajUpwAKyAAAAAA
AAg237X1l/wJxBtv2vrL/gTiRpbbAAVAAAAAAINt+19Zf8CcQbb9r6y/4E+rGpTgAVAAAAA
AAAH3w1/a1nXJPgbk02Gv7Ws65J8Dcnmnb311AACKAAAAAAAAAAAAAAAAAAAAAAAAAAADlO
kvDVLQVNtr6asuEct0u8cM6JVv1dV+srkanNuL9arRRYTs9RHTPqpYWK6odw8yyv8AopmiK
vkbuA3AKGmlSnqLSl2oMO3eroI2q6onbG1Gw5b0390qJtXLYnTvN/dcXW214Q/6oVJaihWO
ORqRImu5r3NRNiqn4kzA3oKSuk2kidBVVVkudNZ6l6MiucsSJEue5ypnmjV5lLBeMRUtlrL
XSzxSyOudQlPEsaIqNdlnm7Nd3mzA2wNTd8RUtmuNroZ4pnyXSdYYnMRMmqiZ5uzXd5sypa
UsT3K2WaopqGhulM5ksOVxhVGxKiqiq1HI7W27twHQwaazX6ou1RJFNYbnbUYzWSSsYxGu2
7k1XLtNyAB4ueS5bzlF3tF7s+LcK1l2xHVXCrrbgjJY2LwdOxqZLqtYnn38/QB1gAAAABCb
9OX01PTxv05fTU9AGrxLfYcOWKouczdfg0yjjzy13rsRP/vNmbQ5rpoqXMtVspUXuZZ3yKn
otRE/2Ai2i244xnSLeZMRS22GVV4COJzmI5EXLc1UyTmzXNSbhLFl4t+KJMJ4lmbPMjtSGo
zRV1ss0RV50VN2e3PZ5rDcbxTYNwLTzKjVfDTRxQRr38mrs/lfMpya6224WCss17uEr1rq6
Rat6O3sVHoqZ+XbmvRnlzBXfwAEDCLv/TUzMIu/9NQMwABqMU4ggwvh6qu07dfgW5Rx55cI
9djW/r7szmlltekHHlG6+S4mmtUErl4vFE57EciLzNaqZNz2Zrmq5E3TxVvZZ7TRovczVD5
FTpVrURP91LTc75S4F0eUs6o1Xw0scNNEv/qSaiIie5VXyIoFZwXjO92zF8mDcVztqJkdqQ
1OaKutlmiKvOjk3Ku3PYvk6kfm28Wq5Ycr7Ff7lM91wuEq1siO3sVHtVM/LtzXozy5j9JAA
ABhF3/pqZmEXf8ApqZgDUYqxDBhbD1Tdp266xIiRx55cI9djU/nyIptzlWnircyz2mjRe5l
qHyKnSrWoif7qBDstq0g47olvkmJ5bVBM5eLxQvexHIi5fRaqZNz2Zrmq5E/BeM73bMXyYN
xXO2omR2pDU5oq62WaIq86OTcq7c9i+SzXO+UuBdHlLOqNV8NLHDTRL/6kmoiInuVV8iKcZ
vFquWHK+xX+5TPdcLhKtbIjt7FR7VTPy7c16M8uYD9JAAAYRd/6amZhF3/AKagZgADUYqxD
BhbD1Tdp266xIiRx55cI9djU/nyIpzWy2rSDjuiW+SYnltUEzl4vFC97EciLl9Fqpk3PZmu
arkTNPFW5lntNGi9zLUPkVOlWtRE/wB1LTc75S4F0eUs6o1Xw0scNNEv/qSaiIie5VXyIoF
ZwXjO92zF8mDcVztqJkdqQ1OaKutlmiKvOjk3Ku3PYvk6kfm28Wq5Ycr7Ff7lM91wuEq1si
O3sVHtVM/LtzXozy5j9JAAABoaP+tXdbk+BKItH/WrutyfAlHprp4r/wCpDU4mv8OGbJNdJ
oXztjVrUYxURVVVyTau5DbHzmghqGIyeJkrUcjkR7UVEVNy7Ssxv9cbv2MMdVlu5ZbE+0Wz
XRseo1Gq9V3bXbXedMkOm4NrKivwhbaurldNPLDrPe7e5c1NBpf+pP8AlR/s43GAfqNaf/B
8VMR+WdLTE054WIAG3IINt31fWX/AnEG276vrL/gT61GpTgAVlqcTYghwzZJbpNA+dsao1I
2KiKqquSbV3Ictv2MMd1lu5ZbE+0W1Ho2PUajVeq7tru6du3pkh2SaCGoajZ4mSta5HIj2o
qIqbl285SdL/wBSv8qP9nGbRPDp/OY544WDB9XUV+ErbVVUrpZ5YEc97t7lN0V/Af1HtPV0
/dSwFjTFtyAAqINt+19Zf8CcQbb9r6y/4E4kaW2w1OJsQQ4Zskt0mgfO2NUakbFRFVVXJNq
7kNsfOaCGoajZ4mSta5HIj2oqIqbl285SN/rjd+xhjust3LLYn2i2o9Gx6jUar1Xdtd3Tt2
9MkOnYPq6ivwlbaqqldLPLAjnvdvcpX9L/ANSv8qP9nG6wH9R7T1dP3UxH5Z0tMTTnhYAAb
cgg237X1l/wJxBtv2vrL/gT6salOABUazEN7iw9aJLjNC+ZGKjUYxURVVVyTbzHObzinGVV
Q8qpG+2W9Ho1momSuVd21dq+dMkOqywxTtRs0TJGoqORHtRURU3KVLSh9Uf8ln7KZtE8Ov8
AOY5iOG7wtUz1uGLfU1MjpZpIUc97t6qbY0mDPqfbP/AhuyxpztuQAFR98Nf2tZ1yT4G5NN
hr+1rOuSfA3J5p299dQAAigAAAAAAAAAAAAAAAAAAAAAAAAAAoOlf+2w3/APO0/wCzi5Xj/
wDC13VpP9VK/X6MMG3Ovnr6yz8LUVEiySv4zM3Wcq5quSPyT1G2s+F7NYLVNa7XR8XpJ3Of
JHwr3ayuajV2uVVTYic4FXwYxqaE4mo1ERbfUKqZb81fmaG6f/rbH1eH/wDu06bR2S3W+yN
stLT8HQNjdEkOu5e5dnmmarnzrzlW0gWBKfRVW2SxUE0jY2wtgpoUfK/JJmKuW9y86gYY+r
Le/RBUysfGtPPSwpToi7HKqt1UT9/URMUJJSN0frWKrHRV0DJXO5n6iJt9eZuqTRvheKtgu
HJq8JG5JWQulesTH71VI1XJNvNll5Dd3yw23EdtdbrrTJUU7nI7LNUVrk3KiptRQKpjuoi/
62wXTa6cLx579TPajckTP9T6aYNmj+odzNqIFVehNdDZ0Gj7DNunp6mKge+pppOFjnlnke9
HImSZqq7UROZdnkN7X0FJc6KWirqdlRTTN1ZI3pmjkA+6Kjmo5qoqKmaKnOemlsmEbHhyZ8
1qpHwOezUXOolkTVzzyRHOVE3cxugBRNIH1pwX/wDKfBC9lQqdFWCqyqmqqiy68073SSO41
MmblXNVyR+W9QLeCBZbJbsPW1lutVPxelY5XNj13PyVVzXa5VUngAABCb9OX01PTxv05fTU
9AHMtNULnUVpmy7lkkrV86o1flU6aV7HOHX4lwzNRw5cZjck0Ga5ZvTPZ60VU9YFSs7X6Q8
TwVs7Hci2djWxscmyWXJN6edM18iInORtL3/Jv9lo2bZFYuz0nIifseYPx/Q4Vs62S826pp
qile7+nGmb81z7pFVMnc3myPbDT1uPseNxJUUr4LZRq1Ydfn1drWovOut3S9G7oCurgAIGE
Xf+mpmYRd/6agZgADk2nqFzqCzToncsllYq+VUaqf6qeWNH6TsW09dPGqWKxRsbHG5Nk02S
b086Zr5EROcuukHDLsVYTqKGFEWqjVJqbNcs3tz2etFVPWc+wPpIt+DrI6wXy2VNLU0kjlz
iiTWeqrn3SKqKjubzIgGWm3/l4jsNCzbI5jsk9J6In7HZDjeHKav0kaRmYqqaR9PaaFzVh1
9y6m1jUXnXW7pctibug7IAAAGEXf8ApqZmEXf+mpmAOTaeoXOoLNOidyyWVir5VRqp/qp1k
rOkLDD8V4UnoYETjUTkmp81yRXtz2etFVPWBS7G2TSbi2nr6iNyWGxsY2ONybJpskVc086Z
r5EanORdNv8Ay8R2GhZtkcx2Sek9ET9jHA+ki3YPsa2C+Wyqpamke7+lEmb1Vc+6RVRUdze
ZEMsOU1fpI0jMxVU0j6e00LmrDr7l1NrGovOut3S5bE3dAHZAAAMIu/8ATUzMIu/9NQMwAB
ybT1C51BZp0TuWSysVfKqNVP8AVTyxtk0m4tp6+ojclhsbGNjjcmyabJFXNPOma+RGpzl00
hYYfivCk9DAicaick1PmuSK9uez1oqp6zn+B9JFuwfY1sF8tlVS1NI939KJM3qq590iqio7
m8yIBlpt/wCXiOw0LNsjmOyT0noifsdkON4cpq/SRpGZiqppH09poXNWHX3LqbWNReddbul
y2Ju6DsgAAAaGj/rV3W5PgSiLR/1q7rcnwJR6a6eK/wDqQAiXSvba7VV3B7Fe2lhfKrWrtc
jUVcvcVhUNL/1K/wAqP9nG4wD9RrT/AOD4qc1xrpIo8U2Hk6C3zwP4Zsmu96KmzPo85Ow3p
WobLYKK1yWyolfTx6iva9qIu055Rly74Ww44deAB0cAg23fV9Zf8CcQbbvq+sv+BPrUalOA
BWQoul/6lf5Uf7OLfdK9trtVXcHsV7aWF8qtau1yNRVy9xx7GukijxTYeToLfPA/hmya73o
qbM+jzmbzHHDp/OszPLpmA/qPaerp+6lgOR4a0q0NpsdBapLZUSPgYkava9qIq57zrgrMTC
XrMT+gANMINt+19Zf8CcQbb9r6y/4E4kaW2wAiXSvba7VV3B7Fe2lhfKrWrtcjUVcvcVFQ0
v8A1K/yo/2cbrAf1HtPV0/dTmeNdJFHimw8nQW+eB/DNk13vRU2Z9HnNhhrSrQ2mx0Fqktl
RI+BiRq9r2oirnvOeUZcu+FsOOHXAAdHAINt+19Zf8CcQbb9r6y/4E+rGpTgAVAp2lD6o/5
LP2UtFxrW2621Nc9ivbTxOkVqb1REzyOWYtx7S4jsvEIaKaF3CtfrPcipsz6POZvMccOn86
zNomHQcGfU+2f+BDdnMbBpIo7ZZ6O2vt873wsSNXo9MlOnCsxMJesxP6AA0w++Gv7Ws65J8
Dcmmw1/a1nXJPgbk807e+uoAARQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAEJv05fTU9PG/Tl9NT0AAAPhPQ0dU5HVFLDM5u5ZI0cqfqfZrWsajWtRrUTJERMkQ9AAA
ADCLv/TUzMIu/9NQMwAAI9Tb6Ksc11VRwTubuWWJHKn6oSAB41rWNRrGo1qJkiImSIegAAA
BhF3/pqZmEXf8ApqZgAABHqLfRVjkdVUcE7m7llia5U/VD7ta1jUaxqNaiZIiJkiHoAAAAY
Rd/6amZhF3/AKagZgAAR6i30VY5HVVHBO5u5ZYmuVP1QkADxrWsajWNRrUTJERMkQ9AAAAD
Q0f9au63J8CURaP+tXdbk+BKPTXTxX/1IACsAAAAAAQbbvq+sv8AgTiDbd9X1l/wJ9ajUpw
AKyAAAAAAAAg237X1l/wJxBtv2vrL/gTiRpbbAAVAAAAAAINt+19Zf8CcQbb9r6y/4E+rGp
TgAVAAAAAAAAH3w1/a1nXJPgbk02Gv7Ws65J8Dcnmnb311AACKAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAhrFM2R+UeaK5VRdZBqT+B7SEwAQ9SfwPaQak/ge0hMAG
ju15p7JxPj6LHx2pZSw5d1rSO3Js3bt5sNSfwPaQqOk/7rfmCm+YvQEPUn8D2kGpP4HtITA
BD1J/A9pDFkU7db/tIua5/SQnACHqT+B7SDUn8D2kJgAh6k/ge0hr7teaeycT4+ix8dqWUs
OXda0jtybN27ebwouk/wC635gpvmAt2pP4HtINSfwPaQmACHqT+B7SDUn8D2kJgAgsinbrf
9pNq5/SQy1J/A9pCYAIepP4HtINSfwPaQmADR3a809k4nx9Fj47UspYcu61pHbk2bt282Gp
P4HtIVHSf91vzBTfMXoCHqT+B7SDUn8D2kJgAh6k/ge0hiyKdut/2k2rn9JCcAIepP4HtIN
SfwPaQmACHqT+B7SGvu15p7JxPj6LHx2pZSw5d1rSO3Js3bt5vCi6T/ut+YKb5gLdqT+B7S
DUn8D2kJgAh6k/ge0g1J/A9pCYAKu2hu1PPU6lvSRss7pGu4dqbFM+BvHipPaWllBqLzDnP
86zPKtcDePFSe0tHA3jxUntLSygudjqopV2u9TZOJ8ft/B8dqWUsOUyO1pHbk2Js3bzYcDe
PFSe0tNVpP8Aut+YKb5i9DOx1UVrgbx4qT2lo4G8eKk9paWUDOx1UVrgbx4qT2lp8KWhvNP
w2dsa7hZXSf3DdmfMWwEzk66q1wN48VJ7S0cDePFSe0tLKC52OqitcDePFSe0tNfdrvU2Ti
fH7fwfHallLDlMjtaR25NibN28upRdJ/3W/MFN8wzsdVG14G8eKk9paOBvHipPaWllAzsdV
Fa4G8eKk9paOBvHipPaWllAzsdVFTpaG80/DZ2xruEldJ/cN2Z8x9+BvHipPaWllBM5Ouqt
cDePFSe0tHA3jxUntLSygudjqopV2u9TZOJ8ft/B8dqWUsOUyO1pHbk2Js3bzYcDePFSe0t
NVpP+635gpvmL0M7HVRWuBvHipPaWjgbx4qT2lpZQM7HVRWuBvHipPaWnwpaG80/DZ2xruE
ldJ/cN2Z8xbATOTrqrXA3jxUntLRwN48VJ7S0soLnY6qK1wN48VJ7S0192u9TZOJ8ft/B8d
qWUsOUyO1pHbk2Js3by6lF0n/db8wU3zDOx1UbXgbx4qT2lo4G8eKk9paWUDOx1UVrgbx4q
T2lo4G8eKk9paWUDOx1Uauw0tTS0kyVUSRSSzukRqOR2SLlzobQAw6AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKLpP8Aut+YKb5i9FF0n/db8wU3zF6AAA
AAAAAAFF0n/db8wU3zF6KLpP8Aut+YKb5gL0AAAAAAAAAAKLpP+635gpvmL0UXSf8Adb8wU
3zF6AAAAAAAAAFF0n/db8wU3zF6KLpP+635gpvmAvQAAAAAAAAAAouk/wC635gpvmL0UXSf
91vzBTfMXoAAAAAAAAAUXSf91vzBTfMXoouk/wC635gpvmAvQAAAAAAAAAAouk/7rfmCm+Y
vRRdJ/wB1vzBTfMXoAAAAAAAAAUXSf91vzBTfMXoouk/7rfmCm+YC9AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAouk/wC635gpvmL0UXSf91vzB
TfMXoAAAAAAAAAUXSf91vzBTfMXoouk/wC635gpvmAvQAAAAAAAAAAouk/7rfmCm+YvRRdJ
/wB1vzBTfMXoAAAAAAAAAUXSf91vzBTfMXoouk/7rfmCm+YC9AAAAAAAAAACi6T/ALrfmCm
+YvRRdJ/3W/MFN8xegAAAAAAAABRdJ/3W/MFN8xeii6T/ALrfmCm+YC9AAAAAAAAAACi6T/
ut+YKb5i9FF0n/AHW/MFN8xegAAAAAAAABRdJ/3W/MFN8xeii6T/ut+YKb5gL0AAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHi55LkmagUbSf91vzB
TfMXo4RjHSvR3yW1xJaamnfa7pHVSte9q62pnm3Zz7To2B9IlPjipq4qW2T0zKRjXPkkeip
m5VyTZ5l/QC4gAAAAAAAFF0n/AHW/MFN8xeVzyXJM1OE4x0r0d8ltcSWmpp32u6R1UrXvau
tqZ5t2c+0Du4KdgfSJT44qauKltk9MykY1z5JHoqZuVck2eZf0LiAAAAAAADxc8lyTNQKNp
P8Aut+YKb5i9HCMY6V6O+S2uJLTU077XdI6qVr3tXW1M827OfadGwPpEp8cVNXFS2yemZSM
a58kj0VM3KuSbPMv6AXEAAAAAAAAouk/7rfmCm+YvK55LkmanCcY6V6O+S2uJLTU077XdI6
qVr3tXW1M827OfaB3cFOwPpEp8cVNXFS2yemZSMa58kj0VM3KuSbPMv6FxAAAAAAAB4BRtJ
/3W/MFN8xejhGM9K1He57ZAlpqaeS1XSOqlR72rrcGqorU8u06LgfSJT44qqqGltk9MylY1
z5JHoqZquSJs8y/oBcgAAAAAAACi6T/ALrfmCm+YvK55LkmanCcY6V6O+S2uJLTU077XdI6
qVr3tXW1M827OfaB3cFOwPpEp8cVNXFS2yemZSMa58kj0VM3KuSbPMv6FxAAAAAAAB4ueS5
JmoFG0n/db8wU3zF6OEYx0r0d8ltcSWmpp32u6R1UrXvautqZ5t2c+06NgfSJT44qauKltk
9MykY1z5JHoqZuVck2eZf0AuIAAAAAAABRdJ/3W/MFN8xeVzyXJM1OE4x0r0d8ltcSWmpp3
2u6R1UrXvautqZ5t2c+0Du4KdgfSJT44qauKltk9MykY1z5JHoqZuVck2eZf0LiAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfl/SfaeR9IF0ia3KO
eTjDPKj01l7SuT1HWNB1p4jgqSvc3J9wqHORelje5T3o79SvafbOq1Npu8TFVZEdSvyTnRd
Zie951bDlrSyYbt1sRERaWnZG7Lncid0vrXNQNmAAAAAAAAfl/ShaFs+kC5xI3VjqJOMx+V
H7V7WsnqP1AcX0+2hzp7Rdo2K5Xo6leqJz56zE97wLBoOtPEcFSV7m5PuFQ5yL0sb3Ke9Hf
qdINZhy1pZMN262IiItLTsjdlzuRO6X1rmpswAAAAAAAAPy/pPtPI+kC6RNblHPJxhnlR6a
y9pXJ6jrGg608RwVJXubk+4VDnIvSxvcp70d+pXtPtnVam03eJiqsiOpX5JzousxPe86thy
1pZMN262IiItLTsjdlzuRO6X1rmoGzAAAAAAAAPy/pPtPI+kC6RNblHPJxhnlR6ay9pXJ6j
9QHFtPtnVam03eJiqsiOpX5JzousxPe8Cw6DrTxHBUle5uT7hUOci9LG9ynvR36nSDWYcta
WTDdutiIiLS07I3Zc7kTul9a5qbMAAAAAAAAD8v6T7TyPpBukTW5RzycZZ5UemsvaVyeo6t
oMtXE8Fy17m5Pr6lzkXpYzuU96PNBp9s6rU2m7xMVVkR1K/JOdF1mJ73nVsN2ptjw3b7W1E
RaWnYx2XO7Lul9a5qBswAAAAAAAD8v6T7TyPpAukTW5RzycYZ5UemsvaVyeo/UBxbT7Z1Wp
tN3iYqrIjqV+Sc6LrMT3vAsOg608RwVJXubk+4VDnIvSxvcp70d+p0g1mHLWlkw3brYiIi0
tOyN2XO5E7pfWuamzAAAAAAAAA/L+k+08j6QLpE1uUc8nGGeVHprL2lcnqOsaDrTxHBUle5
uT7hUOci9LG9ynvR36le0+2dVqbTd4mKqyI6lfknOi6zE97zq2HLWlkw3brYiIi0tOyN2XO
5E7pfWuagbMAAAAAAAA/L+k+08j6QLpE1uUc8nGGeVHprL2lcnqP1AcW0+2dVqbTd4mKqyI
6lfknOi6zE97wLDoOtPEcFSV7m5PuFQ5yL0sb3Ke9HfqdINZhy1pZMN262IiItLTsjdlzuR
O6X1rmpswAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK868X
WSqqWU8dGkcMzo04TWzXLzDlO9/goO2axlib1j6sIK9yne/wUHbHKd7/BQdsY2OyvqXiGwU
+IaWlgqMsqashqm5pvVjs1T1pmnrNsV7lO9/goO2OU73+Cg7YxsdlfVhBXuU73+Cg7Y5Tvf
4KDtjGx2V9WEFe5Tvf4KDtnxp75eajhdWOhTgpFjXNH7VT1jGTsr6s4K9yne/wUHbHKd7/B
QdsY2OyvqwmpxDYKfENLSwVGWVNWQ1Tc03qx2ap60zT1kTlO9/goO2OU73+Cg7YxsdlfVhB
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
</binary><binary id="_7.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAFTAVMDASIAAhEBAxEB/8QAHAABAQEBAQADAQAAA
AAAAAAAAAcIBgUBAgQD/8QAShAAAAQDAwUNCAECBQMDBQAAAAECAwQFBgcREhdxdJTSExYh
MTI2VFVWk7Kz0RQ3QVFSkcPiIhUjJCVhY6EzU2JCQ4E0ZHKDkv/EABYBAQEBAAAAAAAAAAA
AAAAAAAABAv/EABYRAQEBAAAAAAAAAAAAAAAAAAARAf/aAAwDAQACEQMRAD8AswAOTrmuSo
soIzlxxnte6f8Avbnhw4f/ABO+/F/wA6wBJ8uaezp65+gZc09nT1z9AFYASfLmns6eufoGX
NPZ09c/QBWAEny5p7Onrn6BlzT2dPXP0AVgBJ8uaezp65+gZc09nT1z9AFYASfLmns6eufo
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/9k=
</binary><binary id="_14.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4ge4SUNDX1BST0ZJTEUAAQEAAAeoYXBwbAIgAABtbnR
yUkdCIFhZWiAH2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLWFwcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABWxjcHJ0AAAG5AAAADh3dHB0AAAH
HAAAABRyWFlaAAAHMAAAABRnWFlaAAAHRAAAABRiWFlaAAAHWAAAABRyVFJDAAAHbAAAAA5
jaGFkAAAHfAAAACxiVFJDAAAHbAAAAA5nVFJDAAAHbAAAAA5kZXNjAAAAAAAAABRHZW5lcm
ljIFJHQiBQcm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJvZmlsZQAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAe
AAAADHNrU0sAAAAoAAABeGhySFIAAAAoAAABoGNhRVMAAAAkAAAByHB0QlIAAAAmAAAB7HV
rVUEAAAAqAAACEmZyRlUAAAAoAAACPHpoVFcAAAAWAAACZGl0SVQAAAAoAAACem5iTk8AAA
AmAAAComtvS1IAAAAWAAACyGNzQ1oAAAAiAAAC3mhlSUwAAAAeAAADAGRlREUAAAAsAAADH
mh1SFUAAAAoAAADSnN2U0UAAAAmAAAConpoQ04AAAAWAAADcmphSlAAAAAaAAADiHJvUk8A
AAAkAAADomVsR1IAAAAiAAADxnB0UE8AAAAmAAAD6G5sTkwAAAAoAAAEDmVzRVMAAAAmAAA
D6HRoVEgAAAAkAAAENnRyVFIAAAAiAAAEWmZpRkkAAAAoAAAEfHBsUEwAAAAsAAAEpHJ1Ul
UAAAAiAAAE0GFyRUcAAAAmAAAE8mVuVVMAAAAmAAAFGGRhREsAAAAuAAAFPgBWAWEAZQBvA
GIAZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGkBDQBrAGkAIABS
AEcAQgAgAHAAcgBvAGYAaQBsAFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIAaQB
jAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUAbgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQ
Q4BDkAIAQ/BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwAIABnAOkAbgDpAHIAa
QBxAHUAZQAgAFIAVgBCkBp1KAAgAFIARwBCACCCcl9pY8+P8ABQAHIAbwBmAGkAbABvACAA
UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8ARwBlAG4AZQByAGkAcwBrACAAUgBHAEIALQBwAHI
AbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3wATwBiAGUAYwBuAP0AIABSAEcAQgAgAH
AAcgBvAGYAaQBsBeQF6AXVBeQF2QXcACAAUgBHAEIAIAXbBdwF3AXZAEEAbABsAGcAZQBtA
GUAaQBuAGUAcwAgAFIARwBCAC0AUAByAG8AZgBpAGwAwQBsAHQAYQBsAOEAbgBvAHMAIABS
AEcAQgAgAHAAcgBvAGYAaQBsZm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABSAEcAQgA
gMNcw7TDVMKEwpDDrAFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIAaQBjA5MDtQ
O9A7kDugPMACADwAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAgAFIARwBCACAAZ
wBlAG4A6QByAGkAYwBvAEEAbABnAGUAbQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUA
bA5CDhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQOGwBHAGUAbgBlAGwAIABSAEc
AQgAgAFAAcgBvAGYAaQBsAGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAG
kAbABpAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQxB
EkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEGSgZBACAAUgBH
AEIAIAYnBkQGOQYnBkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZQB
HAGUAbgBlAHIAZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABzAGV0ZXh0AAAAAE
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
3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEa
HV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63r
MTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1
MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLl
mh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et
6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/
d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTq
YHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQd
ajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1
f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zE
aHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63
rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd
1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajL
lmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3e
t6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV
/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMT
qYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQdajLlmh1f3et6zEaHV/d63rMTqYHd1MQ
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
QUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85
W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdp
BR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zl
b1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12k
FH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOV
vUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQ
UfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W
9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpB
R95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb
1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kF
H3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVv
UFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQU
fecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9
QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR
95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1
BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH
3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUfecreoNIKPvOVvU
FlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9QWVYLqctiDXaQUf
ecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR95yt6g0go+85W9Q
WVYLqctiDXaQUfecreoNIKPvOVvUFlWC6nLYg12kFH3nK3qDSCj7zlb1BZVgupy2INdpBR9
5yt6g0go+85W9QWVYLqctiDXaQUfecreoY05lXSpZlkCOk5HdzMgwPjK5dVqExp1z+Ca6Y/
K3C58vI6pz5sgiL3lz0N8aWgU+agumalUERJydciuYn/AMbU6G/+943ROpMb7R+EUe24ADN
cAAHiLBhR2KyNDZEYv+l7UVPKYnItK3ZJ3DcDOBMVTHtKJiJYPItJ3ZJ3DcByLSd2Sdw3Az
gTfVlFsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPI
tJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByL
Sd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL
6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3
ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2
Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6sl
sYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3
DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw
3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYY
PItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcB
yLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3Az
gL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPIt
J3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLS
d2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6
slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3Z
J3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2S
dw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6sls
YYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3D
cByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3
AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYP
ItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcBy
LSd2Sdw3AzgL6slsYYPItJ3ZJ3DcByLSd2Sdw3AzgL6slsYYPItJ3ZJ3DcC9AkZOVW2WlIE
FV7cOGjfUZAE1TP5TtAACqQAAf/Z
</binary><binary id="_23.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGLBOUDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAQII/8QAUxAAAQMCAgQICQkGBAQFBAMAAAECAwQFBhESIZPRExQVFjFB
VFUHIjVRYXGRlNIXMlNzdIGSsbIzNlJyocEjNELwN2KC4SZDorPCJER18Sdlg//EABoBAQA
DAQEBAAAAAAAAAAAAAAABAgMEBQb/xAAyEQEAAQIFAgQFBAMAAwEAAAAAAQIDERITFFFSYQ
QhMYEyQXGx8BUzkaFCQ+EFIiPR/9oADAMBAAIRAxEAPwDswAAAAAAAAAAAAAAAAAAAAAAU9
TiGJszoaKnfWPYuTnNVGsavm0l6/VmD0XAKHl6490M96T4Ry9ce6Ge9J8JGMK5o5XwKHl64
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
ti3cOS7d2Cm2LdxLAy08GarlE5Lt3YKbYt3Dku3dgpti3cSwMtPBmq5ROS7d2Cm2Ldw5Lt3
YKbYt3EsDLTwZquUTku3dgpti3cOS7d2Cm2LdxLAy08GarlE5Lt3YKbYt3Dku3dgpti3cSw
MtPBmq5Ul+t1DFYqx8dHTse2JVRzYmoqf0J1qkYlookV7f8vH1/8AKh5Yi/d+t+qUyNL/AJ
WH+Rv5Hn+K8Rtq4mKccYdlizrW8Jn0lveFj/jb7Rwsf8bfaYcHN+qz0f3/AMbbCOr+m44WP
+NvtHCx/wAbfaYcD9Vno/v/AIbCOr+m44WP+NvtHCx/xt9phwP1Wej+/wDhsI6v6bjhY/42
+0cLH/G32mHA/VZ6P7/4bCOr+m44WP8Ajb7Rwsf8bfaYcD9Vno/v/hsI6v6bjhY/42+0cLH
/ABt9phwP1Wej+/8AhsI6v6bjhY/42+0cLH/G32mHA/VZ6P7/AOGwjq/puOFj/jb7Rwsf8b
faYcD9Vno/v/hsI6v6bjhY/wCNvtHCx/xt9phwP1Wej+/+Gwjq/puOFj/jb7Rwsf8AG32mH
A/VZ6P7/wCGwjq/puOFj/jb7TK3pUW6zKioqeL0fyoQQc3ifGzfoinLh5trHhdKrNjivrPe
M9Glqna+hj1/JS9MIX9muyvVtJUKqu6GP8/oU6vA+N9Ldz2lz+K8L/nQvDOYohbUXKyxPVy
NfUKiqxytXoToVOg0Zn8Q+WLH9qX8kPfs/H/P2eTc+FL5u0naK73uTeObtJ2iu97k3lqCup
Xytkp4VXN2k7RXe9ybxzdpO0V3vcm8tQNSvkyU8Krm7Sdorve5N45u0naK73uTeWoGpXyZK
eFVzdpO0V3vcm8c3aTtFd73JvLUDUr5MlPCq5u0naK73uTeObtJ2iu97k3lqBqV8mSnhVc3
aTtFd73JvHN2k7RXe9yby1A1K+TJTwqubtJ2iu97k3jm7Sdorve5N5agalfJkp4VXN2k7RX
e9ybxzdpO0V3vcm8tQNSvkyU8Krm7Sdorve5N45u0naK73uTeWoGpXyZKeFVzdpO0V3vcm8
c3aTtFd73JvLUDUr5MlPCq5u0naK73uTeObtJ2iu97k3lqBqV8mSnhVc3aTtFd73JvHN2k7
RXe9yby1A1K+TJTwqubtJ2iu97k3jm7Sdorve5N5agalfJkp4VXN2k7RXe9ybxzdpO0V3vc
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
AAAAB//2Q==
</binary><binary id="_35.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGgA34DASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgcDAQII/8QAVBAAAQMCAgILCgwEBQQCAAcAAAECAwQFBhESIQcTFBUxUVV0
kpTBIjM2QVNhgbHR4jJERlJxcnaEkaLC4TRCodIWIyRisjdzgrMlOENUdZO08PH/xAAYAQE
BAQEBAAAAAAAAAAAAAAAAAQMCBP/EACARAQACAgMBAAMBAAAAAAAAAAABAhIxERNRAyEyQS
L/2gAMAwEAAhEDEQA/AOzAAAAAAAAAAAAAAAAAAAAAAAAAAAChkxBWbpnigtbZWQyuj01qU
bmqebRPm/1y5GZ1tP7S4y5zrH9X4KDf65cjM62n9o3+uXIzOtp/aXGfDOvq/BQb/XLkZnW0
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
aSqueeWR6gAAAAAAAAAAAAAAAAAAAAAAAAAf//Z
</binary><binary id="_27.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGLBOUDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAQFBgcDAQL/xABVEAABAwICBQgECwYFAQYFBAMAAQIDBAUGERIhMZPRBxMUFRZB
VFUiUWGRFzI1U3F0gZKUsdIjNlJzobIzQnLB8OEkNDdDYsJ1goOisyUmRPFjZOL/xAAZAQE
BAQEBAQAAAAAAAAAAAAAAAwIBBAX/xAAxEQEAAQIFAgQGAgICAwAAAAAAAQIDERITFFFSYQ
QhMYEVMkGhsfBD4UKRM3EiI8H/2gAMAwEAAhEDEQA/AOzAAAAAAAAAAAAAAAAAAAAAABT1O
IY2zOhoqZ9Y9i5Oc1UaxF9Wku1fozB6LgFD19cfKGfik/SOvrj5Qz8Un6TmMM5o5XwKHr64
+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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHOaxqucqNaiZqqrqRAPo
MrcMdU0Eqx0VOtTlqWRztFv2atf9CF2/qPL494vA80+KsxOGL0R4W7MY4NuDEdv6jy+PeLw
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
kke3bSU3pN+hc9Sf0M1XXauuUrZaqoc9zEVG5IjckXbsIZyb8RVNUR5/v0gizM0xTM+X79Z
WF8uUN1uTqqGn5hqtRMtWa+1cu8rwCFVU1TjL0U0xTGEAAMugAAAAAAAAAAAAAdatPyPRfV
4/7UOSnWrT8j0X1eP+1D6PgPmqeDx3ywlgA+o+WAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjO
UX/u9D/rf+SGzMZyi/wDd6H/W/wDJD0eG/wCWEb//ABywgAPsvmgAAAAAAAAAAAAC9wvfaa
yVEzqmmWRJUaiSMyV0eWezP15/0LSttiYkXnLfiBap21KapXRVPoROBjj6iq1UVFVFTYqEa
rWNWamcJUi55ZZ9GzwizpNmu9n0kbO5HZIq+tuj/RU/qZmWy3Onimlnopoo4Pjve3JE15al
79a9xHpqypo6lKmmmfHK3Y9q6/8AqWFdie73GkdS1NUjonZaTUjamllr7kORRXTXM0+kuzV
TNMRPrC7wzI6LBd4exytcmnkqbU9BDJ0rmMqonSfER7Vd9Ges96e61tJRTUUE+hBPnzjNFF
0s0y2qmZDNUUTE1TP1cqqxiI4dHxO6gSqhkq7LPXo6P0JYnu0U1rq1L9pFbdOnYrs756CWj
0WSI3ntrs2qif1T+pmaLFN4oKdsEFWvNtTJrXtR2j9GaESsu1fX1TKqpqXPmjy0HJk3RyXP
VlsPPT4eqIwnv9Z/Cs3onzhrqOhuDeUSaodFIkOb3LIqLoqxW5NTP6cvcZ7ENPNU4nr2QQy
SuSRVVGNVyomr1B+Lr6/m1WuVFjXNFRjUz1Za9WvaRYL5cqavlr4qnRqZkykfoNXNNXdll3
IUot3KZzTh6YM1V0TGHfFpsQ0lTLhGzxR00r5GNbpMaxVVvod6FFhdFjxRRtkRWubIqKjky
VFyXUfvtjf/ADBd0zgVLqmd1WtWsipOr+cV7dS6WeeerZrO0W64ommr64/dyqumaoqhdYuo
qpMQVlQtNLzKq1Uk0F0ctFO/YW9FC+8cni0dKmnUU71zYm1fS0vyUztTiW8VlI+lqK1ZIXp
k5qsbr+3LMi2+51trmWWiqHROVMly1o76UXUpzTrmiI+sGemKpn6S/UtprqeJs1TTSU8bpE
jR0rVbrX2L9BsLpS22wOpKOnsLa+WZMuckXPNdnqXX7jKXO/XK7xsjrZ0exi6TWoxGpn69S
HuzFd7jpEpW1zkYjdFF0U0kT/VlmK6LlWGP/wBKaqKccFxyiJlWUWpEXmnfmfcdSOShtEaO
XQWNyqncq5N4qZq4XWuuro3Vs/OrGmTV0UTJPsQV11rbk2FtZPzqQIqRpoomimr1J7EFFma
cmP0xdquRObu0PJ69iXWpaq+msHo/RpJn/sTcEUNwpbncHVcUjG5aLleiojn57U9ff7zF0l
XPQ1LKimldFKxfRchaPxdfXTJL05WuRuiiJG3LL6MvYcu2q6pqy/UouUxEY/RTy/4r/wDUp
+T6qq5VVdq6z4epBe4TpKlb/RVCU8qw6a/tNBdHYqbdh9xbSVPaCtqOjy8zpN/aaC6PxUTb
sItHiS72+lZS0tYscLM9FvNtXLNc12p61FZiW8V9K+lqqxZIZMtJvNtTPJc+5PWh58tzUze
WHormoyZV7i1zkw9Y0RVRObRft0Gn3HjpGXq3vh/xGszZ9OlqMxV3WtrqeCnqZ+cip0yibo
omimSJ3J7EP1XXevuU8c9XULJJFqY7RRuWvPuQ5TZqiae2P3aquROPfBrmVdBiKujpLvY54
axyaPONRUyy9exUT6czI3mhbbbvU0bHq9sT8muXbllnr95PTGd+SPQ6anq0uabn+RSyyyTS
uller3vVXOc5c1VTtq3VRPn6cOXK6ao7tnjWkqaqltT6anlma2J2axsV2WaNy2ETCdpoqig
rq+sp1qnU2ejBr15Jns71XYVVLie80cDYIK57Y2Jk1rmtdknq1opHt94r7XO+akqFjdJ8dM
kVHfSi6jMWrkW8kS7NdE15m3tVTFWYcuk0Vpjt8axPaiM/8z0V9ibCro1VvJpWKi5ftcv/A
LmlNNiq9TpM19aqtmboPboNyy1pkmrVt7iGy61rLa+2tnypXrpOj0U1rmi7cs+5DkWKvvEu
zdj7S0lzXPk4t2fzqf8AvPe7wT12BbYtCx0rI0bzrY0zXNGqirkntzMpJda2a3R26SfOliX
SZHopqXX35Z96nrbb9crS1zKOpVjHLmrFRHNz+hdh3RqiMY9ccXNSn68YPa008tDe7bJWwv
hjdO1W84mXemvX7cjW3+WhpryktRYamqmTRcyeN7sly2ZZepTEXG61t2mbLWzc65qZN9FER
E+hCbT4uvlNAkLK1XNamSabGuVPtVBXarqmKvr/ANyU100xMLG7U9XijELWR0q0MjKZHPSo
dlk1HLrX7yE+lutDhuJYp71Pc35ZcxEiOjT7Vz/ov2GOq6+rrqh9RUzukkemTnbM09Wojmt
HGmKZnyc1cJmY9UivqWVlfNUxwpCyV6uSNuxvsI4BeIwjBGfMAB0AAAAAAAAAAAOwWT5Bt/
1WP+1Dj52CyfINv+qx/wBqHg8b8sPV4X1lOAB817gyWN6WWtqLZTQIiySOkRqKuWv0TWlBf
f3gsf8ANk/JpDxEZrcxPb8r2JwuRMd/wy3Yy9fMR71o7GXr5iPetOkAjsrXdbe3Ozm/Yy9f
MR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9aOxl
6+Yj3rTpAGytdze3Ozm/Yy9fMR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI9606
QBsrXc3tzs5v2MvXzEe9aOxl6+Yj3rTpAGytdze3Ozm/Yy9fMR71o7GXr5iPetOkAbK13N7
c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9aOxl6+Yj3rTpAGytdze3Ozm/Yy9
fMR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9aOx
l6+Yj3rTpAGytdze3Ozm/Yy9fMR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI960
6QBsrXc3tzs5v2MvXzEe9aOxl6+Yj3rTpAGytdze3Ozm/Yy9fMR71o7GXr5iPetOkAbK13N
7c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9aOxl6+Yj3rTpAGytdze3Ozm/Yy
9fMR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9aO
xl6+Yj3rTpAGytdze3Ozm/Yy9fMR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI96
06QBsrXc3tzs5v2MvXzEe9aOxl6+Yj3rTpAGytdze3Ozm/Yy9fMR71o7GXr5iPetOkAbK13
N7c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9aOxl6+Yj3rTpAGytdze3Ozm/Y
y9fMR71o7GXr5iPetOkAbK13N7c7Ob9jL18xHvWjsZevmI9606QBsrXc3tzs5v2MvXzEe9a
Oxl6+Yj3rTpAGytdze3OzmVVha7UdNJUzQsSONNJypIi6joVp+R6L6vH/AGoeGIv3frf5Sn
vavkii+rx/2oatWabVyYp4Yu3artuJq5SwAet5QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjj
ullrVttNAiLJLK9rUVcteSGuM/iH5asX1lfyQtZnCuJ/wC/wndjGjBkexF98PHvWjsRffDx
71p04Ft5c7JbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzs
bahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx
71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9
adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbah
zHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o
7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adO
A3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHs
RffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX
3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3l
zsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRff
Dx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8
e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsb
ahzHsRffDx71o7EX3w8e9adOA3lzsbahzHsRffDx71o7EX3w8e9adOA3lzsbahyuqwjeKOl
kqZoGJHE1XOVJEXJDo1k+Qrf9Vj/tQ88Rfu7X/wAh35HpZfkK3/Vo/wC1DN27VcoiauWqLc
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
t2mVFRU9HZ/pQgg83ifGzfoinLh5rWPC6VWbHFfWe8aWjS1Ttexj17/YpemEL+zXZXq2kqF
VXbGP9fsU9fgfG44W7ntLz+K8L/nQvDOYohbUXOywvVyNfUORVY5WrsTYqbDRmfxD8tWL6y
v5Ifes/P/v8Pk3PlS+ztJ4iu/FycR2dpPEV34uTiWoM6lfLWSnhVdnaTxFd+Lk4js7SeIrv
xcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnE
tQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNS
vkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU
8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs
7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeI
rvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxc
nEdnaTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdn
aTxFd+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxF
d+Lk4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk
4lqBqV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqB
qV8mSnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8m
SnhVdnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhV
dnaTxFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhVdnaT
xFd+Lk4js7SeIrvxcnEtQNSvkyU8Krs7SeIrvxcnEdnaTxFd+Lk4lqBqV8mSnhm75Y6aCyV
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
zPMDR4UuVTdsAUFfVv06iaizkf3uciKir9K5ZmI5PMDW7FGCKGvxE+pr8+cbSxOqHsZA1JH
IqojVTNyu0lzXPuTuN1hWz1dowTRWirRiVMFMsb0a7Nuevv8AtPPAFkrMOYKt9puCMSpp+c
00Y7ST0pHOTX9CoBnsUUXTMRYYwKlTUNtboHyVX7VUfOyNuTWucmtdmv6c+4gXDC9DhnlPw
gy185DRTvqVbSrK57I3pGmk5ukqqmkitz/0mnxhh+6Vd0tWIbDzLrnanPTmZ3aLJ43pk5uf
cvq+lSqWyYuveN7FiC60dJQ0tvWVq0kdRzjo0c3LSV2WSqq5ak2I0C+x1hurxVhx1soqxtJ
K6Vj+ddnlkndqLOw2+W02Cgt00qTS0tOyJ8iZ+mrWoirr+grMd26+3TDbqbDlU6lr1lY5JG
zLEuim1NJCzsNPW0uH7fT3KVZa2KmYyoer9JXPRqaS59+vvAsCsxFd3WGwVl1bSvq1pY9NI
WLkr9fryXL3FmAOOWrEeJOUqVYY8U27D1O5cuiUrl6U5PtyVfpRU+gn48w5FhHkhrrdRVNT
UNmqo5J5Z3Irnqrm5rqTZm1DW4g5O8MYk0pK22siqHf/AMmm/ZyZ+tVTUv2op50uBI2YMrc
L110qrhT1Lnc3NPrfCmpWomvXoubn3J7APbk7ihh5PrI2BERq0jXLl/Eut39VUqeWSR8PJ3
Uuie5jkniyVq5L8Yzdtw5yrYZoXWK0VVDLQo5eZqHObnEirnq0tabc8sly7jYY8w3dMRYD6
npXRyVqrErnSPyRytVNJcwMphvkrgv2H7Xe7pfLk64SU8UkDmSJoQsyTQaiKmepMs9aFLyi
YipblyjyWa/VtbBYaBqI6Gk+NK9WI7NU2bXZZrsRNW07DhqgnteGLXb6lGpPS0kUUmiuaaT
Woi5L9KGNxTgzENPjNMYYRmplrJI0ZUU1QuSSZIjdXdkqImrNNaZ5gZHk7v8AS27lJis+Hq
yumsVexyJDV7Y3oxXZomza3LP1Lr2DCdgm5TMRXy+XK7VtNLSTIlGtO/JYlVXaOWexGoiak
yz9Zv8ADjuUSrvcVRiOO20VujY7Sp6Zc3SOVMkXPN2z6UM1SYKxxhPElzTCstCttuj8+cqF
/wABM1VF0duk3SVNWaL3p6g8+QhJWyYkSd2lKk8SPd63ftMyqxHhmnwhyk4Vp7fXV8rKyth
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
S1eWlJJlrX/ACpkiavcSAZmmKsMfo7FUx6AANOBn8Q/LVi+sr+SGgM/iH5ZsX1lfyQra+b/
AH+GLnytAACTYAABz7EELsW8pMOFqyaVtoo6DplRBG9WdJerkajXKmvJM0X3nQTI4lw5du0
lJinDklP1hBAtNPTVKq1lREq55ZpsVF/29WsLGyYNseHK6Srs9M+kWWPm5ImyuWN2tFR2iq
rrTLanrUpeThznVuLtJyrlf6hEzXZrQubFU4qq62SS92+ht9K2PJkUM6yyOfmmtVyRETLP2
6ygp7Ni7DeIbw6x0tvraC7VK1SPqZljWnkd8bNETWmfqA9OTd0j48V6Ls3Jf6pG6WtE+LkY
q1QYSpKd8HKJbLhBfJJn8/X1STaEiq5dFWPYuSJll7DoGBMN3bDdtu8Nwnhmqau4S1Mcrdj
0cjURyp3Kqoq5FfdY+UC9WapslXZrK3pcawyViVTljRFTJXIxU0s+9PaBqKuxWe+2SmoauP
ptC1rHxLzzvSybk12k1Uz1L9uZz7k8wPhy60F2lrbdzr6e7zwxrz8jdFjdHJNTkz2950ix2
ttlsVDa2yrKlJAyHTVMtLRTLPLuMnbbJi7Ctbc4bPBa6+3V1a+rZz8z45I1flm1ckVFyyQB
yhPmud9w3hVJ5IaS6zyOq+bdoukjjai6Gady5r/Qrr1Y6HAOJsOXDDsb6KGvrmUNZTNkc5k
rX6kcqKq601/0NJjTDdfeH2y6WaaGK62idZadJ8+bkaqIjmLlrTPJP+LmlalkxNijEVrrsR
UtHbqG0y8/HTQTLK+ab/KqrlkiJln/AP3qDN4gsdFeL7yi1Nax8j7dSQTUv7RyJG9KdXaWS
Lln6Ke9fWSLBboLRifAtfTLL0m/W+d1wlfK5yzu5lsmbs1/iX8jR1GFblLWY4lasOjfqSOK
kzf/AJmwOYulq1a1T1iDCtxjuGB53LDoWGjlhq/T16ToGxpo6taZovqAxcFXSYqv14uOIMO
Xy+wwVj6ajio49KCnY3/52+muea/8y1nJulypKi7W59vulJZ43sktrbizKSNrkXTjzzXUio
mWvZ9J+mWPE2E7xcajDdNR3K23Kdal9JPMsL4ZV+MrXZKitX/ZPVr0OH34jlZPLiCGhp1cq
cxDSPc9WJrz0nLtXZsAwtFhyHE/Kbi6muUsz7bC6mdJSMlcxsz1jXR0lRUXJPS1etU9RvbB
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
AAAAAAAAAAAA//9k=
</binary><binary id="_20.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAF5BOUDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAQFBgMHAgH/xABUEAABAwICAwcPCwIEAwgDAQAAAQIDBAUGERIhVRMWMVSRk9EH
FBUXIjVBUVNhcZSjsdIyNnJzdIGSorLh4kKhIzPB8DQ3UiRFYnWCg7PCJUNl8f/EABoBAQA
DAQEBAAAAAAAAAAAAAAABAgMFBAb/xAAxEQEAAQMDAQcDBAIDAQEAAAAAAQIDURESFBMEIT
FhYoGxMkHwM0NxkUKhIiPBBdH/2gAMAwEAAhEDEQA/APZgAAAAAAAAAAAAAAAAAAAAAAp6r
EMMczoKOnkrZGLk5WKjWNXxK5fD6MwLgFBvguOxk9aToG+C47GT1pOgjWFd0ZX4KDfBcdjJ
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
</binary><binary id="_36.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGgA34DASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAQGAgUHAwEI/8QAVRAAAQMCAgMJCwgGCgIBAwUAAAECAwQFBhESEyEHFDFBUVNh
cpIVIjJCcXSBkaHB4RYzNFVjlLLRNlJUorHiIyRERmJzdoTC0iWCODdD8HWTs7Tx/8QAGQE
BAAMBAQAAAAAAAAAAAAAAAAECAwQF/8QAJhEBAAIBBAICAwEAAwAAAAAAAAECMQMRElETMg
QhFDNSsSJBcf/aAAwDAQACEQMRAD8A7MAAAAAAAAAAAAAAAAAAAAAAAAAAAIy1T9NzWwoqN
XLPTy9x831LzCdv4ASgRd9S8wnb+A31LzCdv4ASgRd9S8wnb+A31LzCdv4ASgRd9S8wnb+A
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
cmmw19FrPPJPcbk5py764gABCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAERaeZHvVqsyc5V2qo1FR9n61JYAiaio+z9ajUVH2frUlgCJqKj7P1qNRUfZ+tSWAImoqP
s/Wo1FR9n61JYAiaio+z9anxtNO3PbHtXPhUmACJqKj7P1qNRUfZ+tSWAImoqPs/Wo1FR9n
61JYAiaio+z9ajUVH2frUlgCJqKj7P1qNRUfZ+tSWAIbaadue2PaufCp91FR9n61JYAiaio
+z9ajUVH2frUlgCJqKj7P1qNRUfZ+tSWAImoqPs/Wo1FR9n61JYAiaio+z9amnSzXeKeodC
6iVksrpE03PzTPyIWMExMxhExE5V7ube+Wg7T/AMh3NvfLQdp/5FhBPOyvjr0r3c298tB2n
/kO5t75aDtP/IsIHOx469K93NvfLQdp/wCQ7m3vloO0/wDIsIHOx469K93NvfLQdp/5Dube
+Wg7T/yLCBzseOvTT2u2VtFBK2Z0CvkldIugq5JnlyoTdRUfZ+tSWCq6JqKj7P1qNRUfZ+t
SWAImoqPs/Wo1FR9n61JYAiaio+z9ajUVH2frUlgCJqKj7P1qfG007c9se1c+FSYAImoqPs
/Wo1FR9n61JYAiaio+z9ajUVH2frUlgCJqKj7P1qNRUfZ+tSWAImoqPs/Wo1FR9n61JYAht
pp257Y9q58Kn3UVH2frUlgCJqKj7P1qNRUfZ+tSWAImoqPs/Wo1FR9n61JYAiaio+z9ajUV
H2frUlgCJqKj7P1qadLNd4p6h0LqJWSyukTTc/NM/IhYwTEzGETETlXu5t75aDtP/Idzb3y
0Haf+RYQTzsr469K93NvfLQdp/wCQ7m3vloO0/wDIsJqrzfqey1NrgnyzuNYlKzbwKrXKi+
tET0jnY8dekPube+Wg7T/yHc298tB2n/kWEDnY8dele7m3vloO0/8AIdzb3y0Haf8AkWEDn
Y8demustDUUFLKypdGskszpF1aqqJnly+Q2IBVcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4du34glixZaaSmkyfbWJU5pxSOcip6kYi+k
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
</binary><binary id="_16.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAERA8QDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAQFBgcDAgH/xABMEAABAwIBCAYGBwYGAgEDBQAAAQIDBAURBhITFSFVk9EXMVFT
kZIUQVJxcuIHMjQ2YXOBIjOhsbLBIzVCRIPCFnR1JMPhN0OCs/H/xAAZAQEBAQEBAQAAAAA
AAAAAAAAAAgMBBAX/xAAtEQEAAQIFAwIHAQEBAQEAAAAAAQJRAxESExQhYZExMgQzQXGBsc
FCIvCh4f/aAAwDAQACEQMRAD8A7MAfiqiIqquCJ1qoH6DL3HLy3UkqxU0T6tWrgrmrms/Rf
X4EHpGbupeP8pvHw+LMZxDKcbDj6tsDE9Izd1Lx/lHSM3dS8f5TvGxbOb+HdtgYnpGbupeP
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
8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcjsQ
HNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxY
u47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7p
u2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5
DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3Tdt
XwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOx
Ac2qxxYu47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHF
i7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6nu
m7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7
kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN2
1fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7
EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcjsQHNqsc
WLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe
6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4D
uQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903
bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qxxYu47qe6btq+A7kNT3TdtXwHcj
sQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup7pu2r4DuQ1PdN21fAdyOxAc2qx
xYu47qe6btq+A7kNT3TdtXwHcjsQHNqscWLuO6num7avgO5DU903bV8B3I7EBzarHFi7jup
7pu2r4DuQ1PdN21fAdyOxAc2qxxYu41Nbq6njWWeiqImJ1ufE5qJ+qodlKHLX7r1PxM/qQv
jLHxZxaaap7/xphUaKpj7f0AB5W4Z++/eOw/my/yQ0Bn77947D+bL/JDXC934n9IxPb4/bQ
AAyWA+XOaxqucuCIRH3Db+wzFO1VIqrpp9VU0zV6JoIGsH92niNYP7tPEneoVtVJ4IGsH92
niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP
7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb
1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ
4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH92niNYP7tPEb1BtVJ4IGsH
92niNYP7tPEb1BtVJ4IGsHd2niSIKpk2xP2XdinacSmqcolycOqOsvcAGiAAAAD5c5rGq5y
4InWoH0CvkuiIuEceKdqqfOtH923xL0VM92lZArdaP7tviNaP7tviNFRu0rIFbrR/dt8RrR
/dt8RoqN2lZArdaP7tviNaP7tviNFRu0rIFbrR/dt8RrR/dt8RoqN2lZArdaP7tviNaP7tv
iNFRu0rIFbrR/dt8RrR/dt8RoqN2lZArdaP7tviNaP7tviNFRu0rIFbrR/dt8RrR/dt8Roq
N2lZArdaP7tviNaP7tviNFRu0rIFbrR/dt8RrR/dt8RoqN2lZArdaP7tviNaP7tviNFRu0r
IFbrR/dt8RrR/dt8RoqN2lZArdaP7tviNaP7tviNFRu0rIFbrR/dt8RrR/dt8RoqN2lZArd
aP7tviNaP7pviNFRu0rIEanrY6hc3DNf2L6ySTMTHquJiesAAOOgAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoctfuvU/Ez+pC+KHLX7r1PxM/qQvjSflx95/iI98
/j+gAM1hn77947D+bL/ACQ0Bn77947D+bL/ACQ1wvd+J/SMT2+P20AAMloNe9c9sfqRMSGS
a/7QnwoRjwYs/wDcvbh+2AAGawAAAAB5T1MFLHpKmeOFntSPRqeKinqqerj0lNPHMz2o3o5
PFDmNsoekTK641NymkWgolzYomOw2Kqo1Pw2NVV/Et48hq6wZTUtwybmzaNVRKmGaVdrcdq
Js27OrHqU1miI6TPVnFUz1iOjeAyl/y2dbrwlmtVskudfhi9jHYIzZjh1LiuG31YH1k5lpr
e5y2i4W+S23GNMUieuKPTrXDFEwXDb7iNFWWatUZ5NSDDp9IlTU1lbQ2/J+eqqqaVWI2OTF
HNRVRXL+zs6k2fiS7Pl1rey3KrZbHsrLazPlpVkwzk29S4fguzA7OHVBrpa0GcoMsqetyPn
yhWn0aQI/Pg0mP7SdTc7D14t9XrIr8voKbJanvVXQPikq3ubTUrZM50mC4Y44Jgn6dnac0V
GqGtBiYfpBqqStp4b/AGCe2Q1K4RzucqonvRUT9ezsPe6ZeLbspKixw2earnja3RaKTbI5W
o7DDDYmCrt29R3bqNcNeecVTBO97Ip45HM2ORj0VW+/sMxk5ls+73maz3C2SW6tjarkY52d
jh6upMFwXH8SBkfX2mG75STRUj6P0eRXVMsk+ejsHPxVEzUw6lX1jRMZ5mqPo3QMGv0jV88
UtdQZM1M9thVc6oV+C4J1rsaqJh+pPuf0g0dHk3SXukpXVUdTLoljWTMdG5EVVRdi9g26jX
S1oMJVfSTPQ1MMtXk9UwW2d2EVS92DnN9pG4YdW3DEuMp8sYMn1pqeGlfXVtXgsMEa4Youx
FxwXrXq2bRoqNcNGDJWPLh9de0st1tMtsrHtxjR7sUfsx9aJhsRe3qI9Tl/VVFwqKawWKa6
R0q4SzNcqIq/giIvYuHb2DbqzyNcNqCkyXyopcp6KSWGJ8E8Ds2aB64qxfVt9abF8FLsmYm
Jyl2Jz6wAA46AAAfrXK1yORcFQ/ABcMdnMR3amJ9HxD+5Z8KH2fSj0eCfUAB1wK66SLiyNO
rDOUsSruf2hvwf3Uuj3MsX2oYAN3kAAAAAAAAeUtTTwORs08caqmKI96IIqmnnXCKeORU9T
HopzzLyjiuGXdlo587RTsYx+auC4K9T5yqyHosn7O682eoqYKikc122THFFVE2Lhii7UJ1S
1iiOnX1dKBkFy7hoslLbcKiF1TW1rM1kEexXvaua5fwTH+Z8UmXdRFc6eivtkmtnpS4RSud
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
N0gEf0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0
gEf0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gE
f0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gEf0
KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gEf0KHsXxHoUPYviM6rGVN0gEf0KH
sXxHoUPYviM6rGVN3uR5n6ddBGuOP1lTqRD99Dg9lfE9mMbGmDGoifgJiqrpLsTTHWH6iIi
IidSH6AWgAAAjVTXMeyoYmKx/WTtQkg7E5OTGcPOKaOZucxyL+HrQ9Dwko4JHZyx4L2ouB8
avp/ZXzHejn/SUCLq+n9lfMNX0/sr5jnQzqslAi6vp/ZXzDV9P7K+YdDOqyUCLq+n9lfMNX
0/sr5h0M6rJQIur6f2V8w1fT+yvmHQzqslAi6vp/ZXzDV9P7K+YdDOqyUCLq+n9lfMNX0/s
r5h0M6rJQIur6f2V8w1fT+yvmHQzqslAi6vp/ZXzDV9P7K+YdDOqyUCLq+n9lfMNX0/sr5h
0M6rJQIur6f2V8w1fT+yvmHQzqslAi6vp/ZXzDV9P7K+YdDOqyUCLq+n9lfMNX0/sr5h0M6
rJQIur6f2V8w1fT+yvmHQzqslAi6vp/ZXzDV9P7K+YdDOqyUfhG1fT+yvmGr6f2V8yjoZ1W
flRLp/8A6eFc5XfWVOpqEprUa1Gp1ImCHzHEyJuaxqNT8D7EzYiJ9ZAAcUAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChy1+69T8TP6kL4octfuvU/Ez+pC+NJ+XH
3n+Ij3z+P6AAzWGfvv3jsP5sv8kNAZ/KjGlmtt1zVWOjqP8XD1Ndgir/D+Jrhe/wA/pGJ7W
gB8seyWNskbkcxyYtci4oqH0ZLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUOWv3XqfiZ/UhfGeyukSopae0RrnVFbM1Ea
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
Z
</binary><binary id="_46.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAMGAwYDASIAAhEBAxEB/8QAGwAAAwEBAQEBAAAAA
AAAAAAAAAIDBAEHBQb/xABQEAABAwAECQcICAYCAgIBAwUBAAIDBAURExIhMTNScXKRkgYy
QVFTYbEHFBUiI1SBwTQ1QkRzgqHRFzZVZHTCJPAlYkPhFiZ1gzdWsrPx/8QAGgEBAQEBAQE
BAAAAAAAAAAAAAAMCAQQFBv/EADMRAQACAAQDBgQFBQEBAAAAAAABAgMREiExQbETIjJRYX
EEweHwIzNCgaEFcpHR8WIU/9oADAMBAAIRAxEAPwD2ZCErjgtLuoWoGQuA2tB611AIXCbBa
uMdhsDrLLRagZCEIBCVjsNgdZZamQCEL87yY5Wf/kdYVvRPMvNvRlIucK9w7zG4W2WCzm9+
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
</binary><binary id="_26.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGLBOUDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAQFBgcDAQL/xABVEAABAwICBQgFCAcFBQcDBQAAAQIDBAUGERIhMZPRBxMUFRZB
VFUXIlFhcTI1c4GRlLHSIzZSdJKhsjNCcsHwNDdiguFDRYOis8LxJCV1RFNkhKP/xAAaAQE
AAwEBAQAAAAAAAAAAAAAAAQIDBAUG/8QAMhEBAAECBQIEBAYDAQEBAAAAAAECAxESExRRUm
EEITGBMkGhsRUzQ3GR4SJC8CPBBf/aAAwDAQACEQMRAD8A7MAAAAAAAAAAAAAAAAAAAAAAF
PU4hibM6GippKx7Fyc5qo1iL7NJdq/DMGOC4BQ9f3Dyhv3pPyjr+4eUN+9J+UjGFc0cr4FD
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
NY1GtRMkREyREPjI2RM0I2NY1O5qZIfoAfhIIki5pImJH+wjUy+w+rGx0fNuY1WZZaKpqy+
B+gB8REaiIiZImxEPoAAAAAAAAAAh3f5qn/AMKfihMIV3+ap/8ACn4oI9Ux6teADZ1AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAArL9Ry1du0oG6U1PI2aNv7SptT60VSrp6iOqhSWJ2aLtTvRfYvvNOVtZ
YaKrmWdOcp5nfKkgfoq74psX7CsxipVTmV4JHZtvmld/Ez8o7Nt80rv4mflK5ZZ6co4JHZt
vmld/Ez8o7Nt80rv4mflGWTTlHBI7Nt80rv4mflHZtvmld/Ez8oyyaco4JHZtvmld/Ez8o7
Nt80rv4mflGWTTlHBI7Nt80rv4mflHZtvmld/Ez8oyyaco4JHZtvmld/Ez8o7Nt80rv4mfl
GWTTlHBI7Nt80rv4mflPnZtPNK7+Jn5Rlk05eAKy40k1HWvgjuFUrWomtytz2fAjZVPj6j7
W8Dhr8ZZoqmmZ84dVPgL1URMLwH6pbBz9LFK651qOexHKiOZlr/AOU9uzbfNK7+Jn5TtiMY
xhzTamJwRwSOzbfNK7+Jn5R2bb5pXfxM/KTllGnKOCR2bb5pXfxM/KOzbfNK7+Jn5Rlk05R
wSOzbfNK7+Jn5R2bb5pXfxM/KMsmnKOCR2bb5pXfxM/KOzbfNK7+Jn5Rlk05RwSOzbfNK7+
Jn5R2bb5pXfxM/KMsmnKOCR2bb5pXfxM/KOzbfNK7+Jn5Rlk05RyNLGtxq47dF62bmvnVNj
GIuev3rlkWPZqNfl3Kuc32c41M/rRuZZUVBS2+HmqWFI2qua96uX2qu1SYpWpt4TjKQAC7U
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlL586y/Bv4IV5YXz51l+DfwQrz5Lx
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
ORPhmin4Zdq6O4uuDKhW1Ll9Z6Imv4psJm7bmqmqY9PVEW7kU1UxPq2uHamnqLlUsprM2iZ
C1WrL3rrTUur3Z/UV+GFVlNflbqVEXLLu1PKZ+LL26VJErdFUTLJGNy+zL3EOmu1dSMqGwT
6CVP9qmi1dLb7U1bV2Gm4oxp7Y/KPmz29WFXfDn5L+0LngG5+6V34MPW3MkqsAVEFEiumR6
6bWbV9ZFX/AMpmYbpWQUEtBFNo08q5vZooua6u/LPuQ+2+6VtrlWSjndErvlJkio74opSm9
TGETxgvVZqnHDnF5vo6qCFJZqeWOJXo3NzVRFX2a/rN3iJ9vVtLNUWqauiVn6N8TlRrUXu1
L36jGXG93C6taysn02MXNrUaiIi+3UelDiO626BIKeqXmk2Ne1HInwzIt3KKMaflPaPsm5b
rrwq+cd5+62vcs19fbaOG3y0rvWbFz65aSZJ9fcSKJ0GGcul358rm/wD6Sn9dPhr2fyM1XX
auuUzZaqoc9zEVG5IjckXbsIYm/EVTVEef/fKCLMzTFMz5f985WF7uMN0uTqmCnSBioiaOr
NfeuXeV4Bz1VTVOMuimmKYwgABVIAAAAAAAAAAAAAHW7X800f0DP6UOSHW7X800f0DP6UPR
8B8VTz/HfDCUAD1HmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYvlG/2eg/xP8AwQ2hi+Ub/Z6
D/E/8EOjw35sMb/5csKAD2XmgAAAAAAAAAAAAC9wvfaWyTzOqaZ0nOoiNlYiK6PLPZn7c/w
CRaVts7SKstvxB0t21KepXRc34Imr+Rjj6iq1Uc1VRU2KncY1Wsas1M4S0i55ZZ9GzwizpV
ju9oRyJO5HZIq+1uj+KfzMxLZrlBFNLPRTRRwZabntVqJry1Ku3WvceNLWVNFUpU00z4pU/
vNXX/wBSfX4nu9ypHUtTUo6J2Wk1I2ppZLn3IRFFdNczT6SmaqZpiJ9YXmG5HxYJu72OVrk
V+SptT1EMnSPYyshdJ/ZpI1X/AAz1ntT3WupaGahhn0KefPnGaKLpZpltVMyGWoomJqmfmi
qrGI7OjYndb21cMlZZaivRY8mSxPdoprXVqXb3/WR2XRK/FtpfNQzUapHIjee2uRWrl+C/a
ZiixVeaCnbBDVqsbUya17Udop7lUiVl2r6+rZV1NS580eWg9ERujkuaZZHPT4eqIwnv85+z
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
b252c37G3vw7N63iOxt78Ozet4nSANja7m9udnN+xt78Ozet4jsbe/Ds3reJ0gDY2u5vbnZ
zfsbe/Ds3reI7G3vw7N63idIA2Nrub252c37G3vw7N63iOxt78Ozet4nSANja7m9udnN+xt
78Ozet4jsbe/Ds3reJ0gDY2u5vbnZzfsbe/Ds3reI7G3vw7N63idIA2Nrub252c37G3vw7N
63iOxt78Ozet4nSANja7m9udnN+xt78Ozet4jsbe/Ds3reJ0gDY2u5vbnZzfsbe/Ds3reI7
G3vw7N63idIA2Nrub252c37G3vw7N63iOxt78Ozet4nSANja7m9udnN+xt78Ozet4jsbe/D
s3reJ0gDY2u5vbnZzfsbe/Ds3reI7G3vw7N63idIA2Nrub252c37G3vw7N63iOxt78Ozet4
nSANja7m9udnN+xt78Ozet4jsbe/Ds3reJ0gDY2u5vbnZzfsbe/Ds3reI7G3vw7N63idIA2
Nrub252c37G3vw7N63iOxt78Ozet4nSANja7m9udnMarC12o6aSpmgY2ONM3KkiLqOiWv5p
o/oGf0oRsR/q9W/RKSbX800f0DP6ULWrNNq5MU8KXbtV23E1cpQAOtygAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAZHHdLLWutlNA1HSSSPa1FXLNckNcUF/8AnuxfvDvwQ2sThXE/v9md2Mac
GP7EX3w0e9bxHYi++Gj3reJ08G28udmW2ocw7EX3w0e9bxHYi++Gj3reJ08DeXOxtqHMOxF
98NHvW8R2Ivvho963idPA3lzsbahzDsRffDR71vEdiL74aPet4nTwN5c7G2ocw7EX3w0e9b
xHYi++Gj3reJ08DeXOxtqHMOxF98NHvW8R2Ivvho963idPA3lzsbahzDsRffDR71vEdiL74
aPet4nTwN5c7G2ocw7EX3w0e9bxHYi++Gj3reJ08DeXOxtqHMOxF98NHvW8R2Ivvho963id
PA3lzsbahzDsRffDR71vEdiL74aPet4nTwN5c7G2ocw7EX3w0e9bxHYi++Gj3reJ08DeXOx
tqHMOxF98NHvW8R2Ivvho963idPA3lzsbahzDsRffDR71vEdiL74aPet4nTwN5c7G2ocw7E
X3w0e9bxHYi++Gj3reJ08DeXOxtqHMOxF98NHvW8R2Ivvho963idPA3lzsbahzDsRffDR71
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
9mh8ria0AAAABmarG9JS47pcJOpJnVFTHzjZkVNBE0XO19/90DTAAAAAAB8A+gHxVREVVXJ
E2qB9AAAAAAAAAAFZiP8AV6t+iUzdLb6x1JC5tNKqLG1UVGrr1GkxH+r1b9EpJtfzTR/QM/
pQ4PEeGp8RciJnDCHZZvzat4xHzZfq6t8LL/Co6urfCy/wqbIGH4Xb6pab+vhjerq3wsv8K
jq6t8LL/CpsgPwu31Sb+vhjerq3wsv8Kjq6t8LL/CpsgPwu31Sb+vhjerq3wsv8Kjq6t8LL
/CpsgPwu31Sb+vhjerq3wsv8Kjq6t8LL/CpsgPwu31Sb+vhjerq3wsv8Kjq6t8LL/CpsgPw
u31Sb+vhjerq3wsv8Kjq6t8LL/CpsgPwu31Sb+vhjerq3wsv8Kjq6t8LL/CpsgPwu31Sb+v
hjerq3wsv8Kjq6t8LL/CpsgPwu31Sb+vhjerq3wsv8Kjq6t8LL/CpsgPwu31Sb+vhjerq3w
sv8KnhJG+J6skarHJtRU1obkyl3Y6S8ysY1XOcrURE7/VQ5PF+CpsURVTOOM4Ojw/iZu1TE
wgsY6R6MY1XOcuSIneae1WptEznJMnTuTWv7PuQWq1Nomc5Jk6dya1/Z9yFkdvgvBaf/AKX
PX7ObxPic/wDhR6BQX/57sX7w78EL8oL/APPdi/eHfgh7Nr4v5+zzbnw/x91+ADJcAAAAAA
fEcjkzaqKntQ+gAD5pNRyNVUzXYmYH0ApsM4jixLSVdRFTvgSlrJKVUe5F0lZlr/mBcgHxH
I5M2qip7gPoPiqibVyGaKqpnrTaB9B8VyNTNyoie8+gAfFXJM1CKipmi5ooH0AAAAAB8VzW
5aSoma5Jmu1TCYx5S0sF6jsFntcl2uz0RXRMVcmZpmiZIiqq5a8u5O8DeAymCsVXfEMtfS3
qwyWipo0jdovV2UjX6WtEVE2aHtU1YAA+aTdLRzTNO7MD6CPX1baC3VNa5ivbTwvlVqLrVG
oq5fyKfBeLIcZ2R10gpZKZjZnRaD3I5c0RFz1fEDQA+KuSZqEVFTNFzRe9APoPmaJlmu3YE
VFzyVFy2gfQfFciKiKqIq7PefQAPiqjUzVURPap9AAEa5JVOtlUlEuVUsL+ZXV8vRXR26tu
W0CSDN4EixPDYHNxY9X3Dn3Ki6TF/R5Jl8jVtzNIAB8RUVM0VFT2oFc1qoiuRM9ma7QPoBm
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
9ycxWWhulVV2qVPUqWyZTZJLpoiqqalRUy2bEOX4ZwDarryk32wz1Nc2moGvWN8cqJI7J7U
9Zcte32HV+TzCs+D8Kx2yqnZNUOldNKseei1Vy1Jnt1In8zMV+CcYWjHVwxJhWqt723BFR8
dVnm3PJVTLL2pmi5gWeOYsP4ewBTWm53CvgomOZFH0dyLUTI3Xo56k2JrVdRyK71NvsfV94
wvab7aJWSoqVFYv6OZMs8kXv2bNipmdWx3gi94zwjbGyy0zLzR+vKxFVIpFVMnIi92xMijx
XhDlFxvbaRlzZaqbor/AFaeKRU01VMle5dae5ET2qB85WknrMZYSgp6mSlfVPa1skbslYrp
GIjvimZHtdobgjlwoLTbKqpfSV1OrpmzP0lfmx661REz9ZqKarGGDLte8VYYuVHzHMWqVjq
jTfkuSPa5cky16mqfu6YPulXytWzE8XM9ApYNCTN+T89F6aky/wCJAM1jBtXjflYiwbNXTU
trpYkfKyJctNdBHqvsVdaImezWpssOYHtuBZa2tttXWPp5IPXp5no5EVuvSTJE15aipxpga
9zYqp8XYUqoYrlE1GyxTLkkmSaOaLs1tXJUXLZtLjCkeNZ6qpmxatDHTui0Iqam1689bl29
2rb9QHFaK8WDEtXX3PG9Td5quZ+VO2jRFZC33Z7MtiJ7u/M23JnzmNsHXvC15qaqWkp5IuZ
mVdGVGK5XNRFXPYsaL37ciVQYQx3gSsrIMJPt9fa6qXnGRVa5OjXZr1pryyTNF15bENHR2L
F16wzcaHEt3jpKqskZzT7fqWCNFRXNTLLWuSptXUvfsAyN4rL9yZf7LjSiulOzZbriqunRP
YmWa/zanuOiYNxFLinDdPdpqF1E+VXJzSuVdi5ZoqompSDYOTTC2HlbLDb0qqlNfSatedfn
7Uz1IvwRDVgAAAAAFZiP9Xa/6Fx7Wb5koP3aP+lDxxH+rtf9C49rN8yUH7tH/Shr+n7qf7+
yaADJcKG+frDY/pJPwaXxQ3z9YbH9JJ+DTK98HvH3hrZ+P2n7SvgAasgAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZiP8AV
6t+iUk2v5po/oGf0oRsR/q9W/RKSbX800f0DP6UMv1fZr+l7pR41VVDRUz6iokSONiZq5T2
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
AB//Z
</binary><binary id="_28.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAG1BOUDASIAAhEBAxEB/8QAGwABAAMBAQEBAAAAA
AAAAAAAAAQFBgMHAgH/xABUEAABAwICBAcMCAMGBAUDBQAAAQIDBAUGERIWIVQTFTFBU5KT
BxQiNVFVYZGUsdHhFzI2cXN0gbKh0uIjM0JScsE3wvDxJDRidbM4Q4Jjg6Kjw//EABoBAQA
DAQEBAAAAAAAAAAAAAAABAgMEBQb/xAAzEQEAAQIEBAUDBAIDAQEBAAAAAQIDERIUUQRSYa
ETITEygUGRsTNCQ3EV0SLh8AXB8f/aAAwDAQACEQMRAD8A9mAAAAAAAAAAAAAAAAAAAAAAC
nqcQxtmdDQ0z6x7Fyc5rkbG1fJpLyr92YMcFwCh4+uPmiP2v+kcfXHzRH7X/SRjCuaN18Ch
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
sdQ5tRIio9+SZr/ANZEV8jpJHSOdm9y6Sr6TGu7ExGG8y2otTEzjtENNjShq5Ly6ojppnxJ
CirI1iq1Ms881MuWTsQ3d9O6nfXSOjc1WuRyIuaKmS7csytKXqqa6s1P1WtU1U05avoGnwX
R1UV5SeSmmZE6F2jI5io1c8stpmCzhxHd6eFkMVa5scbUa1ui3YicnMTZqporiqr6F2mqqm
aafq/LpR1UN0nmlppo43VLtF7mKjVzcuWSmlxIq632dM1y0mfvMtWXu5XCJsVVVOlY1yORF
aiZL5diek+ai7V9VVRVU9Q580OSxvVE8HJc05vKXi7RTExGPnMKTbrqmJn6YrzEEtTBjRkt
IzhJ2IxWMyz0tnIWMCW/EtU+Ktss9LVaObpURUyVPKuzb96GQludbNXNrpKhy1DcspMkRUy
JsmKr3JEsbq5yIqZKrWNRfWiZl6b9GaZn0mfTCFKrNeWIj1iPXzRIYkpr0yJXIqRVCN0vLk
7lL/G1DVzXdk8VLNJEkCZvYxVRMlXPNUMpz5llrFd+AWBa6RY1boqjslzT71TMyorpyTTV9
WtVFWaKo+i6slBQwYZlu0tCldOjlyjdtREzROT+JOqpFnwNVSrQR0KPVFSJjcky0m7cjJW+
83C1o5KOpdG1y5q3JHIq+XJT6qL7dKqCWCesfJHKub2qibeT0bORDWm/RFGGH0w+n3ZVWa5
rxx+uP/S9uiqnc/t2S8sqZ/8A8xi7xLZl/wD0v+VpnJblWTUMdFJOrqeNc2R5Jki7fioqrl
WVsMUNTOsjIUyjRUTwU5P9itV6maZjeIj7LU2aoqiesz92qxhS1NfS2+ooonzU+guSRorss
8slyT0FZhmGSgxPSx1sboXuYui1+xUzRcvuIFDf7pboeBpatzI+ZqtRyJ92abCLVV1TW1K1
NRM582zw+RUy5MsuQVXaJri5Hr5f0U2q4om3Pp5tnV1ENFfHyNw5US1KSKrZ2Ocun6U5ioq
LdPf75XVLljt7YVZw3DP+ouWXN/pUhsxXe2RJGlc5URMs1Y1V9apmVk08tRK+WaRz3vXScq
ryqTcvUVf1jjh5R+EW7NdP9+n1n8tfHf7fY6d1O2uqbs/LLJ2XBp9yrt95jpXpJM+RGo1HO
VdFOb0HyDG5dqrwifSG1u1FGMx6yAAyaAAAAAAAAAAAHrVp8T0X5eP9qHkp61afE9F+Xj/a
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
6x/DgrvNi0Dq6Wp0nKxsuhwbEVE0lXJedyIBrgUN7xO2zYisdoWkWZbxJKxJeE0eC0EavJl
tz0vRyF8AAAAAAAZisvlbU49o8PW6VI4qaBau4v0UcqtXYyNM+RVXavPkaV6K5iojlaqpkj
k5U9IH0DNYLvtZc6evt11e110tNU6nqHNajUkTlZIiJyI5PcppQAAAAAAAAAKrEmIaPDFll
udaj3sYqNZHGmb5HrsRqJ5VKKDFOL0khlrMCyxUkrmoroq9kkkSKvK5iJn9/kA2QIl1uEdp
tFZcpWOfHRwPne1nK5GtVyonp2HzZ7nFebPR3OFj446uFszGvy0kRyZ5LkBNAAAFbiGrulF
ZZ6iy0Da+uZo8FTuejUfm5EXbmnIma/oWLVVWorkyXLagH6AAAAAAAAAAAAAAAAAAAAArcR
fZ+t/CU72nxPRfl4/2ocMRfZ+t/CU72nxPRfl4/wBqGX8vw1/i+UsAGrIAAES5rO23yrT6X
CZbNHlyz25foUtD3g9Y1dVTxVGaZq5diqX9Vw/e7u9tHhdmjpcnLt/gVFVSXC4qxktLDDku
ayIqKvvPN4uirxIqpjHy9MJw+/0l28PVGSYmcPnz/wC0y70bZ6Z8yyyNWKNVRrV2L95Es1v
bJTxVSzSoqOVdBHeDsUt54eGpZIc8tNitz/QraCC50WhTqyF0KO2uz25c+Ra7apjiIrmnGM
O6KLk+DNMT/wDx8YgfI19IkT1aqudyL9xJp7TwFQyoWqlfIn1tJdjth+Xainq5aZ0LUVI3K
rs1y8nwLIvTZiq/XVXG2H2VquTFqmmmd8VBTwvvVVUSTTSMjjXJjWryf9ZHa11E2hV0kr1e
sGaNcvLzp/sO87hb6qV9Cxkscq56Lly0f4od7fbpaaCd8zkdPPnnlzcvxOa1briuPKcfPGf
pOza5XTNM+cYeWEKmnpn1NpnqH1En9k5Va3PZnkmeZMfXTMw5HKj14Ry6Gnnt5V/2Q60dvq
IbPUUz2okkiqrUz8qIfrbc5bGlLO5sb2qrtJV2Iuewpbs3Kaf+MTEzTP3xWruUTPnPlm7IN
XQyUdsjqGVMmlJlwjc9m3bsL6jVVooFVc1WNvuM/XsrI7fHHUzxLGxURjWrmrv+yGgo0VKK
BF5Ujb7jbhMIu1REYeUM+Ixm3EzOPnLsAD03CAAAAfmaLnkvJygfoAAGfxD44sf5pfchoDP
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
</binary><binary id="_24.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGLBOUDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAUGAwQHAQII/8QAVRAAAQMCAgQJCAcGBAIHCAMAAAECAwQFBhESIZPRExQVFjFB
UVRVBxciYXGRlNIyNXN0gbGyNlJyoaLBIzNCkjQ3JENidbPC8CUmJ0RTguHxZYOj/8QAGgE
BAAMBAQEAAAAAAAAAAAAAAAECAwQFBv/EADIRAQABAgUCBAUEAwADAQAAAAABAgMREhMUUV
JhBCExgTJBcaGxFTNDkULh8CIj0QX/2gAMAwEAAhEDEQA/AOzAAAAAAAAAAAAAAAAAAAAAA
BD1OIYmTOhoqeSsexcnOYqNY1ezSXr9mYEwCB5fuHhDfik+Ucv3DwhvxSfKRjCuaOU8CB5f
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
uRNE4Uz9npW/G4Uf+Xqx2u1toWcJJk6dya1/d9SEiAerbt026YppjycFddVdWaoABooAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHjnI1qucqIiJmqr1Aegq1wx1SU8qx0cDqn
JclertFv4atZo+cCbw9m0Xcc0+KsxOGLojwt2YxwXcFI84E3h7Nou4ecCbw9m0XcRu7PKdp
e4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI8
4E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7No
u4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw
9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3
Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4X
cFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3
h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4e
cCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0
XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5N
pe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI
84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7N
ou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCb
w9m0XcN3Z5Npe4XcFI84E3h7Nou4ecCbw9m0XcN3Z5Npe4XcFI84E3h7Nou49TygS5+lbmK
nqlXcN3Z5Npe4XYERZsSUV5/w484p0TNYn9K+xeslzopqprjGmWFVNVM4VQAAsqAAAAAAAA
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
VWu3truMQVEKqiOdEqror/dM9Q1aM2XHzMlWGOCDBL2bDVbeo3zRujhp2Lk6WRckz9R83mw
y2dkUq1UFRFKqo18Ts9adOfvGpTmy4+aMlWGbDyRQLFTYMrJaaKapq6akdN/lxyuycpqc3K
uO9paqmSOCVzVVkjl9B2pcsl9eWQi7ROOEp06o+SIBJ3HDt0tea1FK5Y0/62P0m+9Oj8SML
RVFUYxKsxMeUgALIAAAAAAAAAAAAAGSnnlpaiOohcrJI3I5rk6lQ7JR1CVdFBUomSTRtfl2
ZpmcXOwWT6ht/wB1j/ShweNiMIl1+FnzmG8ADzXaFN8oP0aD2yf+UuRTfKD9Gg9sn/lObxf
7M/8AfN0+F/ej/vkpgAPDe0AAAAAAAAAAAAAAAAAAC40eIbfU22OgSpmtMjWonCRNRWuXLp
zRM0/l7SGvFkqaKNtctZFWwSPRqTMfmqr06/d2kOeo5yN0Ucuiq55Z6szeq9npwqhjTayTj
TLoGJr8+z1UDY6SGZz2K5HyJrbr6iEsd2mueL6eprnt01a5jERMmt1Lkifz95CXC6Vt0kZJ
WzcK5iZNXRRuSfgiGq1zmOR7HK1zVzRUXJUU0r8TNVzNHpj6M6PDxTbyz64eq8VlVQUN+fL
yFVvq2vzbKxzl0/WiZ5EXDUcax7HMsD4FdKmcb+lqozJczUZi+9siRiVaLlq0ljaq/kRzbh
Vsr+PpMvGdLS4RURdfs6Ca79MzGHOPpCKLNUROPGHrKQxbI9+JKpHOVUZoo1OxNFDJh+7TW
+nqWyUDqyjlVElyTPRXL+6dpEVdXPXVL6mpfpyvy0nZImerLoQ2Ldea+1afE5+DR/0kVqKi
+8yi5/7Zrxazb/8AVFGCau1qtc9gW8W6GWl0XIjopM/SzXLrz7eoz3iKWqwZa1o2OkjYjeE
RiZ60bln78yAuN+uV1jSOrqNKNFzRjWo1M/w6Rbr7cbUxWUlQrY3LmrHIjkz/AB6DSbtvGY
w8phnpXMInHziU9fmvgwXbYKpFSo00ya7pRMl/JFRDLipzkqrIiKuSZL+ObSq19yq7nPw1Z
MsrkTJOpET1Ih91d3rq58D6mfTdT/5a6DU0ejsTX0IKr9MxMR2+xTZqiYme/wB0zjv68i+7
t/U4rRs19xq7nOk9ZLwsiN0UXRRNX4J6zWMLtcV1zVHzbWqZooimX3FDLO5WwxPkciZqjGq
qltv1NUSYTtMbIJHPajdJqMVVT0etCs0Fyq7ZM6ajl4J7m6Kroo7V09aeo3+d1979/wD5M3
Gluu3TTMVY+alyiuqqJpw8kphXTisV6RUVr2xr06lRUa4+bfr8ntf6pV/NpBRXm4Qtqmx1G
SViqs/oN9PPPPq1dK9B8R3Stit8lvZNlTSLm5mimtdXXln1IXi9TERHaY/tSbNUzM94n+kz
abwlPZm0VxtclVQucqse1PXrT3+tD4xJZ6KjpKWvoEkiiqP+qkzzbqzTp1mjb8Q3O2QcBTV
CNiRVVGOYioi+4wXG61t1ka+snWTQ+imSIjfwQrNyibeWfOfp6e60W6ouZo8o+vr7LDh1j5
sH3WKNqvequya1M1X0UIO1Wx1Teqajq2SQtkdmukitVURFXVn7MjDQXSutjnOo6h0Wn9JER
FRfwXUe1d3r66qjqqioV00SIjHo1Gq3Jc+pEIm5RNNOPrCYoriqrD0lcIuIUmJY7ZSWNulG
qLxhVXNqZZ59H9z4gTLyj1H2SfoaV9+Lb29rU45o6KoubWNRV9uo1G3q4tuTrilRlVOTJZN
ButMsujLLoQ2nxFHlhzj6Qxjw9fnjxh6ytOGXOXFd4zVV9N/6zVwOqLylFGqNndG1Y/6v7q
hX6W83Cjq5qqnqNCadVWR2g1dLNc11KmXSa9NV1FHUNqKaV0UrehzSkX6YmmeMfuvNiZiqO
cPsyvt9fGsrpKWdvBovCOcxURPapcad1I/BVIstDJWwsX04onKioua5quXr/MrNZia619M6
mnqEWN2pyNYiaX8jBbrzcLVpJR1Csa5c1YqIrV/BSLdy3bqnD0mE12666Yx9YlOXK5Qy4bd
RUtpqaaDTboPkVdFq6WfSv4n1RWt9gVJa++pRL08BAuk534dH8lIS4X+5XSNIqqo0o0XSRr
Wo1M/wI9zlc5XOVVVdaqq9IqvU5s2GPHy/BTZqy4enPz/KcxLe6W8PiSmp3NWLPOZ6Ijn+4
ggDCuua6s0t6KIopywAAosAAAAAAAAAAAAAAAAHWrT9T0X3eP8AShyU61afqei+7x/pQ9Hw
HxVODx3ww2wAeo8sAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmeUX/haH+N/wCSFzKZ5Rf+Fof
43/kh0eG/dhjf/blRAAey80AAAAAAAAAAAAACx4XxBR2eKaGphe10rs0qYkarmJlllkvV1/
2K4CldEVxhK1NU0zjC23Cyy3tr6ugvrbi1qK5YpnaL2p7P/wAIbdjjobfgqWW5SPiir5Far
mJ6WXQiJ7l95SGucxyOY5WuToVFyU26i7V1VQw0M0+lTwZcGxGNTLJMulEzX8TGq1VMRTj5
NIuRE44ea14hjo6/BtNU2+R8sNE9GI56ekjfo5L/AEnuJqWrqcKWji8UkrWsZptYiquegmS
5J+PvKnDdq6nt8tvinypplzfGrGrmurrVM06ELTd8QPobRZ3WyviWZkKNlYxzX5ei3U5PaZ
zbqommI8/OWkV01RMzwz3+k4xS4dt9W9WzSOayRetNTUd+OZklZbrbiGltlJYGyvVzHcYc5
c26/pa0XPLp6SlV11rbjVpVVVQ58rctFU1aOXZl0Eg7GF9dC2Pjqpoqi6SMairl2rkToV4R
GPKNWnGZSGKk/wDfWn9axfmfPlBket7hjVy6DadFRvUiq52f5IQNXdK2urW1tTNpztyyfoo
mWXRqRMjy4XKrulQlRWzcLIjUajtFG6vwRO00otTE0zPyhSq5ExV3fVoX/wBtUKqvRUR61/
iQncc0dS++umZTyui4Fq6aMVW6s89ZVkVUVFRclToVCWfim9yUr6aSuc+J7FY5HMaqqipku
vLMtVRVniqlWmqMs0ysVH9Q4Z++/wDmcZavXSYp/jb+RUGXm4RwU0DajKOkfwkLdBvoOzVc
+jX0r0nr75cXsqmOqc0rFRZ00G+n/LV+BloVY4/964tNWMMP+9MF3u77c6x22Wotc1fTpEm
hwLlRI/RTpyX/ANZEHiC5sq7VQU8dsqKSKKVEidN1oiZZJnrXqIi3Yjutqi4GlqVSLPNGOa
jkT2Z9BjuN7uN2cx1ZUcJwa5sRGoiN9yCixVTVGPpHefwVXYmFtxM5yYzsqZrkjo9Xtk1kJ
jj9ppfs2fkRtVe7jWVsNbUVGnPAqLG/QamjkuaakTJdZgrq+puVStTVy8JKqIiu0UTUnqQt
btVUzGPyhWu5FUTh85WzEtNPVYXsq08MkqNibnoNV2XoJ2FMc1zHK1yK1yLkqKmSopJ0eJb
xb6dtPTVrmRN+i1Wtdl7M0UjppXzzPmldpSSOVzlyyzVVzUvaoqojCfRW5VFU4w+CRsdNUS
XailjgkfG2pjze1iqieknWRxJW/EF0tdOtPRVXBRq5XK3g2u1/ii9heuKppwpVpwx80tjml
qH358zIJHRpC3N6MVUTp6zYu7lTydWxEXLOVqL69TyGqMV3uqp5Keat0o5Wq17eCYmaL09C
GpNda6ot0Vvln0qaFdJkeg1Ml19eWfWpjTarwpicPJrNdONUx81jxmudlsirrVYl1/8A2sN
ht0pLxJTUN+sk6VOpjZWNVOnr6lRPeVSsu1dcIIIKqfhI6dNGJNBqaKZInUmvoTpJCLGV9i
iSNKtqoiZIromqqfyK6NUURHzjH5p1IzTPya+I7XHaLxJSwvV8eSObpdKIvUpYL9Tz1ODLP
xeF8ui1mloNV2XoeoqFTUz1lQ+oqZHSSvXNzndKm9RYju9up0gpa1zIm9DVa1yJ7M0XI0qo
rmKZ+cKRVTjPEpPB1lpbjWVa18TnpTNT/BXNM1VV6U9WXQWLC1VTVstWtNZW0EbERqvRdb1
7F1IUWnvNwpLhJXw1CsqJVVZHIiZOzXNc06DddjC+ul4RK7RXLLJI25e5UM7tmuuZ/wDs+S
9u5TTEJXDDlbg+9K1cl0X60/gPINfkxqfVKn/iNK5TXauo6Oejgn0IKhFSRmg1dLNMulUzT
UG3aubbHWxs+VI9dJ0eg3WuaL05Z9KJ1lptVTOPeJVi5GGHbBaWRTVfk3jioWue9j14VjNa
qmmqrq/FFKtFTT0stPNVwSR06ypre1UR2Spn0+o+rbebhaHOWiqFjR/0mqiK1fwU9ud7uF4
VnHZtNI89FqNRqJn7C1FFVMzHymUVVU1RE/OF3xQ63Nq4ZK2z1FdnH6EsT3I1Na6tS9PX+J
C31ajE1yoKaCglpJVjdo8ZXLSb059uWpSKosVXigp2wQ1ecbUya17Udop6lXWaldda65VCT
1dQ58iN0UVERuSdmozt2aqZjt9fwvXdpq91soqmmwumjWX+Wqc3/wCUp8ntT1Zrnl/Iqt5r
obldJauCnSnjflkxMupMs9Xb0miDai1FM5vmzquTMYfIABqzAAAAAAAAAAAAAA7BZPqG3/d
Y/wBKHHzsFk+obf8AdY/0ocHjfhh1eF9ZbwAPNdwVPG9LLWz2yngajpJHSI1FXLNfRLYQN9
+v7H9rJ+SGHiIzW5ie35bWJwuRP1/Cqczb33Zm1bvHM2992ZtW7zpIMdja5lvvbnZzbmbe+
7M2rd45m3vuzNq3edJA2NrmTe3Ozm3M2992ZtW7xzNvfdmbVu86SBsbXMm9udnNuZt77sza
t3jmbe+7M2rd50kDY2uZN7c7Obczb33Zm1bvHM2992ZtW7zpIGxtcyb252c25m3vuzNq3eO
Zt77szat3nSQNja5k3tzs5tzNvfdmbVu8czb33Zm1bvOkgbG1zJvbnZzbmbe+7M2rd45m3v
uzNq3edJA2NrmTe3Ozm3M2992ZtW7xzNvfdmbVu86SBsbXMm9udnNuZt77szat3jmbe+7M2
rd50kDY2uZN7c7Obczb33Zm1bvHM2992ZtW7zpIGxtcyb252c25m3vuzNq3eOZt77szat3n
SQNja5k3tzs5tzNvfdmbVu8czb33Zm1bvOkgbG1zJvbnZzbmbe+7M2rd45m3vuzNq3edJA2
NrmTe3Ozm3M2992ZtW7xzNvfdmbVu86SBsbXMm9udnNuZt77szat3jmbe+7M2rd50kDY2uZ
N7c7Obczb33Zm1bvHM2992ZtW7zpIGxtcyb252c25m3vuzNq3eOZt77szat3nSQNja5k3tz
s5tzNvfdmbVu8czb33Zm1bvOkgbG1zJvbnZzbmbe+7M2rd45m3vuzNq3edJA2NrmTe3Ozm3
M2992ZtW7xzNvfdmbVu86SBsbXMm9udnNuZt77szat3jmbe+7M2rd50kDY2uZN7c7Obczb3
3Zm1bvHM2992ZtW7zpIGxtcyb252c25m3vuzNq3eOZt77szat3nSQNja5k3tzs5tzNvfdmb
Vu8czb33Zm1bvOkgbG1zJvbnZzbmbe+7M2rd45m3vuzNq3edJA2NrmTe3Ozm3M2992ZtW7x
zNvfdmbVu86SBsbXMm9udnNuZt77szat3jmbe+7M2rd50kDY2uZN7c7Obczb33Zm1bvHM29
92ZtW7zpIGxtcyb252c25m3vuzNq3eOZt77szat3nSQNja5k3tzs5tzNvfdmbVu8czb33Zm
1bvOkgbG1zJvbnZzGpwtdqOmkqJoGtjjbpOVJGrknvOh2r6novu8f6UMGIv2frfslM9q+qK
L7vH+lC1qzTauTFPCl27VdtxNXLbAB1uUAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpY7pZa3k
2mgajpJJXNairlmuSFtIDEH1zY/vK/khtZnCuJ/70Z3YxowU/mTfe7M2rd45k33uzNq3edP
BtvLnZltqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOx
tqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN
97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3
jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M
2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508D
eXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqH
MOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97s
zat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmT
fe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd
508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXO
xtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZ
N97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat
3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHMOZN97szat3jmTfe7
M2rd508DeXOxtqHMOZN97szat3jmTfe7M2rd508DeXOxtqHK6nCV5o6aSpmp2NjiarnKkjV
yRPxOjWT6it/3WP9KGPEX7PV/2DvyMll+oqD7tH+lCt27VcoiauVqLcUV4Q3gAcrcIG+/X9
j+1k/JCeIG+/X9j+1k/JDK98HvH5hrZ+P2n8SngAasgAAAAAAAAAAADSuV3t9nihluNUynZ
PM2CNz88nPdnkn8lA3QV+247wvd7ryXQXiCerXPRYiORH5dOi5Uyd+CqbN9xTY8NNjdeLjH
S8LnwbVRXOdl05NaiqvSBLgiLFiqx4lbItnuMVUsX02Iite32tciLl+BpzeUDCdPX8QmvcD
KhJ3QOYqO9F6LkqOXLJuvrVUQCxgiLJiuxYjlnitFxjqn02XCNa1yKmfQqZomaetNRqXbH2
FrHXLQ3G8QxVDfpRta56s/i0UXR/ECxAw0lXT19LHV0k7J4JW6Uckbs2uTtRTRp8SWeqvc1
kgr433CBFWSnRF0momWfVl1oBKAAACjYou1wpPKXhWgp6uWKlquF4eFrsmyZJqzTrFgu1wq
PKziW2zVcslHTQQuhgc70Y1VrFVUT8VAvIIfENsvdyjgbZcQcjOYqrI7ibKjhEXLJPSXVlr
95CeTW8Xe7W+7MvNfx6eiuctK2bgmx5tajepqInTmv4gXMFdu2PsLWOvWguN4iiqW5aUbWP
erP4tFFRv4mxfLkyXBVzuVtq2vbyfNLBUQvz1oxVRyKnrAmgUPD3lFw9R4es9Per9GlxlpY
3S8JpPXSVEX03Iio1evWqFvuV3t9ookrK+qZBTuc1iSLmqKrujo7QN0Fepce4Wrbwlopr1B
JWOdoNYiO0XO7EdloqvsUsIAAqPlCvV1t1Db7fYZ2w3W6VjYIHq1rtBvS52TkVMk1dXWBbg
V7Al9lxFg+huFS7Or0ViqdSIvCNVWuVUTUmeWeXrPit8oeErfppVXqFjo5nwPYjHuc17ctJ
FREVdWfT0AWQGnT3e31Vp5Vp6uKWi4NZOHYubdFOlfwyX3EHJ5ScGwywxPv1Ojpmo5qo1yo
iL0aSomTfxyAtANSvpW3S2yU7KyenbO1Mp6STRe1OnNrtZUMCOrKfF2K7TPdK6vgoH0zYFr
J1kc3SY5V1+tfyQC9A1LndaCzUL625VcVLTs6ZJHZJn2etfUR1jxphzElQ+ntN0iqJmJpLE
rXMdl2ojkRVT1oBOAib5iiyYajjfeLhHS8KuUbVRXOf7GtRVX3HtixNZsSxSy2euZVNhVEk
RGuarFXPLNHIip0L7gJUEDe8bYbw7UpS3W6xQTqmfBI1z3InaqNRVT8SUt1yorvQx1tuqo6
mmkT0ZI3Zov/AOfUBtArVb5RMI2+4OoKm+QMnY7ReiNc5rF7FciK1PxUnn1lLFRLWvqIm0r
Y+EWZXpoaGWeln0ZZdYGcHM8c+Ua0VuDLhzav+VfCsatWLTjflwjUVWqqJmmvqzJPyh3a4W
284TioquWnZV3RkU7Y3ZJIxXNzRe1NagXkFF5WuHnq5K45LxHkvheL6XoaefTl2l6AAAAAA
AAAAAAAAI3EX7P1v2Sme1fVFF93j/ShgxF+z9b9kpntX1RRfd4/0oZfy+zX+L3bYANWQAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAEBiD65sf3lfyQnyAxB9c2P7yv5Ia2vi/v8KXPhT4AMlwA
AAAAAAAAAAAAAAAAAAAAAAAAAARt1xFaLHNTxXSvjpXVKSOi4TNEcjEzdr6EyRU6TTseNcO
4kq5KS1XJs9RE3SdG6N8btHtRHImaa+oCeBpR3egmu81pjqGurYI0lkhyXNrV6FzyyEd4t8
t0qLWypa6spY2yTRZLmxq9C55ZAboKrH5TMGyStjbfYfTY56Ocx6NyRM1TNUyz1dHT0dqGd
cUW2/YUu1dY65ZeLwStVzWujfG9GKqanIiovrAsYOeYV8pGH6PDFpp71fdKvdA1ZnyI+RUc
qrlpvRFRF9ql9kq6aKkWskqI20zWcIsyvRGI3LPSz6MsusDMCs0HlFwlcrhHQUt4jdPK7Rj
0o3sbI7sa5zURV/HWTdzudHZ7fLcLhOkFLCiLJIqKqNzVETo19KoBtgrM3lGwlBdGW195i4
y9yNRrY3uajl6EVyJki+1dXWS94vdtw/QLXXWqbTUyORnCOaq616E1Iqgb4MFHWU9wooa2k
kSWnqI0kjeiKmk1UzRdfqM4AGCthnqKGohpqlaWeSNzY50YjlicqanZLqXJdeRz7EtBizDW
Ha28T+UGZ7aaPSazk2FNNy6mtzz1ZqqIB0gFZttJiSswHRwy3ji16miY+SsfTtesek7SVND
UiqjV0fwK1iN2KMAUcF9diiW8U6TsjqKOpp2N4Rrl/0KmtF9W7IDpYAAAAAAAAAAAAAAAAA
AAAAAAAAAAACNxF+z1f9g78jJZfqKg+7R/pQx4i/Z6v+wd+Rksv1FQfdo/0oa/x+6n+fs3g
AZLhA336/sf2sn5ITxA336/sf2sn5IZXvg94/MNbPx+0/iU8ADVkAAAAAAAAAAAUPytU8VX
Z7HTTN0opr5TRvb2tVHopfCHxHh2HEcNBHNUPhSiro6xqsRF0lZnk1c+pcwK15R6eGnnwjP
DEyOSG+00UbmNRNFi55tT1ak1eo3sQX6sbiymsVhtNHV3fiq1Dqmsdosp4tLR6URXLmuWpP
V+EtiLDkOIuTeGqHw8n10da3QRF03Mzyavq1mliDB8l0vNPfLXd57RdIIVg4eONsjZI889F
zHal1/8AroyCr0vLUPllti3ltsjqp7dKjuTlfk9iZqmnpa1XNNXsIO608T/JnjqRWN0+ckn
pZa/86JP7r71L5a8AsocTU+I6q8VdfcY43slkmRqJJpJkmSJqaiJ0InrPajAFLUYcvNlWum
SO73B1c+RGpnG5Xtdop6vQT3gaM2dH5XqhKSNEVMMK9rGpqVzZ8m/y1EB5N6bFr8IMrbVFh
6WO4SSyTy1qzLNK7Tci6eimXV0dntOh834uePOTh38LyfxHgck0dHhNPSz7c9RCLgOst9VU
Pw1iWqstNVSLLJSJAyaNHL0qxHfRz9QGzgHDtzwzaqujuMlIqS1b54IqRzljhY7JdBNJEVE
Rc/ee2/D2GqbHFZeKSta+8zNck0HGWuVqLo5+h0p0IS1itUtnt6089yqrlK56yPnqnIrlVc
tSZdCatSEPbsCUtuxzWYrZWyvmq2ua6BWpotz0ehen/SBagABifTQSTMmkgjfLH9B7mIrm+
xeoNpoGTvnZBG2aRMnyIxEc72r1mUACheSnXTYlcmtFvtRkvbqabtZgu8ceqprVjK4UEFXK
6V9O6JkzWK5c10FXLRTNeomMMYbo8K2ZltonSSJprJJLKub5Xr0uX+XuAq/khp4KnBk9bUR
slqrhVzOrHPaiq92llk7Pqy6vWvaRmFf8HydY3oYlzpKOpr4qbXqaxI88k9WvP8SflwBVUt
bWy4exNV2amr5FlqKWOFkjdNelWKutir6txLUOELfbMIT4bo3SMgngkifM5dJ7nPRUc9e1d
YFXobXRR+QSSNtNHovtElQ70U1yaCv0vbnl7kI/FmdV5DbI2VyrwjKJrl6+hEL5FhqGLBa4
YSoesK0TqPhsk0slardLLoz1mnX4Kpq/B1Dht9ZKyKjSFGzI1NJ3B5ZZp68gIbyo0VLR4Wt
S00EcK0Vyp0p9BuXBpnlknYX8hsT4chxPbY6GaofA2OojnRzERVVWrnlrJkAcvv8Af/8A4u
wyJarndILDRqnB2+n4ZzJpU6VTNERNH+aHUCDw/hiGw1t2rUqZKmoutSs8r3oiaKa8mpl1J
moFS8ml10cT4ktDqKsoI55+UaamrYuCka165P8AR15Jno5GfyXUdJxvFlXwbFqX3qeJ7lTN
dBFzRPZm5xZqnDEM+MaPEzKmSKopqd1O+NqJozMXNURfYq5/gUPBuHLhcZ8S11qxBU2iode
6mCXg4myskYioqei7ociudrTtA2sMNbTWfyg26nTRoqWqqkgYn0WZsdm1OxEyTUSGB7TbJP
I9BTvhiWCqpJX1Cq1PSculmq+tMunqyTsJRuG6PC2AbrQUj5JVfTVEs08q5vmkcxc3OX3e4
quEcEVtzwHb4qfE9dRW2vg0qmiZGx2ef0kY9dbEXrTWmte0CzeSuonqfJtZ5KhVc9I3sRV/
dbI5rf5Ihq4P/wCZGOPtKP8A8Nxb7db6a026nt9FGkdPTRpHG3sRP7lfu2CeN32W92u9Vto
rKmNsdStPoubMjdTVVrk6UTVmBXvKAy41/lDwxbaSOjlRGTTxRV2lwD5Gov0tHWqoiZobdb
hrGd3v9mudctgp322qbIstI6ZJHRdD2ekmSoqZ6iw37CdNiCgo46irqIa2hVH01fCqNljfk
iKvZry1oalvwtfI7hT1N0xlXV8VO7SbAyCOBj+xH6P0kA1MTWG/MxjR4qsUFJXSQUi0slHU
v0Fy0ldpMd0IuvLX/c3MKYobe7ncaCtsr7ReKRGcZhe5r9Nq56Ko9ETSTfqNi+Yfu9fcW11
qxPV2pyRJG6JsLJonZKq6Wg7oXXln6kGG8KMsNTWXCouE9yudereMVc6I1VRqZI1rU1NROw
CiYBjxZUpebtbIrG+epuMraiWvWXhkVMvQ9FMkamepPWS1JZMQYTwzjCuqJKGJ1VC+qpobe
r9CCTQdpuRHImX+lfwJeswPURXaqueHcQVNklrXadTEyFk0Uj+t2g7ocvWpLWSxTWykqIrh
dqq8SVS5yvqstHLLLRa1NTW+r1gUbB9qxXzFoqa30eGH2+rp0e5tRwyvl0kzXhMkyV2vJTW
xLZrnhzySUFhudVHKi3GOGZ8D3K1IFerkTNURdS5fyLLDgG5WprqXD+Lq6225zlc2kdBHNw
ea5qjHO1tQmJ8KUldhN2HblU1VfDI1UfUTvzlV2lpI7PLpRej2IgFX8sttoG+TlVSCKNaOW
JKZGtRNDNdFWp6tHPV6joEtNBO5jpoI5HRu0mK9iKrV7Uz6FKJcPJhV3u2Jb71i6vroIcuL
NWFjODVOt2Wt65Zpmvap0ADFxaDjHGeAj4fR0eF0E0suzPpyMoAAAAAAAAAAAAAABG4i/Z+
t+yUz2r6oovu8f6UMGIv2frfslM9q+qKL7vH+lDL+X2a/xe7bABqyAAABgrKptHSvnciuRv
UnWppQ19xkSOVaFqwvy1tdrRF6zGu9RRVln1+mLSm1VVGaPRJjp6CPu81QymeyKDTjdGum/
PLRNSzVFW2niiZS6UKuXOTS6NevUZ1eJim7p4T9/wDvdeLEzbz4pwEfc7ktvWHKNHpIq56+
jLLeeU9bXS1DEkoljhf0OVdaausvPiKIryfP6KxZqmnN8kiCKlu08lTJDQ03DcF9JyqZ6K5
NrKaSRGaEkSekxVIp8TbqqyxP/QmbNcRjMN4EI2+VUlM6aOjRWsX03Z6kQ3VucaWtK5Wrkq
amZ9eeWRFHirVeOE/LH2KrFyn1js3gQjr3VxU7ZpaJEbJ9B2epSXgk4WCORUy02o7LszQta
v0XZwpRXaqojGWQAG7IAAAAAAAAIDEH1zY/vK/khPkBiD65sf3lfyQ1tfF/f4UufCnwAZLg
AAAAAAAAAAAAAAAAAAAAAAAAAAoOOaWCt8omB4KiNskfDVbla5M0VWsY5P5oh94kY2LyuYP
mY1GySxVccjkTW5qR5oi+xVUsd0w7BdL/AGe8STyMltKyrGxqJov4RqNXP2ZC44cguOJLTf
JJ5GS2pJUjjaiaL+Eborn7AK/a/wDnRe07bXD+aGO2ORfK7idEXNW2+BF9XooSl+wY66X2G
+228VNouLIeAfLAxr0ljzzyVq6un+3Yh9WDBFLYbvXXNlfV1VRXwtjnfUORyuVOl2favZ0I
Bz2208LvJ35PFWNq53+PPV05yyZ/knuLHTpo4g8pcbdTUp4HZJ2rTOzUm6fAVFT2Kx2ltZO
sdlrW1kT1RM5HI5zsner0l6Ow3WYVpmV+IKtKiXSvsbI5m5JlGjY1Ymj+C56wIDAlttsnkf
p4HxRrT1VJK6oVUT0lVXaSr60y/DJOwptZU19R5CcOQK9Mqq4MppVlVUasSSSaKOy16Pos/
BC4Q+S99Jaks1Fim509rkblUUzUYvCZ/S0XKmbEXrRNWtSz1OFrRV4ZTDktKnJyRJE2NF1t
ROhUXtRUzz7QKnfcL41v9hWzVKYYhp00eCWCOdroVaupWdSKmWXR0G95SWTxeSi4x1MiSTt
p4UkenQ5yPZmvvPUwJd1hSjkxzeFoWpopGxGNl0exZcs1LBiOxQ4kw/VWaeaSGKpa1rnsyV
yZORev2AfGHrTQ0GGKGghpo0gSBiuarEVHrkiq5e1VXXmYsX2yxXexrS4iqWU1CsjXK986R
JpJ0JpKS9NClNSxQNVVSJiMRV68kyIjF2F6fF9jW1VVRLTxrI2TTiRFXNPb7QN+z01FR2ai
prdIklHFAxkD2v00cxERGrpJ06us3TSs9tjs9mo7ZFI6SOkgZC17ulyNREzX3G6AKDjdecW
MbDhBnpQI/lCvTq4Nn0Wr6lXNPxQvxCW3DFPb8TXPEDqiWeruDWM9NEyhY3/S3Lq1Jn7AJs
5XjfDDsL0rMWtu9dd+Tqhki0V2m4eNUc9G+hqTRVM9XT0HQb/Z3Xy3JSx3Gst0jZEkZPSP0
XoqZ6vWmvWhWn+Tia5TQpiPE9wvFJA9HtpHtbHG5U6NLL6QF0gmbUU8czUVGyMRyIvTkqZm
Q8RERMk1IegAAAAAAAAAAAAAAAAAAAAAAAAAABG4i/Z6v+wd+Rksv1FQfdo/0oY8Rfs9X/Y
O/IyWX6ioPu0f6UNf4/dT/P2bwAMlwgb79f2P7WT8kJ4r9/eyO+WR73I1qSyZq5ckTU0xvf
B7x+Ya2fj9p/ErADW5Qoe+U+1bvHKFD3yn2rd5pmjlnlnhsg1uUKHvlPtW7xyhQ98p9q3eM
0cmWeGyDW5Qoe+U+1bvHKFD3yn2rd4zRyZZ4bINblCh75T7Vu8coUPfKfat3jNHJlnhsg1u
UKHvlPtW7xyhQ98p9q3eM0cmWeGyDW5Qoe+U+1bvHKFD3yn2rd4zRyZZ4bINblCh75T7Vu8
coUPfKfat3jNHJlnhsg1uUKHvlPtW7xyhQ98p9q3eM0cmWeGyDW5Qoe+U+1bvHKFD3yn2rd
4zRyZZ4bINblCh75T7Vu8coUPfKfat3jNHJlnhsg1uUKHvlPtW7xyhQ98p9q3eM0cmWeGyD
W5Qoe+U+1bvHKFD3yn2rd4zRyZZ4bINblCh75T7Vu8coUPfKfat3jNHJlnhsg1uUKHvlPtW
7xyhQ98p9q3eM0cmWeGyDW5Qoe+U+1bvHKFD3yn2rd4zRyZZ4bINblCh75T7Vu8coUPfKfa
t3jNHJlnhsg1uUKHvlPtW7xyhQ98p9q3eM0cmWeGyY4oIYNLgYmR6blc7QaiaTl6VX1mLlC
h75T7Vu8coUPfKfat3jNHJlnhnc1r2Kx7Uc1yZKipmioeRxRwxtjiY2NjUya1qZIn4GHlCh
75T7Vu8coUPfKfat3jNHJlnhsg1uUKHvlPtW7xyhQ98p9q3eM0cmWeGyDW5Qoe+U+1bvHKF
D3yn2rd4zRyZZ4bINblCh75T7Vu8coUPfKfat3jNHJlnhsg1uUKHvlPtW7xyhQ98p9q3eM0
cmWeGyDW5Qoe+U+1bvHKFD3yn2rd4zRyZZ4bINblCh75T7Vu8coUPfKfat3jNHJlnhsg1uU
KHvlPtW7xyhQ98p9q3eM0cmWeGyDW5Qoe+U+1bvHKFD3yn2rd4zRyZZ4bINblCh75T7Vu8c
oUPfKfat3jNHJlnhsg1uUKHvlPtW7xyhQ98p9q3eM0cmWeGyDW5Qoe+U+1bvHKFD3yn2rd4
zRyZZ4bINblCh75T7Vu8coUPfKfat3jNHJlnhrYi/Z+t+yUz2r6oovu8f6UNG/11JJYqxjK
qFzliVERsiKqm9avqii+7x/pQziYm75cNZiYt+7bABsxAABrV606Ub+NZ8EuSOy6tZAzOZQ
LG+3V75M3f5XSWVzWvarXNRyL0oqZoY2UdNG/TZTxNd2oxEU4/EeHqu1YxhHfzxdNm9FEYT
5/h8VzXPt06InpLGur8CPslfTMpI6Z0mUquVEbkuvNSZMfF4NPT4GPSzz0tFMzSu1VNyLlM
/LBSm5TFE0VQib//AJ9F/Gv5tJo+HxRyKivja5W9GkmeR9lqLWW5XXzh9oVqrzUU08YoC21
MVtqaqGrVY3K7NFVFXPp3n1aWuk4/VI1WxyZ6OfX0qTEtPBMqLLDHIqdCuain2jGtboI1Eb
llkiajno8LVTMRM+VOOHvy2qvxMTMR5zhj7IG3/s7V/wATvyQ8WF8uGI9BFXQerlROzNd5P
NhiaxWNjYjF6Wo1MlPiWN7KZzKVGMeiegmWSIpXaYU4TP8AjgtuMasYj54oGvuUNTaoYI0X
Tbo6erU3JMieo/8AgoPs2/kRM1Fc6xqQyx08Melm5zOsmo2JHG2NvQ1ERB4Wm5NyquviI9M
C/NGSKaeZ7voAHoOMAAAAj0ujGXSWjmybrTQd7UTUpSu5TRhmn18lqaKqscPkkAAXVCAxB9
c2P7yv5IT5AYg+ubH95X8kNbXxf3+FLnwp8AGS4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACNxF+z1f9g78jJZfqKg+7R/p
Qx4i/Z6v+wd+Rksv1FQfdo/0oa/x+6n+fs3gAZLhX8QRxy3uyRysa9jpZEVrkzRdTeosBA3
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjcRfs9X/YO/IyWX6ioPu0
f6UMeIv2er/sHfkZLL9RUH3aP9KGv8fup/n7N4AGS4QOJ2ugWgujWq5tFPnIifuLkir/JPe
Tx8vYyWN0cjUcxyZOaqZoqFK6c1OC9FWWrF5FLHPE2WJ6PY9M2uToVD7IDkGut73cjXHgYX
LnxeZumxPYvUfXFsUd/odmu4pqVR60ytp0z6VQnQQXFsUd/odmu4cWxR3+h2a7idSemTTjq
hOgguLYo7/Q7Ndw4tijv9Ds13DUnpk046oToILi2KO/0OzXcOLYo7/Q7Ndw1J6ZNOOqE6CC
4tijv9Ds13Di2KO/0OzXcNSemTTjqhOgguLYo7/Q7Ndw4tijv9Ds13DUnpk046oToILi2KO
/0OzXcOLYo7/Q7Ndw1J6ZNOOqE6CC4tijv9Ds13Di2KO/0OzXcNSemTTjqhOgguLYo7/Q7N
dw4tijv9Ds13DUnpk046oToILi2KO/0OzXcOLYo7/Q7Ndw1J6ZNOOqE6CC4tijv9Ds13Di2
KO/0OzXcNSemTTjqhOgguLYo7/Q7Ndw4tijv9Ds13DUnpk046oToILi2KO/0OzXcOLYo7/Q
7Ndw1J6ZNOOqE6CC4tijv9Ds13Di2KO/0OzXcNSemTTjqhOgguLYo7/Q7Ndw4tijv9Ds13D
Unpk046oToILi2KO/0OzXcOLYo7/Q7Ndw1J6ZNOOqE6CC4tijv9Ds13Di2KO/0OzXcNSemT
TjqhOgguLYo7/Q7Ndw4tijv9Ds13DUnpk046oToILi2KO/0OzXcOLYo7/Q7Ndw1J6ZNOOqE
6CC4tijv9Ds13Di2KO/0OzXcNSemTTjqhOgguLYo7/Q7Ndw4tijv9Ds13DUnpk046oToILi
2KO/0OzXcOLYo7/Q7Ndw1J6ZNOOqE6CC4tijv9Ds13Di2KO/0OzXcNSemTTjqhOgguLYo7/
Q7Ndw4tijv9Ds13DUnpk046oToILi2KO/0OzXcOLYo7/Q7Ndw1J6ZNOOqE6CC4tijv9Ds13
Di2KO/0OzXcNSemTTjqhOgguLYo7/Q7Ndw4tijv9Ds13DUnpk046oToILi2KO/0OzXcOLYo
7/Q7Ndw1J6ZNOOqE6CC4tijv9Ds13Di2KO/0OzXcNSemTTjqhOgguLYo7/Q7Ndw4tijv9Ds
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//Z
</binary><binary id="_21.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGQBOUDASIAAhEBAxEB/8QAHAABAAMBAQEBAQAAA
AAAAAAAAAQFBgMHAgEI/8QAVRAAAQMCAgQHCwkGBAMHBAMAAAECAwQFBhESITHRExZBVFWR
kwcUFRciUWFxgZSjMjVTc5KisbLSNkJScnShIzPB8DQ34SRDYnWCs8IlRYPxJkRl/8QAGgE
BAAMBAQEAAAAAAAAAAAAAAAECAwQFBv/EADQRAQABAgUCAgkEAgMBAQAAAAABAgMREhMUUQ
RiITEyM0FSYXGBobEVQ5HhQvAiI8EF0f/aAAwDAQACEQMRAD8A9mAAAAAAAAAAAAAAAAAAA
AAACnqsQxRzOhoqeStkYuTlYqNY1fMrl5fVmDyXAKDjBcehk96TcOMFx6GT3pNxGMK5o5X4
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
zMPPC6nqJIXK1XRvVqq1dSqi5ahbu03I8Cu3NHm5n1FE+aVkUTVc97ka1qbVVdiHyXOHrPW
3CoSqopqZj6WVjkSZypmueaakTXsL1VRTGMq0xjOEKyro6ihnWCqhdFIiZ6LtuRxLjFKV6X
pyXJ0LqjQbmsOejlybTtSYQuNZRU9YyWmbDPyueqaCa9a6vRl7UKRciKYqqnzWmiZqmIUIL
K9WOrsdQyKpVjkkTNj2LqXz7SfFgyuWCOWoq6SkdKmbI5pMnL/YmbtERE4+ZkqxwwZ4FlHY
6p96daeEhZO3PNznLoakz25GqueD2y2ehipUo4amNqcNKrlRJF0deS5a9ZWq9RTMRPtTTaq
qicPYwYLGkslTW3aW2xSQ8JCrtN7nZMyauSrnlsJ9Rg6tipJainqqWrSFM3thkzcn9i03KI
nCZRFFUxjEM+C2tWHK680ktRSOiyidoq1zlRVXLPVqyOl2wtXWiibWSSQzQqqIronKuivVs
GpRmy4+JkqwxwUoLazYbr70x8sGhHCxclllXJM/MnnPm82CpsrYnyzQzRzZox8Ts9m38SdS
nNlx8UZKsM2HgqwaGlwXcaimjmlmpqVZf8uOZ6o53syIbMO1vhnwVMscE6tVWq9fJdq1ZL6
SIu0Tj4p06uFUCwuNiudrVe+qR7WJ/3jfKb1oV5eJiqMYVmJjwkABKAAAAAAAAAAAAAB1pq
iWkqY6iBytkjcjmqnnPY6SdKqjhqGpkksbXonrTM8XPYbN8x0H9NH+VDz+tiMIl19LPjMJo
APOdoYzug/8A2/8A/J/8TZmM7oP/ANv/APyf/E5ur9TP++109L66P99jGgA8N7QAAAAAAAA
AAAAAAAAAANnR3631NtjoYKp1nlRqIr2xtVrly25/66ilvFlraLQrZ6plXDK9GtnbJpKq61
5fUpTH0kj0ZoI92hnpaOerPz5G9V7PThVDCmzknGmW/wATX1LRWQIlDDO9zNJsj9rdfIUtj
ust1xfBU1qt0lY5sbUTJG6l1J/cpLjday6yskrJEe5iaLVRqJq9hEY98b2yRuVr2rm1yLkq
KaV9TNVzGPLFSjp4i3hPng21VWWugxA+Z1prnVrZFVJGqqo/kzRM9mRW09QlVj6OdIHwacm
uORMnNXQ15+0jtxlemxaHDscqfvLGmZWMuVWy4+EElzqdJXaatTb6thNd6mZjDnHyRRZqiJ
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
irpuDTg1gcqIzyUyzyVP9opS366wV1ut0EFvqqeOGVEjfOmpWomWSLnr5CqtuJrraoOAp50
WJNjJGo5E9XmOVyv1wuz43VcyOSJc2NRiIjV/2gos1UzGPs+P/hVdiYazEj3JjazN0lyRWK
iet65lFjf9ppv5GflQr6q+3Csr4K6eVHT0+XBuRiJlkuaavWcK+4VNzq3VVU9HyuREVUaib
PUWt2qqJiZ9kYK13IqicOWqxTBNPhuyuhifIiRNzVjVXLNjTGqitVUVFRU1KiltRYovFBTN
p4Kv/CYmTWuY12XtVCrmlfPPJNIub5HK5y5bVVc1L2qKqIyyrcqiqcYfBY2KCZ95oJGxPcx
KmPNyNVUTyk5SuLS3Yjudqplp6OdrI1crslYi619aegvXmmnClWnDHxWWOIJnYgkkbE9WJE
3NyNXLZ5yVeHK3ud2xEVUR0rUX06nr/oVNTi281dNJTzVLXRytVrk4NqZovsIU93ram2w26
WRFpoXI5jdFEyXXy7eVTCm3XhTE+xrNdONUx7WjxqqraLKq61WJdf8A6WHbwrbL5NT0V9tc
8VauUbZGoqa15eRcvYplq671tygghqpEeynTRjRGomSZInJ6kLKLG17iiSPh43ZJkjnRJmR
o1RREe2MfbgnUjNM+xDxDa22i8SUkcjpGIiOYrtuSpsU0GIoZZ8H2XgY3yaLGZ6DVXLyDJV
VVPW1L6mpkWSWRc3OXlLChxPd7dTNp6eryib8lrmNdl6s0L1UVzFM+2FIqpxniU/B9kprlU
1bq5r3NpmoiwoqppKue3LXq0dhocLVVDWrWLQ2jvKNjUa5+nnp7dWWRiKW93CjuMtfBPozT
OV0nkpk7Nc1zT1k52M746VXpUtaiplopGmj1Gd21XXM//q9u5RTELPDTnMwZeXNVUVEfrT+
QRLn3MZteeUqez/EQzlLd62joZ6KCRGwVGfCNVqLnmmW0Nu9a20utaSJ3q5dJWaKZ5557du
1C82qpqx+MSiLkYYfDBqNCWo7m0TKFHOVr14ZrNaqmmuf+i+oy1PDLBNTSVUUjKZZk1vRUa
uSpn/Y6Wu+XCzq7vOfRa/W5jkRWqvnyUXW+195VnfkjXNjz0WtaiIme0tRRVTMx7JlWqqmY
ifbDaYpfao62F9xtlXUrwf8AhyxOVGprXVqVNf8A0Ka/PmxPc6GCkoZqeZY3Zd8ZN0m+f1a
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
</binary><binary id="_19.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAI2AjYDASIAAhEBAxEB/8QAGwABAAIDAQEAAAAAA
AAAAAAAAAUGAwQHAQL/xABZEAABAwECBAwQCgkDBAMBAQAAAQIDBAUREjFysQYHFBUXITRB
UVOB0RMiMzdSVWFxkZKipMHD0uMyZGZzgoOUobPhIzU2QlajssLiJGLwFkNEVCVl8UVj/8Q
AGgEBAAMBAQEAAAAAAAAAAAAAAAMEBQECBv/EACoRAQACAgEEAQMFAAMBAAAAAAABAgMRBB
IhMUEFEyJRMmGBkbEUI3Gh/9oADAMBAAIRAxEAPwDswBU9HOjj/ottE7W7Vuq1enV+h4GDg
/7VvvwvuAtgOS7Ofyc8+92NnP5Oefe7A60Dkuzn8nPPvdjZz+Tnn3uwOtA5Ls5/Jzz73Y2c
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
AAAAAAAAAAAAAAAAAAAAAAAAAAD/9k=
</binary><binary id="_45.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQIAHAAcAAD/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnR
yUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQ
AA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAAC
BAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHB
kbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAA
AEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAAC
Ax0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAA
ZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY
2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvo
gAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MA
AAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d
3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtI
HNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFj
ZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZ
pZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZS
BWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJ
VgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAAB
DUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAF
kAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbA
OAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJ
nAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfg
OKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4
QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsG
jAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4
IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq
4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mD
UANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxN
DE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8Wsh
bWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncan
hrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e
6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2Y
jlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KH
EooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rL
eEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/
M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm
8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7gPyE/YT+iP+JAI0
BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHN
Ud7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5O
t08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlx
WqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr
1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z
5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CG
cOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553p
GeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHY
SAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOz
o82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ
/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTi
lqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsW
Cx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pv
gq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3
yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nh
k2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDe
aW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn9DT0w
vVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////2wBDAAoHBwgHBgoI
CAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc
9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oz
s7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCAGPA8wDASIAAhEBAxEB/8QAHAABAAIDAQEBAAAAA
AAAAAAAAAIEAwYHBQEI/8QAUxAAAQMCAgQJCAcFBgQFAwUAAAECAwQFBhESITGUBxMUFUFV
c7HRFjM1UVNhcaIiMldygZGVNkKhwcIXI1JWYoI3dJPSCDR1stNUw+EkQ5Kz8P/EABkBAQE
BAQEBAAAAAAAAAAAAAAABAgMEBf/EACMRAQACAgICAwEBAQEAAAAAAAABAhETAxIyUSExQY
FhMyL/2gAMAwEAAhEDEQA/AOzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vEt68ncO1t35
PyjkkenxWnoaWtEyzyXLb6i3baznC10lbocXymFkuhnno6TUXLPp2gWQAAAAAAAAAAAAAAA
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
ymOaCKoidFPEyWN2pzHtRyL+CmQAYKOipLdTNpqKmipoGqqtihYjGoqrmuSJqTWqqZwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHirg3CyrmuGrRn/AMjF/wBp7QAqJaba2282Nt9K
lDlo8lSFvFZZ55aGWW3XsJz0FHU0S0NRSQS0qtRqwSRo6NUTYmiurJMkLAAixjY2NYxqNa1
MmtamSInqKC4esi16XBbNQLWI/TSo5MzjEd69LLPP3nogCnc7RbbzTpT3Ohp6yJFzRs0aOR
F9aZ7FIWuxWmyRuZa7dTUbX/X4mNGq74qm0vgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAqTWu31FayumoaeWqY3QZM+Jrntbmq5IqpmmtVLYAAAAaLwR/szcP/VajvQ3ooWiyW6w
0slNbafiIpZXTPbpudm921c3KvqL4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAHiXusrYa+lp6SoSBJGPc5VjR2eWWW34lPlF460Td2me+emqHs
Ze9pjPTxUrauZh1pWJj5Q5ReOtE3do5ReOtE3dpMHXVT030qhyi8daJu7Ryi8daJu7SYGqn
o6VQ5ReOtE3do5ReOtE3dpMDVT0dKocovHWibu0wur7y2uipucm5SMc7S5O3Vll4lkpyemq
bspO9pm/HWI+Ic+WIrSZhb468dapuzRx1461TdmmUHPpV8/Zf2xcdeOtU3Zo468dapuzTKB
0qbL+2Ljrx1qm7NHHXjrVN2aZQOlTZf2xcdeOtU3Zo468dapuzTKB0qbL+1N9deWV0VNzm1
UkY52lydurLLxM/HXjrVN2aVpvTVL2Une0vEilVnkt7YuOvHWqbs0cdeOtU3ZplBelU2X9s
XHXjrVN2aOOvHWqbs0ygdKmy/ti468dapuzRx1461TdmmUDpU2X9sXHXjrVN2aYH115ZXRU
3ObVSRjnaXJ26ssvEuFGb01S9lJ3tJNKrHJb2s8deOtU3Zo468dapuzTKC9Kpsv7YuOvHWq
bs0cdeOtU3ZplA6VNl/bFx1461Tdmjjrx1qm7NMoHSpsv7YuOvHWqbs0cdeOtU3ZplA6VNl
/am+uvLK6Km5zaqSMc7S5O3Vll4mfjrx1qm7NK03pql7KTvaXiRSqzyW9sXHXjrVN2aOOvH
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
RByWT2/yIBAE+Sye3+RByWT2/yIBA8e6em6LsZe9p7fJZPb/IhRrrJNV1EM7K9YXxNc1F4p
HZouXv8AcWJxLNozGFYE+Ya7rhd2b4jmGu64Xdm+J22Q8+myAJ8w13XC7s3xHMNd1wu7N8R
sg02QBPmGu64Xdm+I5hruuF3ZviNkGmyAJ8w13XC7s3xHMNd1wu7N8Rsg02YaT9pKXsJe9p
sZ5FDZJqW4MrJ69ahWMcxreKRu3L1L7j1zlaczl3pHWuJAAZbAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeJe6ythr6Wn
pKhIEkY9zlWNHZ5ZZbfiU+UXjrRN3aZ756aoexl72mM9PFStq5mHWlYmPlDlF460Td2jlF4
60Td2kwddVPTfSqHKLx1om7tHKLx1om7tJgaqejpVDlF460Td2jlF460Td2kwNVPR0qhyi8
daJu7TC6vvLa6Km5yblIxztLk7dWWXiWSnJ6apuyk72mb8dYj4hz5YitJmFvjrx1qm7NHHX
jrVN2aZQc+lXz9l/bFx1461Tdmjjrx1qm7NMoHSpsv7YuOvHWqbs0cdeOtU3ZplA6VNl/bF
x1461Tdmjjrx1qm7NMoHSpsv7U3115ZXRU3ObVSRjnaXJ26ssvEz8deOtU3ZpWm9NUvZSd7
S8SKVWeS3ti468dapuzRx1461TdmmUF6VTZf2xcdeOtU3Zo468dapuzTKB0qbL+2Ljrx1qm
7NHHXjrVN2aZQOlTZf2xcdeOtU3ZpgfXXlldFTc5tVJGOdpcnbqyy8S4UZvTVL2Une0k0qs
clvazx1461Tdmjjrx1qm7NMoL0qmy/ti468dapuzRx1461TdmmUDpU2X9sXHXjrVN2aOOvH
Wqbs0ygdKmy/ti468dapuzRx1461TdmmUDpU2X9qb668sroqbnNqpIxztLk7dWWXiZ+OvHW
qbs0rTemqXspO9peJFKrPJb2xcdeOtU3Zo468dapuzTKC9Kpsv7YuOvHWqbs0cdeOtU3Zpl
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
</binary>
</FictionBook>